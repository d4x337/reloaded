
== Brakeman Report ==

Application Path: /Users/d4x337/Documents/Development/reloaded
Rails Version: 4.2.11
Brakeman Version: 4.5.0
Scan Date: 2019-04-16 09:50:32 +0200
Duration: 15.930354 seconds
Checks Run: BasicAuth, BasicAuthTimingAttack, ContentTag, CreateWith, CrossSiteScripting, DefaultRoutes, Deserialize, DetailedExceptions, DigestDoS, DivideByZero, DynamicFinders, EscapeFunction, Evaluation, Execute, FileAccess, FileDisclosure, FilterSkipping, ForgerySetting, HeaderDoS, I18nXSS, JRubyXML, JSONEncoding, JSONParsing, LinkTo, LinkToHref, MailTo, MassAssignment, MimeTypeDoS, ModelAttrAccessible, ModelAttributes, ModelSerialize, NestedAttributes, NestedAttributesBypass, NumberToCurrency, PermitAttributes, QuoteTableName, Redirect, RegexDoS, Render, RenderDoS, RenderInline, ResponseSplitting, RouteDoS, SQL, SQLCVEs, SSLVerify, SafeBufferManipulation, SanitizeMethods, Secrets, SelectTag, SelectVulnerability, Send, SendFile, SessionManipulation, SessionSettings, SimpleFormat, SingleQuotes, SkipBeforeFilter, SprocketsPathTraversal, StripTags, SymbolDoS, SymbolDoSCVE, TranslateBug, UnsafeReflection, UnscopedFind, ValidationRegex, WeakHash, WithoutProtection, XMLDoS, YAMLParsing

== Overview ==

Controllers: 69
Models: 61
Templates: 409
Errors: 0
Security Warnings: 0

== Warning Types ==


== Controller Overview ==

Controller: AdsController
Parent: ApplicationController
Routes: index

Controller: Api::RegistrationsController
Parent: ApplicationController
Routes: [None]

Controller: Api::SessionsController
Parent: ApplicationController
Routes: [None]

Controller: Api::V1::BaseController
Parent: ApplicationController
Routes: [None]

Controller: Api::V1::ContactsController
Parent: ApplicationController
Routes: [None]

Controller: Api::V1::CountriesController
Parent: ApplicationController
Routes: [None]

Controller: Api::V1::MessagesController
Parent: ApplicationController
Routes: [None]

Controller: Api::V1::SearchController
Parent: ApplicationController
Routes: [None]

Controller: Api::V1::UploadsController
Parent: ApplicationController
Routes: [None]

Controller: ApplicationController
Parent: ActionController::Base
Routes: [None]

Controller: AuthorsController
Parent: ApplicationController
Routes: index

Controller: BlockedUsersController
Parent: ApplicationController
Routes: index

Controller: BlogSettingsController
Parent: ApplicationController
Routes: [None]

Controller: CartItemsController
Parent: ApplicationController
Routes: [None]

Controller: CartProductsController
Parent: ApplicationController
Routes: [None]

Controller: CartsController
Parent: ApplicationController
Routes: express_checkout, show, update_cart

Controller: ChargesController
Parent: ApplicationController
Routes: create, new

Controller: ContactsController
Parent: ApplicationController
Routes: create, destroy, edit, index, new, show, update

Controller: CountriesController
Parent: ApplicationController
Routes: [None]

Controller: DashboardController
Parent: ApplicationController
Routes: index

Controller: DatingController
Parent: ApplicationController
Routes: [None]

Controller: DomainsController
Parent: ApplicationController
Routes: index

Controller: EfilesController
Parent: ApplicationController
Routes: index

Controller: FeedbacksController
Parent: ApplicationController
Routes: create, index

Controller: FriendsController
Parent: ApplicationController
Routes: index

Controller: GroupMembersController
Parent: ApplicationController
Routes: [None]

Controller: GroupsController
Parent: ApplicationController
Routes: [None]

Controller: HashtagsController
Parent: ApplicationController
Routes: index, show

Controller: IncomesController
Parent: ApplicationController
Routes: index

Controller: IndexController
Parent: ApplicationController
Routes: about, addcoupon, checkemail, checknick, index, indexnew, setcoupon, terms

Controller: InvitationsController
Parent: ApplicationController
Routes: index

Controller: InvoicesController
Parent: ApplicationController
Routes: index

Controller: IpostsController
Parent: ApplicationController
Routes: index, index_with_button, show

Controller: LinksController
Parent: ApplicationController
Routes: index

Controller: MailAccountsController
Parent: ApplicationController
Routes: index

Controller: MessagesController
Parent: ApplicationController
Routes: avatar, check_passphrase, close_account, compose, index, language, privacy_settings, read_message, received, reveal, revealed, sent, settings, tell_a_friend

Controller: MiniMiniPostTagsController
Parent: ApplicationController
Routes: [None]

Controller: MiniPostCommentLikingsController
Parent: ApplicationController
Routes: create, destroy, edit, index, new, show, update

Controller: MiniPostCommentsController
Parent: ApplicationController
Routes: create, destroy

Controller: MiniPostFavoritesController
Parent: ApplicationController
Routes: [None]

Controller: MiniPostFeedsController
Parent: ApplicationController
Routes: create, destroy

Controller: MiniPostLikingsController
Parent: ApplicationController
Routes: create, destroy, edit, index, new, show, update

Controller: MiniPostsController
Parent: ApplicationController
Routes: create, destroy, disliking, edit, favoriting, index, like, liked, liking, new, show, update

Controller: OptionsController
Parent: ApplicationController
Routes: index, registrations_mode

Controller: OrdersController
Parent: ApplicationController
Routes: express, index

Controller: PartnersController
Parent: ApplicationController
Routes: [None]

Controller: PaymentNotificationsController
Parent: ApplicationController
Routes: [None]

Controller: PaymentsController
Parent: ApplicationController
Routes: index

Controller: PhoneNumbersController
Parent: ApplicationController
Routes: create, new

Controller: PicturesController
Parent: ApplicationController
Routes: create, index

Controller: PostTagsController
Parent: ApplicationController
Routes: [None]

Controller: PostsController
Parent: ApplicationController
Routes: blog, create, d4x337, destroy, edit, idtag, index, new, savesettings, settings, show, taggings, update

Controller: ProductsController
Parent: ApplicationController
Routes: index, store

Controller: QuoteTypesController
Parent: ApplicationController
Routes: index

Controller: QuotesController
Parent: ApplicationController
Routes: index

Controller: RequestsController
Parent: ApplicationController
Routes: index

Controller: SearchController
Parent: ApplicationController
Includes: PgSearch
Routes: complete, directory, go_to_category, index

Controller: ShadowController
Parent: ApplicationController
Routes: index

Controller: StatusesController
Parent: ApplicationController
Routes: usestatus

Controller: TagsController
Parent: ApplicationController
Routes: index

Controller: TimelineController
Parent: ApplicationController
Routes: admin, index

Controller: UpdatesController
Parent: ApplicationController
Routes: index

Controller: UploadsController
Parent: ApplicationController
Routes: [None]

Controller: UserContactsController
Parent: ApplicationController
Routes: create

Controller: Users::RegistrationsController
Parent: Devise::RegistrationsController
Routes: [None]

Controller: Users::SessionsController
Parent: Devise::SessionsController
Routes: [None]

Controller: UsersController
Parent: ApplicationController
Routes: destroy, edit, home, index, new, profile, set_background, show, update, visitors

Controller: WallController
Parent: ApplicationController
Routes: create, favorites, index, indexupd, likes, sharel, sharep

Controller: WorldmapController
Parent: ApplicationController
Routes: [None]

== Template Output ==

ads/_form

[Escaped Output] pluralize(@ad.errors.count, t("error"))
[Escaped Output] msg
[Escaped Output] f.label(t(:title), :class => "show-item-label")
[Escaped Output] f.text_field(:title, :size => 90, :class => "def-input")
[Escaped Output] f.label(t(:content), :class => "show-item-label")
[Escaped Output] f.text_area(:content, :size => "88x5")
[Escaped Output] f.label(t(:url), :class => "show-item-label")
[Escaped Output] f.url_field(:url)
[Escaped Output] f.label(t(:expire_at), :class => "show-item-label")
[Escaped Output] f.text_field(:expire_at, :size => 90, :class => "def-input")
[Escaped Output] f.label(t(:active), :class => "show-item-label")
[Escaped Output] f.check_box(:active, :size => 90, :class => "def-input")
[Escaped Output] f.label(t(:lang), :class => "show-item-label")
[Escaped Output] f.text_field(:locale, :size => 90, :class => "def-input")
[Escaped Output] f.label(t(:image), :class => "show-item-label")
[Escaped Output] f.text_field(:image_file_name, :size => 40, :class => "def-input")
[Escaped Output] f.file_field(:image)
[Escaped Output] f.submit(:class => "button-d4x")
[Escaped Output] form_for(@ad) do; if @ad.errors.any? then; [Escaped Output] pluralize(@ad.errors.count, t("error")); @ad.errors.full_messages.each do; [Escaped Output] msg; end;end;[Escaped Output] f.label(t(:title), :class => "show-item-label");[Escaped Output] f.text_field(:title, :size => 90, :class => "def-input");[Escaped Output] f.label(t(:content), :class => "show-item-label");[Escaped Output] f.text_area(:content, :size => "88x5");[Escaped Output] f.label(t(:url), :class => "show-item-label");[Escaped Output] f.url_field(:url);[Escaped Output] f.label(t(:expire_at), :class => "show-item-label");[Escaped Output] f.text_field(:expire_at, :size => 90, :class => "def-input");[Escaped Output] f.label(t(:active), :class => "show-item-label");[Escaped Output] f.check_box(:active, :size => 90, :class => "def-input");[Escaped Output] f.label(t(:lang), :class => "show-item-label");[Escaped Output] f.text_field(:locale, :size => 90, :class => "def-input");[Escaped Output] f.label(t(:image), :class => "show-item-label");[Escaped Output] f.text_field(:image_file_name, :size => 40, :class => "def-input");[Escaped Output] f.file_field(:image);[Escaped Output] f.submit(:class => "button-d4x"); end

ads/_form.["AdsController#create", "Template:ads/new"]

[Escaped Output] pluralize(Ad.new(ads_params).errors.count, t("error"))
[Escaped Output] msg
[Escaped Output] FormBuilder.new.label(t(:title), :class => "show-item-label")
[Escaped Output] FormBuilder.new.text_field(:title, :size => 90, :class => "def-input")
[Escaped Output] FormBuilder.new.label(t(:content), :class => "show-item-label")
[Escaped Output] FormBuilder.new.text_area(:content, :size => "88x5")
[Escaped Output] FormBuilder.new.label(t(:url), :class => "show-item-label")
[Escaped Output] FormBuilder.new.url_field(:url)
[Escaped Output] FormBuilder.new.label(t(:expire_at), :class => "show-item-label")
[Escaped Output] FormBuilder.new.text_field(:expire_at, :size => 90, :class => "def-input")
[Escaped Output] FormBuilder.new.label(t(:active), :class => "show-item-label")
[Escaped Output] FormBuilder.new.check_box(:active, :size => 90, :class => "def-input")
[Escaped Output] FormBuilder.new.label(t(:lang), :class => "show-item-label")
[Escaped Output] FormBuilder.new.text_field(:locale, :size => 90, :class => "def-input")
[Escaped Output] FormBuilder.new.label(t(:image), :class => "show-item-label")
[Escaped Output] FormBuilder.new.text_field(:image_file_name, :size => 40, :class => "def-input")
[Escaped Output] FormBuilder.new.file_field(:image)
[Escaped Output] FormBuilder.new.submit(:class => "button-d4x")
[Escaped Output] form_for(Ad.new(ads_params)) do; if Ad.new(ads_params).errors.any? then; [Escaped Output] pluralize(Ad.new(ads_params).errors.count, t("error")); Ad.new(ads_params).errors.full_messages.each do; [Escaped Output] msg; end;end;[Escaped Output] FormBuilder.new.label(t(:title), :class => "show-item-label");[Escaped Output] FormBuilder.new.text_field(:title, :size => 90, :class => "def-input");[Escaped Output] FormBuilder.new.label(t(:content), :class => "show-item-label");[Escaped Output] FormBuilder.new.text_area(:content, :size => "88x5");[Escaped Output] FormBuilder.new.label(t(:url), :class => "show-item-label");[Escaped Output] FormBuilder.new.url_field(:url);[Escaped Output] FormBuilder.new.label(t(:expire_at), :class => "show-item-label");[Escaped Output] FormBuilder.new.text_field(:expire_at, :size => 90, :class => "def-input");[Escaped Output] FormBuilder.new.label(t(:active), :class => "show-item-label");[Escaped Output] FormBuilder.new.check_box(:active, :size => 90, :class => "def-input");[Escaped Output] FormBuilder.new.label(t(:lang), :class => "show-item-label");[Escaped Output] FormBuilder.new.text_field(:locale, :size => 90, :class => "def-input");[Escaped Output] FormBuilder.new.label(t(:image), :class => "show-item-label");[Escaped Output] FormBuilder.new.text_field(:image_file_name, :size => 40, :class => "def-input");[Escaped Output] FormBuilder.new.file_field(:image);[Escaped Output] FormBuilder.new.submit(:class => "button-d4x"); end

ads/_form.["AdsController#edit", "Template:ads/edit"]

[Escaped Output] pluralize(Ad.find(params[:id]).errors.count, t("error"))
[Escaped Output] (Unresolved Model).new
[Escaped Output] FormBuilder.new.label(t(:title), :class => "show-item-label")
[Escaped Output] FormBuilder.new.text_field(:title, :size => 90, :class => "def-input")
[Escaped Output] FormBuilder.new.label(t(:content), :class => "show-item-label")
[Escaped Output] FormBuilder.new.text_area(:content, :size => "88x5")
[Escaped Output] FormBuilder.new.label(t(:url), :class => "show-item-label")
[Escaped Output] FormBuilder.new.url_field(:url)
[Escaped Output] FormBuilder.new.label(t(:expire_at), :class => "show-item-label")
[Escaped Output] FormBuilder.new.text_field(:expire_at, :size => 90, :class => "def-input")
[Escaped Output] FormBuilder.new.label(t(:active), :class => "show-item-label")
[Escaped Output] FormBuilder.new.check_box(:active, :size => 90, :class => "def-input")
[Escaped Output] FormBuilder.new.label(t(:lang), :class => "show-item-label")
[Escaped Output] FormBuilder.new.text_field(:locale, :size => 90, :class => "def-input")
[Escaped Output] FormBuilder.new.label(t(:image), :class => "show-item-label")
[Escaped Output] FormBuilder.new.text_field(:image_file_name, :size => 40, :class => "def-input")
[Escaped Output] FormBuilder.new.file_field(:image)
[Escaped Output] FormBuilder.new.submit(:class => "button-d4x")
[Escaped Output] form_for(Ad.find(params[:id])) do; if Ad.find(params[:id]).errors.any? then; [Escaped Output] pluralize(Ad.find(params[:id]).errors.count, t("error")); Ad.find(params[:id]).errors.full_messages.each do; [Escaped Output] (Unresolved Model).new; end;end;[Escaped Output] FormBuilder.new.label(t(:title), :class => "show-item-label");[Escaped Output] FormBuilder.new.text_field(:title, :size => 90, :class => "def-input");[Escaped Output] FormBuilder.new.label(t(:content), :class => "show-item-label");[Escaped Output] FormBuilder.new.text_area(:content, :size => "88x5");[Escaped Output] FormBuilder.new.label(t(:url), :class => "show-item-label");[Escaped Output] FormBuilder.new.url_field(:url);[Escaped Output] FormBuilder.new.label(t(:expire_at), :class => "show-item-label");[Escaped Output] FormBuilder.new.text_field(:expire_at, :size => 90, :class => "def-input");[Escaped Output] FormBuilder.new.label(t(:active), :class => "show-item-label");[Escaped Output] FormBuilder.new.check_box(:active, :size => 90, :class => "def-input");[Escaped Output] FormBuilder.new.label(t(:lang), :class => "show-item-label");[Escaped Output] FormBuilder.new.text_field(:locale, :size => 90, :class => "def-input");[Escaped Output] FormBuilder.new.label(t(:image), :class => "show-item-label");[Escaped Output] FormBuilder.new.text_field(:image_file_name, :size => 40, :class => "def-input");[Escaped Output] FormBuilder.new.file_field(:image);[Escaped Output] FormBuilder.new.submit(:class => "button-d4x"); end

ads/_form.["AdsController#new", "Template:ads/new"]

[Escaped Output] pluralize(Ad.new.errors.count, t("error"))
[Escaped Output] msg
[Escaped Output] FormBuilder.new.label(t(:title), :class => "show-item-label")
[Escaped Output] FormBuilder.new.text_field(:title, :size => 90, :class => "def-input")
[Escaped Output] FormBuilder.new.label(t(:content), :class => "show-item-label")
[Escaped Output] FormBuilder.new.text_area(:content, :size => "88x5")
[Escaped Output] FormBuilder.new.label(t(:url), :class => "show-item-label")
[Escaped Output] FormBuilder.new.url_field(:url)
[Escaped Output] FormBuilder.new.label(t(:expire_at), :class => "show-item-label")
[Escaped Output] FormBuilder.new.text_field(:expire_at, :size => 90, :class => "def-input")
[Escaped Output] FormBuilder.new.label(t(:active), :class => "show-item-label")
[Escaped Output] FormBuilder.new.check_box(:active, :size => 90, :class => "def-input")
[Escaped Output] FormBuilder.new.label(t(:lang), :class => "show-item-label")
[Escaped Output] FormBuilder.new.text_field(:locale, :size => 90, :class => "def-input")
[Escaped Output] FormBuilder.new.label(t(:image), :class => "show-item-label")
[Escaped Output] FormBuilder.new.text_field(:image_file_name, :size => 40, :class => "def-input")
[Escaped Output] FormBuilder.new.file_field(:image)
[Escaped Output] FormBuilder.new.submit(:class => "button-d4x")
[Escaped Output] form_for(Ad.new) do; if Ad.new.errors.any? then; [Escaped Output] pluralize(Ad.new.errors.count, t("error")); Ad.new.errors.full_messages.each do; [Escaped Output] msg; end;end;[Escaped Output] FormBuilder.new.label(t(:title), :class => "show-item-label");[Escaped Output] FormBuilder.new.text_field(:title, :size => 90, :class => "def-input");[Escaped Output] FormBuilder.new.label(t(:content), :class => "show-item-label");[Escaped Output] FormBuilder.new.text_area(:content, :size => "88x5");[Escaped Output] FormBuilder.new.label(t(:url), :class => "show-item-label");[Escaped Output] FormBuilder.new.url_field(:url);[Escaped Output] FormBuilder.new.label(t(:expire_at), :class => "show-item-label");[Escaped Output] FormBuilder.new.text_field(:expire_at, :size => 90, :class => "def-input");[Escaped Output] FormBuilder.new.label(t(:active), :class => "show-item-label");[Escaped Output] FormBuilder.new.check_box(:active, :size => 90, :class => "def-input");[Escaped Output] FormBuilder.new.label(t(:lang), :class => "show-item-label");[Escaped Output] FormBuilder.new.text_field(:locale, :size => 90, :class => "def-input");[Escaped Output] FormBuilder.new.label(t(:image), :class => "show-item-label");[Escaped Output] FormBuilder.new.text_field(:image_file_name, :size => 40, :class => "def-input");[Escaped Output] FormBuilder.new.file_field(:image);[Escaped Output] FormBuilder.new.submit(:class => "button-d4x"); end

ads/_form.["Template:ads/edit"]

[Escaped Output] pluralize(@ad.errors.count, t("error"))
[Escaped Output] msg
[Escaped Output] FormBuilder.new.label(t(:title), :class => "show-item-label")
[Escaped Output] FormBuilder.new.text_field(:title, :size => 90, :class => "def-input")
[Escaped Output] FormBuilder.new.label(t(:content), :class => "show-item-label")
[Escaped Output] FormBuilder.new.text_area(:content, :size => "88x5")
[Escaped Output] FormBuilder.new.label(t(:url), :class => "show-item-label")
[Escaped Output] FormBuilder.new.url_field(:url)
[Escaped Output] FormBuilder.new.label(t(:expire_at), :class => "show-item-label")
[Escaped Output] FormBuilder.new.text_field(:expire_at, :size => 90, :class => "def-input")
[Escaped Output] FormBuilder.new.label(t(:active), :class => "show-item-label")
[Escaped Output] FormBuilder.new.check_box(:active, :size => 90, :class => "def-input")
[Escaped Output] FormBuilder.new.label(t(:lang), :class => "show-item-label")
[Escaped Output] FormBuilder.new.text_field(:locale, :size => 90, :class => "def-input")
[Escaped Output] FormBuilder.new.label(t(:image), :class => "show-item-label")
[Escaped Output] FormBuilder.new.text_field(:image_file_name, :size => 40, :class => "def-input")
[Escaped Output] FormBuilder.new.file_field(:image)
[Escaped Output] FormBuilder.new.submit(:class => "button-d4x")
[Escaped Output] form_for(@ad) do; if @ad.errors.any? then; [Escaped Output] pluralize(@ad.errors.count, t("error")); @ad.errors.full_messages.each do; [Escaped Output] msg; end;end;[Escaped Output] FormBuilder.new.label(t(:title), :class => "show-item-label");[Escaped Output] FormBuilder.new.text_field(:title, :size => 90, :class => "def-input");[Escaped Output] FormBuilder.new.label(t(:content), :class => "show-item-label");[Escaped Output] FormBuilder.new.text_area(:content, :size => "88x5");[Escaped Output] FormBuilder.new.label(t(:url), :class => "show-item-label");[Escaped Output] FormBuilder.new.url_field(:url);[Escaped Output] FormBuilder.new.label(t(:expire_at), :class => "show-item-label");[Escaped Output] FormBuilder.new.text_field(:expire_at, :size => 90, :class => "def-input");[Escaped Output] FormBuilder.new.label(t(:active), :class => "show-item-label");[Escaped Output] FormBuilder.new.check_box(:active, :size => 90, :class => "def-input");[Escaped Output] FormBuilder.new.label(t(:lang), :class => "show-item-label");[Escaped Output] FormBuilder.new.text_field(:locale, :size => 90, :class => "def-input");[Escaped Output] FormBuilder.new.label(t(:image), :class => "show-item-label");[Escaped Output] FormBuilder.new.text_field(:image_file_name, :size => 40, :class => "def-input");[Escaped Output] FormBuilder.new.file_field(:image);[Escaped Output] FormBuilder.new.submit(:class => "button-d4x"); end

ads/_top

[Escaped Output] link_to(d4x_sanitizer(t("sponsored")), "/sponsored")
[Escaped Output] ad.title
[Escaped Output] ad.url
[Escaped Output] image_tag(ad.image.url, :class => "")
[Escaped Output] ad.content
[Escaped Output] ad.action
[Escaped Output] link_to(ad.url, :target => "_blank") do; [Escaped Output] ad.title;[Escaped Output] ad.url;[Escaped Output] image_tag(ad.image.url, :class => "");[Escaped Output] ad.content;[Escaped Output] ad.action; end

ads/edit

[Escaped Output] link_to(image_tag("arrow_left.png", :border => 0, :title => t("back")), ads_path)
[Escaped Output] t("Editing Advertising")
[Escaped Output] render(partial => "form", {})

ads/edit.["AdsController#edit"]

[Escaped Output] link_to(image_tag("arrow_left.png", :border => 0, :title => t("back")), ads_path)
[Escaped Output] t("Editing Advertising")
[Escaped Output] render(partial => "form", {})

ads/index

[Escaped Output] link_to(image_tag("layout_add.png", :border => 0, :mouseover => "layout_add.png", :title => "Advertisings"), new_ad_path)
[Escaped Output] image_tag("layout.png", :border => 0, :mouseover => "layout.png", :title => "Advertisings")
[Escaped Output] t("Advertisings")
[Escaped Output] cycle("odd", "even")
[Escaped Output] ad.expire_at.strftime("%Y-%m-%d")
[Escaped Output] link_to(ad.title, ad)
[Escaped Output] ad.url
[Escaped Output] ("yes" or "no")
[Escaped Output] link_to(image_tag("layout.png", :border => 0, :mouseover => "layout.png", :title => d4x_sanitizer(t("icon-show")), :size => "16x16"), ad)
[Escaped Output] link_to(image_tag("layout_edit.png", :border => 0, :mouseover => "layout_edit.png", :title => d4x_sanitizer(t("icon-edit")), :size => "16x16"), edit_ad_path(ad))
[Escaped Output] button_to("", ad, :confirm => "are you sure?", :method => :delete, :class => "adestroy", :name => "destroy", :size => "16x16")
[Escaped Output] will_paginate(@ads, :per_page => 25)

ads/index.["AdsController#index"]

[Escaped Output] link_to(image_tag("layout_add.png", :border => 0, :mouseover => "layout_add.png", :title => "Advertisings"), new_ad_path)
[Escaped Output] image_tag("layout.png", :border => 0, :mouseover => "layout.png", :title => "Advertisings")
[Escaped Output] t("Advertisings")
[Escaped Output] cycle("odd", "even")
[Escaped Output] ad.expire_at.strftime("%Y-%m-%d")
[Escaped Output] link_to(ad.title, ad)
[Escaped Output] ad.url
[Escaped Output] ("yes" or "no")
[Escaped Output] link_to(image_tag("layout.png", :border => 0, :mouseover => "layout.png", :title => d4x_sanitizer(t("icon-show")), :size => "16x16"), ad)
[Escaped Output] link_to(image_tag("layout_edit.png", :border => 0, :mouseover => "layout_edit.png", :title => d4x_sanitizer(t("icon-edit")), :size => "16x16"), edit_ad_path(ad))
[Escaped Output] button_to("", ad, :confirm => "are you sure?", :method => :delete, :class => "adestroy", :name => "destroy", :size => "16x16")
[Escaped Output] will_paginate(Ad.paginate(:page => params[:page]), :per_page => 25)

ads/new

[Escaped Output] link_to(image_tag("arrow_left.png", :border => 0, :title => t("back")), ads_path)
[Escaped Output] t("add Advertising")
[Escaped Output] render(partial => "form", {})

ads/new.["AdsController#new"]

[Escaped Output] link_to(image_tag("arrow_left.png", :border => 0, :title => t("back")), ads_path)
[Escaped Output] t("add Advertising")
[Escaped Output] render(partial => "form", {})

ads/show

[Escaped Output] link_to(image_tag("arrow_left.png", :border => 0, :title => t("back")), ads_path)
[Escaped Output] link_to(image_tag("bug_add.png", :border => 0, :mouseover => "bug_add.png", :title => "new", :size => "16x16"), new_ad_path)
[Escaped Output] link_to(image_tag("bug_edit.png", :border => 0, :mouseover => "bug_edit.png", :title => t(:edit), :size => "16x16"), edit_ad_path(@ad))
[Escaped Output] @ad.title
[Escaped Output] t("created_at")
[Escaped Output] @ad.created_at
[Escaped Output] t("url")
[Escaped Output] link_to(@ad.url, @ad.url, :target => "_blank")
[Escaped Output] t("picture")
[Escaped Output] image_tag(@ad.image.url)
[Escaped Output] t("content")
[Escaped Output] @ad.content
[Escaped Output] t("active ?")
[Escaped Output] t("yes")
[Escaped Output] t("active ?")
[Escaped Output] t("no")

ads/show.["AdsController#show"]

[Escaped Output] link_to(image_tag("arrow_left.png", :border => 0, :title => t("back")), ads_path)
[Escaped Output] link_to(image_tag("bug_add.png", :border => 0, :mouseover => "bug_add.png", :title => "new", :size => "16x16"), new_ad_path)
[Escaped Output] link_to(image_tag("bug_edit.png", :border => 0, :mouseover => "bug_edit.png", :title => t(:edit), :size => "16x16"), edit_ad_path(Ad.find(params[:id])))
[Escaped Output] Ad.find(params[:id]).title
[Escaped Output] t("created_at")
[Escaped Output] Ad.find(params[:id]).created_at
[Escaped Output] t("url")
[Escaped Output] link_to(Ad.find(params[:id]).url, Ad.find(params[:id]).url, :target => "_blank")
[Escaped Output] t("picture")
[Escaped Output] image_tag(Ad.find(params[:id]).image.url)
[Escaped Output] t("content")
[Escaped Output] Ad.find(params[:id]).content
[Escaped Output] t("active ?")
[Escaped Output] t("yes")
[Escaped Output] t("active ?")
[Escaped Output] t("no")

ads/sponsored

[Escaped Output] link_to(image_tag("layout_add.png", :border => 0, :mouseover => "layout_add.png", :title => "Advertisings"), new_ad_path)
[Escaped Output] d4x_sanitizer(t("sposored"))

ads/sponsored.["AdsController#sponsored"]

[Escaped Output] link_to(image_tag("layout_add.png", :border => 0, :mouseover => "layout_add.png", :title => "Advertisings"), new_ad_path)
[Escaped Output] d4x_sanitizer(t("sposored"))

agadanga/_agadanga_folder_evo

[Escaped Output] javascript_include_tag("d4x-folders-evo")
[Escaped Output] content_for(:head) do; [Escaped Output] javascript_include_tag("d4x-folders-evo"); end
[Escaped Output] hidden_field_tag(:folder, @foldername)
[Escaped Output] cycle("odd", "even")
[Escaped Output] cycle("odd", "even")
[Escaped Output] image_tag("flag-deact.png", :size => "16x16", :title => "Flagged as Junk", :class => "grid-icon")
[Escaped Output] image_tag("flag.png", :size => "16x16", :title => "Flagged as Important", :class => "grid-icon")
[Escaped Output] check_box("messages", "key", { :multiple => true, :class => "css-checkbox" }, msgkey, nil)
[Escaped Output] image_tag("arrow_turn_right.png", :title => "Replied", :class => "grid-icon")
[Escaped Output] image_tag("arrow_right.png", :title => "Forwarded", :class => "grid-icon")
[Escaped Output] image_tag("attach.png", :title => (xmail.attachments.count.to_s + " file(s)"), :class => "grid-icon")
[Escaped Output] link_to_function(image_tag("email_open.png", :width => "12", :class => "bullet"), "$('#mail-row').children('#view-mail-pane').toggle()")
[Escaped Output] link_to_function(image_tag("email.png", :width => "12", :class => "bullet"), "$('#mail-row').children('#view-mail-pane').toggle()")
[Escaped Output] xmail.date
[Escaped Output] xmail.date
[Escaped Output] link_to(:message_id => msgkey, :folder => (@foldername)) do; (@xmsg.flags.to_s.count("S") > 0) ? ([ignored]) : ([ignored]);[Escaped Output] xmail.date; end
[Escaped Output] truncate(xmail.from.to_s, :length => 35)
[Escaped Output] truncate(xmail.from.to_s, :length => 24)
[Escaped Output] link_to(:message_id => msgkey, :folder => (@foldername)) do; (@xmsg.flags.to_s.count("S") > 0) ? ([ignored]) : ([ignored]);if xmail.from.present? then; [Escaped Output] truncate(xmail.from.to_s, :length => 24);else; [ignored];end; end
[Escaped Output] truncate(xmail.subject.to_s, :length => 55)
[Escaped Output] truncate(xmail.subject.to_s, :length => 55)
[Escaped Output] link_to(:message_id => msgkey, :folder => (@foldername)) do; (@xmsg.flags.to_s.count("S") > 0) ? ([ignored]) : ([ignored]);[Escaped Output] truncate(xmail.subject.to_s, :length => 55); end
[Escaped Output] truncate(xmail.to.to_s, :length => 40)
[Escaped Output] truncate(xmail.to.to_s, :length => 40)
[Escaped Output] link_to(:message_id => msgkey, :folder => (@foldername)) do; (@xmsg.flags.to_s.count("S") > 0) ? ([ignored]) : ([ignored]);[Escaped Output] truncate(xmail.to.to_s, :length => 40); end

agadanga/_agadanga_folder_evo.["Template:agadanga/agadanga_archivied"]

[Escaped Output] javascript_include_tag("d4x-folders-evo")
[Escaped Output] content_for(:head) do; [Escaped Output] javascript_include_tag("d4x-folders-evo"); end
[Escaped Output] hidden_field_tag(:folder, @foldername)
[Escaped Output] cycle("odd", "even")
[Escaped Output] cycle("odd", "even")
[Escaped Output] image_tag("flag-deact.png", :size => "16x16", :title => "Flagged as Junk", :class => "grid-icon")
[Escaped Output] image_tag("flag.png", :size => "16x16", :title => "Flagged as Important", :class => "grid-icon")
[Escaped Output] check_box("messages", "key", { :multiple => true, :class => "css-checkbox" }, message.key, nil)
[Escaped Output] image_tag("arrow_turn_right.png", :title => "Replied", :class => "grid-icon")
[Escaped Output] image_tag("arrow_right.png", :title => "Forwarded", :class => "grid-icon")
[Escaped Output] image_tag("attach.png", :title => (Mail.new((@maildir.get(message.key) or (@sentdir.get(message.key) or (@draftdir.get(message.key) or (@spamdir.get(message.key) or (@spamdir.get(message.key) or (@archivedir.get(message.key) or (@draftdir.get(message.key) or (@trashdir.get(message.key) or @maildir.get(message.key))))))))).data).attachments.count.to_s + " file(s)"), :class => "grid-icon")
[Escaped Output] link_to_function(image_tag("email_open.png", :width => "12", :class => "bullet"), "$('#mail-row').children('#view-mail-pane').toggle()")
[Escaped Output] link_to_function(image_tag("email.png", :width => "12", :class => "bullet"), "$('#mail-row').children('#view-mail-pane').toggle()")
[Escaped Output] Mail.new((@maildir.get(message.key) or (@sentdir.get(message.key) or (@draftdir.get(message.key) or (@spamdir.get(message.key) or (@spamdir.get(message.key) or (@archivedir.get(message.key) or (@draftdir.get(message.key) or (@trashdir.get(message.key) or @maildir.get(message.key))))))))).data).date
[Escaped Output] Mail.new((@maildir.get(message.key) or (@sentdir.get(message.key) or (@draftdir.get(message.key) or (@spamdir.get(message.key) or (@spamdir.get(message.key) or (@archivedir.get(message.key) or (@draftdir.get(message.key) or (@trashdir.get(message.key) or @maildir.get(message.key))))))))).data).date
[Escaped Output] link_to(:message_id => message.key, :folder => (@foldername)) do; if ((@maildir.get(message.key) or (@sentdir.get(message.key) or (@draftdir.get(message.key) or (@spamdir.get(message.key) or (@spamdir.get(message.key) or (@archivedir.get(message.key) or (@draftdir.get(message.key) or (@trashdir.get(message.key) or @maildir.get(message.key))))))))).flags.to_s.count("S") > 0) then; [ignored];else; [ignored];end;[Escaped Output] Mail.new((@maildir.get(message.key) or (@sentdir.get(message.key) or (@draftdir.get(message.key) or (@spamdir.get(message.key) or (@spamdir.get(message.key) or (@archivedir.get(message.key) or (@draftdir.get(message.key) or (@trashdir.get(message.key) or @maildir.get(message.key))))))))).data).date; end
[Escaped Output] truncate(Mail.new((@maildir.get(message.key) or (@sentdir.get(message.key) or (@draftdir.get(message.key) or (@spamdir.get(message.key) or (@spamdir.get(message.key) or (@archivedir.get(message.key) or (@draftdir.get(message.key) or (@trashdir.get(message.key) or @maildir.get(message.key))))))))).data).from.to_s, :length => 35)
[Escaped Output] truncate(Mail.new((@maildir.get(message.key) or (@sentdir.get(message.key) or (@draftdir.get(message.key) or (@spamdir.get(message.key) or (@spamdir.get(message.key) or (@archivedir.get(message.key) or (@draftdir.get(message.key) or (@trashdir.get(message.key) or @maildir.get(message.key))))))))).data).from.to_s, :length => 24)
[Escaped Output] link_to(:message_id => message.key, :folder => (@foldername)) do; if ((@maildir.get(message.key) or (@sentdir.get(message.key) or (@draftdir.get(message.key) or (@spamdir.get(message.key) or (@spamdir.get(message.key) or (@archivedir.get(message.key) or (@draftdir.get(message.key) or (@trashdir.get(message.key) or @maildir.get(message.key))))))))).flags.to_s.count("S") > 0) then; [ignored];else; [ignored];end;if Mail.new((@maildir.get(message.key) or (@sentdir.get(message.key) or (@draftdir.get(message.key) or (@spamdir.get(message.key) or (@spamdir.get(message.key) or (@archivedir.get(message.key) or (@draftdir.get(message.key) or (@trashdir.get(message.key) or @maildir.get(message.key))))))))).data).from.present? then; [Escaped Output] truncate(Mail.new((@maildir.get(message.key) or (@sentdir.get(message.key) or (@draftdir.get(message.key) or (@spamdir.get(message.key) or (@spamdir.get(message.key) or (@archivedir.get(message.key) or (@draftdir.get(message.key) or (@trashdir.get(message.key) or @maildir.get(message.key))))))))).data).from.to_s, :length => 24);else; [ignored];end; end
[Escaped Output] truncate(Mail.new((@maildir.get(message.key) or (@sentdir.get(message.key) or (@draftdir.get(message.key) or (@spamdir.get(message.key) or (@spamdir.get(message.key) or (@archivedir.get(message.key) or (@draftdir.get(message.key) or (@trashdir.get(message.key) or @maildir.get(message.key))))))))).data).subject.to_s, :length => 55)
[Escaped Output] truncate(Mail.new((@maildir.get(message.key) or (@sentdir.get(message.key) or (@draftdir.get(message.key) or (@spamdir.get(message.key) or (@spamdir.get(message.key) or (@archivedir.get(message.key) or (@draftdir.get(message.key) or (@trashdir.get(message.key) or @maildir.get(message.key))))))))).data).subject.to_s, :length => 55)
[Escaped Output] link_to(:message_id => message.key, :folder => (@foldername)) do; if ((@maildir.get(message.key) or (@sentdir.get(message.key) or (@draftdir.get(message.key) or (@spamdir.get(message.key) or (@spamdir.get(message.key) or (@archivedir.get(message.key) or (@draftdir.get(message.key) or (@trashdir.get(message.key) or @maildir.get(message.key))))))))).flags.to_s.count("S") > 0) then; [ignored];else; [ignored];end;[Escaped Output] truncate(Mail.new((@maildir.get(message.key) or (@sentdir.get(message.key) or (@draftdir.get(message.key) or (@spamdir.get(message.key) or (@spamdir.get(message.key) or (@archivedir.get(message.key) or (@draftdir.get(message.key) or (@trashdir.get(message.key) or @maildir.get(message.key))))))))).data).subject.to_s, :length => 55); end
[Escaped Output] truncate(Mail.new((@maildir.get(message.key) or (@sentdir.get(message.key) or (@draftdir.get(message.key) or (@spamdir.get(message.key) or (@spamdir.get(message.key) or (@archivedir.get(message.key) or (@draftdir.get(message.key) or (@trashdir.get(message.key) or @maildir.get(message.key))))))))).data).to.to_s, :length => 40)
[Escaped Output] truncate(Mail.new((@maildir.get(message.key) or (@sentdir.get(message.key) or (@draftdir.get(message.key) or (@spamdir.get(message.key) or (@spamdir.get(message.key) or (@archivedir.get(message.key) or (@draftdir.get(message.key) or (@trashdir.get(message.key) or @maildir.get(message.key))))))))).data).to.to_s, :length => 40)
[Escaped Output] link_to(:message_id => message.key, :folder => (@foldername)) do; if ((@maildir.get(message.key) or (@sentdir.get(message.key) or (@draftdir.get(message.key) or (@spamdir.get(message.key) or (@spamdir.get(message.key) or (@archivedir.get(message.key) or (@draftdir.get(message.key) or (@trashdir.get(message.key) or @maildir.get(message.key))))))))).flags.to_s.count("S") > 0) then; [ignored];else; [ignored];end;[Escaped Output] truncate(Mail.new((@maildir.get(message.key) or (@sentdir.get(message.key) or (@draftdir.get(message.key) or (@spamdir.get(message.key) or (@spamdir.get(message.key) or (@archivedir.get(message.key) or (@draftdir.get(message.key) or (@trashdir.get(message.key) or @maildir.get(message.key))))))))).data).to.to_s, :length => 40); end

agadanga/_agadanga_quota_chart

[Escaped Output] image_tag("quota.png", :size => "90x90", :class => "quotaleft left none")
[Escaped Output] d4x_sanitizer(t("total space"))
[Escaped Output] d4x_sanitizer(t("used space"))
[Escaped Output] number_to_human_size(@used, :locale => "en")
[Escaped Output] d4x_sanitizer(t("percent used"))
[Escaped Output] number_to_percentage(@percent, :precision => 2, :locale => "en")
[Escaped Output] d4x_sanitizer(t("available2"))
[Escaped Output] number_to_human_size(@available, :locale => "en")

agadanga/_agadanga_read_message

[Escaped Output] hidden_field_tag(:message_id, params[:message_id])
[Escaped Output] hidden_field_tag(:folder, @foldername)
[Escaped Output] label_tag(d4x_sanitizer(t("from")), nil, :class => "lcd view-message-labels")
[Escaped Output] xmail.from
[Escaped Output] label_tag(d4x_sanitizer(t("subject")), nil, :class => "lcd view-message-labels")
[Escaped Output] xmail.subject
[Escaped Output] label_tag(d4x_sanitizer(t("received")), nil, :class => "lcd view-message-labels")
[Escaped Output] xmail.to
[Escaped Output] link_to_function(label_tag(d4x_sanitizer(t("headers")), nil, :class => "lcd view-message-labels"), "$('#message-header').toggle()")
[Escaped Output] raw(cr2br(h(xmail.header)))
[Escaped Output] label_tag(d4x_sanitizer(t("message")), nil, :class => "lcd view-message-labels")
[Escaped Output] raw(email_html.force_encoding("UTF-8"))
[Escaped Output] email_text
[Escaped Output] label_tag(d4x_sanitizer(t("attachments")), nil, :class => "")
[Escaped Output] image_tag("attach.png", :title => "email attachment")
[Escaped Output] link_to(attachment.filename, ("/attachments/" + attachment.filename))
[Escaped Output] label_tag(number_to_human_size(@filesize, :locale => "en"), nil, :class => "")
[Escaped Output] submit_tag(d4x_sanitizer(t("reply")), :name => "reply", :class => "button-d4x", :id => "reply")
[Escaped Output] submit_tag(d4x_sanitizer(t("reply all")), :name => "replyall", :class => "button-d4x none", :id => "replyall")
[Escaped Output] submit_tag(d4x_sanitizer(t("forward")), :name => "forward", :id => "forward", :class => "button-d4x none")
[Escaped Output] form_tag("reply-forward", :method => "post") do; [Escaped Output] hidden_field_tag(:message_id, params[:message_id]);[Escaped Output] hidden_field_tag(:folder, @foldername);[Escaped Output] label_tag(d4x_sanitizer(t("from")), nil, :class => "lcd view-message-labels");[Escaped Output] xmail.from;[Escaped Output] label_tag(d4x_sanitizer(t("subject")), nil, :class => "lcd view-message-labels");[Escaped Output] xmail.subject;[Escaped Output] label_tag(d4x_sanitizer(t("received")), nil, :class => "lcd view-message-labels");[Escaped Output] xmail.to;[Escaped Output] link_to_function(label_tag(d4x_sanitizer(t("headers")), nil, :class => "lcd view-message-labels"), "$('#message-header').toggle()");[Escaped Output] raw(cr2br(h(xmail.header)));[Escaped Output] label_tag(d4x_sanitizer(t("message")), nil, :class => "lcd view-message-labels");if xmail.present? then; if xmail.multipart? then; if xmail.html_part.present? then; email_html = xmail.html_part.body.decoded; [Escaped Output] raw(email_html.force_encoding("UTF-8")); end; else; email_text = xmail.body.decoded; [Escaped Output] email_text; end;end;if xmail.has_attachments? then; [Escaped Output] label_tag(d4x_sanitizer(t("attachments")), nil, :class => ""); xmail.attachments.each do; name = attachment.filename; directory = "public/attachments"; path = File.join(directory, name); File.open(path, "wb") do; f.write(attachment.read); end; @filesize = File.size(path); [Escaped Output] image_tag("attach.png", :title => "email attachment"); [Escaped Output] link_to(attachment.filename, ("/attachments/" + attachment.filename)); [Escaped Output] label_tag(number_to_human_size(@filesize, :locale => "en"), nil, :class => ""); end;end;[Escaped Output] submit_tag(d4x_sanitizer(t("reply")), :name => "reply", :class => "button-d4x", :id => "reply");[Escaped Output] submit_tag(d4x_sanitizer(t("reply all")), :name => "replyall", :class => "button-d4x none", :id => "replyall");[Escaped Output] submit_tag(d4x_sanitizer(t("forward")), :name => "forward", :id => "forward", :class => "button-d4x none"); end
[Escaped Output] javascript_include_tag("d4x-compose")
[Escaped Output] content_for(:head) do; [Escaped Output] javascript_include_tag("d4x-compose"); end
[Escaped Output] hidden_field_tag(:action, "reply")
[Escaped Output] hidden_field_tag(:reply_message, @message_id)
[Escaped Output] label_tag("", nil, :class => "lcd")
[Escaped Output] text_field_tag(:to, @to, :class => "form-control", :placeholder => d4x_sanitizer(t("TO")))
[Escaped Output] cycle("odd", "even")
[Escaped Output] check_box_tag(:selected, (((((contact.name + " ") + contact.surname) + " <") + contact.email.downcase) + ">"))
[Escaped Output] label_tag(contact.name, nil, :class => "lcd yellow")
[Escaped Output] label_tag(contact.surname, nil, :class => "lcd orange")
[Escaped Output] contact.email.downcase
[Escaped Output] label_tag("", nil, :class => "lcd")
[Escaped Output] text_field_tag(:cc, nil, :size => 86, :class => "form-control input_cc", :placeholder => d4x_sanitizer(t("CC")))
[Escaped Output] cycle("odd", "even")
[Escaped Output] check_box_tag(:selected, (((((contact.name + " ") + contact.surname) + " <") + contact.email.downcase) + ">"))
[Escaped Output] label_tag(contact.name, nil, :class => "lcd yellow")
[Escaped Output] label_tag(contact.surname, nil, :class => "lcd orange")
[Escaped Output] contact.email.downcase
[Escaped Output] label_tag("", nil, :class => "lcd yellow")
[Escaped Output] cycle("odd", "even")
[Escaped Output] check_box_tag(:selected, (((((contact.name + " ") + contact.surname) + " <") + contact.email.downcase) + ">"))
[Escaped Output] label_tag(contact.name, nil, :class => "lcd yellow")
[Escaped Output] label_tag(contact.surname, nil, :class => "lcd orange")
[Escaped Output] contact.email.downcase
[Escaped Output] text_field_tag(:bcc, nil, :size => 85, :class => "form-control input_bcc", :placeholder => d4x_sanitizer(t("BCC")))
[Escaped Output] text_field_tag(:subject, @subject, :size => 90, :class => "form-control input_subject", :placeholder => d4x_sanitizer(t("subject")))
[Escaped Output] check_box_tag(:htmlmsg, nil, :checked)
[Escaped Output] label_tag(d4x_sanitizer(t("send plain text")), nil, :class => "lcd")
[Escaped Output] text_area_tag(:message, @message, :size => "100x16", :class => "mceNoEditor d4x-control input_tarea")
[Escaped Output] text_area_tag(:message_html, @message, :class => "tinymce input_tarea", :theme_advanced_toolbar_location => "top", :theme_advanced_toolbar_align => "left", :theme_advanced_statusbar_localtion => "bottom", :theme_advanced_button3_add => "tablecontrols", :plugins => "all", :available_languages => "en")
[Escaped Output] text_area_tag(:message, @message, :size => "100x16", :class => "mceNoEditor d4x-control input_tarea")
[Escaped Output] text_area_tag(:message_html, @message, :class => "tinymce input_tarea", :theme_advanced_toolbar_location => "top", :theme_advanced_toolbar_align => "left", :theme_advanced_statusbar_localtion => "bottom", :theme_advanced_button3_add => "tablecontrols", :plugins => "all", :available_languages => "en")
[Escaped Output] link_to_function(((image_tag("attach.png", :class => "bullet") + " ") + d4x_sanitizer(t("attach file(s)"))), "$('#attachments').toggle()", :class => "button-d4x right")
[Escaped Output] file_field_tag(:attachment, :class => "button-d4x")
[Escaped Output] file_field_tag(:attachment1, :class => "button-d4x")
[Escaped Output] file_field_tag(:attachment2, :class => "button-d4x")
[Escaped Output] file_field_tag(:attachment3, :class => "button-d4x")
[Escaped Output] file_field_tag(:attachment4, :class => "button-d4x")
[Escaped Output] submit_tag(d4x_sanitizer(t("save draft")), :name => "savedraft", :class => "button-d4x", :id => "savedraft")
[Escaped Output] submit_tag(d4x_sanitizer(t("discard")), :name => "discard", :class => "button-d4x", :id => "discard")
[Escaped Output] image_tag("post-spinner.gif", :id => "sending", :class => "none")
[Escaped Output] submit_tag(d4x_sanitizer(t("send")), :name => "send", :id => "send", :class => "button-d4x")
[Escaped Output] form_tag("actions", :method => "post", :multipart => "true") do; [Escaped Output] hidden_field_tag(:action, "reply");[Escaped Output] hidden_field_tag(:reply_message, @message_id);[Escaped Output] label_tag("", nil, :class => "lcd");[Escaped Output] text_field_tag(:to, @to, :class => "form-control", :placeholder => d4x_sanitizer(t("TO")));@contacts = current_user.contacts.order(:surname);@contacts.each do; [Escaped Output] cycle("odd", "even");[Escaped Output] check_box_tag(:selected, (((((contact.name + " ") + contact.surname) + " <") + contact.email.downcase) + ">"));[Escaped Output] label_tag(contact.name, nil, :class => "lcd yellow");[Escaped Output] label_tag(contact.surname, nil, :class => "lcd orange");[Escaped Output] contact.email.downcase; end;[Escaped Output] label_tag("", nil, :class => "lcd");[Escaped Output] text_field_tag(:cc, nil, :size => 86, :class => "form-control input_cc", :placeholder => d4x_sanitizer(t("CC")));@contacts.each do; [Escaped Output] cycle("odd", "even");[Escaped Output] check_box_tag(:selected, (((((contact.name + " ") + contact.surname) + " <") + contact.email.downcase) + ">"));[Escaped Output] label_tag(contact.name, nil, :class => "lcd yellow");[Escaped Output] label_tag(contact.surname, nil, :class => "lcd orange");[Escaped Output] contact.email.downcase; end;[Escaped Output] label_tag("", nil, :class => "lcd yellow");@contacts.each do; [Escaped Output] cycle("odd", "even");[Escaped Output] check_box_tag(:selected, (((((contact.name + " ") + contact.surname) + " <") + contact.email.downcase) + ">"));[Escaped Output] label_tag(contact.name, nil, :class => "lcd yellow");[Escaped Output] label_tag(contact.surname, nil, :class => "lcd orange");[Escaped Output] contact.email.downcase; end;[Escaped Output] text_field_tag(:bcc, nil, :size => 85, :class => "form-control input_bcc", :placeholder => d4x_sanitizer(t("BCC")));[Escaped Output] text_field_tag(:subject, @subject, :size => 90, :class => "form-control input_subject", :placeholder => d4x_sanitizer(t("subject")));[Escaped Output] check_box_tag(:htmlmsg, nil, :checked);[Escaped Output] label_tag(d4x_sanitizer(t("send plain text")), nil, :class => "lcd");if (@type == "text") then; [Escaped Output] text_area_tag(:message, @message, :size => "100x16", :class => "mceNoEditor d4x-control input_tarea"); [Escaped Output] text_area_tag(:message_html, @message, :class => "tinymce input_tarea", :theme_advanced_toolbar_location => "top", :theme_advanced_toolbar_align => "left", :theme_advanced_statusbar_localtion => "bottom", :theme_advanced_button3_add => "tablecontrols", :plugins => "all", :available_languages => "en");else; if (@type == "html") then; [Escaped Output] text_area_tag(:message, @message, :size => "100x16", :class => "mceNoEditor d4x-control input_tarea"); [Escaped Output] text_area_tag(:message_html, @message, :class => "tinymce input_tarea", :theme_advanced_toolbar_location => "top", :theme_advanced_toolbar_align => "left", :theme_advanced_statusbar_localtion => "bottom", :theme_advanced_button3_add => "tablecontrols", :plugins => "all", :available_languages => "en"); end;end;[Escaped Output] link_to_function(((image_tag("attach.png", :class => "bullet") + " ") + d4x_sanitizer(t("attach file(s)"))), "$('#attachments').toggle()", :class => "button-d4x right");[Escaped Output] file_field_tag(:attachment, :class => "button-d4x");[Escaped Output] file_field_tag(:attachment1, :class => "button-d4x");[Escaped Output] file_field_tag(:attachment2, :class => "button-d4x");[Escaped Output] file_field_tag(:attachment3, :class => "button-d4x");[Escaped Output] file_field_tag(:attachment4, :class => "button-d4x");[Escaped Output] submit_tag(d4x_sanitizer(t("save draft")), :name => "savedraft", :class => "button-d4x", :id => "savedraft");[Escaped Output] submit_tag(d4x_sanitizer(t("discard")), :name => "discard", :class => "button-d4x", :id => "discard");[Escaped Output] image_tag("post-spinner.gif", :id => "sending", :class => "none");[Escaped Output] submit_tag(d4x_sanitizer(t("send")), :name => "send", :id => "send", :class => "button-d4x"); end

agadanga/_agadanga_read_message.["Template:agadanga/agadanga_archivied"]

[Escaped Output] hidden_field_tag(:message_id, params[:message_id])
[Escaped Output] hidden_field_tag(:folder, @foldername)
[Escaped Output] label_tag(d4x_sanitizer(t("from")), nil, :class => "lcd view-message-labels")
[Escaped Output] Mail.new((@maildir.get(params[:message_id]) or (@maildir.get(params[:message_id]) or (@sentdir.get(params[:message_id]) or (@draftdir.get(params[:message_id]) or (@spamdir.get(params[:message_id]) or (@archivedir.get(params[:message_id]) or (@draftdir.get(params[:message_id]) or (@trashdir.get(params[:message_id]) or @maildir.get(params[:message_id]))))))))).data).from
[Escaped Output] label_tag(d4x_sanitizer(t("subject")), nil, :class => "lcd view-message-labels")
[Escaped Output] Mail.new((@maildir.get(params[:message_id]) or (@maildir.get(params[:message_id]) or (@sentdir.get(params[:message_id]) or (@draftdir.get(params[:message_id]) or (@spamdir.get(params[:message_id]) or (@archivedir.get(params[:message_id]) or (@draftdir.get(params[:message_id]) or (@trashdir.get(params[:message_id]) or @maildir.get(params[:message_id]))))))))).data).subject
[Escaped Output] label_tag(d4x_sanitizer(t("received")), nil, :class => "lcd view-message-labels")
[Escaped Output] Mail.new((@maildir.get(params[:message_id]) or (@maildir.get(params[:message_id]) or (@sentdir.get(params[:message_id]) or (@draftdir.get(params[:message_id]) or (@spamdir.get(params[:message_id]) or (@archivedir.get(params[:message_id]) or (@draftdir.get(params[:message_id]) or (@trashdir.get(params[:message_id]) or @maildir.get(params[:message_id]))))))))).data).to
[Escaped Output] link_to_function(label_tag(d4x_sanitizer(t("headers")), nil, :class => "lcd view-message-labels"), "$('#message-header').toggle()")
[Escaped Output] raw(cr2br(h(Mail.new((@maildir.get(params[:message_id]) or (@maildir.get(params[:message_id]) or (@sentdir.get(params[:message_id]) or (@draftdir.get(params[:message_id]) or (@spamdir.get(params[:message_id]) or (@archivedir.get(params[:message_id]) or (@draftdir.get(params[:message_id]) or (@trashdir.get(params[:message_id]) or @maildir.get(params[:message_id]))))))))).data).header)))
[Escaped Output] label_tag(d4x_sanitizer(t("message")), nil, :class => "lcd view-message-labels")
[Escaped Output] raw(Mail.new((@maildir.get(params[:message_id]) or (@maildir.get(params[:message_id]) or (@sentdir.get(params[:message_id]) or (@draftdir.get(params[:message_id]) or (@spamdir.get(params[:message_id]) or (@archivedir.get(params[:message_id]) or (@draftdir.get(params[:message_id]) or (@trashdir.get(params[:message_id]) or @maildir.get(params[:message_id]))))))))).data).html_part.body.decoded.force_encoding("UTF-8"))
[Escaped Output] Mail.new((@maildir.get(params[:message_id]) or (@maildir.get(params[:message_id]) or (@sentdir.get(params[:message_id]) or (@draftdir.get(params[:message_id]) or (@spamdir.get(params[:message_id]) or (@archivedir.get(params[:message_id]) or (@draftdir.get(params[:message_id]) or (@trashdir.get(params[:message_id]) or @maildir.get(params[:message_id]))))))))).data).body.decoded
[Escaped Output] label_tag(d4x_sanitizer(t("attachments")), nil, :class => "")
[Escaped Output] image_tag("attach.png", :title => "email attachment")
[Escaped Output] link_to(attachment.filename, ("/attachments/" + attachment.filename))
[Escaped Output] label_tag(number_to_human_size(File.size(File.join("public/attachments", attachment.filename)), :locale => "en"), nil, :class => "")
[Escaped Output] submit_tag(d4x_sanitizer(t("reply")), :name => "reply", :class => "button-d4x", :id => "reply")
[Escaped Output] submit_tag(d4x_sanitizer(t("reply all")), :name => "replyall", :class => "button-d4x none", :id => "replyall")
[Escaped Output] submit_tag(d4x_sanitizer(t("forward")), :name => "forward", :id => "forward", :class => "button-d4x none")
[Escaped Output] form_tag("reply-forward", :method => "post") do; [Escaped Output] hidden_field_tag(:message_id, params[:message_id]);[Escaped Output] hidden_field_tag(:folder, @foldername);[Escaped Output] label_tag(d4x_sanitizer(t("from")), nil, :class => "lcd view-message-labels");[Escaped Output] Mail.new((@maildir.get(params[:message_id]) or (@maildir.get(params[:message_id]) or (@sentdir.get(params[:message_id]) or (@draftdir.get(params[:message_id]) or (@spamdir.get(params[:message_id]) or (@archivedir.get(params[:message_id]) or (@draftdir.get(params[:message_id]) or (@trashdir.get(params[:message_id]) or @maildir.get(params[:message_id]))))))))).data).from;[Escaped Output] label_tag(d4x_sanitizer(t("subject")), nil, :class => "lcd view-message-labels");[Escaped Output] Mail.new((@maildir.get(params[:message_id]) or (@maildir.get(params[:message_id]) or (@sentdir.get(params[:message_id]) or (@draftdir.get(params[:message_id]) or (@spamdir.get(params[:message_id]) or (@archivedir.get(params[:message_id]) or (@draftdir.get(params[:message_id]) or (@trashdir.get(params[:message_id]) or @maildir.get(params[:message_id]))))))))).data).subject;[Escaped Output] label_tag(d4x_sanitizer(t("received")), nil, :class => "lcd view-message-labels");[Escaped Output] Mail.new((@maildir.get(params[:message_id]) or (@maildir.get(params[:message_id]) or (@sentdir.get(params[:message_id]) or (@draftdir.get(params[:message_id]) or (@spamdir.get(params[:message_id]) or (@archivedir.get(params[:message_id]) or (@draftdir.get(params[:message_id]) or (@trashdir.get(params[:message_id]) or @maildir.get(params[:message_id]))))))))).data).to;[Escaped Output] link_to_function(label_tag(d4x_sanitizer(t("headers")), nil, :class => "lcd view-message-labels"), "$('#message-header').toggle()");[Escaped Output] raw(cr2br(h(Mail.new((@maildir.get(params[:message_id]) or (@maildir.get(params[:message_id]) or (@sentdir.get(params[:message_id]) or (@draftdir.get(params[:message_id]) or (@spamdir.get(params[:message_id]) or (@archivedir.get(params[:message_id]) or (@draftdir.get(params[:message_id]) or (@trashdir.get(params[:message_id]) or @maildir.get(params[:message_id]))))))))).data).header)));[Escaped Output] label_tag(d4x_sanitizer(t("message")), nil, :class => "lcd view-message-labels");if Mail.new((@maildir.get(params[:message_id]) or (@maildir.get(params[:message_id]) or (@sentdir.get(params[:message_id]) or (@draftdir.get(params[:message_id]) or (@spamdir.get(params[:message_id]) or (@archivedir.get(params[:message_id]) or (@draftdir.get(params[:message_id]) or (@trashdir.get(params[:message_id]) or @maildir.get(params[:message_id]))))))))).data).present? then; if Mail.new((@maildir.get(params[:message_id]) or (@maildir.get(params[:message_id]) or (@sentdir.get(params[:message_id]) or (@draftdir.get(params[:message_id]) or (@spamdir.get(params[:message_id]) or (@archivedir.get(params[:message_id]) or (@draftdir.get(params[:message_id]) or (@trashdir.get(params[:message_id]) or @maildir.get(params[:message_id]))))))))).data).multipart? then; if Mail.new((@maildir.get(params[:message_id]) or (@maildir.get(params[:message_id]) or (@sentdir.get(params[:message_id]) or (@draftdir.get(params[:message_id]) or (@spamdir.get(params[:message_id]) or (@archivedir.get(params[:message_id]) or (@draftdir.get(params[:message_id]) or (@trashdir.get(params[:message_id]) or @maildir.get(params[:message_id]))))))))).data).html_part.present? then; email_html = Mail.new((@maildir.get(params[:message_id]) or (@maildir.get(params[:message_id]) or (@sentdir.get(params[:message_id]) or (@draftdir.get(params[:message_id]) or (@spamdir.get(params[:message_id]) or (@archivedir.get(params[:message_id]) or (@draftdir.get(params[:message_id]) or (@trashdir.get(params[:message_id]) or @maildir.get(params[:message_id]))))))))).data).html_part.body.decoded; [Escaped Output] raw(Mail.new((@maildir.get(params[:message_id]) or (@maildir.get(params[:message_id]) or (@sentdir.get(params[:message_id]) or (@draftdir.get(params[:message_id]) or (@spamdir.get(params[:message_id]) or (@archivedir.get(params[:message_id]) or (@draftdir.get(params[:message_id]) or (@trashdir.get(params[:message_id]) or @maildir.get(params[:message_id]))))))))).data).html_part.body.decoded.force_encoding("UTF-8")); end; else; email_text = Mail.new((@maildir.get(params[:message_id]) or (@maildir.get(params[:message_id]) or (@sentdir.get(params[:message_id]) or (@draftdir.get(params[:message_id]) or (@spamdir.get(params[:message_id]) or (@archivedir.get(params[:message_id]) or (@draftdir.get(params[:message_id]) or (@trashdir.get(params[:message_id]) or @maildir.get(params[:message_id]))))))))).data).body.decoded; [Escaped Output] Mail.new((@maildir.get(params[:message_id]) or (@maildir.get(params[:message_id]) or (@sentdir.get(params[:message_id]) or (@draftdir.get(params[:message_id]) or (@spamdir.get(params[:message_id]) or (@archivedir.get(params[:message_id]) or (@draftdir.get(params[:message_id]) or (@trashdir.get(params[:message_id]) or @maildir.get(params[:message_id]))))))))).data).body.decoded; end;end;if Mail.new((@maildir.get(params[:message_id]) or (@maildir.get(params[:message_id]) or (@sentdir.get(params[:message_id]) or (@draftdir.get(params[:message_id]) or (@spamdir.get(params[:message_id]) or (@archivedir.get(params[:message_id]) or (@draftdir.get(params[:message_id]) or (@trashdir.get(params[:message_id]) or @maildir.get(params[:message_id]))))))))).data).has_attachments? then; [Escaped Output] label_tag(d4x_sanitizer(t("attachments")), nil, :class => ""); Mail.new((@maildir.get(params[:message_id]) or (@maildir.get(params[:message_id]) or (@sentdir.get(params[:message_id]) or (@draftdir.get(params[:message_id]) or (@spamdir.get(params[:message_id]) or (@archivedir.get(params[:message_id]) or (@draftdir.get(params[:message_id]) or (@trashdir.get(params[:message_id]) or @maildir.get(params[:message_id]))))))))).data).attachments.each do; name = attachment.filename; directory = "public/attachments"; path = File.join("public/attachments", attachment.filename); File.open(File.join("public/attachments", attachment.filename), "wb") do; f.write(attachment.read); end; @filesize = File.size(File.join("public/attachments", attachment.filename)); [Escaped Output] image_tag("attach.png", :title => "email attachment"); [Escaped Output] link_to(attachment.filename, ("/attachments/" + attachment.filename)); [Escaped Output] label_tag(number_to_human_size(File.size(File.join("public/attachments", attachment.filename)), :locale => "en"), nil, :class => ""); end;end;[Escaped Output] submit_tag(d4x_sanitizer(t("reply")), :name => "reply", :class => "button-d4x", :id => "reply");[Escaped Output] submit_tag(d4x_sanitizer(t("reply all")), :name => "replyall", :class => "button-d4x none", :id => "replyall");[Escaped Output] submit_tag(d4x_sanitizer(t("forward")), :name => "forward", :id => "forward", :class => "button-d4x none"); end
[Escaped Output] javascript_include_tag("d4x-compose")
[Escaped Output] content_for(:head) do; [Escaped Output] javascript_include_tag("d4x-compose"); end
[Escaped Output] hidden_field_tag(:action, "reply")
[Escaped Output] hidden_field_tag(:reply_message, Mail.new((((((Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Trash"), false).get(params[:message_id]) or Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Spam"), false).get(params[:message_id])) or Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Archive"), false).get(params[:message_id])) or Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Drafts"), false).get(params[:message_id])) or Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Sent"), false).get(params[:message_id])) or Maildir.new(((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir), false).get(params[:message_id])).data).message_id)
[Escaped Output] label_tag("", nil, :class => "lcd")
[Escaped Output] text_field_tag(:to, Mail.new((((((Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Trash"), false).get(params[:message_id]) or Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Spam"), false).get(params[:message_id])) or Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Archive"), false).get(params[:message_id])) or Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Drafts"), false).get(params[:message_id])) or Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Sent"), false).get(params[:message_id])) or Maildir.new(((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir), false).get(params[:message_id])).data).from, :class => "form-control", :placeholder => d4x_sanitizer(t("TO")))
[Escaped Output] cycle("odd", "even")
[Escaped Output] check_box_tag(:selected, (((((contact.name + " ") + contact.surname) + " <") + contact.email.downcase) + ">"))
[Escaped Output] label_tag(contact.name, nil, :class => "lcd yellow")
[Escaped Output] label_tag(contact.surname, nil, :class => "lcd orange")
[Escaped Output] contact.email.downcase
[Escaped Output] label_tag("", nil, :class => "lcd")
[Escaped Output] text_field_tag(:cc, nil, :size => 86, :class => "form-control input_cc", :placeholder => d4x_sanitizer(t("CC")))
[Escaped Output] cycle("odd", "even")
[Escaped Output] check_box_tag(:selected, (((((contact.name + " ") + contact.surname) + " <") + contact.email.downcase) + ">"))
[Escaped Output] label_tag(contact.name, nil, :class => "lcd yellow")
[Escaped Output] label_tag(contact.surname, nil, :class => "lcd orange")
[Escaped Output] contact.email.downcase
[Escaped Output] label_tag("", nil, :class => "lcd yellow")
[Escaped Output] cycle("odd", "even")
[Escaped Output] check_box_tag(:selected, (((((contact.name + " ") + contact.surname) + " <") + contact.email.downcase) + ">"))
[Escaped Output] label_tag(contact.name, nil, :class => "lcd yellow")
[Escaped Output] label_tag(contact.surname, nil, :class => "lcd orange")
[Escaped Output] contact.email.downcase
[Escaped Output] text_field_tag(:bcc, nil, :size => 85, :class => "form-control input_bcc", :placeholder => d4x_sanitizer(t("BCC")))
[Escaped Output] text_field_tag(:subject, (("RE:" + Mail.new((((((Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Trash"), false).get(params[:message_id]) or Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Spam"), false).get(params[:message_id])) or Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Archive"), false).get(params[:message_id])) or Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Drafts"), false).get(params[:message_id])) or Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Sent"), false).get(params[:message_id])) or Maildir.new(((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir), false).get(params[:message_id])).data).subject) or "RE:"), :size => 90, :class => "form-control input_subject", :placeholder => d4x_sanitizer(t("subject")))
[Escaped Output] check_box_tag(:htmlmsg, nil, :checked)
[Escaped Output] label_tag(d4x_sanitizer(t("send plain text")), nil, :class => "lcd")
[Escaped Output] text_area_tag(:message, ((("---Original Message---<br /><br />" + Mail.new((((((Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Trash"), false).get(params[:message_id]) or Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Spam"), false).get(params[:message_id])) or Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Archive"), false).get(params[:message_id])) or Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Drafts"), false).get(params[:message_id])) or Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Sent"), false).get(params[:message_id])) or Maildir.new(((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir), false).get(params[:message_id])).data).html_part.body.decoded) or "---Original Message---") or ("---Original Message---" + Mail.new((((((Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Trash"), false).get(params[:message_id]) or Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Spam"), false).get(params[:message_id])) or Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Archive"), false).get(params[:message_id])) or Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Drafts"), false).get(params[:message_id])) or Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Sent"), false).get(params[:message_id])) or Maildir.new(((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir), false).get(params[:message_id])).data).body.decoded)), :size => "100x16", :class => "mceNoEditor d4x-control input_tarea")
[Escaped Output] text_area_tag(:message_html, ((("---Original Message---<br /><br />" + Mail.new((((((Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Trash"), false).get(params[:message_id]) or Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Spam"), false).get(params[:message_id])) or Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Archive"), false).get(params[:message_id])) or Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Drafts"), false).get(params[:message_id])) or Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Sent"), false).get(params[:message_id])) or Maildir.new(((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir), false).get(params[:message_id])).data).html_part.body.decoded) or "---Original Message---") or ("---Original Message---" + Mail.new((((((Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Trash"), false).get(params[:message_id]) or Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Spam"), false).get(params[:message_id])) or Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Archive"), false).get(params[:message_id])) or Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Drafts"), false).get(params[:message_id])) or Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Sent"), false).get(params[:message_id])) or Maildir.new(((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir), false).get(params[:message_id])).data).body.decoded)), :class => "tinymce input_tarea", :theme_advanced_toolbar_location => "top", :theme_advanced_toolbar_align => "left", :theme_advanced_statusbar_localtion => "bottom", :theme_advanced_button3_add => "tablecontrols", :plugins => "all", :available_languages => "en")
[Escaped Output] text_area_tag(:message, ((("---Original Message---<br /><br />" + Mail.new((((((Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Trash"), false).get(params[:message_id]) or Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Spam"), false).get(params[:message_id])) or Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Archive"), false).get(params[:message_id])) or Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Drafts"), false).get(params[:message_id])) or Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Sent"), false).get(params[:message_id])) or Maildir.new(((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir), false).get(params[:message_id])).data).html_part.body.decoded) or "---Original Message---") or ("---Original Message---" + Mail.new((((((Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Trash"), false).get(params[:message_id]) or Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Spam"), false).get(params[:message_id])) or Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Archive"), false).get(params[:message_id])) or Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Drafts"), false).get(params[:message_id])) or Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Sent"), false).get(params[:message_id])) or Maildir.new(((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir), false).get(params[:message_id])).data).body.decoded)), :size => "100x16", :class => "mceNoEditor d4x-control input_tarea")
[Escaped Output] text_area_tag(:message_html, ((("---Original Message---<br /><br />" + Mail.new((((((Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Trash"), false).get(params[:message_id]) or Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Spam"), false).get(params[:message_id])) or Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Archive"), false).get(params[:message_id])) or Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Drafts"), false).get(params[:message_id])) or Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Sent"), false).get(params[:message_id])) or Maildir.new(((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir), false).get(params[:message_id])).data).html_part.body.decoded) or "---Original Message---") or ("---Original Message---" + Mail.new((((((Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Trash"), false).get(params[:message_id]) or Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Spam"), false).get(params[:message_id])) or Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Archive"), false).get(params[:message_id])) or Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Drafts"), false).get(params[:message_id])) or Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Sent"), false).get(params[:message_id])) or Maildir.new(((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir), false).get(params[:message_id])).data).body.decoded)), :class => "tinymce input_tarea", :theme_advanced_toolbar_location => "top", :theme_advanced_toolbar_align => "left", :theme_advanced_statusbar_localtion => "bottom", :theme_advanced_button3_add => "tablecontrols", :plugins => "all", :available_languages => "en")
[Escaped Output] link_to_function(((image_tag("attach.png", :class => "bullet") + " ") + d4x_sanitizer(t("attach file(s)"))), "$('#attachments').toggle()", :class => "button-d4x right")
[Escaped Output] file_field_tag(:attachment, :class => "button-d4x")
[Escaped Output] file_field_tag(:attachment1, :class => "button-d4x")
[Escaped Output] file_field_tag(:attachment2, :class => "button-d4x")
[Escaped Output] file_field_tag(:attachment3, :class => "button-d4x")
[Escaped Output] file_field_tag(:attachment4, :class => "button-d4x")
[Escaped Output] submit_tag(d4x_sanitizer(t("save draft")), :name => "savedraft", :class => "button-d4x", :id => "savedraft")
[Escaped Output] submit_tag(d4x_sanitizer(t("discard")), :name => "discard", :class => "button-d4x", :id => "discard")
[Escaped Output] image_tag("post-spinner.gif", :id => "sending", :class => "none")
[Escaped Output] submit_tag(d4x_sanitizer(t("send")), :name => "send", :id => "send", :class => "button-d4x")
[Escaped Output] form_tag("actions", :method => "post", :multipart => "true") do; [Escaped Output] hidden_field_tag(:action, "reply");[Escaped Output] hidden_field_tag(:reply_message, Mail.new((((((Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Trash"), false).get(params[:message_id]) or Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Spam"), false).get(params[:message_id])) or Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Archive"), false).get(params[:message_id])) or Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Drafts"), false).get(params[:message_id])) or Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Sent"), false).get(params[:message_id])) or Maildir.new(((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir), false).get(params[:message_id])).data).message_id);[Escaped Output] label_tag("", nil, :class => "lcd");[Escaped Output] text_field_tag(:to, Mail.new((((((Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Trash"), false).get(params[:message_id]) or Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Spam"), false).get(params[:message_id])) or Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Archive"), false).get(params[:message_id])) or Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Drafts"), false).get(params[:message_id])) or Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Sent"), false).get(params[:message_id])) or Maildir.new(((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir), false).get(params[:message_id])).data).from, :class => "form-control", :placeholder => d4x_sanitizer(t("TO")));@contacts = current_user.contacts.order(:surname);current_user.contacts.order(:surname).each do; [Escaped Output] cycle("odd", "even");[Escaped Output] check_box_tag(:selected, (((((contact.name + " ") + contact.surname) + " <") + contact.email.downcase) + ">"));[Escaped Output] label_tag(contact.name, nil, :class => "lcd yellow");[Escaped Output] label_tag(contact.surname, nil, :class => "lcd orange");[Escaped Output] contact.email.downcase; end;[Escaped Output] label_tag("", nil, :class => "lcd");[Escaped Output] text_field_tag(:cc, nil, :size => 86, :class => "form-control input_cc", :placeholder => d4x_sanitizer(t("CC")));current_user.contacts.order(:surname).each do; [Escaped Output] cycle("odd", "even");[Escaped Output] check_box_tag(:selected, (((((contact.name + " ") + contact.surname) + " <") + contact.email.downcase) + ">"));[Escaped Output] label_tag(contact.name, nil, :class => "lcd yellow");[Escaped Output] label_tag(contact.surname, nil, :class => "lcd orange");[Escaped Output] contact.email.downcase; end;[Escaped Output] label_tag("", nil, :class => "lcd yellow");current_user.contacts.order(:surname).each do; [Escaped Output] cycle("odd", "even");[Escaped Output] check_box_tag(:selected, (((((contact.name + " ") + contact.surname) + " <") + contact.email.downcase) + ">"));[Escaped Output] label_tag(contact.name, nil, :class => "lcd yellow");[Escaped Output] label_tag(contact.surname, nil, :class => "lcd orange");[Escaped Output] contact.email.downcase; end;[Escaped Output] text_field_tag(:bcc, nil, :size => 85, :class => "form-control input_bcc", :placeholder => d4x_sanitizer(t("BCC")));[Escaped Output] text_field_tag(:subject, (("RE:" + Mail.new((((((Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Trash"), false).get(params[:message_id]) or Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Spam"), false).get(params[:message_id])) or Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Archive"), false).get(params[:message_id])) or Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Drafts"), false).get(params[:message_id])) or Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Sent"), false).get(params[:message_id])) or Maildir.new(((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir), false).get(params[:message_id])).data).subject) or "RE:"), :size => 90, :class => "form-control input_subject", :placeholder => d4x_sanitizer(t("subject")));[Escaped Output] check_box_tag(:htmlmsg, nil, :checked);[Escaped Output] label_tag(d4x_sanitizer(t("send plain text")), nil, :class => "lcd");if (("html" or "text") == "text") then; [Escaped Output] text_area_tag(:message, ((("---Original Message---<br /><br />" + Mail.new((((((Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Trash"), false).get(params[:message_id]) or Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Spam"), false).get(params[:message_id])) or Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Archive"), false).get(params[:message_id])) or Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Drafts"), false).get(params[:message_id])) or Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Sent"), false).get(params[:message_id])) or Maildir.new(((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir), false).get(params[:message_id])).data).html_part.body.decoded) or "---Original Message---") or ("---Original Message---" + Mail.new((((((Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Trash"), false).get(params[:message_id]) or Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Spam"), false).get(params[:message_id])) or Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Archive"), false).get(params[:message_id])) or Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Drafts"), false).get(params[:message_id])) or Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Sent"), false).get(params[:message_id])) or Maildir.new(((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir), false).get(params[:message_id])).data).body.decoded)), :size => "100x16", :class => "mceNoEditor d4x-control input_tarea"); [Escaped Output] text_area_tag(:message_html, ((("---Original Message---<br /><br />" + Mail.new((((((Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Trash"), false).get(params[:message_id]) or Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Spam"), false).get(params[:message_id])) or Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Archive"), false).get(params[:message_id])) or Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Drafts"), false).get(params[:message_id])) or Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Sent"), false).get(params[:message_id])) or Maildir.new(((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir), false).get(params[:message_id])).data).html_part.body.decoded) or "---Original Message---") or ("---Original Message---" + Mail.new((((((Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Trash"), false).get(params[:message_id]) or Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Spam"), false).get(params[:message_id])) or Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Archive"), false).get(params[:message_id])) or Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Drafts"), false).get(params[:message_id])) or Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Sent"), false).get(params[:message_id])) or Maildir.new(((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir), false).get(params[:message_id])).data).body.decoded)), :class => "tinymce input_tarea", :theme_advanced_toolbar_location => "top", :theme_advanced_toolbar_align => "left", :theme_advanced_statusbar_localtion => "bottom", :theme_advanced_button3_add => "tablecontrols", :plugins => "all", :available_languages => "en");else; if (("html" or "text") == "html") then; [Escaped Output] text_area_tag(:message, ((("---Original Message---<br /><br />" + Mail.new((((((Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Trash"), false).get(params[:message_id]) or Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Spam"), false).get(params[:message_id])) or Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Archive"), false).get(params[:message_id])) or Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Drafts"), false).get(params[:message_id])) or Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Sent"), false).get(params[:message_id])) or Maildir.new(((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir), false).get(params[:message_id])).data).html_part.body.decoded) or "---Original Message---") or ("---Original Message---" + Mail.new((((((Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Trash"), false).get(params[:message_id]) or Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Spam"), false).get(params[:message_id])) or Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Archive"), false).get(params[:message_id])) or Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Drafts"), false).get(params[:message_id])) or Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Sent"), false).get(params[:message_id])) or Maildir.new(((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir), false).get(params[:message_id])).data).body.decoded)), :size => "100x16", :class => "mceNoEditor d4x-control input_tarea"); [Escaped Output] text_area_tag(:message_html, ((("---Original Message---<br /><br />" + Mail.new((((((Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Trash"), false).get(params[:message_id]) or Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Spam"), false).get(params[:message_id])) or Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Archive"), false).get(params[:message_id])) or Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Drafts"), false).get(params[:message_id])) or Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Sent"), false).get(params[:message_id])) or Maildir.new(((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir), false).get(params[:message_id])).data).html_part.body.decoded) or "---Original Message---") or ("---Original Message---" + Mail.new((((((Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Trash"), false).get(params[:message_id]) or Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Spam"), false).get(params[:message_id])) or Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Archive"), false).get(params[:message_id])) or Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Drafts"), false).get(params[:message_id])) or Maildir.new((((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir) + ".Sent"), false).get(params[:message_id])) or Maildir.new(((MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.home + "/") + MailAccount.where(:user_id => current_user.id, :defaultbox => true).first.maildir), false).get(params[:message_id])).data).body.decoded)), :class => "tinymce input_tarea", :theme_advanced_toolbar_location => "top", :theme_advanced_toolbar_align => "left", :theme_advanced_statusbar_localtion => "bottom", :theme_advanced_button3_add => "tablecontrols", :plugins => "all", :available_languages => "en"); end;end;[Escaped Output] link_to_function(((image_tag("attach.png", :class => "bullet") + " ") + d4x_sanitizer(t("attach file(s)"))), "$('#attachments').toggle()", :class => "button-d4x right");[Escaped Output] file_field_tag(:attachment, :class => "button-d4x");[Escaped Output] file_field_tag(:attachment1, :class => "button-d4x");[Escaped Output] file_field_tag(:attachment2, :class => "button-d4x");[Escaped Output] file_field_tag(:attachment3, :class => "button-d4x");[Escaped Output] file_field_tag(:attachment4, :class => "button-d4x");[Escaped Output] submit_tag(d4x_sanitizer(t("save draft")), :name => "savedraft", :class => "button-d4x", :id => "savedraft");[Escaped Output] submit_tag(d4x_sanitizer(t("discard")), :name => "discard", :class => "button-d4x", :id => "discard");[Escaped Output] image_tag("post-spinner.gif", :id => "sending", :class => "none");[Escaped Output] submit_tag(d4x_sanitizer(t("send")), :name => "send", :id => "send", :class => "button-d4x"); end

agadanga/_agadanga_restore_message

[Escaped Output] javascript_include_tag("d4x-compose")
[Escaped Output] content_for(:head) do; [Escaped Output] javascript_include_tag("d4x-compose"); end
[Escaped Output] hidden_field_tag(:action, "reply")
[Escaped Output] hidden_field_tag(:reply_message, @message_id)
[Escaped Output] label_tag("", nil, :class => "lcd")
[Escaped Output] text_field_tag(:to, @to, :class => "form-control", :placeholder => d4x_sanitizer(t("TO")))
[Escaped Output] cycle("odd", "even")
[Escaped Output] check_box_tag(:selected, (((((contact.name + " ") + contact.surname) + " <") + contact.email.downcase) + ">"))
[Escaped Output] label_tag(contact.name, nil, :class => "lcd yellow")
[Escaped Output] label_tag(contact.surname, nil, :class => "lcd orange")
[Escaped Output] contact.email.downcase
[Escaped Output] label_tag("", nil, :class => "lcd")
[Escaped Output] text_field_tag(:cc, @cc, :size => 86, :class => "form-control input_cc", :placeholder => d4x_sanitizer(t("CC")))
[Escaped Output] cycle("odd", "even")
[Escaped Output] check_box_tag(:selected, (((((contact.name + " ") + contact.surname) + " <") + contact.email.downcase) + ">"))
[Escaped Output] label_tag(contact.name, nil, :class => "lcd yellow")
[Escaped Output] label_tag(contact.surname, nil, :class => "lcd orange")
[Escaped Output] contact.email.downcase
[Escaped Output] label_tag("", nil, :class => "lcd yellow")
[Escaped Output] cycle("odd", "even")
[Escaped Output] check_box_tag(:selected, (((((contact.name + " ") + contact.surname) + " <") + contact.email.downcase) + ">"))
[Escaped Output] label_tag(contact.name, nil, :class => "lcd yellow")
[Escaped Output] label_tag(contact.surname, nil, :class => "lcd orange")
[Escaped Output] contact.email.downcase
[Escaped Output] text_field_tag(:bcc, @bcc, :size => 85, :class => "form-control input_bcc", :placeholder => d4x_sanitizer(t("BCC")))
[Escaped Output] text_field_tag(:subject, @subject, :size => 90, :class => "form-control input_subject", :placeholder => d4x_sanitizer(t("subject")))
[Escaped Output] check_box_tag(:htmlmsg, nil, :checked)
[Escaped Output] label_tag(d4x_sanitizer(t("send plain text")), nil, :class => "lcd")
[Escaped Output] text_area_tag(:message, @message, :size => "100x16", :class => "mceNoEditor d4x-control input_tarea")
[Escaped Output] text_area_tag(:message_html, @message, :class => "tinymce input_tarea", :theme_advanced_toolbar_location => "top", :theme_advanced_toolbar_align => "left", :theme_advanced_statusbar_localtion => "bottom", :theme_advanced_button3_add => "tablecontrols", :plugins => "all", :available_languages => "en")
[Escaped Output] text_area_tag(:message, @message, :size => "100x16", :class => "mceNoEditor d4x-control input_tarea")
[Escaped Output] text_area_tag(:message_html, @message, :class => "tinymce input_tarea", :theme_advanced_toolbar_location => "top", :theme_advanced_toolbar_align => "left", :theme_advanced_statusbar_localtion => "bottom", :theme_advanced_button3_add => "tablecontrols", :plugins => "all", :available_languages => "en")
[Escaped Output] link_to_function(((image_tag("attach.png", :class => "bullet") + " ") + d4x_sanitizer(t("attach file(s)"))), "$('#attachments').toggle()", :class => "button-d4x right")
[Escaped Output] file_field_tag(:attachment, :class => "button-d4x")
[Escaped Output] file_field_tag(:attachment1, :class => "button-d4x")
[Escaped Output] file_field_tag(:attachment2, :class => "button-d4x")
[Escaped Output] file_field_tag(:attachment3, :class => "button-d4x")
[Escaped Output] file_field_tag(:attachment4, :class => "button-d4x")
[Escaped Output] submit_tag(d4x_sanitizer(t("save draft")), :name => "savedraft", :class => "button-d4x", :id => "savedraft")
[Escaped Output] submit_tag(d4x_sanitizer(t("discard")), :name => "discard", :class => "button-d4x", :id => "discard")
[Escaped Output] image_tag("post-spinner.gif", :id => "sending", :class => "none")
[Escaped Output] submit_tag(d4x_sanitizer(t("send")), :name => "send", :id => "send", :class => "button-d4x")
[Escaped Output] form_tag("actions", :method => "post", :multipart => "true") do; [Escaped Output] hidden_field_tag(:action, "reply");[Escaped Output] hidden_field_tag(:reply_message, @message_id);[Escaped Output] label_tag("", nil, :class => "lcd");[Escaped Output] text_field_tag(:to, @to, :class => "form-control", :placeholder => d4x_sanitizer(t("TO")));@contacts = current_user.contacts.order(:surname);@contacts.each do; [Escaped Output] cycle("odd", "even");[Escaped Output] check_box_tag(:selected, (((((contact.name + " ") + contact.surname) + " <") + contact.email.downcase) + ">"));[Escaped Output] label_tag(contact.name, nil, :class => "lcd yellow");[Escaped Output] label_tag(contact.surname, nil, :class => "lcd orange");[Escaped Output] contact.email.downcase; end;[Escaped Output] label_tag("", nil, :class => "lcd");[Escaped Output] text_field_tag(:cc, @cc, :size => 86, :class => "form-control input_cc", :placeholder => d4x_sanitizer(t("CC")));@contacts.each do; [Escaped Output] cycle("odd", "even");[Escaped Output] check_box_tag(:selected, (((((contact.name + " ") + contact.surname) + " <") + contact.email.downcase) + ">"));[Escaped Output] label_tag(contact.name, nil, :class => "lcd yellow");[Escaped Output] label_tag(contact.surname, nil, :class => "lcd orange");[Escaped Output] contact.email.downcase; end;[Escaped Output] label_tag("", nil, :class => "lcd yellow");@contacts.each do; [Escaped Output] cycle("odd", "even");[Escaped Output] check_box_tag(:selected, (((((contact.name + " ") + contact.surname) + " <") + contact.email.downcase) + ">"));[Escaped Output] label_tag(contact.name, nil, :class => "lcd yellow");[Escaped Output] label_tag(contact.surname, nil, :class => "lcd orange");[Escaped Output] contact.email.downcase; end;[Escaped Output] text_field_tag(:bcc, @bcc, :size => 85, :class => "form-control input_bcc", :placeholder => d4x_sanitizer(t("BCC")));[Escaped Output] text_field_tag(:subject, @subject, :size => 90, :class => "form-control input_subject", :placeholder => d4x_sanitizer(t("subject")));[Escaped Output] check_box_tag(:htmlmsg, nil, :checked);[Escaped Output] label_tag(d4x_sanitizer(t("send plain text")), nil, :class => "lcd");if (@type == "text") then; [Escaped Output] text_area_tag(:message, @message, :size => "100x16", :class => "mceNoEditor d4x-control input_tarea"); [Escaped Output] text_area_tag(:message_html, @message, :class => "tinymce input_tarea", :theme_advanced_toolbar_location => "top", :theme_advanced_toolbar_align => "left", :theme_advanced_statusbar_localtion => "bottom", :theme_advanced_button3_add => "tablecontrols", :plugins => "all", :available_languages => "en");else; if (@type == "html") then; [Escaped Output] text_area_tag(:message, @message, :size => "100x16", :class => "mceNoEditor d4x-control input_tarea"); [Escaped Output] text_area_tag(:message_html, @message, :class => "tinymce input_tarea", :theme_advanced_toolbar_location => "top", :theme_advanced_toolbar_align => "left", :theme_advanced_statusbar_localtion => "bottom", :theme_advanced_button3_add => "tablecontrols", :plugins => "all", :available_languages => "en"); end;end;[Escaped Output] link_to_function(((image_tag("attach.png", :class => "bullet") + " ") + d4x_sanitizer(t("attach file(s)"))), "$('#attachments').toggle()", :class => "button-d4x right");[Escaped Output] file_field_tag(:attachment, :class => "button-d4x");[Escaped Output] file_field_tag(:attachment1, :class => "button-d4x");[Escaped Output] file_field_tag(:attachment2, :class => "button-d4x");[Escaped Output] file_field_tag(:attachment3, :class => "button-d4x");[Escaped Output] file_field_tag(:attachment4, :class => "button-d4x");[Escaped Output] submit_tag(d4x_sanitizer(t("save draft")), :name => "savedraft", :class => "button-d4x", :id => "savedraft");[Escaped Output] submit_tag(d4x_sanitizer(t("discard")), :name => "discard", :class => "button-d4x", :id => "discard");[Escaped Output] image_tag("post-spinner.gif", :id => "sending", :class => "none");[Escaped Output] submit_tag(d4x_sanitizer(t("send")), :name => "send", :id => "send", :class => "button-d4x"); end

agadanga/_agadanga_role_menu

[Escaped Output] label_tag("MASTER", nil, :class => "lcd orange")
[Escaped Output] link_to(image_tag("monitor.png", :border => 0, :mouseover => "monitor.png", :class => "bullet", :title => "dashboard"), "/agadanga-dashboard")
[Escaped Output] @option = Option.find_by_name("MASTER_DD00R").value
[Escaped Output] link_to(image_tag("cog.png", :border => 0, :mouseover => "cog.png", :class => "bullet", :title => "global settings"), "/options")
[Escaped Output] link_to(image_tag("group.png", :border => 0, :mouseover => "group.png", :class => "bullet", :title => "registrations"), "/users")
[Escaped Output] link_to(image_tag("email.png", :border => 0, :mouseover => "email.png", :class => "bullet", :title => "mailboxes"), "/mailboxes")
[Escaped Output] link_to(image_tag("application_view_tile.png", :border => 0, :mouseover => "application_view_tile.png", :class => "bullet", :title => "products and services"), "/products")
[Escaped Output] label_tag("ADMIN", nil, :class => "lcd orange")
[Escaped Output] link_to(image_tag("monitor.png", :border => 0, :mouseover => "monitor.png", :class => "bullet", :title => "dashboard"), "/agadanga-dashboard")
[Escaped Output] label_tag("CPR", nil, :class => "lcd orange")
[Escaped Output] link_to(image_tag("monitor.png", :border => 0, :mouseover => "monitor.png", :class => "bullet", :title => "dashboard"), "/agadanga-dashboard")
[Escaped Output] label_tag("PR", nil, :class => "lcd orange")
[Escaped Output] link_to(image_tag("user_add.png", :border => 0, :mouseover => "user_add.png", :class => "bullet", :title => "requests"), "/requests")
[Escaped Output] label_tag("PRJ", nil, :class => "lcd orange")
[Escaped Output] link_to(image_tag("monitor.png", :border => 0, :mouseover => "monitor.png", :class => "bullet", :title => "dashboard"), "/agadanga-dashboard")

agadanga/_agadanga_row_titles

[Escaped Output] image_tag("flag.png", :size => "16x16", :title => d4x_sanitizer(t("flagged as important")), :class => "2px-margin-top")
[Escaped Output] check_box_tag(:select_all, false, :id => "select-all", :class => "2px-margin-top")
[Escaped Output] image_tag("attach.png", :title => d4x_sanitizer(t("has attachments")), :class => "2px-margin-top")
[Escaped Output] image_tag("email.png", :title => d4x_sanitizer(t("message unread")), :class => "")
[Escaped Output] image_tag("bullet_arrow_up.png", :title => d4x_sanitizer(t("from old to recent")), :class => "middle none")
[Escaped Output] label_tag(d4x_sanitizer(t("received")), nil, :class => "yellow")
[Escaped Output] image_tag("bullet_arrow_down.png", :title => d4x_sanitizer(t("from recent to old")), :class => "middle none")
[Escaped Output] image_tag("bullet_arrow_up.png", :title => d4x_sanitizer(t("sender_from_a_to_z")), :class => "middle none")
[Escaped Output] label_tag(d4x_sanitizer(t("from")), nil, :class => "yellow")
[Escaped Output] image_tag("bullet_arrow_down.png", :title => d4x_sanitizer(t("sender_from_z_to_a")), :class => "middle none")
[Escaped Output] image_tag("bullet_arrow_up.png", :title => d4x_sanitizer(t("subject_from_a_to_z")), :class => "middle none")
[Escaped Output] label_tag(d4x_sanitizer(t("subject")), nil, :class => "yellow")
[Escaped Output] image_tag("bullet_arrow_down.png", :title => d4x_sanitizer(t("subject_from_z_to_a")), :class => "middle none")

agadanga/_agadanga_row_titles.["Template:agadanga/agadanga_archivied"]

[Escaped Output] image_tag("flag.png", :size => "16x16", :title => d4x_sanitizer(t("flagged as important")), :class => "2px-margin-top")
[Escaped Output] check_box_tag(:select_all, false, :id => "select-all", :class => "2px-margin-top")
[Escaped Output] image_tag("attach.png", :title => d4x_sanitizer(t("has attachments")), :class => "2px-margin-top")
[Escaped Output] image_tag("email.png", :title => d4x_sanitizer(t("message unread")), :class => "")
[Escaped Output] image_tag("bullet_arrow_up.png", :title => d4x_sanitizer(t("from old to recent")), :class => "middle none")
[Escaped Output] label_tag(d4x_sanitizer(t("received")), nil, :class => "yellow")
[Escaped Output] image_tag("bullet_arrow_down.png", :title => d4x_sanitizer(t("from recent to old")), :class => "middle none")
[Escaped Output] image_tag("bullet_arrow_up.png", :title => d4x_sanitizer(t("sender_from_a_to_z")), :class => "middle none")
[Escaped Output] label_tag(d4x_sanitizer(t("from")), nil, :class => "yellow")
[Escaped Output] image_tag("bullet_arrow_down.png", :title => d4x_sanitizer(t("sender_from_z_to_a")), :class => "middle none")
[Escaped Output] image_tag("bullet_arrow_up.png", :title => d4x_sanitizer(t("subject_from_a_to_z")), :class => "middle none")
[Escaped Output] label_tag(d4x_sanitizer(t("subject")), nil, :class => "yellow")
[Escaped Output] image_tag("bullet_arrow_down.png", :title => d4x_sanitizer(t("subject_from_z_to_a")), :class => "middle none")

agadanga/_big_icons_all_active

[Escaped Output] image_tag("refresh.png", :size => "50x50", :class => "d4x-icon")
[Escaped Output] d4x_sanitizer(t("refresh"))
[Escaped Output] link_to("/agadanga-refresh") do; [Escaped Output] image_tag("refresh.png", :size => "50x50", :class => "d4x-icon");[Escaped Output] d4x_sanitizer(t("refresh")); end
[Escaped Output] image_tag("compose.png", :size => "50x50", :class => "d4x-icon")
[Escaped Output] d4x_sanitizer(t("compose"))
[Escaped Output] link_to("/agadanga-compose") do; [Escaped Output] image_tag("compose.png", :size => "50x50", :class => "d4x-icon");[Escaped Output] d4x_sanitizer(t("compose")); end
[Escaped Output] image_tag("reply.png", :size => "50x50", :class => "d4x-icon")
[Escaped Output] d4x_sanitizer(t("reply"))
[Escaped Output] link_to("/agadanga-reply") do; [Escaped Output] image_tag("reply.png", :size => "50x50", :class => "d4x-icon");[Escaped Output] d4x_sanitizer(t("reply")); end
[Escaped Output] submit_tag("flag", :type => :image, :src => "/images/flag.png", :height => 50, :name => "flag", :id => "flag", :class => "button-bigmenu")
[Escaped Output] d4x_sanitizer(t("mark"))
[Escaped Output] submit_tag("junk", :type => :image, :src => "/images/junk.png", :height => 50, :name => "junk", :id => "junk", :class => "button-bigmenu")
[Escaped Output] d4x_sanitizer(t("junk"))
[Escaped Output] submit_tag("archive", :type => :image, :src => "/images/archive3.png", :height => 50, :name => "archive", :id => "archive", :class => "button-bigmenu")
[Escaped Output] d4x_sanitizer(t("archive"))
[Escaped Output] submit_tag("delete", :type => :image, :src => "/images/trash4.png", :height => 50, :name => "delete", :id => "delete", :class => "button-bigmenu")
[Escaped Output] d4x_sanitizer(t("delete"))
[Escaped Output] image_tag("address-book2.png", :size => "50x50", :class => "d4x-icon")
[Escaped Output] d4x_sanitizer(t("address book"))
[Escaped Output] link_to("/agadanga-address-book") do; [Escaped Output] image_tag("address-book2.png", :size => "50x50", :class => "d4x-icon");[Escaped Output] d4x_sanitizer(t("address book")); end

agadanga/_big_icons_all_active.["Template:agadanga/agadanga_archivied"]

[Escaped Output] image_tag("refresh.png", :size => "50x50", :class => "d4x-icon")
[Escaped Output] d4x_sanitizer(t("refresh"))
[Escaped Output] link_to("/agadanga-refresh") do; [Escaped Output] image_tag("refresh.png", :size => "50x50", :class => "d4x-icon");[Escaped Output] d4x_sanitizer(t("refresh")); end
[Escaped Output] image_tag("compose.png", :size => "50x50", :class => "d4x-icon")
[Escaped Output] d4x_sanitizer(t("compose"))
[Escaped Output] link_to("/agadanga-compose") do; [Escaped Output] image_tag("compose.png", :size => "50x50", :class => "d4x-icon");[Escaped Output] d4x_sanitizer(t("compose")); end
[Escaped Output] image_tag("reply.png", :size => "50x50", :class => "d4x-icon")
[Escaped Output] d4x_sanitizer(t("reply"))
[Escaped Output] link_to("/agadanga-reply") do; [Escaped Output] image_tag("reply.png", :size => "50x50", :class => "d4x-icon");[Escaped Output] d4x_sanitizer(t("reply")); end
[Escaped Output] submit_tag("flag", :type => :image, :src => "/images/flag.png", :height => 50, :name => "flag", :id => "flag", :class => "button-bigmenu")
[Escaped Output] d4x_sanitizer(t("mark"))
[Escaped Output] submit_tag("junk", :type => :image, :src => "/images/junk.png", :height => 50, :name => "junk", :id => "junk", :class => "button-bigmenu")
[Escaped Output] d4x_sanitizer(t("junk"))
[Escaped Output] submit_tag("archive", :type => :image, :src => "/images/archive3.png", :height => 50, :name => "archive", :id => "archive", :class => "button-bigmenu")
[Escaped Output] d4x_sanitizer(t("archive"))
[Escaped Output] submit_tag("delete", :type => :image, :src => "/images/trash4.png", :height => 50, :name => "delete", :id => "delete", :class => "button-bigmenu")
[Escaped Output] d4x_sanitizer(t("delete"))
[Escaped Output] image_tag("address-book2.png", :size => "50x50", :class => "d4x-icon")
[Escaped Output] d4x_sanitizer(t("address book"))
[Escaped Output] link_to("/agadanga-address-book") do; [Escaped Output] image_tag("address-book2.png", :size => "50x50", :class => "d4x-icon");[Escaped Output] d4x_sanitizer(t("address book")); end

agadanga/_big_icons_some_active

[Escaped Output] image_tag("refresh.png", :size => "50x50", :class => "d4x-icon")
[Escaped Output] d4x_sanitizer(t("refresh"))
[Escaped Output] link_to("/agadanga-refresh") do; [Escaped Output] image_tag("refresh.png", :size => "50x50", :class => "d4x-icon");[Escaped Output] d4x_sanitizer(t("refresh")); end
[Escaped Output] image_tag("compose.png", :size => "50x50", :class => "d4x-icon")
[Escaped Output] d4x_sanitizer(t("compose"))
[Escaped Output] link_to("/agadanga-compose") do; [Escaped Output] image_tag("compose.png", :size => "50x50", :class => "d4x-icon");[Escaped Output] d4x_sanitizer(t("compose")); end
[Escaped Output] image_tag("reply-deact.png", :size => "50x50", :class => "d4x-icon")
[Escaped Output] d4x_sanitizer(t("reply"))
[Escaped Output] image_tag("flag-deact.png", :size => "50x50", :class => "d4x-icon")
[Escaped Output] d4x_sanitizer(t("mark"))
[Escaped Output] image_tag("junk-deact.png", :size => "50x50", :class => "d4x-icon")
[Escaped Output] d4x_sanitizer(t("junk"))
[Escaped Output] image_tag("archive-deact.png", :size => "50x50", :class => "d4x-icon")
[Escaped Output] d4x_sanitizer(t("archive"))
[Escaped Output] image_tag("trash-deact.png", :size => "50x50", :class => "d4x-icon")
[Escaped Output] d4x_sanitizer(t("delete"))
[Escaped Output] image_tag("address-book2.png", :size => "50x50", :class => "d4x-icon")
[Escaped Output] d4x_sanitizer(t("address book"))
[Escaped Output] link_to("/agadanga-address-book") do; [Escaped Output] image_tag("address-book2.png", :size => "50x50", :class => "d4x-icon");[Escaped Output] d4x_sanitizer(t("address book")); end

agadanga/_big_icons_some_active.["Template:agadanga/agadanga_address_book"]

[Escaped Output] image_tag("refresh.png", :size => "50x50", :class => "d4x-icon")
[Escaped Output] d4x_sanitizer(t("refresh"))
[Escaped Output] link_to("/agadanga-refresh") do; [Escaped Output] image_tag("refresh.png", :size => "50x50", :class => "d4x-icon");[Escaped Output] d4x_sanitizer(t("refresh")); end
[Escaped Output] image_tag("compose.png", :size => "50x50", :class => "d4x-icon")
[Escaped Output] d4x_sanitizer(t("compose"))
[Escaped Output] link_to("/agadanga-compose") do; [Escaped Output] image_tag("compose.png", :size => "50x50", :class => "d4x-icon");[Escaped Output] d4x_sanitizer(t("compose")); end
[Escaped Output] image_tag("reply-deact.png", :size => "50x50", :class => "d4x-icon")
[Escaped Output] d4x_sanitizer(t("reply"))
[Escaped Output] image_tag("flag-deact.png", :size => "50x50", :class => "d4x-icon")
[Escaped Output] d4x_sanitizer(t("mark"))
[Escaped Output] image_tag("junk-deact.png", :size => "50x50", :class => "d4x-icon")
[Escaped Output] d4x_sanitizer(t("junk"))
[Escaped Output] image_tag("archive-deact.png", :size => "50x50", :class => "d4x-icon")
[Escaped Output] d4x_sanitizer(t("archive"))
[Escaped Output] image_tag("trash-deact.png", :size => "50x50", :class => "d4x-icon")
[Escaped Output] d4x_sanitizer(t("delete"))
[Escaped Output] image_tag("address-book2.png", :size => "50x50", :class => "d4x-icon")
[Escaped Output] d4x_sanitizer(t("address book"))
[Escaped Output] link_to("/agadanga-address-book") do; [Escaped Output] image_tag("address-book2.png", :size => "50x50", :class => "d4x-icon");[Escaped Output] d4x_sanitizer(t("address book")); end

agadanga/_messages_actions

[Escaped Output] select(:uberactions, nil, options_for_select([[d4x_sanitizer(t("mark selected as read")), "3"], [d4x_sanitizer(t("mark selected as unread")), "2"], [d4x_sanitizer(t("flag selected with star")), "4"], [d4x_sanitizer(t("remove star from selected")), "5"], [d4x_sanitizer(t("move selected to trash")), "1"], [d4x_sanitizer(t("delete selected")), "DD"], [d4x_sanitizer(t("make folder read")), "6"], [d4x_sanitizer(t("make folder unread")), "7"], [d4x_sanitizer(t("archive selected")), "ZIP"], [d4x_sanitizer(t("mark as junk")), "JK"]], "3"), {}, :class => "col-sm-2 select2 form-control input-transparent")
[Escaped Output] select(:dest_folder, nil, options_for_select([[d4x_sanitizer(t("trash")), "trash"], [d4x_sanitizer(t("sent")), "sent"], [d4x_sanitizer(t("draft")), "drafts"], [d4x_sanitizer(t("archive")), "archive"], [d4x_sanitizer(t("important")), "importants"], [d4x_sanitizer(t("junk")), "junk"], [d4x_sanitizer(t("inbox")), "inbox"]], "trash"), {}, :class => "none")
[Escaped Output] submit_tag(t("apply"), :name => "apply", :id => "apply", :class => "btn btn-sm btn-outline-warning")

agadanga/_messages_actions.["Template:agadanga/agadanga_archivied"]

[Escaped Output] select(:uberactions, nil, options_for_select([[d4x_sanitizer(t("mark selected as read")), "3"], [d4x_sanitizer(t("mark selected as unread")), "2"], [d4x_sanitizer(t("flag selected with star")), "4"], [d4x_sanitizer(t("remove star from selected")), "5"], [d4x_sanitizer(t("move selected to trash")), "1"], [d4x_sanitizer(t("delete selected")), "DD"], [d4x_sanitizer(t("make folder read")), "6"], [d4x_sanitizer(t("make folder unread")), "7"], [d4x_sanitizer(t("archive selected")), "ZIP"], [d4x_sanitizer(t("mark as junk")), "JK"]], "3"), {}, :class => "col-sm-2 select2 form-control input-transparent")
[Escaped Output] select(:dest_folder, nil, options_for_select([[d4x_sanitizer(t("trash")), "trash"], [d4x_sanitizer(t("sent")), "sent"], [d4x_sanitizer(t("draft")), "drafts"], [d4x_sanitizer(t("archive")), "archive"], [d4x_sanitizer(t("important")), "importants"], [d4x_sanitizer(t("junk")), "junk"], [d4x_sanitizer(t("inbox")), "inbox"]], "trash"), {}, :class => "none")
[Escaped Output] submit_tag(t("apply"), :name => "apply", :id => "apply", :class => "btn btn-sm btn-outline-warning")

agadanga/_messages_actionsNEWOK

[Escaped Output] select(:uberactions, nil, options_for_select([[d4x_sanitizer(t("mark selected as read")), "3"], [d4x_sanitizer(t("mark selected as unread")), "2"], [d4x_sanitizer(t("flag selected with star")), "4"], [d4x_sanitizer(t("remove star from selected")), "5"], [d4x_sanitizer(t("move selected to trash")), "1"], [d4x_sanitizer(t("delete selected")), "DD"], [d4x_sanitizer(t("make folder read")), "6"], [d4x_sanitizer(t("make folder unread")), "7"], [d4x_sanitizer(t("archive selected")), "ZIP"], [d4x_sanitizer(t("mark as junk")), "JK"]], "3"))
[Escaped Output] select(:dest_folder, nil, options_for_select([[d4x_sanitizer(t("trash")), "trash"], [d4x_sanitizer(t("sent")), "sent"], [d4x_sanitizer(t("draft")), "drafts"], [d4x_sanitizer(t("archive")), "archive"], [d4x_sanitizer(t("important")), "importants"], [d4x_sanitizer(t("junk")), "junk"], [d4x_sanitizer(t("inbox")), "inbox"]], "trash"), {}, :class => "none")
[Escaped Output] submit_tag(t("apply"), :name => "apply", :id => "apply", :class => "button-agadanga")

agadanga/_messages_actions_ALL_ACTIONS

[Escaped Output] select(:uberactions, nil, options_for_select([[d4x_sanitizer(t("mark selected as read")), "3"], [d4x_sanitizer(t("mark selected as unread")), "2"], [d4x_sanitizer(t("flag selected with star")), "4"], [d4x_sanitizer(t("remove star from selected")), "5"], [d4x_sanitizer(t("move selected to trash")), "1"], [d4x_sanitizer(t("delete selected")), "DD"], [d4x_sanitizer(t("make folder read")), "6"], [d4x_sanitizer(t("make folder unread")), "7"], [d4x_sanitizer(t("copy to folder")), "8"], [d4x_sanitizer(t("move to folder")), "9"], [d4x_sanitizer(t("archive selected")), "ZIP"], [d4x_sanitizer(t("mark as junk")), "JK"]], "3"))
[Escaped Output] select(:dest_folder, nil, options_for_select([[d4x_sanitizer(t("trash")), "trash"], [d4x_sanitizer(t("sent")), "sent"], [d4x_sanitizer(t("draft")), "drafts"], [d4x_sanitizer(t("archive")), "archive"], [d4x_sanitizer(t("important")), "importants"], [d4x_sanitizer(t("junk")), "junk"], [d4x_sanitizer(t("inbox")), "inbox"]], "trash"), {}, :class => "none")
[Escaped Output] submit_tag(t("apply"), :name => "apply", :id => "apply", :class => "button-agadanga")

agadanga/_no_folder_selected

[Escaped Output] image_tag("archive7.png", :size => "40x40", :class => "left folder-icon")
[Escaped Output] label_tag(d4x_sanitizer(t("inbox")), nil, :class => "folder-name")
[Escaped Output] image_tag("agared-checking-folder.gif", :id => "checking-current", :class => "none")
[Escaped Output] image_tag("agalight-checking-folder.gif", :id => "checking-current", :class => "none")
[Escaped Output] image_tag("agablue-checking-folder.gif", :id => "checking-current", :class => "none")
[Escaped Output] image_tag("agandanga-checking-folder.gif", :id => "checking-current", :class => "none")
[Escaped Output] image_tag("agaevo-checking-folder.gif", :id => "checking-current", :class => "none")
[Escaped Output] @tot_inbox
[Escaped Output] link_to("/agadanga-inbox") do; [Escaped Output] image_tag("archive7.png", :size => "40x40", :class => "left folder-icon");[Escaped Output] label_tag(d4x_sanitizer(t("inbox")), nil, :class => "folder-name");if (current_user.theme == "agared") then; [Escaped Output] image_tag("agared-checking-folder.gif", :id => "checking-current", :class => "none");else; if (current_user.theme == "agalight") then; [Escaped Output] image_tag("agalight-checking-folder.gif", :id => "checking-current", :class => "none"); else; if (current_user.theme == "agablue") then; [Escaped Output] image_tag("agablue-checking-folder.gif", :id => "checking-current", :class => "none"); else; if (current_user.theme == "agadanga") then; [Escaped Output] image_tag("agandanga-checking-folder.gif", :id => "checking-current", :class => "none"); else; if (current_user.theme == "agaevo") then; [Escaped Output] image_tag("agaevo-checking-folder.gif", :id => "checking-current", :class => "none"); end; end; end; end;end;[Escaped Output] @tot_inbox; end
[Escaped Output] image_tag("sent.png", :size => "40x40", :class => "left folder-icon")
[Escaped Output] label_tag(d4x_sanitizer(t("sent")), nil, :class => "folder-name")
[Escaped Output] @tot_sent
[Escaped Output] link_to("/agadanga-sent") do; [Escaped Output] image_tag("sent.png", :size => "40x40", :class => "left folder-icon");[Escaped Output] label_tag(d4x_sanitizer(t("sent")), nil, :class => "folder-name");[Escaped Output] @tot_sent; end
[Escaped Output] image_tag("compose2.png", :size => "40x40", :class => "left folder-icon")
[Escaped Output] label_tag(d4x_sanitizer(t("draft")), nil, :class => "folder-name")
[Escaped Output] @tot_draft
[Escaped Output] link_to("/agadanga-drafts") do; [Escaped Output] image_tag("compose2.png", :size => "40x40", :class => "left folder-icon");[Escaped Output] label_tag(d4x_sanitizer(t("draft")), nil, :class => "folder-name");[Escaped Output] @tot_draft; end
[Escaped Output] image_tag("junk.png", :size => "40x40", :class => "left folder-icon")
[Escaped Output] label_tag(d4x_sanitizer(t("junk")), nil, :class => "folder-name")
[Escaped Output] @tot_spam
[Escaped Output] link_to("/agadanga-junk") do; [Escaped Output] image_tag("junk.png", :size => "40x40", :class => "left folder-icon");[Escaped Output] label_tag(d4x_sanitizer(t("junk")), nil, :class => "folder-name");[Escaped Output] @tot_spam; end
[Escaped Output] image_tag("flag.png", :size => "40x40", :class => "left folder-icon")
[Escaped Output] label_tag(d4x_sanitizer(t("important")), nil, :class => "folder-name")
[Escaped Output] @tot_important
[Escaped Output] link_to("/agadanga-important") do; [Escaped Output] image_tag("flag.png", :size => "40x40", :class => "left folder-icon");[Escaped Output] label_tag(d4x_sanitizer(t("important")), nil, :class => "folder-name");[Escaped Output] @tot_important; end
[Escaped Output] image_tag("archive3.png", :size => "40x40", :class => "left folder-icon")
[Escaped Output] label_tag(d4x_sanitizer(t("archive")), nil, :class => "folder-name")
[Escaped Output] @tot_archivied
[Escaped Output] link_to("/agadanga-archivied") do; [Escaped Output] image_tag("archive3.png", :size => "40x40", :class => "left folder-icon");[Escaped Output] label_tag(d4x_sanitizer(t("archive")), nil, :class => "folder-name");[Escaped Output] @tot_archivied; end
[Escaped Output] image_tag("trash4.png", :size => "40x40", :class => "left folder-icon")
[Escaped Output] label_tag(d4x_sanitizer(t("trash")), nil, :class => "folder-name")
[Escaped Output] @tot_trash
[Escaped Output] link_to("/agadanga-trash") do; [Escaped Output] image_tag("trash4.png", :size => "40x40", :class => "left folder-icon");[Escaped Output] label_tag(d4x_sanitizer(t("trash")), nil, :class => "folder-name");[Escaped Output] @tot_trash; end

agadanga/_no_folder_selected.["Template:agadanga/agadanga_address_book"]

[Escaped Output] image_tag("archive7.png", :size => "40x40", :class => "left folder-icon")
[Escaped Output] label_tag(d4x_sanitizer(t("inbox")), nil, :class => "folder-name")
[Escaped Output] image_tag("agared-checking-folder.gif", :id => "checking-current", :class => "none")
[Escaped Output] image_tag("agalight-checking-folder.gif", :id => "checking-current", :class => "none")
[Escaped Output] image_tag("agablue-checking-folder.gif", :id => "checking-current", :class => "none")
[Escaped Output] image_tag("agandanga-checking-folder.gif", :id => "checking-current", :class => "none")
[Escaped Output] image_tag("agaevo-checking-folder.gif", :id => "checking-current", :class => "none")
[Escaped Output] @tot_inbox
[Escaped Output] link_to("/agadanga-inbox") do; [Escaped Output] image_tag("archive7.png", :size => "40x40", :class => "left folder-icon");[Escaped Output] label_tag(d4x_sanitizer(t("inbox")), nil, :class => "folder-name");if (current_user.theme == "agared") then; [Escaped Output] image_tag("agared-checking-folder.gif", :id => "checking-current", :class => "none");else; if (current_user.theme == "agalight") then; [Escaped Output] image_tag("agalight-checking-folder.gif", :id => "checking-current", :class => "none"); else; if (current_user.theme == "agablue") then; [Escaped Output] image_tag("agablue-checking-folder.gif", :id => "checking-current", :class => "none"); else; if (current_user.theme == "agadanga") then; [Escaped Output] image_tag("agandanga-checking-folder.gif", :id => "checking-current", :class => "none"); else; if (current_user.theme == "agaevo") then; [Escaped Output] image_tag("agaevo-checking-folder.gif", :id => "checking-current", :class => "none"); end; end; end; end;end;[Escaped Output] @tot_inbox; end
[Escaped Output] image_tag("sent.png", :size => "40x40", :class => "left folder-icon")
[Escaped Output] label_tag(d4x_sanitizer(t("sent")), nil, :class => "folder-name")
[Escaped Output] @tot_sent
[Escaped Output] link_to("/agadanga-sent") do; [Escaped Output] image_tag("sent.png", :size => "40x40", :class => "left folder-icon");[Escaped Output] label_tag(d4x_sanitizer(t("sent")), nil, :class => "folder-name");[Escaped Output] @tot_sent; end
[Escaped Output] image_tag("compose2.png", :size => "40x40", :class => "left folder-icon")
[Escaped Output] label_tag(d4x_sanitizer(t("draft")), nil, :class => "folder-name")
[Escaped Output] @tot_draft
[Escaped Output] link_to("/agadanga-drafts") do; [Escaped Output] image_tag("compose2.png", :size => "40x40", :class => "left folder-icon");[Escaped Output] label_tag(d4x_sanitizer(t("draft")), nil, :class => "folder-name");[Escaped Output] @tot_draft; end
[Escaped Output] image_tag("junk.png", :size => "40x40", :class => "left folder-icon")
[Escaped Output] label_tag(d4x_sanitizer(t("junk")), nil, :class => "folder-name")
[Escaped Output] @tot_spam
[Escaped Output] link_to("/agadanga-junk") do; [Escaped Output] image_tag("junk.png", :size => "40x40", :class => "left folder-icon");[Escaped Output] label_tag(d4x_sanitizer(t("junk")), nil, :class => "folder-name");[Escaped Output] @tot_spam; end
[Escaped Output] image_tag("flag.png", :size => "40x40", :class => "left folder-icon")
[Escaped Output] label_tag(d4x_sanitizer(t("important")), nil, :class => "folder-name")
[Escaped Output] @tot_important
[Escaped Output] link_to("/agadanga-important") do; [Escaped Output] image_tag("flag.png", :size => "40x40", :class => "left folder-icon");[Escaped Output] label_tag(d4x_sanitizer(t("important")), nil, :class => "folder-name");[Escaped Output] @tot_important; end
[Escaped Output] image_tag("archive3.png", :size => "40x40", :class => "left folder-icon")
[Escaped Output] label_tag(d4x_sanitizer(t("archive")), nil, :class => "folder-name")
[Escaped Output] @tot_archivied
[Escaped Output] link_to("/agadanga-archivied") do; [Escaped Output] image_tag("archive3.png", :size => "40x40", :class => "left folder-icon");[Escaped Output] label_tag(d4x_sanitizer(t("archive")), nil, :class => "folder-name");[Escaped Output] @tot_archivied; end
[Escaped Output] image_tag("trash4.png", :size => "40x40", :class => "left folder-icon")
[Escaped Output] label_tag(d4x_sanitizer(t("trash")), nil, :class => "folder-name")
[Escaped Output] @tot_trash
[Escaped Output] link_to("/agadanga-trash") do; [Escaped Output] image_tag("trash4.png", :size => "40x40", :class => "left folder-icon");[Escaped Output] label_tag(d4x_sanitizer(t("trash")), nil, :class => "folder-name");[Escaped Output] @tot_trash; end

agadanga/agadanga_address_book

[Escaped Output] render(partial => "no_folder_selected", {})
[Escaped Output] content_for(:folders_list) do; [Escaped Output] render(partial => "no_folder_selected", {}); end
[Escaped Output] render(partial => "big_icons_some_active", {})
[Escaped Output] content_for(:big_icons_menu) do; [Escaped Output] render(partial => "big_icons_some_active", {}); end
[Escaped Output] f.text_field(:name, :class => "def-input agadanga-name center ", :value => t("Insert First Name"))
[Escaped Output] f.text_field(:surname, :class => "def-input agadanga-surname center", :value => t("Last Name"))
[Escaped Output] f.email_field(:email, :class => "def-input agadanga-email center", :value => t("e-Mail Address"))
[Escaped Output] f.submit("add", :class => "button-agadanga right top", :id => "add-contact")
[Escaped Output] f.file_field(:photo, :class => "wrapper_image roundimage round-corners5")
[Escaped Output] image_tag("missing_avatar.png", :size => "60x60", :class => "roundimage round-corners5 agadanga-avi")
[Escaped Output] label_tag(d4x_sanitizer(t("age")), nil, :class => "lcd")
[Escaped Output] label_tag(d4x_sanitizer(t("sex")), nil, :class => "lcd")
[Escaped Output] label_tag(d4x_sanitizer(t("location")), nil, :class => "lcd")
[Escaped Output] f.text_field(:age, :class => "def-input agadanga-age")
[Escaped Output] f.select(:gender, options_for_select([[t("male"), "M"], [t("female"), "F"], [t("choose"), "0"]], "0"), :class => "thin-control", :size => "20")
[Escaped Output] f.select(:country, options_for_select([[t("choose"), " "], ["Afghanistan", "AF"], ["Albania", "AL"], ["Algeria", "DZ"], ["American Samoa", "AS"], ["Andorra", "AD"], ["Angola", "AO"], ["Anguilla", "AI"], ["Antarctica", "AQ"], ["Antigua & Barbuda", "AG"], ["Argentina", "AR"], ["Armenia", "AM"], ["Aruba", "AW"], ["Australia", "AU"], ["Austria", "AT"], ["Azerbaijan", "AZ"], ["Bahamas", "BS"], ["Bahrain", "BH"], ["Bangladesh", "BD"], ["Barbados", "BB"], ["Belarus", "BY"], ["Belgium", "BE"], ["Belize", "BZ"], ["Benin", "BJ"], ["Bermuda", "BM"], ["Bhutan", "BT"], ["Bolivia", "BO"], ["Bosnia and Herzeg.", "BA"], ["Botswana", "BW"], ["Bouvet Island", "BV"], ["Brazil", "BR"], ["British Ind. Ocean", "IO"], ["Brunei Darussalam", "BN"], ["Bulgaria", "BG"], ["Burkina Faso", "BF"], ["Burundi", "BI"], ["Cambodia", "KH"], ["Cameroon", "CM"], ["Canada", "CA"], ["Cape Verde", "CV"], ["Cayman Islands", "KY"], ["Central Afr.Republic", "CF"], ["Chad", "TD"], ["Chile", "CL"], ["China", "CN"], ["Christmas Island", "CX"], ["Cocos Islands", "CC"], ["Colombia", "CO"], ["Comoros", "KM"], ["Congo", "CG"], ["Congo, Republic of", "CD"], ["Cook Islands", "CK"], ["Costa Rica", "CR"], ["Cote d`Ivoire", "CI"], ["Croatia (Hrvatska)", "HR"], ["Cuba", "CU"], ["Cyprus", "CY"], ["Czech Republic", "CZ"], ["Denmark", "DK"], ["Djibouti", "DJ"], ["Dominica", "DM"], ["Dominican Republic", "DO"], ["East Timor", "TP"], ["Ecuador", "EC"], ["Egypt", "EG"], ["El Salvador", "SV"], ["Equatorial Guinea", "GQ"], ["Eritrea", "ER"], ["Estonia", "EE"], ["Ethiopia", "ET"], ["Falkland Islands", "FK"], ["Faroe Islands", "FO"], ["Fiji", "FJ"], ["Finland", "FI"], ["France", "FR"], ["France, Metropol.", "FX"], ["French Guiana", "GF"], ["French Polynesia", "PF"], ["French Sout Terr.", "TF"], ["Gabon", "GA"], ["Gambia", "GM"], ["Georgia", "GE"], ["Germany", "DE"], ["Ghana", "GH"], ["Gibraltar", "GI"], ["Greece", "GR"], ["Greenland", "GL"], ["Grenada", "GD"], ["Guadeloupe", "GP"], ["Guam", "GU"], ["Guatemala", "GT"], ["Guinea", "GN"], ["Guinea-Bissau", "GW"], ["Guyana", "GY"], ["Haiti", "HT"], ["Heard Mc Donald", "HM"], ["Holy See (Vatican)", "VA"], ["Honduras", "HN"], ["Hong Kong", "HK"], ["Hungary", "HU"], ["Iceland", "IS"], ["India", "IN"], ["Indonesia", "ID"], ["Iran", "IR"], ["Iraq", "IQ"], ["Ireland", "IE"], ["Israel", "IL"], ["Italy", "IT"], ["Jamaica", "JM"], ["Japan", "JP"], ["Jordan", "JO"], ["Kazakhstan", "KZ"], ["Kenya", "KE"], ["Kiribati", "KI"], ["Korea, Democratic", "KP"], ["Korea, Republic of", "KR"], ["Kuwait", "KW"], ["Kyrgyzstan", "KG"], ["Lao Peoples", "LA"], ["Latvia", "LV"], ["Lebanon", "LB"], ["Lesotho", "LS"], ["Liberia", "LR"], ["Libyan", "LY"], ["Liechtenstein", "LI"], ["Lithuania", "LT"], ["Luxembourg", "LU"], ["Macau", "MO"], ["Macedonia", "MK"], ["Madagascar", "MG"], ["Malawi", "MW"], ["Malaysia", "MY"], ["Maldives", "MV"], ["Mali", "ML"], ["Malta", "MT"], ["Marshall Islands", "MH"], ["Martinique", "MQ"], ["Mauritania", "MR"], ["Mauritius", "MU"], ["Mayotte", "YT"], ["Mexico", "MX"], ["Micronesia", "FM"], ["Moldova", "MD"], ["Monaco", "MC"], ["Mongolia", "MN"], ["Montserrat", "MS"], ["Morocco", "MA"], ["Mozambique", "MZ"], ["Myanmar", "MM"], ["Namibia", "NA"], ["Nauru", "NR"], ["Nepal", "NP"], ["Netherlands", "NL"], ["Netherlands Antilles", "AN"], ["New Caledonia", "NC"], ["New Zealand", "NZ"], ["Nicaragua", "NI"], ["Niger", "NE"], ["Nigeria", "NG"], ["Niue", "NU"], ["Norfolk Island", "NF"], ["Northern Mariana Isl", "MP"], ["Norway", "NO"], ["Oman", "OM"], ["Pakistan", "PK"], ["Palau", "PW"], ["Panama", "PA"], ["Papua New Guinea", "PG"], ["Paraguay", "PY"], ["Peru", "PE"], ["Philippines", "PH"], ["Pitcairn", "PN"], ["Poland", "PL"], ["Portugal", "PT"], ["Puerto Rico", "PR"], ["Qatar", "QA"], ["Reunion", "RE"], ["Romania", "RO"], ["Russian Federation", "RU"], ["Rwanda", "RW"], ["Saint Kitts & Nevis", "KN"], ["Saint LUCIA", "LC"], ["Saint Vincent", "VC"], ["Samoa", "WS"], ["San Marino", "SM"], ["Sao Tome & Principe", "ST"], ["Saudi Arabia", "SA"], ["Senegal", "SN"], ["Seychelles", "SC"], ["Sierra Leone", "SL"], ["Singapore", "SG"], ["Slovakia", "SK"], ["Slovenia", "SI"], ["Solomon Islands", "SB"], ["Somalia", "SO"], ["South Africa", "ZA"], ["South Georgia", "GS"], ["Spain", "ES"], ["Sri Lanka", "LK"], ["St. Helena", "SH"], ["St.Pierre & Miquelon", "PM"], ["Sudan", "SD"], ["Suriname", "SR"], ["Svalbard", "SJ"], ["Swaziland", "SZ"], ["Sweden", "SE"], ["Switzerland", "CH"], ["Syrian Arab Republic", "SY"], ["Taiwan", "TW"], ["Tajikistan", "TJ"], ["Tanzania", "TZ"], ["Thailand", "TH"], ["Togo", "TG"], ["Tokelau", "TK"], ["Tonga", "TO"], ["Trinidad and Tobago", "TT"], ["Tunisia", "TN"], ["Turkey", "TR"], ["Turkmenistan", "TM"], ["Turks & Caicos Isl.", "TC"], ["Tuvalu", "TV"], ["Uganda", "UG"], ["Ukraine", "UA"], ["United Arab Emir.", "AE"], ["United Kingdom", "GB"], ["United States", "US"], ["United States Minor", "UM"], ["Uruguay", "UY"], ["Uzbekistan", "UZ"], ["Vanuatu", "VU"], ["Venezuela", "VE"], ["Viet Nam", "VN"], ["Virgin Islands (Brit)", "VG"], ["Virgin Islands (U.S.)", "VI"], ["Wallis & Futuna Isl.", "WF"], ["Western Sahara", "EH"], ["Yemen", "YE"], ["Yugoslavia", "YU"], ["Zambia", "ZM"], ["Zimbabwe", "ZW"]], "0"), :class => "thin-control", :size => "20")
[Escaped Output] form_for(@contact) do; [Escaped Output] f.text_field(:name, :class => "def-input agadanga-name center ", :value => t("Insert First Name"));[Escaped Output] f.text_field(:surname, :class => "def-input agadanga-surname center", :value => t("Last Name"));[Escaped Output] f.email_field(:email, :class => "def-input agadanga-email center", :value => t("e-Mail Address"));[Escaped Output] f.submit("add", :class => "button-agadanga right top", :id => "add-contact");[Escaped Output] f.file_field(:photo, :class => "wrapper_image roundimage round-corners5");[Escaped Output] image_tag("missing_avatar.png", :size => "60x60", :class => "roundimage round-corners5 agadanga-avi");[Escaped Output] label_tag(d4x_sanitizer(t("age")), nil, :class => "lcd");[Escaped Output] label_tag(d4x_sanitizer(t("sex")), nil, :class => "lcd");[Escaped Output] label_tag(d4x_sanitizer(t("location")), nil, :class => "lcd");[Escaped Output] f.text_field(:age, :class => "def-input agadanga-age");[Escaped Output] f.select(:gender, options_for_select([[t("male"), "M"], [t("female"), "F"], [t("choose"), "0"]], "0"), :class => "thin-control", :size => "20");[Escaped Output] f.select(:country, options_for_select([[t("choose"), " "], ["Afghanistan", "AF"], ["Albania", "AL"], ["Algeria", "DZ"], ["American Samoa", "AS"], ["Andorra", "AD"], ["Angola", "AO"], ["Anguilla", "AI"], ["Antarctica", "AQ"], ["Antigua & Barbuda", "AG"], ["Argentina", "AR"], ["Armenia", "AM"], ["Aruba", "AW"], ["Australia", "AU"], ["Austria", "AT"], ["Azerbaijan", "AZ"], ["Bahamas", "BS"], ["Bahrain", "BH"], ["Bangladesh", "BD"], ["Barbados", "BB"], ["Belarus", "BY"], ["Belgium", "BE"], ["Belize", "BZ"], ["Benin", "BJ"], ["Bermuda", "BM"], ["Bhutan", "BT"], ["Bolivia", "BO"], ["Bosnia and Herzeg.", "BA"], ["Botswana", "BW"], ["Bouvet Island", "BV"], ["Brazil", "BR"], ["British Ind. Ocean", "IO"], ["Brunei Darussalam", "BN"], ["Bulgaria", "BG"], ["Burkina Faso", "BF"], ["Burundi", "BI"], ["Cambodia", "KH"], ["Cameroon", "CM"], ["Canada", "CA"], ["Cape Verde", "CV"], ["Cayman Islands", "KY"], ["Central Afr.Republic", "CF"], ["Chad", "TD"], ["Chile", "CL"], ["China", "CN"], ["Christmas Island", "CX"], ["Cocos Islands", "CC"], ["Colombia", "CO"], ["Comoros", "KM"], ["Congo", "CG"], ["Congo, Republic of", "CD"], ["Cook Islands", "CK"], ["Costa Rica", "CR"], ["Cote d`Ivoire", "CI"], ["Croatia (Hrvatska)", "HR"], ["Cuba", "CU"], ["Cyprus", "CY"], ["Czech Republic", "CZ"], ["Denmark", "DK"], ["Djibouti", "DJ"], ["Dominica", "DM"], ["Dominican Republic", "DO"], ["East Timor", "TP"], ["Ecuador", "EC"], ["Egypt", "EG"], ["El Salvador", "SV"], ["Equatorial Guinea", "GQ"], ["Eritrea", "ER"], ["Estonia", "EE"], ["Ethiopia", "ET"], ["Falkland Islands", "FK"], ["Faroe Islands", "FO"], ["Fiji", "FJ"], ["Finland", "FI"], ["France", "FR"], ["France, Metropol.", "FX"], ["French Guiana", "GF"], ["French Polynesia", "PF"], ["French Sout Terr.", "TF"], ["Gabon", "GA"], ["Gambia", "GM"], ["Georgia", "GE"], ["Germany", "DE"], ["Ghana", "GH"], ["Gibraltar", "GI"], ["Greece", "GR"], ["Greenland", "GL"], ["Grenada", "GD"], ["Guadeloupe", "GP"], ["Guam", "GU"], ["Guatemala", "GT"], ["Guinea", "GN"], ["Guinea-Bissau", "GW"], ["Guyana", "GY"], ["Haiti", "HT"], ["Heard Mc Donald", "HM"], ["Holy See (Vatican)", "VA"], ["Honduras", "HN"], ["Hong Kong", "HK"], ["Hungary", "HU"], ["Iceland", "IS"], ["India", "IN"], ["Indonesia", "ID"], ["Iran", "IR"], ["Iraq", "IQ"], ["Ireland", "IE"], ["Israel", "IL"], ["Italy", "IT"], ["Jamaica", "JM"], ["Japan", "JP"], ["Jordan", "JO"], ["Kazakhstan", "KZ"], ["Kenya", "KE"], ["Kiribati", "KI"], ["Korea, Democratic", "KP"], ["Korea, Republic of", "KR"], ["Kuwait", "KW"], ["Kyrgyzstan", "KG"], ["Lao Peoples", "LA"], ["Latvia", "LV"], ["Lebanon", "LB"], ["Lesotho", "LS"], ["Liberia", "LR"], ["Libyan", "LY"], ["Liechtenstein", "LI"], ["Lithuania", "LT"], ["Luxembourg", "LU"], ["Macau", "MO"], ["Macedonia", "MK"], ["Madagascar", "MG"], ["Malawi", "MW"], ["Malaysia", "MY"], ["Maldives", "MV"], ["Mali", "ML"], ["Malta", "MT"], ["Marshall Islands", "MH"], ["Martinique", "MQ"], ["Mauritania", "MR"], ["Mauritius", "MU"], ["Mayotte", "YT"], ["Mexico", "MX"], ["Micronesia", "FM"], ["Moldova", "MD"], ["Monaco", "MC"], ["Mongolia", "MN"], ["Montserrat", "MS"], ["Morocco", "MA"], ["Mozambique", "MZ"], ["Myanmar", "MM"], ["Namibia", "NA"], ["Nauru", "NR"], ["Nepal", "NP"], ["Netherlands", "NL"], ["Netherlands Antilles", "AN"], ["New Caledonia", "NC"], ["New Zealand", "NZ"], ["Nicaragua", "NI"], ["Niger", "NE"], ["Nigeria", "NG"], ["Niue", "NU"], ["Norfolk Island", "NF"], ["Northern Mariana Isl", "MP"], ["Norway", "NO"], ["Oman", "OM"], ["Pakistan", "PK"], ["Palau", "PW"], ["Panama", "PA"], ["Papua New Guinea", "PG"], ["Paraguay", "PY"], ["Peru", "PE"], ["Philippines", "PH"], ["Pitcairn", "PN"], ["Poland", "PL"], ["Portugal", "PT"], ["Puerto Rico", "PR"], ["Qatar", "QA"], ["Reunion", "RE"], ["Romania", "RO"], ["Russian Federation", "RU"], ["Rwanda", "RW"], ["Saint Kitts & Nevis", "KN"], ["Saint LUCIA", "LC"], ["Saint Vincent", "VC"], ["Samoa", "WS"], ["San Marino", "SM"], ["Sao Tome & Principe", "ST"], ["Saudi Arabia", "SA"], ["Senegal", "SN"], ["Seychelles", "SC"], ["Sierra Leone", "SL"], ["Singapore", "SG"], ["Slovakia", "SK"], ["Slovenia", "SI"], ["Solomon Islands", "SB"], ["Somalia", "SO"], ["South Africa", "ZA"], ["South Georgia", "GS"], ["Spain", "ES"], ["Sri Lanka", "LK"], ["St. Helena", "SH"], ["St.Pierre & Miquelon", "PM"], ["Sudan", "SD"], ["Suriname", "SR"], ["Svalbard", "SJ"], ["Swaziland", "SZ"], ["Sweden", "SE"], ["Switzerland", "CH"], ["Syrian Arab Republic", "SY"], ["Taiwan", "TW"], ["Tajikistan", "TJ"], ["Tanzania", "TZ"], ["Thailand", "TH"], ["Togo", "TG"], ["Tokelau", "TK"], ["Tonga", "TO"], ["Trinidad and Tobago", "TT"], ["Tunisia", "TN"], ["Turkey", "TR"], ["Turkmenistan", "TM"], ["Turks & Caicos Isl.", "TC"], ["Tuvalu", "TV"], ["Uganda", "UG"], ["Ukraine", "UA"], ["United Arab Emir.", "AE"], ["United Kingdom", "GB"], ["United States", "US"], ["United States Minor", "UM"], ["Uruguay", "UY"], ["Uzbekistan", "UZ"], ["Vanuatu", "VU"], ["Venezuela", "VE"], ["Viet Nam", "VN"], ["Virgin Islands (Brit)", "VG"], ["Virgin Islands (U.S.)", "VI"], ["Wallis & Futuna Isl.", "WF"], ["Western Sahara", "EH"], ["Yemen", "YE"], ["Yugoslavia", "YU"], ["Zambia", "ZM"], ["Zimbabwe", "ZW"]], "0"), :class => "thin-control", :size => "20"); end
[Escaped Output] label_tag(contact.name, nil, :class => "lcd2 orange")
[Escaped Output] label_tag(contact.surname, nil, :class => "lcd2 yellow")
[Escaped Output] label_tag(contact.email.to_s.downcase, nil, :id => "email-format", :class => "agadanga-email-contact")
[Escaped Output] button_to("X", contact, :confirm => "Are you sure you want to delete this Contact?", :method => :delete, :class => "button-agadanga right", :name => "zdestroy", :size => "16x16")
[Escaped Output] image_tag(contact.photo.url, :size => "60x60", :class => "roundimage round-corners5 agadanga-avi2")
[Escaped Output] image_tag("missing_avatar.png", :size => "60x60", :class => "roundimage round-corners5")
[Escaped Output] label_tag(d4x_sanitizer(t("age")), nil, :class => "lcd2 orange")
[Escaped Output] label_tag(d4x_sanitizer(t("sex")), nil, :class => "lcd2 orange")
[Escaped Output] label_tag(d4x_sanitizer(t("location")), nil, :class => "lcd2 orange")
[Escaped Output] label_tag(contact.age.to_s, nil, :class => "lcd2 yellow")
[Escaped Output] label_tag(contact.gender, nil, :class => "lcd2 yellow")
[Escaped Output] image_tag("male.png", :alt => "male", :title => "male", :class => "bullet")
[Escaped Output] image_tag("female.png", :alt => "female", :title => "female", :class => "bullet")
[Escaped Output] label_tag(contact.country, nil, :class => "lcd2 yellow")
[Escaped Output] image_tag((contact.country.downcase + ".png"), :title => contact.country)

agadanga/agadanga_archivied

[Escaped Output] render(partial => "big_icons_all_active", {})
[Escaped Output] content_for(:big_icons_menu) do; [Escaped Output] render(partial => "big_icons_all_active", {}); end
[Escaped Output] image_tag("archive7.png", :size => "40x40", :class => "left folder-icon")
[Escaped Output] label_tag(d4x_sanitizer(t("inbox")), nil, :class => "folder-name")
[Escaped Output] image_tag("checking-folder.gif", :id => "checking-current", :class => "none")
[Escaped Output] @tot_inbox
[Escaped Output] link_to("/agadanga-inbox") do; [Escaped Output] image_tag("archive7.png", :size => "40x40", :class => "left folder-icon");[Escaped Output] label_tag(d4x_sanitizer(t("inbox")), nil, :class => "folder-name");[Escaped Output] image_tag("checking-folder.gif", :id => "checking-current", :class => "none");[Escaped Output] @tot_inbox; end
[Escaped Output] image_tag("sent.png", :size => "40x40", :class => "left folder-icon")
[Escaped Output] label_tag(d4x_sanitizer(t("sent")), nil, :class => "folder-name")
[Escaped Output] @tot_sent
[Escaped Output] link_to("/agadanga-sent") do; [Escaped Output] image_tag("sent.png", :size => "40x40", :class => "left folder-icon");[Escaped Output] label_tag(d4x_sanitizer(t("sent")), nil, :class => "folder-name");[Escaped Output] @tot_sent; end
[Escaped Output] image_tag("compose2.png", :size => "40x40", :class => "left folder-icon")
[Escaped Output] label_tag(d4x_sanitizer(t("draft")), nil, :class => "folder-name")
[Escaped Output] @tot_draft
[Escaped Output] link_to("/agadanga-drafts") do; [Escaped Output] image_tag("compose2.png", :size => "40x40", :class => "left folder-icon");[Escaped Output] label_tag(d4x_sanitizer(t("draft")), nil, :class => "folder-name");[Escaped Output] @tot_draft; end
[Escaped Output] image_tag("junk.png", :size => "40x40", :class => "left folder-icon")
[Escaped Output] label_tag(d4x_sanitizer(t("junk")), nil, :class => "folder-name")
[Escaped Output] @tot_spam
[Escaped Output] link_to("/agadanga-junk") do; [Escaped Output] image_tag("junk.png", :size => "40x40", :class => "left folder-icon");[Escaped Output] label_tag(d4x_sanitizer(t("junk")), nil, :class => "folder-name");[Escaped Output] @tot_spam; end
[Escaped Output] image_tag("flag.png", :size => "40x40", :class => "left folder-icon")
[Escaped Output] label_tag(d4x_sanitizer(t("important")), nil, :class => "folder-name")
[Escaped Output] @tot_important
[Escaped Output] link_to("/agadanga-important") do; [Escaped Output] image_tag("flag.png", :size => "40x40", :class => "left folder-icon");[Escaped Output] label_tag(d4x_sanitizer(t("important")), nil, :class => "folder-name");[Escaped Output] @tot_important; end
[Escaped Output] image_tag("archive3.png", :size => "40x40", :class => "left folder-icon")
[Escaped Output] label_tag(d4x_sanitizer(t("archive")), nil, :class => "current-folder")
[Escaped Output] @tot_archivied
[Escaped Output] link_to("/agadanga-archivied") do; [Escaped Output] image_tag("archive3.png", :size => "40x40", :class => "left folder-icon");[Escaped Output] label_tag(d4x_sanitizer(t("archive")), nil, :class => "current-folder");[Escaped Output] @tot_archivied; end
[Escaped Output] image_tag("trash4.png", :size => "40x40", :class => "left folder-icon")
[Escaped Output] label_tag(d4x_sanitizer(t("trash")), nil, :class => "folder-name")
[Escaped Output] @tot_trash
[Escaped Output] link_to("/agadanga-trash") do; [Escaped Output] image_tag("trash4.png", :size => "40x40", :class => "left folder-icon");[Escaped Output] label_tag(d4x_sanitizer(t("trash")), nil, :class => "folder-name");[Escaped Output] @tot_trash; end
[Escaped Output] content_for(:folders_list) do; [Escaped Output] link_to("/agadanga-inbox") do; [Escaped Output] image_tag("archive7.png", :size => "40x40", :class => "left folder-icon");[Escaped Output] label_tag(d4x_sanitizer(t("inbox")), nil, :class => "folder-name");[Escaped Output] image_tag("checking-folder.gif", :id => "checking-current", :class => "none");[Escaped Output] @tot_inbox; end;[Escaped Output] link_to("/agadanga-sent") do; [Escaped Output] image_tag("sent.png", :size => "40x40", :class => "left folder-icon");[Escaped Output] label_tag(d4x_sanitizer(t("sent")), nil, :class => "folder-name");[Escaped Output] @tot_sent; end;[Escaped Output] link_to("/agadanga-drafts") do; [Escaped Output] image_tag("compose2.png", :size => "40x40", :class => "left folder-icon");[Escaped Output] label_tag(d4x_sanitizer(t("draft")), nil, :class => "folder-name");[Escaped Output] @tot_draft; end;[Escaped Output] link_to("/agadanga-junk") do; [Escaped Output] image_tag("junk.png", :size => "40x40", :class => "left folder-icon");[Escaped Output] label_tag(d4x_sanitizer(t("junk")), nil, :class => "folder-name");[Escaped Output] @tot_spam; end;[Escaped Output] link_to("/agadanga-important") do; [Escaped Output] image_tag("flag.png", :size => "40x40", :class => "left folder-icon");[Escaped Output] label_tag(d4x_sanitizer(t("important")), nil, :class => "folder-name");[Escaped Output] @tot_important; end;[Escaped Output] link_to("/agadanga-archivied") do; [Escaped Output] image_tag("archive3.png", :size => "40x40", :class => "left folder-icon");[Escaped Output] label_tag(d4x_sanitizer(t("archive")), nil, :class => "current-folder");[Escaped Output] @tot_archivied; end;[Escaped Output] link_to("/agadanga-trash") do; [Escaped Output] image_tag("trash4.png", :size => "40x40", :class => "left folder-icon");[Escaped Output] label_tag(d4x_sanitizer(t("trash")), nil, :class => "folder-name");[Escaped Output] @tot_trash; end; end
[Escaped Output] render(partial => "messages_actions", {})
[Escaped Output] render(partial => "agadanga_row_titles", {})
[Escaped Output] render(partial => "agadanga_folder_evo", {})
[Escaped Output] will_paginate(@folder, :per_page => 12)
[Escaped Output] form_tag("actions", :method => "post") do; [Escaped Output] render(partial => "messages_actions", {});[Escaped Output] render(partial => "agadanga_row_titles", {});[Escaped Output] render(partial => "agadanga_folder_evo", {});[Escaped Output] will_paginate(@folder, :per_page => 12); end
[Escaped Output] render(partial => "agadanga_read_message", {})

agadanga/agadanga_change_password

[Escaped Output] content_for(:head) do; [ignored]; end
[Escaped Output] render(partial => "big_icons_some_active", {})
[Escaped Output] content_for(:big_icons_menu) do; [Escaped Output] render(partial => "big_icons_some_active", {}); end
[Escaped Output] render(partial => "no_folder_selected", {})
[Escaped Output] content_for(:folders_list) do; [Escaped Output] render(partial => "no_folder_selected", {}); end
[Escaped Output] label_tag(d4x_sanitizer(t("choose your favourite theme")), nil, :class => "lcd orange left")
[Escaped Output] f.select(:theme, options_for_select([["tradizional agadanga", "agadanga"]], 0))
[Escaped Output] label_tag(d4x_sanitizer(t("current language")), nil, :class => "lcd orange left")
[Escaped Output] label_tag(current_user.locale.to_s, nil, :class => "lcd yellow center")
[Escaped Output] image_tag((current_user.locale.to_s.downcase + ".png"), :class => "middle")
[Escaped Output] label_tag(d4x_sanitizer(t("choose your language")), nil, :class => "lcd orange left")
[Escaped Output] f.select(:locale, options_for_select([["English", "en"], ["Italian", "it"], ["Spanish", "sp"], ["Portuguese", "pt"], ["German", "de"], ["French", "fr"], ["Russian", "ru"], ["Dutch", "nl"], ["Chinese", "cn"], ["Swedish", "se"]], current_user.locale))
[Escaped Output] f.submit(d4x_sanitizer(t("save settings")), :class => "button-d4x")
[Escaped Output] form_for(@user) do; [Escaped Output] label_tag(d4x_sanitizer(t("choose your favourite theme")), nil, :class => "lcd orange left");[Escaped Output] f.select(:theme, options_for_select([["tradizional agadanga", "agadanga"]], 0));[Escaped Output] label_tag(d4x_sanitizer(t("current language")), nil, :class => "lcd orange left");[Escaped Output] label_tag(current_user.locale.to_s, nil, :class => "lcd yellow center");[Escaped Output] image_tag((current_user.locale.to_s.downcase + ".png"), :class => "middle");[Escaped Output] label_tag(d4x_sanitizer(t("choose your language")), nil, :class => "lcd orange left");[Escaped Output] f.select(:locale, options_for_select([["English", "en"], ["Italian", "it"], ["Spanish", "sp"], ["Portuguese", "pt"], ["German", "de"], ["French", "fr"], ["Russian", "ru"], ["Dutch", "nl"], ["Chinese", "cn"], ["Swedish", "se"]], current_user.locale));[Escaped Output] f.submit(d4x_sanitizer(t("save settings")), :class => "button-d4x"); end

agadanga/agadanga_compose

[Escaped Output] render(partial => "no_folder_selected", {})
[Escaped Output] content_for(:folders_list) do; [Escaped Output] render(partial => "no_folder_selected", {}); end
[Escaped Output] render(partial => "big_icons_some_active", {})
[Escaped Output] content_for(:big_icons_menu) do; [Escaped Output] render(partial => "big_icons_some_active", {}); end
[Escaped Output] javascript_include_tag("d4x-compose")
[Escaped Output] javascript_include_tag("summernote.js")
[Escaped Output] stylesheet_link_tag("summernote.css")
[Escaped Output] content_for(:head) do; [Escaped Output] javascript_include_tag("d4x-compose");[Escaped Output] javascript_include_tag("summernote.js");[Escaped Output] stylesheet_link_tag("summernote.css"); end
[Escaped Output] link_to_function(image_tag("cancel.png", :class => "bullet"), "$('#write-new-message').toggle()")
[Escaped Output] d4x_sanitizer(t("compose new message"))
[Escaped Output] label_tag(d4x_sanitizer(t("from")), nil, :class => "show-item-label")
[Escaped Output] collection_select(:mail_accounts, :id, current_user.mail_accounts.all, :id, :login, {}, :multiple => false, :id => "current_account")
[Escaped Output] label_tag(d4x_sanitizer(t("tox")), nil, :class => "show-item-label")
[Escaped Output] link_to_function(d4x_sanitizer(t("CC")), "$('#cc-div').toggle()", :class => "show-item-label")
[Escaped Output] link_to_function(d4x_sanitizer(t("BCC")), "$('#bcc-div').toggle()", :class => "show-item-label")
[Escaped Output] text_field_tag(:to, xmail.to, :size => 97, :class => "thin-control1")
[Escaped Output] image_tag("user_gray.png", :class => "middle")
[Escaped Output] label_tag(d4x_sanitizer(t("CC")), nil, :class => "show-item-label")
[Escaped Output] text_field_tag(:cc, xmail.cc, :size => 97, :class => "thin-control1")
[Escaped Output] label_tag(d4x_sanitizer(t("BCC")), nil, :class => "show-item-label")
[Escaped Output] text_field_tag(:bcc, xmail.bcc, :size => 97, :class => "thin-control1")
[Escaped Output] label_tag(d4x_sanitizer(t("subject")), nil, :class => "show-item-label")
[Escaped Output] text_field_tag(:subject, xmail.subject, :size => 97, :class => "thin-control1")
[Escaped Output] hidden_field_tag(:content_type, "text")
[Escaped Output] label_tag(d4x_sanitizer(t("message")), nil, :class => "show-item-label")
[Escaped Output] link_to_function(d4x_sanitizer(t("text")), "showTEXTpane()", :class => "lcd yellow", :id => "totext")
[Escaped Output] link_to_function(d4x_sanitizer(t("xhtml")), "showHTMLpane()", :class => "lcd yellow", :id => "tohtml")
[Escaped Output] text_area_tag(:message, xmail.body, :size => "100x15", :class => "mceNoEditor d4x-control")
[Escaped Output] text_area_tag(:message_html, nil, :class => "tinymce", :size => "100x15", :theme_advanced_toolbar_location => "top", :theme_advanced_toolbar_align => "left", :theme_advanced_statusbar_localtion => "bottom", :theme_advanced_button3_add => "tablecontrols", :plugins => "all", :available_languages => "en")
[Escaped Output] submit_tag(d4x_sanitizer(t("save draft")), :name => "savedraft", :class => "button-d4x", :id => "savedraft")
[Escaped Output] submit_tag(d4x_sanitizer(t("discard")), :name => "discard", :class => "button-d4x", :id => "discard")
[Escaped Output] submit_tag(d4x_sanitizer(t("send")), :name => "send", :id => "send", :class => "button-d4x")
[Escaped Output] form_tag("/agadanga-send", :method => "post", :multipart => "true") do; [Escaped Output] label_tag(d4x_sanitizer(t("from")), nil, :class => "show-item-label");[Escaped Output] collection_select(:mail_accounts, :id, current_user.mail_accounts.all, :id, :login, {}, :multiple => false, :id => "current_account");[Escaped Output] label_tag(d4x_sanitizer(t("tox")), nil, :class => "show-item-label");[Escaped Output] link_to_function(d4x_sanitizer(t("CC")), "$('#cc-div').toggle()", :class => "show-item-label");[Escaped Output] link_to_function(d4x_sanitizer(t("BCC")), "$('#bcc-div').toggle()", :class => "show-item-label");[Escaped Output] text_field_tag(:to, xmail.to, :size => 97, :class => "thin-control1");[Escaped Output] image_tag("user_gray.png", :class => "middle");[Escaped Output] label_tag(d4x_sanitizer(t("CC")), nil, :class => "show-item-label");[Escaped Output] text_field_tag(:cc, xmail.cc, :size => 97, :class => "thin-control1");[Escaped Output] label_tag(d4x_sanitizer(t("BCC")), nil, :class => "show-item-label");[Escaped Output] text_field_tag(:bcc, xmail.bcc, :size => 97, :class => "thin-control1");[Escaped Output] label_tag(d4x_sanitizer(t("subject")), nil, :class => "show-item-label");[Escaped Output] text_field_tag(:subject, xmail.subject, :size => 97, :class => "thin-control1");[Escaped Output] hidden_field_tag(:content_type, "text");[Escaped Output] label_tag(d4x_sanitizer(t("message")), nil, :class => "show-item-label");[Escaped Output] link_to_function(d4x_sanitizer(t("text")), "showTEXTpane()", :class => "lcd yellow", :id => "totext");[Escaped Output] link_to_function(d4x_sanitizer(t("xhtml")), "showHTMLpane()", :class => "lcd yellow", :id => "tohtml");[Escaped Output] text_area_tag(:message, xmail.body, :size => "100x15", :class => "mceNoEditor d4x-control");[Escaped Output] text_area_tag(:message_html, nil, :class => "tinymce", :size => "100x15", :theme_advanced_toolbar_location => "top", :theme_advanced_toolbar_align => "left", :theme_advanced_statusbar_localtion => "bottom", :theme_advanced_button3_add => "tablecontrols", :plugins => "all", :available_languages => "en");[Escaped Output] submit_tag(d4x_sanitizer(t("save draft")), :name => "savedraft", :class => "button-d4x", :id => "savedraft");[Escaped Output] submit_tag(d4x_sanitizer(t("discard")), :name => "discard", :class => "button-d4x", :id => "discard");[Escaped Output] submit_tag(d4x_sanitizer(t("send")), :name => "send", :id => "send", :class => "button-d4x"); end
[Escaped Output] link_to_function(image_tag("email_open.png", :class => "bullet"), "$('#view-message').toggle()")
[Escaped Output] xmail.subject
[Escaped Output] d4x_sanitizer(t("data"))
[Escaped Output] xmail.date
[Escaped Output] d4x_sanitizer(t("from"))
[Escaped Output] xmail.from
[Escaped Output] d4x_sanitizer(t("subject"))
[Escaped Output] xmail.subject
[Escaped Output] d4x_sanitizer(t("tox"))
[Escaped Output] link_to_function(image_tag("bullet_toggle_plus.png", :title => "view headers"), "$('#message-header').toggle()")
[Escaped Output] xmail.to
[Escaped Output] raw(cr2br(h(xmail.header)))
[Escaped Output] d4x_sanitizer(t("message"))
[Escaped Output] raw(cr2br(h(xmail.body)))
[Escaped Output] t("message")
[Escaped Output] raw(cr2br(h(xmail.body)))
[Escaped Output] d4x_sanitizer(t("attachments"))
[Escaped Output] image_tag("attach.png", :title => "email attached file")
[Escaped Output] link_to(xfile.filename, xfile.filename)
[Escaped Output] submit_tag(d4x_sanitizer(t("reply")), :name => "reply", :class => "button-d4x", :id => "reply")
[Escaped Output] submit_tag(d4x_sanitizer(t("reply all")), :name => "replyall", :class => "button-d4x", :id => "replyall")
[Escaped Output] submit_tag(d4x_sanitizer(t("forward")), :name => "forward", :id => "forward", :class => "button-d4x")
[Escaped Output] label_tag("", nil, :class => "lcd")
[Escaped Output] text_field_tag(:to, nil, :class => "form-control", :placeholder => d4x_sanitizer(t("TO")))
[Escaped Output] cycle("odd", "even")
[Escaped Output] check_box_tag(:selected, (((((contact.name + " ") + contact.surname) + " <") + contact.email.downcase) + ">"))
[Escaped Output] label_tag(contact.name, nil, :class => "lcd yellow")
[Escaped Output] label_tag(contact.surname, nil, :class => "lcd orange")
[Escaped Output] contact.email.downcase
[Escaped Output] label_tag("", nil, :class => "lcd")
[Escaped Output] text_field_tag(:cc, nil, :size => 86, :class => "form-control input_cc", :placeholder => d4x_sanitizer(t("CC")))
[Escaped Output] cycle("odd", "even")
[Escaped Output] check_box_tag(:selected, (((((contact.name + " ") + contact.surname) + " <") + contact.email.downcase) + ">"))
[Escaped Output] label_tag(contact.name, nil, :class => "lcd yellow")
[Escaped Output] label_tag(contact.surname, nil, :class => "lcd orange")
[Escaped Output] contact.email.downcase
[Escaped Output] label_tag("", nil, :class => "lcd yellow")
[Escaped Output] cycle("odd", "even")
[Escaped Output] check_box_tag(:selected, (((((contact.name + " ") + contact.surname) + " <") + contact.email.downcase) + ">"))
[Escaped Output] label_tag(contact.name, nil, :class => "lcd yellow")
[Escaped Output] label_tag(contact.surname, nil, :class => "lcd orange")
[Escaped Output] contact.email.downcase
[Escaped Output] text_field_tag(:bcc, nil, :size => 85, :class => "form-control input_bcc", :placeholder => d4x_sanitizer(t("BCC")))
[Escaped Output] text_field_tag(:subject, nil, :size => 90, :class => "form-control input_subject", :placeholder => d4x_sanitizer(t("subject")))
[Escaped Output] check_box_tag(:htmlmsg, nil, :checked)
[Escaped Output] text_area_tag(:message, nil, :size => "100x16", :class => "mceNoEditor d4x-control input_tarea")
[Escaped Output] text_area_tag(:message_html, nil, :class => "tinymce input_tarea", :theme_advanced_toolbar_location => "top", :theme_advanced_toolbar_align => "left", :theme_advanced_statusbar_localtion => "bottom", :theme_advanced_button3_add => "tablecontrols", :plugins => "all", :available_languages => "en")
[Escaped Output] file_field_tag(:attachment, :class => "button-d4x")
[Escaped Output] file_field_tag(:attachment1, :class => "button-d4x")
[Escaped Output] file_field_tag(:attachment2, :class => "button-d4x")
[Escaped Output] file_field_tag(:attachment3, :class => "button-d4x")
[Escaped Output] file_field_tag(:attachment4, :class => "button-d4x")
[Escaped Output] submit_tag(d4x_sanitizer(t("save draft")), :name => "savedraft", :class => "btn btn-sm btn-warning", :id => "savedraft")
[Escaped Output] submit_tag(d4x_sanitizer(t("discard")), :name => "discard", :class => "btn btn-sm btn-danger", :id => "discard")
[Escaped Output] image_tag("agared-bsnake.gif", :id => "sending", :class => "none")
[Escaped Output] image_tag("agalight-bsnake.gif", :id => "sending", :class => "none")
[Escaped Output] image_tag("agablue-bsnake.gif", :id => "sending", :class => "none")
[Escaped Output] image_tag("agadanga-bsnake.gif", :id => "sending", :class => "none")
[Escaped Output] submit_tag(d4x_sanitizer(t("send")), :name => "send", :id => "send", :class => "btn btn-sm btn-success")
[Escaped Output] form_tag("actions", :method => "post", :multipart => "true") do; [Escaped Output] label_tag("", nil, :class => "lcd");[Escaped Output] text_field_tag(:to, nil, :class => "form-control", :placeholder => d4x_sanitizer(t("TO")));@contacts = current_user.contacts;@contacts.each do; [Escaped Output] cycle("odd", "even");[Escaped Output] check_box_tag(:selected, (((((contact.name + " ") + contact.surname) + " <") + contact.email.downcase) + ">"));[Escaped Output] label_tag(contact.name, nil, :class => "lcd yellow");[Escaped Output] label_tag(contact.surname, nil, :class => "lcd orange");[Escaped Output] contact.email.downcase; end;[Escaped Output] label_tag("", nil, :class => "lcd");[Escaped Output] text_field_tag(:cc, nil, :size => 86, :class => "form-control input_cc", :placeholder => d4x_sanitizer(t("CC")));@contacts.each do; [Escaped Output] cycle("odd", "even");[Escaped Output] check_box_tag(:selected, (((((contact.name + " ") + contact.surname) + " <") + contact.email.downcase) + ">"));[Escaped Output] label_tag(contact.name, nil, :class => "lcd yellow");[Escaped Output] label_tag(contact.surname, nil, :class => "lcd orange");[Escaped Output] contact.email.downcase; end;[Escaped Output] label_tag("", nil, :class => "lcd yellow");@contacts.each do; [Escaped Output] cycle("odd", "even");[Escaped Output] check_box_tag(:selected, (((((contact.name + " ") + contact.surname) + " <") + contact.email.downcase) + ">"));[Escaped Output] label_tag(contact.name, nil, :class => "lcd yellow");[Escaped Output] label_tag(contact.surname, nil, :class => "lcd orange");[Escaped Output] contact.email.downcase; end;[Escaped Output] text_field_tag(:bcc, nil, :size => 85, :class => "form-control input_bcc", :placeholder => d4x_sanitizer(t("BCC")));[Escaped Output] text_field_tag(:subject, nil, :size => 90, :class => "form-control input_subject", :placeholder => d4x_sanitizer(t("subject")));[Escaped Output] check_box_tag(:htmlmsg, nil, :checked);[Escaped Output] text_area_tag(:message, nil, :size => "100x16", :class => "mceNoEditor d4x-control input_tarea");[Escaped Output] text_area_tag(:message_html, nil, :class => "tinymce input_tarea", :theme_advanced_toolbar_location => "top", :theme_advanced_toolbar_align => "left", :theme_advanced_statusbar_localtion => "bottom", :theme_advanced_button3_add => "tablecontrols", :plugins => "all", :available_languages => "en");[Escaped Output] file_field_tag(:attachment, :class => "button-d4x");[Escaped Output] file_field_tag(:attachment1, :class => "button-d4x");[Escaped Output] file_field_tag(:attachment2, :class => "button-d4x");[Escaped Output] file_field_tag(:attachment3, :class => "button-d4x");[Escaped Output] file_field_tag(:attachment4, :class => "button-d4x");[Escaped Output] submit_tag(d4x_sanitizer(t("save draft")), :name => "savedraft", :class => "btn btn-sm btn-warning", :id => "savedraft");[Escaped Output] submit_tag(d4x_sanitizer(t("discard")), :name => "discard", :class => "btn btn-sm btn-danger", :id => "discard");if (current_user.theme == "agared") then; [Escaped Output] image_tag("agared-bsnake.gif", :id => "sending", :class => "none");else; if (current_user.theme == "agalight") then; [Escaped Output] image_tag("agalight-bsnake.gif", :id => "sending", :class => "none"); else; if (current_user.theme == "agablue") then; [Escaped Output] image_tag("agablue-bsnake.gif", :id => "sending", :class => "none"); else; if (current_user.theme == "agadanga") then; [Escaped Output] image_tag("agadanga-bsnake.gif", :id => "sending", :class => "none"); end; end; end;end;[Escaped Output] submit_tag(d4x_sanitizer(t("send")), :name => "send", :id => "send", :class => "btn btn-sm btn-success"); end

agadanga/agadanga_dashboard

[Escaped Output] content_for(:head) do; [ignored]; end
[Escaped Output] render(partial => "/agadanga/big_icons_some_active", {})
[Escaped Output] content_for(:big_icons_menu) do; [Escaped Output] render(partial => "/agadanga/big_icons_some_active", {}); end
[Escaped Output] render(partial => "/agadanga/no_folder_selected", {})
[Escaped Output] content_for(:folders_list) do; [Escaped Output] render(partial => "/agadanga/no_folder_selected", {}); end
[Escaped Output] d4x_sanitizer(t("fullname"))
[Escaped Output] ((current_user.firstname + " ") + current_user.lastname)
[Escaped Output] @team_count
[Escaped Output] @role
[Escaped Output] @tot_orders
[Escaped Output] @incarico.begin_of_relation
[Escaped Output] @incarico.end_of_relation
[Escaped Output] @tot_agadanga_box
[Escaped Output] current_user.email
[Escaped Output] @next_target
[Escaped Output] current_user.telephone
[Escaped Output] @tot_incomes
[Escaped Output] current_user.paypal_id
[Escaped Output] @next_payment
[Escaped Output] d4x_sanitizer(t("request relationship"))
[Escaped Output] f.label(d4x_sanitizer(t("fullname")), :class => "")
[Escaped Output] f.text_field(:fullname, :class => "control center", :maxlength => 30)
[Escaped Output] f.label(d4x_sanitizer(t("email")), :class => "")
[Escaped Output] f.email_field(:target_email, :class => "control center", :maxlength => 30)
[Escaped Output] f.label(d4x_sanitizer(t("request relationship")), :class => "")
[Escaped Output] f.select(:relation, options_for_select([["CPR", "CPR"], ["PR", "PR"], ["PRJ", "PRJ"]], "PR"), :class => "agadanga_selects", :size => "20")
[Escaped Output] button_to(d4x_sanitizer(t("send")), nil, :class => "button-d4x", :form_class => "request", :action => "create", :confirm => "Are you sure you want to add to your network?", :id => "add-to-ring")
[Escaped Output] form_for(@request) do; [Escaped Output] d4x_sanitizer(t("request relationship"));[Escaped Output] f.label(d4x_sanitizer(t("fullname")), :class => "");[Escaped Output] f.text_field(:fullname, :class => "control center", :maxlength => 30);[Escaped Output] f.label(d4x_sanitizer(t("email")), :class => "");[Escaped Output] f.email_field(:target_email, :class => "control center", :maxlength => 30);[Escaped Output] f.label(d4x_sanitizer(t("request relationship")), :class => "");[Escaped Output] f.select(:relation, options_for_select([["CPR", "CPR"], ["PR", "PR"], ["PRJ", "PRJ"]], "PR"), :class => "agadanga_selects", :size => "20");[Escaped Output] button_to(d4x_sanitizer(t("send")), nil, :class => "button-d4x", :form_class => "request", :action => "create", :confirm => "Are you sure you want to add to your network?", :id => "add-to-ring"); end
[Escaped Output] pluralize(@invitation.errors.count, d4x_sanitizer(t("error")))
[Escaped Output] d4x_sanitizer(msg)
[Escaped Output] d4x_sanitizer(t("invite a friend"))
[Escaped Output] f.label(d4x_sanitizer(t("from")), :class => "")
[Escaped Output] current_user.nickname
[Escaped Output] current_user.email
[Escaped Output] f.label(d4x_sanitizer(t("firstname")), :class => "")
[Escaped Output] f.text_field(:subject, :class => "control center", :maxlength => 30)
[Escaped Output] f.label(d4x_sanitizer(t("email")), :class => "")
[Escaped Output] f.email_field(:recipient_email, :class => "control center", :maxlength => 30)
[Escaped Output] f.submit(d4x_sanitizer(t("send")), :class => "button-d4x")
[Escaped Output] form_for(@invitation) do; if @invitation.errors.any? then; [Escaped Output] pluralize(@invitation.errors.count, d4x_sanitizer(t("error"))); @invitation.errors.full_messages.each do; [Escaped Output] d4x_sanitizer(msg); end;end;[Escaped Output] d4x_sanitizer(t("invite a friend"));[Escaped Output] f.label(d4x_sanitizer(t("from")), :class => "");[Escaped Output] current_user.nickname;[Escaped Output] current_user.email;[Escaped Output] f.label(d4x_sanitizer(t("firstname")), :class => "");[Escaped Output] f.text_field(:subject, :class => "control center", :maxlength => 30);[Escaped Output] f.label(d4x_sanitizer(t("email")), :class => "");[Escaped Output] f.email_field(:recipient_email, :class => "control center", :maxlength => 30);[Escaped Output] f.submit(d4x_sanitizer(t("send")), :class => "button-d4x"); end
[Escaped Output] d4x_sanitizer(t("order"))
[Escaped Output] d4x_sanitizer(t("received"))
[Escaped Output] d4x_sanitizer(t("order"))
[Escaped Output] d4x_sanitizer(t("customer"))
[Escaped Output] d4x_sanitizer(t("package"))
[Escaped Output] d4x_sanitizer(t("email"))
[Escaped Output] d4x_sanitizer(t("total"))
[Escaped Output] cycle("odd", "even")
[Escaped Output] order.created_at
[Escaped Output] order.id
[Escaped Output] order.user_id
[Escaped Output] order.package
[Escaped Output] order.email
[Escaped Output] order.total
[Escaped Output] link_to(image_tag("cog.png", :border => 0, :mouseover => "cog.png", :title => d4x_sanitizer(t("show")), :size => "16x16"), order)
[Escaped Output] d4x_sanitizer(t("requests"))
[Escaped Output] d4x_sanitizer(t("sent"))
[Escaped Output] d4x_sanitizer(t("fullname"))
[Escaped Output] d4x_sanitizer(t("email"))
[Escaped Output] d4x_sanitizer(t("role"))
[Escaped Output] d4x_sanitizer(t("status"))
[Escaped Output] d4x_sanitizer(t("delete"))
[Escaped Output] cycle("odd", "even")
[Escaped Output] request.created_at
[Escaped Output] request.fullname
[Escaped Output] request.target_email
[Escaped Output] request.relation
[Escaped Output] request.status
[Escaped Output] button_to("", request, :confirm => "are you sure?", :method => :delete, :class => "odestroy", :title => "destroy", :name => "destroy", :size => "16x16")
[Escaped Output] d4x_sanitizer(t("incomes"))
[Escaped Output] d4x_sanitizer(t("registration"))
[Escaped Output] d4x_sanitizer(t("expiration"))
[Escaped Output] d4x_sanitizer(t("customer"))
[Escaped Output] d4x_sanitizer(t("order"))
[Escaped Output] d4x_sanitizer(t("total"))
[Escaped Output] d4x_sanitizer(t("income"))
[Escaped Output] d4x_sanitizer(t("status"))
[Escaped Output] cycle("odd", "even")
[Escaped Output] income.created_at
[Escaped Output] income.expiration
[Escaped Output] customername(income.order_id)
[Escaped Output] emailaddress(income.order_id)
[Escaped Output] totalorder(income.order_id)
[Escaped Output] income.income
[Escaped Output] income.status
[Escaped Output] d4x_sanitizer(t("invitations"))
[Escaped Output] d4x_sanitizer(t("when"))
[Escaped Output] d4x_sanitizer(t("status"))
[Escaped Output] d4x_sanitizer(t("fullname"))
[Escaped Output] d4x_sanitizer(t("invitated sir"))
[Escaped Output] cycle("odd", "even")
[Escaped Output] invitation.created_at
[Escaped Output] invitation_is_accepted(invitation)
[Escaped Output] invitation.subject
[Escaped Output] invitation.recipient_email
[Escaped Output] button_to("", invitation, :confirm => "are you sure?", :method => :delete, :class => "odestroy", :title => "destroy", :name => "destroy", :size => "16x16")
[Escaped Output] d4x_sanitizer(t("targets"))
[Escaped Output] d4x_sanitizer(t("quantity"))
[Escaped Output] cycle("odd", "even")
[Escaped Output] qty
[Escaped Output] number_to_currency((((@agadanga1GB.final_price * 12) * qty) / 20), :unit => "\u{20ac}", :precision => 0)
[Escaped Output] number_to_currency((((@agadanga3GB.final_price * 12) * qty) / 20), :unit => "\u{20ac}", :precision => 0)
[Escaped Output] number_to_currency((((@agadanga5GB.final_price * 12) * qty) / 20), :unit => "\u{20ac}", :precision => 0)
[Escaped Output] number_to_currency((((@agadanga1GB.final_price * 12) * qty) / 10), :unit => "\u{20ac}", :precision => 0)
[Escaped Output] number_to_currency((((@agadanga3GB.final_price * 12) * qty) / 10), :unit => "\u{20ac}", :precision => 0)
[Escaped Output] number_to_currency((((@agadanga5GB.final_price * 12) * qty) / 10), :unit => "\u{20ac}", :precision => 0)
[Escaped Output] number_to_currency((((@agadanga1GB.final_price * 12) * qty) / 5), :unit => "\u{20ac}", :precision => 0)
[Escaped Output] number_to_currency((((@agadanga3GB.final_price * 12) * qty) / 5), :unit => "\u{20ac}", :precision => 0)
[Escaped Output] number_to_currency((((@agadanga5GB.final_price * 12) * qty) / 5), :unit => "\u{20ac}", :precision => 0)

agadanga/agadanga_drafts

[Escaped Output] t("you have")
[Escaped Output] t("messages")
[Escaped Output] t("no drafts")
[Escaped Output] render(partial => "messages_actions", {})
[Escaped Output] render(partial => "agadanga_row_titles", {})
[Escaped Output] render(partial => "agadanga_folder_evo", {})
[Escaped Output] will_paginate(@folder, :per_page => 12)
[Escaped Output] form_tag("actions", :method => "post") do; if (@tot_draft > 0) then; [Escaped Output] t("you have"); [Escaped Output] t("messages");else; [Escaped Output] t("no drafts");end;[Escaped Output] render(partial => "messages_actions", {});[Escaped Output] render(partial => "agadanga_row_titles", {});[Escaped Output] render(partial => "agadanga_folder_evo", {});[Escaped Output] will_paginate(@folder, :per_page => 12); end

agadanga/agadanga_important

[Escaped Output] render(partial => "big_icons_all_active", {})
[Escaped Output] content_for(:big_icons_menu) do; [Escaped Output] render(partial => "big_icons_all_active", {}); end
[Escaped Output] image_tag("archive7.png", :size => "40x40", :class => "left folder-icon")
[Escaped Output] label_tag(d4x_sanitizer(t("inbox")), nil, :class => "folder-name")
[Escaped Output] image_tag("checking-folder.gif", :id => "checking-current", :class => "none")
[Escaped Output] @tot_inbox
[Escaped Output] link_to("/agadanga-inbox") do; [Escaped Output] image_tag("archive7.png", :size => "40x40", :class => "left folder-icon");[Escaped Output] label_tag(d4x_sanitizer(t("inbox")), nil, :class => "folder-name");[Escaped Output] image_tag("checking-folder.gif", :id => "checking-current", :class => "none");[Escaped Output] @tot_inbox; end
[Escaped Output] image_tag("sent.png", :size => "40x40", :class => "left folder-icon")
[Escaped Output] label_tag(d4x_sanitizer(t("sent")), nil, :class => "folder-name")
[Escaped Output] @tot_sent
[Escaped Output] link_to("/agadanga-sent") do; [Escaped Output] image_tag("sent.png", :size => "40x40", :class => "left folder-icon");[Escaped Output] label_tag(d4x_sanitizer(t("sent")), nil, :class => "folder-name");[Escaped Output] @tot_sent; end
[Escaped Output] image_tag("compose2.png", :size => "40x40", :class => "left folder-icon")
[Escaped Output] label_tag(d4x_sanitizer(t("draft")), nil, :class => "folder-name")
[Escaped Output] @tot_draft
[Escaped Output] link_to("/agadanga-drafts") do; [Escaped Output] image_tag("compose2.png", :size => "40x40", :class => "left folder-icon");[Escaped Output] label_tag(d4x_sanitizer(t("draft")), nil, :class => "folder-name");[Escaped Output] @tot_draft; end
[Escaped Output] image_tag("junk.png", :size => "40x40", :class => "left folder-icon")
[Escaped Output] label_tag(d4x_sanitizer(t("junk")), nil, :class => "folder-name")
[Escaped Output] @tot_spam
[Escaped Output] link_to("/agadanga-junk") do; [Escaped Output] image_tag("junk.png", :size => "40x40", :class => "left folder-icon");[Escaped Output] label_tag(d4x_sanitizer(t("junk")), nil, :class => "folder-name");[Escaped Output] @tot_spam; end
[Escaped Output] image_tag("flag.png", :size => "40x40", :class => "left folder-icon")
[Escaped Output] label_tag(d4x_sanitizer(t("important")), nil, :class => "current-folder")
[Escaped Output] @tot_important
[Escaped Output] link_to("/agadanga-important") do; [Escaped Output] image_tag("flag.png", :size => "40x40", :class => "left folder-icon");[Escaped Output] label_tag(d4x_sanitizer(t("important")), nil, :class => "current-folder");[Escaped Output] @tot_important; end
[Escaped Output] image_tag("archive3.png", :size => "40x40", :class => "left folder-icon")
[Escaped Output] label_tag(d4x_sanitizer(t("archive")), nil, :class => "folder-name")
[Escaped Output] @tot_archivied
[Escaped Output] link_to("/agadanga-archivied") do; [Escaped Output] image_tag("archive3.png", :size => "40x40", :class => "left folder-icon");[Escaped Output] label_tag(d4x_sanitizer(t("archive")), nil, :class => "folder-name");[Escaped Output] @tot_archivied; end
[Escaped Output] image_tag("trash4.png", :size => "40x40", :class => "left folder-icon")
[Escaped Output] label_tag(d4x_sanitizer(t("trash")), nil, :class => "folder-name")
[Escaped Output] @tot_trash
[Escaped Output] link_to("/agadanga-trash") do; [Escaped Output] image_tag("trash4.png", :size => "40x40", :class => "left folder-icon");[Escaped Output] label_tag(d4x_sanitizer(t("trash")), nil, :class => "folder-name");[Escaped Output] @tot_trash; end
[Escaped Output] content_for(:folders_list) do; [Escaped Output] link_to("/agadanga-inbox") do; [Escaped Output] image_tag("archive7.png", :size => "40x40", :class => "left folder-icon");[Escaped Output] label_tag(d4x_sanitizer(t("inbox")), nil, :class => "folder-name");[Escaped Output] image_tag("checking-folder.gif", :id => "checking-current", :class => "none");[Escaped Output] @tot_inbox; end;[Escaped Output] link_to("/agadanga-sent") do; [Escaped Output] image_tag("sent.png", :size => "40x40", :class => "left folder-icon");[Escaped Output] label_tag(d4x_sanitizer(t("sent")), nil, :class => "folder-name");[Escaped Output] @tot_sent; end;[Escaped Output] link_to("/agadanga-drafts") do; [Escaped Output] image_tag("compose2.png", :size => "40x40", :class => "left folder-icon");[Escaped Output] label_tag(d4x_sanitizer(t("draft")), nil, :class => "folder-name");[Escaped Output] @tot_draft; end;[Escaped Output] link_to("/agadanga-junk") do; [Escaped Output] image_tag("junk.png", :size => "40x40", :class => "left folder-icon");[Escaped Output] label_tag(d4x_sanitizer(t("junk")), nil, :class => "folder-name");[Escaped Output] @tot_spam; end;[Escaped Output] link_to("/agadanga-important") do; [Escaped Output] image_tag("flag.png", :size => "40x40", :class => "left folder-icon");[Escaped Output] label_tag(d4x_sanitizer(t("important")), nil, :class => "current-folder");[Escaped Output] @tot_important; end;[Escaped Output] link_to("/agadanga-archivied") do; [Escaped Output] image_tag("archive3.png", :size => "40x40", :class => "left folder-icon");[Escaped Output] label_tag(d4x_sanitizer(t("archive")), nil, :class => "folder-name");[Escaped Output] @tot_archivied; end;[Escaped Output] link_to("/agadanga-trash") do; [Escaped Output] image_tag("trash4.png", :size => "40x40", :class => "left folder-icon");[Escaped Output] label_tag(d4x_sanitizer(t("trash")), nil, :class => "folder-name");[Escaped Output] @tot_trash; end; end
[Escaped Output] render(partial => "messages_actions", {})
[Escaped Output] render(partial => "agadanga_row_titles", {})
[Escaped Output] render(partial => "agadanga_folder_evo", {})
[Escaped Output] will_paginate(@folder, :per_page => 12)
[Escaped Output] form_tag("actions", :method => "post") do; [Escaped Output] render(partial => "messages_actions", {});[Escaped Output] render(partial => "agadanga_row_titles", {});[Escaped Output] render(partial => "agadanga_folder_evo", {});[Escaped Output] will_paginate(@folder, :per_page => 12); end
[Escaped Output] render(partial => "agadanga_read_message", {})

agadanga/agadanga_inbox

[Escaped Output] label_tag(t("inbox"), nil, :class => "")
[Escaped Output] t("you have")
[Escaped Output] t("messages")
[Escaped Output] t("Inbox is Empty")
[Escaped Output] render(partial => "messages_actions", {})
[Escaped Output] render(partial => "agadanga_row_titles", {})
[Escaped Output] render(partial => "agadanga_folder_evo", {})
[Escaped Output] will_paginate(@folder, :per_page => 12)
[Escaped Output] form_tag("actions", :method => "post") do; if ((@tot_inbox + @tot_new) > 0) then; [Escaped Output] label_tag(t("inbox"), nil, :class => ""); [Escaped Output] t("you have"); [Escaped Output] t("messages");else; [Escaped Output] t("Inbox is Empty");end;[Escaped Output] render(partial => "messages_actions", {});[Escaped Output] render(partial => "agadanga_row_titles", {});[Escaped Output] render(partial => "agadanga_folder_evo", {});[Escaped Output] will_paginate(@folder, :per_page => 12); end
[Escaped Output] image_tag("archive2.png", :size => "32x32", :class => "left folder-icon")
[Escaped Output] label_tag(d4x_sanitizer(t("inbox")), nil, :class => "current-folder")
[Escaped Output] image_tag("checking-current.gif", :id => "checking-current", :class => "none")
[Escaped Output] @tot_inbox
[Escaped Output] link_to("/agadanga-inbox") do; [Escaped Output] image_tag("archive2.png", :size => "32x32", :class => "left folder-icon");[Escaped Output] label_tag(d4x_sanitizer(t("inbox")), nil, :class => "current-folder");[Escaped Output] image_tag("checking-current.gif", :id => "checking-current", :class => "none");[Escaped Output] @tot_inbox; end
[Escaped Output] image_tag("sent.png", :size => "32x32", :class => "left folder-icon")
[Escaped Output] label_tag(d4x_sanitizer(t("sent")), nil, :class => "folder-name")
[Escaped Output] @tot_sent
[Escaped Output] link_to("/agadanga-sent") do; [Escaped Output] image_tag("sent.png", :size => "32x32", :class => "left folder-icon");[Escaped Output] label_tag(d4x_sanitizer(t("sent")), nil, :class => "folder-name");[Escaped Output] @tot_sent; end
[Escaped Output] image_tag("compose2.png", :size => "40x40", :class => "left folder-icon")
[Escaped Output] label_tag(d4x_sanitizer(t("draft")), nil, :class => "folder-name")
[Escaped Output] @tot_draft
[Escaped Output] link_to("/agadanga-drafts") do; [Escaped Output] image_tag("compose2.png", :size => "40x40", :class => "left folder-icon");[Escaped Output] label_tag(d4x_sanitizer(t("draft")), nil, :class => "folder-name");[Escaped Output] @tot_draft; end
[Escaped Output] image_tag("junk.png", :size => "40x40", :class => "left folder-icon")
[Escaped Output] label_tag(d4x_sanitizer(t("junk")), nil, :class => "folder-name")
[Escaped Output] @tot_spam
[Escaped Output] link_to("/agadanga-junk") do; [Escaped Output] image_tag("junk.png", :size => "40x40", :class => "left folder-icon");[Escaped Output] label_tag(d4x_sanitizer(t("junk")), nil, :class => "folder-name");[Escaped Output] @tot_spam; end
[Escaped Output] image_tag("flag.png", :size => "40x40", :class => "left folder-icon")
[Escaped Output] label_tag(d4x_sanitizer(t("important")), nil, :class => "folder-name")
[Escaped Output] @tot_important
[Escaped Output] link_to("/agadanga-important") do; [Escaped Output] image_tag("flag.png", :size => "40x40", :class => "left folder-icon");[Escaped Output] label_tag(d4x_sanitizer(t("important")), nil, :class => "folder-name");[Escaped Output] @tot_important; end
[Escaped Output] image_tag("archive3.png", :size => "40x40", :class => "left folder-icon")
[Escaped Output] label_tag(d4x_sanitizer(t("archive")), nil, :class => "folder-name")
[Escaped Output] @tot_archivied
[Escaped Output] link_to("/agadanga-archivied") do; [Escaped Output] image_tag("archive3.png", :size => "40x40", :class => "left folder-icon");[Escaped Output] label_tag(d4x_sanitizer(t("archive")), nil, :class => "folder-name");[Escaped Output] @tot_archivied; end
[Escaped Output] image_tag("trash4.png", :size => "40x40", :class => "left folder-icon")
[Escaped Output] label_tag(d4x_sanitizer(t("trash")), nil, :class => "folder-name")
[Escaped Output] @tot_trash
[Escaped Output] link_to("/agadanga-trash") do; [Escaped Output] image_tag("trash4.png", :size => "40x40", :class => "left folder-icon");[Escaped Output] label_tag(d4x_sanitizer(t("trash")), nil, :class => "folder-name");[Escaped Output] @tot_trash; end

agadanga/agadanga_junk

[Escaped Output] t("you have")
[Escaped Output] t("messages")
[Escaped Output] t("junk is empty")
[Escaped Output] render(partial => "messages_actions", {})
[Escaped Output] render(partial => "agadanga_row_titles", {})
[Escaped Output] render(partial => "agadanga_folder_evo", {})
[Escaped Output] will_paginate(@folder, :per_page => 12)
[Escaped Output] form_tag("actions", :method => "post") do; if (@tot_spam > 0) then; [Escaped Output] t("you have"); [Escaped Output] t("messages");else; [Escaped Output] t("junk is empty");end;[Escaped Output] render(partial => "messages_actions", {});[Escaped Output] render(partial => "agadanga_row_titles", {});[Escaped Output] render(partial => "agadanga_folder_evo", {});[Escaped Output] will_paginate(@folder, :per_page => 12); end

agadanga/agadanga_keys

[Escaped Output] javascript_include_tag("d4x-mail-accounts")
[Escaped Output] content_for(:head) do; [Escaped Output] javascript_include_tag("d4x-mail-accounts"); end
[Escaped Output] render(partial => "big_icons_some_active", {})
[Escaped Output] content_for(:big_icons_menu) do; [Escaped Output] render(partial => "big_icons_some_active", {}); end
[Escaped Output] render(partial => "no_folder_selected", {})
[Escaped Output] content_for(:folders_list) do; [Escaped Output] render(partial => "no_folder_selected", {}); end
[Escaped Output] pluralize(@mail_account.errors.count, d4x_sanitizer(t("error")))
[Escaped Output] msg
[Escaped Output] label_tag(d4x_sanitizer(t("change your password")), nil, :class => "lcd lcd-bigger grey")
[Escaped Output] label_tag(@mail_account.login, nil, :class => "lcd lcd-bigger green")
[Escaped Output] label_tag(agadanga_changed_pass(@mail_account.id), nil, :class => "lcd lcd-bigger violet")
[Escaped Output] label_tag(((((d4x_sanitizer(t("your password has been updated")) + " ") + time_ago_in_words(@mail_account.updated_at)) + " ") + d4x_sanitizer(t("ago"))), nil, :class => "lcd yellow")
[Escaped Output] f.label(d4x_sanitizer(t("from name")), :class => "show-item-label")
[Escaped Output] f.text_field(:name, :class => "thin-control center agadanga_from_name")
[Escaped Output] f.label(d4x_sanitizer(t("new password")), :class => "show-item-label ")
[Escaped Output] f.password_field(:password, :class => "thin-control center agadanga_pass")
[Escaped Output] f.label(d4x_sanitizer(t(:confirm)), :class => "show-item-label")
[Escaped Output] f.password_field(:password, :class => "thin-control center agadanga_pass")
[Escaped Output] f.submit(d4x_sanitizer(t("change password")), :class => "button-d4x")
[Escaped Output] form_for(@mail_account) do; if @mail_account.errors.any? then; [Escaped Output] pluralize(@mail_account.errors.count, d4x_sanitizer(t("error"))); @mail_account.errors.full_messages.each do; [Escaped Output] msg; end;end;[Escaped Output] label_tag(d4x_sanitizer(t("change your password")), nil, :class => "lcd lcd-bigger grey");[Escaped Output] label_tag(@mail_account.login, nil, :class => "lcd lcd-bigger green");[Escaped Output] label_tag(agadanga_changed_pass(@mail_account.id), nil, :class => "lcd lcd-bigger violet");[Escaped Output] label_tag(((((d4x_sanitizer(t("your password has been updated")) + " ") + time_ago_in_words(@mail_account.updated_at)) + " ") + d4x_sanitizer(t("ago"))), nil, :class => "lcd yellow");[Escaped Output] f.label(d4x_sanitizer(t("from name")), :class => "show-item-label");[Escaped Output] f.text_field(:name, :class => "thin-control center agadanga_from_name");[Escaped Output] f.label(d4x_sanitizer(t("new password")), :class => "show-item-label ");[Escaped Output] f.password_field(:password, :class => "thin-control center agadanga_pass");[Escaped Output] f.label(d4x_sanitizer(t(:confirm)), :class => "show-item-label");[Escaped Output] f.password_field(:password, :class => "thin-control center agadanga_pass");[Escaped Output] f.submit(d4x_sanitizer(t("change password")), :class => "button-d4x"); end

agadanga/agadanga_orders

[Escaped Output] content_for(:head) do; [ignored]; end
[Escaped Output] render(partial => "/agadanga/big_icons_some_active", {})
[Escaped Output] content_for(:big_icons_menu) do; [Escaped Output] render(partial => "/agadanga/big_icons_some_active", {}); end
[Escaped Output] render(partial => "/agadanga/no_folder_selected", {})
[Escaped Output] content_for(:folders_list) do; [Escaped Output] render(partial => "/agadanga/no_folder_selected", {}); end
[Escaped Output] d4x_sanitizer(t("order"))
[Escaped Output] d4x_sanitizer(t("received"))
[Escaped Output] d4x_sanitizer(t("order"))
[Escaped Output] d4x_sanitizer(t("customer"))
[Escaped Output] d4x_sanitizer(t("package"))
[Escaped Output] d4x_sanitizer(t("email"))
[Escaped Output] d4x_sanitizer(t("total"))
[Escaped Output] cycle("odd", "even")
[Escaped Output] order.created_at
[Escaped Output] order.id
[Escaped Output] order.user_id
[Escaped Output] order.package
[Escaped Output] order.email
[Escaped Output] order.total
[Escaped Output] link_to(image_tag("cog.png", :border => 0, :mouseover => "cog.png", :title => d4x_sanitizer(t("show")), :size => "16x16"), order)
[Escaped Output] link_to(image_tag("cog_edit.png", :border => 0, :mouseover => "cog_edit.png", :title => d4x_sanitizer(t("edit")), :size => "16x16"), edit_order_path(order))
[Escaped Output] button_to("", order, :confirm => "are you sure?", :method => :delete, :class => "odestroy", :title => d4x_sanitizer(t("delete")), :name => "destroy", :size => "16x16")

agadanga/agadanga_partners

[Escaped Output] content_for(:head) do; [ignored]; end
[Escaped Output] render(partial => "/agadanga/big_icons_some_active", {})
[Escaped Output] content_for(:big_icons_menu) do; [Escaped Output] render(partial => "/agadanga/big_icons_some_active", {}); end
[Escaped Output] render(partial => "/agadanga/no_folder_selected", {})
[Escaped Output] content_for(:folders_list) do; [Escaped Output] render(partial => "/agadanga/no_folder_selected", {}); end
[Escaped Output] d4x_sanitizer(t(:firstname))
[Escaped Output] d4x_sanitizer(t(:lastname))
[Escaped Output] d4x_sanitizer(t(:email))
[Escaped Output] cycle("odd", "even")
[Escaped Output] partner.firstname
[Escaped Output] partner.lastname
[Escaped Output] partner.email
[Escaped Output] link_to(image_tag("cog.png", :border => 0, :mouseover => "cog.png", :title => t("show"), :size => "16x16"), partner)
[Escaped Output] link_to(image_tag("cog_edit.png", :border => 0, :mouseover => "cog_edit.png", :title => t("edit"), :size => "16x16"), edit_partner_path(partner))
[Escaped Output] button_to("", partner, :confirm => "are you sure?", :method => :delete, :class => "odestroy", :title => t("delete"), :name => "destroy", :size => "16x16")

agadanga/agadanga_sent

[Escaped Output] t("you have")
[Escaped Output] t("messages")
[Escaped Output] t("sent is empty")
[Escaped Output] render(partial => "messages_actions", {})
[Escaped Output] render(partial => "agadanga_row_titles", {})
[Escaped Output] render(partial => "agadanga_folder_evo", {})
[Escaped Output] will_paginate(@folder, :per_page => 12)
[Escaped Output] form_tag("actions", :method => "post") do; if (@tot_sent > 0) then; [Escaped Output] t("you have"); [Escaped Output] t("messages");else; [Escaped Output] t("sent is empty");end;[Escaped Output] render(partial => "messages_actions", {});[Escaped Output] render(partial => "agadanga_row_titles", {});[Escaped Output] render(partial => "agadanga_folder_evo", {});[Escaped Output] will_paginate(@folder, :per_page => 12); end

agadanga/agadanga_settings

[Escaped Output] label_tag(d4x_sanitizer(t("custom agadanga")), nil, :class => "lcd lcd-bigger grey")
[Escaped Output] label_tag(d4x_sanitizer(t("from name")), nil, :class => "lcd orange center")
[Escaped Output] g.text_field(:name, :class => "form-control center")
[Escaped Output] g.submit(d4x_sanitizer(t("update")), :class => "btn btn-outline-warning")
[Escaped Output] form_for(@mail_account) do; [Escaped Output] label_tag(d4x_sanitizer(t("from name")), nil, :class => "lcd orange center");[Escaped Output] g.text_field(:name, :class => "form-control center");[Escaped Output] g.submit(d4x_sanitizer(t("update")), :class => "btn btn-outline-warning"); end

agadanga/agadanga_trash

[Escaped Output] t("you have")
[Escaped Output] t("messages")
[Escaped Output] t("trash is empty")
[Escaped Output] render(partial => "messages_actions", {})
[Escaped Output] render(partial => "agadanga_row_titles", {})
[Escaped Output] render(partial => "agadanga_folder_evo", {})
[Escaped Output] will_paginate(@folder, :per_page => 12)
[Escaped Output] form_tag("actions", :method => "post") do; if (@tot_trash > 0) then; [Escaped Output] t("you have"); [Escaped Output] t("messages");else; [Escaped Output] t("trash is empty");end;[Escaped Output] render(partial => "messages_actions", {});[Escaped Output] render(partial => "agadanga_row_titles", {});[Escaped Output] render(partial => "agadanga_folder_evo", {});[Escaped Output] will_paginate(@folder, :per_page => 12); end

agadanga/index

[Escaped Output] render(partial => "big_icons_all_active", {})
[Escaped Output] content_for(:big_icons_menu) do; [Escaped Output] render(partial => "big_icons_all_active", {}); end
[Escaped Output] image_tag("archive7.png", :size => "40x40", :class => "left folder-icon")
[Escaped Output] label_tag(d4x_sanitizer(t("inbox")), nil, :class => "current-folder")
[Escaped Output] @tot_inbox
[Escaped Output] link_to("/agadanga-inbox") do; [Escaped Output] image_tag("archive7.png", :size => "40x40", :class => "left folder-icon");[Escaped Output] label_tag(d4x_sanitizer(t("inbox")), nil, :class => "current-folder");[Escaped Output] @tot_inbox; end
[Escaped Output] image_tag("sent.png", :size => "40x40", :class => "left folder-icon")
[Escaped Output] label_tag(d4x_sanitizer(t("sent")), nil, :class => "folder-name")
[Escaped Output] @tot_sent
[Escaped Output] link_to("/agadanga-sent") do; [Escaped Output] image_tag("sent.png", :size => "40x40", :class => "left folder-icon");[Escaped Output] label_tag(d4x_sanitizer(t("sent")), nil, :class => "folder-name");[Escaped Output] @tot_sent; end
[Escaped Output] image_tag("compose2.png", :size => "40x40", :class => "left folder-icon")
[Escaped Output] label_tag(d4x_sanitizer(t("draft")), nil, :class => "folder-name")
[Escaped Output] @tot_draft
[Escaped Output] link_to("/agadanga-drafts") do; [Escaped Output] image_tag("compose2.png", :size => "40x40", :class => "left folder-icon");[Escaped Output] label_tag(d4x_sanitizer(t("draft")), nil, :class => "folder-name");[Escaped Output] @tot_draft; end
[Escaped Output] image_tag("junk.png", :size => "40x40", :class => "left folder-icon")
[Escaped Output] label_tag(d4x_sanitizer(t("junk")), nil, :class => "folder-name")
[Escaped Output] @tot_spam
[Escaped Output] link_to("/agadanga-junk") do; [Escaped Output] image_tag("junk.png", :size => "40x40", :class => "left folder-icon");[Escaped Output] label_tag(d4x_sanitizer(t("junk")), nil, :class => "folder-name");[Escaped Output] @tot_spam; end
[Escaped Output] image_tag("flag.png", :size => "40x40", :class => "left folder-icon")
[Escaped Output] label_tag(d4x_sanitizer(t("important")), nil, :class => "folder-name")
[Escaped Output] @tot_important
[Escaped Output] link_to("/agadanga-important") do; [Escaped Output] image_tag("flag.png", :size => "40x40", :class => "left folder-icon");[Escaped Output] label_tag(d4x_sanitizer(t("important")), nil, :class => "folder-name");[Escaped Output] @tot_important; end
[Escaped Output] image_tag("archive3.png", :size => "40x40", :class => "left folder-icon")
[Escaped Output] label_tag(d4x_sanitizer(t("archivied")), nil, :class => "folder-name")
[Escaped Output] @tot_archivied
[Escaped Output] link_to("/agadanga-archivied") do; [Escaped Output] image_tag("archive3.png", :size => "40x40", :class => "left folder-icon");[Escaped Output] label_tag(d4x_sanitizer(t("archivied")), nil, :class => "folder-name");[Escaped Output] @tot_archivied; end
[Escaped Output] image_tag("trash4.png", :size => "40x40", :class => "left folder-icon")
[Escaped Output] label_tag(d4x_sanitizer(t("trash")), nil, :class => "folder-name")
[Escaped Output] @tot_trash
[Escaped Output] link_to("/agadanga-trash") do; [Escaped Output] image_tag("trash4.png", :size => "40x40", :class => "left folder-icon");[Escaped Output] label_tag(d4x_sanitizer(t("trash")), nil, :class => "folder-name");[Escaped Output] @tot_trash; end
[Escaped Output] content_for(:folders_list) do; [Escaped Output] link_to("/agadanga-inbox") do; [Escaped Output] image_tag("archive7.png", :size => "40x40", :class => "left folder-icon");[Escaped Output] label_tag(d4x_sanitizer(t("inbox")), nil, :class => "current-folder");[Escaped Output] @tot_inbox; end;[Escaped Output] link_to("/agadanga-sent") do; [Escaped Output] image_tag("sent.png", :size => "40x40", :class => "left folder-icon");[Escaped Output] label_tag(d4x_sanitizer(t("sent")), nil, :class => "folder-name");[Escaped Output] @tot_sent; end;[Escaped Output] link_to("/agadanga-drafts") do; [Escaped Output] image_tag("compose2.png", :size => "40x40", :class => "left folder-icon");[Escaped Output] label_tag(d4x_sanitizer(t("draft")), nil, :class => "folder-name");[Escaped Output] @tot_draft; end;[Escaped Output] link_to("/agadanga-junk") do; [Escaped Output] image_tag("junk.png", :size => "40x40", :class => "left folder-icon");[Escaped Output] label_tag(d4x_sanitizer(t("junk")), nil, :class => "folder-name");[Escaped Output] @tot_spam; end;[Escaped Output] link_to("/agadanga-important") do; [Escaped Output] image_tag("flag.png", :size => "40x40", :class => "left folder-icon");[Escaped Output] label_tag(d4x_sanitizer(t("important")), nil, :class => "folder-name");[Escaped Output] @tot_important; end;[Escaped Output] link_to("/agadanga-archivied") do; [Escaped Output] image_tag("archive3.png", :size => "40x40", :class => "left folder-icon");[Escaped Output] label_tag(d4x_sanitizer(t("archivied")), nil, :class => "folder-name");[Escaped Output] @tot_archivied; end;[Escaped Output] link_to("/agadanga-trash") do; [Escaped Output] image_tag("trash4.png", :size => "40x40", :class => "left folder-icon");[Escaped Output] label_tag(d4x_sanitizer(t("trash")), nil, :class => "folder-name");[Escaped Output] @tot_trash; end; end
[Escaped Output] render(partial => "messages_actions", {})
[Escaped Output] render(partial => "agadanga_row_titles", {})
[Escaped Output] render(partial => "agadanga_folder_evo", {})
[Escaped Output] will_paginate(@folder, :per_page => 12)
[Escaped Output] form_tag("actions", :method => "post") do; [Escaped Output] render(partial => "messages_actions", {});[Escaped Output] render(partial => "agadanga_row_titles", {});[Escaped Output] render(partial => "agadanga_folder_evo", {});[Escaped Output] will_paginate(@folder, :per_page => 12); end
[Escaped Output] render(partial => "agadanga_read_message", {})

agadanga/settings

[Escaped Output] javascript_include_tag("d4x-settings")
[Escaped Output] content_for(:head) do; [Escaped Output] javascript_include_tag("d4x-settings"); end
[Escaped Output] pluralize(@user.errors.count, d4x_sanitizer(t("error")))
[Escaped Output] d4x_sanitizer(msg)
[Escaped Output] f.label(d4x_sanitizer(t(:theme)), :class => "show-item-data")
[Escaped Output] f.select(:theme, options_for_select([["dark2012", "dark2012"], ["girlie", "girlie"]], @user.theme))
[Escaped Output] image_tag("default_shot.png", :id => "dark2012")
[Escaped Output] image_tag("girlie_shot.png", :id => "girlie", :class => "none")
[Escaped Output] f.label(d4x_sanitizer(t(:locale)), :class => "show-item-data")
[Escaped Output] f.select(:locale, options_for_select([["English", "en"], ["Italian", "it"]], @user.locale))
[Escaped Output] f.label(d4x_sanitizer(t(:approved)), :class => "show-item-data")
[Escaped Output] f.select(:approved, options_for_select([[d4x_sanitizer(t("Approved")), true], [d4x_sanitizer(t("Pending")), false]], @user.approved))
[Escaped Output] check_box_tag("user[roles][]", role, @user.roles.include?(role))
[Escaped Output] h(role.humanize)
[Escaped Output] hidden_field_tag("user[roles][]")
[Escaped Output] f.submit(d4x_sanitizer(t("save settings")), :class => "button-d4x")
[Escaped Output] form_for(@user, :html => ({ :multipart => true })) do; if @user.errors.any? then; [Escaped Output] pluralize(@user.errors.count, d4x_sanitizer(t("error"))); @user.errors.full_messages.each do; [Escaped Output] d4x_sanitizer(msg); end;end;[Escaped Output] f.label(d4x_sanitizer(t(:theme)), :class => "show-item-data");[Escaped Output] f.select(:theme, options_for_select([["dark2012", "dark2012"], ["girlie", "girlie"]], @user.theme));[Escaped Output] image_tag("default_shot.png", :id => "dark2012");[Escaped Output] image_tag("girlie_shot.png", :id => "girlie", :class => "none");[Escaped Output] f.label(d4x_sanitizer(t(:locale)), :class => "show-item-data");[Escaped Output] f.select(:locale, options_for_select([["English", "en"], ["Italian", "it"]], @user.locale));if current_user.role?(:admin) then; [Escaped Output] f.label(d4x_sanitizer(t(:approved)), :class => "show-item-data"); [Escaped Output] f.select(:approved, options_for_select([[d4x_sanitizer(t("Approved")), true], [d4x_sanitizer(t("Pending")), false]], @user.approved)); for role in User::ROLES do; [Escaped Output] check_box_tag("user[roles][]", role, @user.roles.include?(role)); [Escaped Output] h(role.humanize); end; [Escaped Output] hidden_field_tag("user[roles][]");end;[Escaped Output] f.submit(d4x_sanitizer(t("save settings")), :class => "button-d4x"); end

alias_maps/_form

[Escaped Output] pluralize(@alias_map.errors.count, "error")
[Escaped Output] msg
[Escaped Output] f.submit
[Escaped Output] form_for(@alias_map) do; if @alias_map.errors.any? then; [Escaped Output] pluralize(@alias_map.errors.count, "error"); @alias_map.errors.full_messages.each do; [Escaped Output] msg; end;end;[Escaped Output] f.submit; end

alias_maps/_form.["Template:alias_maps/edit"]

[Escaped Output] pluralize(@alias_map.errors.count, "error")
[Escaped Output] msg
[Escaped Output] FormBuilder.new.submit
[Escaped Output] form_for(@alias_map) do; if @alias_map.errors.any? then; [Escaped Output] pluralize(@alias_map.errors.count, "error"); @alias_map.errors.full_messages.each do; [Escaped Output] msg; end;end;[Escaped Output] FormBuilder.new.submit; end

alias_maps/edit

[Escaped Output] render(partial => "form", {})
[Escaped Output] link_to("Show", @alias_map)
[Escaped Output] link_to("Back", alias_maps_path)

alias_maps/index

[Escaped Output] t("aliases")
[Escaped Output] t(:address)
[Escaped Output] t(:alias)
[Escaped Output] t(:domain)
[Escaped Output] t(:active)
[Escaped Output] alias_map.address
[Escaped Output] alias_map.alias
[Escaped Output] alias_map.domain
[Escaped Output] alias_map.active
[Escaped Output] link_to("Edit", edit_alias_map_path(alias_map), :class => "btn btn-xs btn-warning")
[Escaped Output] button_to("Destroy", alias_map, :method => :delete, :data => ({ :confirm => "Are you sure?" }), :class => "btn btn-xs btn-danger")

alias_maps/new

[Escaped Output] render(partial => "form", {})
[Escaped Output] link_to("Back", alias_maps_path)

alias_maps/show

[Escaped Output] notice
[Escaped Output] link_to("Edit", edit_alias_map_path(@alias_map))
[Escaped Output] link_to("Back", alias_maps_path)

authors/_form

[Escaped Output] pluralize(@author.errors.count, "error")
[Escaped Output] msg
[Escaped Output] f.label(t(:fullname))
[Escaped Output] f.text_field(:fullname, :class => "def-input")
[Escaped Output] f.label(t("headline"))
[Escaped Output] f.text_field(:headline, :class => "def-input")
[Escaped Output] f.label(t("dates"))
[Escaped Output] f.text_field(:dates, :class => "def-input")
[Escaped Output] f.label(t("country"))
[Escaped Output] f.text_field(:country, :class => "def-input")
[Escaped Output] f.label(t("notes"))
[Escaped Output] f.text_area(:notes)
[Escaped Output] f.label(t(:photo))
[Escaped Output] f.file_field(:photo)
[Escaped Output] f.submit(:class => "button-d4x")
[Escaped Output] form_for(@author, :url => authors_path, :html => ({ :multipart => true })) do; if @author.errors.any? then; [Escaped Output] pluralize(@author.errors.count, "error"); @author.errors.full_messages.each do; [Escaped Output] msg; end;end;[Escaped Output] f.label(t(:fullname));[Escaped Output] f.text_field(:fullname, :class => "def-input");[Escaped Output] f.label(t("headline"));[Escaped Output] f.text_field(:headline, :class => "def-input");[Escaped Output] f.label(t("dates"));[Escaped Output] f.text_field(:dates, :class => "def-input");[Escaped Output] f.label(t("country"));[Escaped Output] f.text_field(:country, :class => "def-input");[Escaped Output] f.label(t("notes"));[Escaped Output] f.text_area(:notes);[Escaped Output] f.label(t(:photo));[Escaped Output] f.file_field(:photo);[Escaped Output] f.submit(:class => "button-d4x"); end

authors/_form.["AuthorsController#create", "Template:authors/new"]

[Escaped Output] pluralize(Author.new(params[:author]).errors.count, "error")
[Escaped Output] msg
[Escaped Output] FormBuilder.new.label(t(:fullname))
[Escaped Output] FormBuilder.new.text_field(:fullname, :class => "def-input")
[Escaped Output] FormBuilder.new.label(t("headline"))
[Escaped Output] FormBuilder.new.text_field(:headline, :class => "def-input")
[Escaped Output] FormBuilder.new.label(t("dates"))
[Escaped Output] FormBuilder.new.text_field(:dates, :class => "def-input")
[Escaped Output] FormBuilder.new.label(t("country"))
[Escaped Output] FormBuilder.new.text_field(:country, :class => "def-input")
[Escaped Output] FormBuilder.new.label(t("notes"))
[Escaped Output] FormBuilder.new.text_area(:notes)
[Escaped Output] FormBuilder.new.label(t(:photo))
[Escaped Output] FormBuilder.new.file_field(:photo)
[Escaped Output] FormBuilder.new.submit(:class => "button-d4x")
[Escaped Output] form_for(Author.new(params[:author]), :url => authors_path, :html => ({ :multipart => true })) do; if Author.new(params[:author]).errors.any? then; [Escaped Output] pluralize(Author.new(params[:author]).errors.count, "error"); Author.new(params[:author]).errors.full_messages.each do; [Escaped Output] msg; end;end;[Escaped Output] FormBuilder.new.label(t(:fullname));[Escaped Output] FormBuilder.new.text_field(:fullname, :class => "def-input");[Escaped Output] FormBuilder.new.label(t("headline"));[Escaped Output] FormBuilder.new.text_field(:headline, :class => "def-input");[Escaped Output] FormBuilder.new.label(t("dates"));[Escaped Output] FormBuilder.new.text_field(:dates, :class => "def-input");[Escaped Output] FormBuilder.new.label(t("country"));[Escaped Output] FormBuilder.new.text_field(:country, :class => "def-input");[Escaped Output] FormBuilder.new.label(t("notes"));[Escaped Output] FormBuilder.new.text_area(:notes);[Escaped Output] FormBuilder.new.label(t(:photo));[Escaped Output] FormBuilder.new.file_field(:photo);[Escaped Output] FormBuilder.new.submit(:class => "button-d4x"); end

authors/_form.["AuthorsController#edit", "Template:authors/edit"]

[Escaped Output] pluralize(Author.find(params[:id]).errors.count, "error")
[Escaped Output] (Unresolved Model).new
[Escaped Output] FormBuilder.new.label(t(:fullname))
[Escaped Output] FormBuilder.new.text_field(:fullname, :class => "def-input")
[Escaped Output] FormBuilder.new.label(t("headline"))
[Escaped Output] FormBuilder.new.text_field(:headline, :class => "def-input")
[Escaped Output] FormBuilder.new.label(t("dates"))
[Escaped Output] FormBuilder.new.text_field(:dates, :class => "def-input")
[Escaped Output] FormBuilder.new.label(t("country"))
[Escaped Output] FormBuilder.new.text_field(:country, :class => "def-input")
[Escaped Output] FormBuilder.new.label(t("notes"))
[Escaped Output] FormBuilder.new.text_area(:notes)
[Escaped Output] FormBuilder.new.label(t(:photo))
[Escaped Output] FormBuilder.new.file_field(:photo)
[Escaped Output] FormBuilder.new.submit(:class => "button-d4x")
[Escaped Output] form_for(Author.find(params[:id]), :url => authors_path, :html => ({ :multipart => true })) do; if Author.find(params[:id]).errors.any? then; [Escaped Output] pluralize(Author.find(params[:id]).errors.count, "error"); Author.find(params[:id]).errors.full_messages.each do; [Escaped Output] (Unresolved Model).new; end;end;[Escaped Output] FormBuilder.new.label(t(:fullname));[Escaped Output] FormBuilder.new.text_field(:fullname, :class => "def-input");[Escaped Output] FormBuilder.new.label(t("headline"));[Escaped Output] FormBuilder.new.text_field(:headline, :class => "def-input");[Escaped Output] FormBuilder.new.label(t("dates"));[Escaped Output] FormBuilder.new.text_field(:dates, :class => "def-input");[Escaped Output] FormBuilder.new.label(t("country"));[Escaped Output] FormBuilder.new.text_field(:country, :class => "def-input");[Escaped Output] FormBuilder.new.label(t("notes"));[Escaped Output] FormBuilder.new.text_area(:notes);[Escaped Output] FormBuilder.new.label(t(:photo));[Escaped Output] FormBuilder.new.file_field(:photo);[Escaped Output] FormBuilder.new.submit(:class => "button-d4x"); end

authors/_form.["AuthorsController#new", "Template:authors/new"]

[Escaped Output] pluralize(Author.new.errors.count, "error")
[Escaped Output] msg
[Escaped Output] FormBuilder.new.label(t(:fullname))
[Escaped Output] FormBuilder.new.text_field(:fullname, :class => "def-input")
[Escaped Output] FormBuilder.new.label(t("headline"))
[Escaped Output] FormBuilder.new.text_field(:headline, :class => "def-input")
[Escaped Output] FormBuilder.new.label(t("dates"))
[Escaped Output] FormBuilder.new.text_field(:dates, :class => "def-input")
[Escaped Output] FormBuilder.new.label(t("country"))
[Escaped Output] FormBuilder.new.text_field(:country, :class => "def-input")
[Escaped Output] FormBuilder.new.label(t("notes"))
[Escaped Output] FormBuilder.new.text_area(:notes)
[Escaped Output] FormBuilder.new.label(t(:photo))
[Escaped Output] FormBuilder.new.file_field(:photo)
[Escaped Output] FormBuilder.new.submit(:class => "button-d4x")
[Escaped Output] form_for(Author.new, :url => authors_path, :html => ({ :multipart => true })) do; if Author.new.errors.any? then; [Escaped Output] pluralize(Author.new.errors.count, "error"); Author.new.errors.full_messages.each do; [Escaped Output] msg; end;end;[Escaped Output] FormBuilder.new.label(t(:fullname));[Escaped Output] FormBuilder.new.text_field(:fullname, :class => "def-input");[Escaped Output] FormBuilder.new.label(t("headline"));[Escaped Output] FormBuilder.new.text_field(:headline, :class => "def-input");[Escaped Output] FormBuilder.new.label(t("dates"));[Escaped Output] FormBuilder.new.text_field(:dates, :class => "def-input");[Escaped Output] FormBuilder.new.label(t("country"));[Escaped Output] FormBuilder.new.text_field(:country, :class => "def-input");[Escaped Output] FormBuilder.new.label(t("notes"));[Escaped Output] FormBuilder.new.text_area(:notes);[Escaped Output] FormBuilder.new.label(t(:photo));[Escaped Output] FormBuilder.new.file_field(:photo);[Escaped Output] FormBuilder.new.submit(:class => "button-d4x"); end

authors/_form.["Template:authors/edit"]

[Escaped Output] pluralize(@author.errors.count, "error")
[Escaped Output] msg
[Escaped Output] FormBuilder.new.label(t(:fullname))
[Escaped Output] FormBuilder.new.text_field(:fullname, :class => "def-input")
[Escaped Output] FormBuilder.new.label(t("headline"))
[Escaped Output] FormBuilder.new.text_field(:headline, :class => "def-input")
[Escaped Output] FormBuilder.new.label(t("dates"))
[Escaped Output] FormBuilder.new.text_field(:dates, :class => "def-input")
[Escaped Output] FormBuilder.new.label(t("country"))
[Escaped Output] FormBuilder.new.text_field(:country, :class => "def-input")
[Escaped Output] FormBuilder.new.label(t("notes"))
[Escaped Output] FormBuilder.new.text_area(:notes)
[Escaped Output] FormBuilder.new.label(t(:photo))
[Escaped Output] FormBuilder.new.file_field(:photo)
[Escaped Output] FormBuilder.new.submit(:class => "button-d4x")
[Escaped Output] form_for(@author, :url => authors_path, :html => ({ :multipart => true })) do; if @author.errors.any? then; [Escaped Output] pluralize(@author.errors.count, "error"); @author.errors.full_messages.each do; [Escaped Output] msg; end;end;[Escaped Output] FormBuilder.new.label(t(:fullname));[Escaped Output] FormBuilder.new.text_field(:fullname, :class => "def-input");[Escaped Output] FormBuilder.new.label(t("headline"));[Escaped Output] FormBuilder.new.text_field(:headline, :class => "def-input");[Escaped Output] FormBuilder.new.label(t("dates"));[Escaped Output] FormBuilder.new.text_field(:dates, :class => "def-input");[Escaped Output] FormBuilder.new.label(t("country"));[Escaped Output] FormBuilder.new.text_field(:country, :class => "def-input");[Escaped Output] FormBuilder.new.label(t("notes"));[Escaped Output] FormBuilder.new.text_area(:notes);[Escaped Output] FormBuilder.new.label(t(:photo));[Escaped Output] FormBuilder.new.file_field(:photo);[Escaped Output] FormBuilder.new.submit(:class => "button-d4x"); end

authors/crop

[Escaped Output] stylesheet_link_tag("jquery.Jcrop")
[Escaped Output] javascript_include_tag("jquery.Jcrop.min")
[Escaped Output] image_tag(@author.photo.url, :id => "cropbox")
[Escaped Output] image_tag(@author.photo.url(:thumb), :id => "preview")
[Escaped Output] f.text_field(attribute, :id => attribute)
[Escaped Output] f.submit("Crop")

authors/crop.["AuthorsController#create"]

[Escaped Output] stylesheet_link_tag("jquery.Jcrop")
[Escaped Output] javascript_include_tag("jquery.Jcrop.min")
[Escaped Output] image_tag(Author.new(params[:author]).photo.url, :id => "cropbox")
[Escaped Output] image_tag(Author.new(params[:author]).photo.url(:thumb), :id => "preview")
[Escaped Output] FormBuilder.new.text_field(attribute, :id => attribute)
[Escaped Output] FormBuilder.new.submit("Crop")

authors/crop.["AuthorsController#update"]

[Escaped Output] stylesheet_link_tag("jquery.Jcrop")
[Escaped Output] javascript_include_tag("jquery.Jcrop.min")
[Escaped Output] image_tag(Author.find(params[:id]).photo.url, :id => "cropbox")
[Escaped Output] image_tag(Author.find(params[:id]).photo.url(:thumb), :id => "preview")
[Escaped Output] FormBuilder.new.text_field(attribute, :id => attribute)
[Escaped Output] FormBuilder.new.submit("Crop")

authors/edit

[Escaped Output] link_to(image_tag("arrow_left.png", :border => 0, :title => t("back")), authors_path)
[Escaped Output] t("editing author")
[Escaped Output] render(partial => "form", {})

authors/edit.["AuthorsController#edit"]

[Escaped Output] link_to(image_tag("arrow_left.png", :border => 0, :title => t("back")), authors_path)
[Escaped Output] t("editing author")
[Escaped Output] render(partial => "form", {})

authors/index

[Escaped Output] link_to(image_tag("user_add.png", :border => 0, :mouseover => "user_add.png", :title => t("icon-authors")), new_author_path)
[Escaped Output] t("authors list")
[Escaped Output] t(:fullname)
[Escaped Output] t(:headline)
[Escaped Output] t(:dates)
[Escaped Output] t(:country)
[Escaped Output] cycle("odd", "even")
[Escaped Output] author.fullname
[Escaped Output] author.headline
[Escaped Output] author.dates
[Escaped Output] author.country
[Escaped Output] link_to(image_tag("user.png", :border => 0, :mouseover => "user.png", :title => t("icon-show"), :size => "16x16"), author)
[Escaped Output] link_to(image_tag("user_edit.png", :border => 0, :mouseover => "user_edit.png", :title => t("icon-edit"), :size => "16x16"), edit_author_path(author))
[Escaped Output] button_to("", author, :confirm => "are you sure?", :method => :delete, :class => "udestroy", :name => "destroy", :size => "16x16")
[Escaped Output] will_paginate(@author, :per_page => 25)

authors/index.["AuthorsController#index"]

[Escaped Output] link_to(image_tag("user_add.png", :border => 0, :mouseover => "user_add.png", :title => t("icon-authors")), new_author_path)
[Escaped Output] t("authors list")
[Escaped Output] t(:fullname)
[Escaped Output] t(:headline)
[Escaped Output] t(:dates)
[Escaped Output] t(:country)
[Escaped Output] cycle("odd", "even")
[Escaped Output] author.fullname
[Escaped Output] author.headline
[Escaped Output] author.dates
[Escaped Output] author.country
[Escaped Output] link_to(image_tag("user.png", :border => 0, :mouseover => "user.png", :title => t("icon-show"), :size => "16x16"), author)
[Escaped Output] link_to(image_tag("user_edit.png", :border => 0, :mouseover => "user_edit.png", :title => t("icon-edit"), :size => "16x16"), edit_author_path(author))
[Escaped Output] button_to("", author, :confirm => "are you sure?", :method => :delete, :class => "udestroy", :name => "destroy", :size => "16x16")
[Escaped Output] will_paginate(@author, :per_page => 25)

authors/new

[Escaped Output] link_to(image_tag("arrow_left.png", :border => 0, :title => t("back")), authors_path)
[Escaped Output] t("add new author")
[Escaped Output] render(partial => "form", {})

authors/new.["AuthorsController#new"]

[Escaped Output] link_to(image_tag("arrow_left.png", :border => 0, :title => t("back")), authors_path)
[Escaped Output] t("add new author")
[Escaped Output] render(partial => "form", {})

authors/show

[Escaped Output] link_to(image_tag("arrow_left.png", :border => 0, :title => t("back")), authors_path)
[Escaped Output] link_to(image_tag("user_add.png", :border => 0, :mouseover => "user_add.png", :title => "new", :size => "16x16"), new_author_path)
[Escaped Output] link_to(image_tag("user_edit.png", :border => 0, :mouseover => "user_edit.png", :title => t(:edit), :size => "16x16"), edit_author_path(@author))
[Escaped Output] image_tag(@author.photo.url)
[Escaped Output] image_tag(@author.photo.url(:medium))
[Escaped Output] image_tag(@author.photo.url(:thumb))
[Escaped Output] image_tag(@author.photo.url(:icon))
[Escaped Output] @author.fullname
[Escaped Output] t("headline")
[Escaped Output] @author.headline
[Escaped Output] t("dates")
[Escaped Output] @author.dates
[Escaped Output] t("notes")
[Escaped Output] @author.notes
[Escaped Output] t("quotes present")
[Escaped Output] @author.quotes.count

authors/show.["AuthorsController#show"]

[Escaped Output] link_to(image_tag("arrow_left.png", :border => 0, :title => t("back")), authors_path)
[Escaped Output] link_to(image_tag("user_add.png", :border => 0, :mouseover => "user_add.png", :title => "new", :size => "16x16"), new_author_path)
[Escaped Output] link_to(image_tag("user_edit.png", :border => 0, :mouseover => "user_edit.png", :title => t(:edit), :size => "16x16"), edit_author_path(Author.find(params[:id])))
[Escaped Output] image_tag(Author.find(params[:id]).photo.url)
[Escaped Output] image_tag(Author.find(params[:id]).photo.url(:medium))
[Escaped Output] image_tag(Author.find(params[:id]).photo.url(:thumb))
[Escaped Output] image_tag(Author.find(params[:id]).photo.url(:icon))
[Escaped Output] Author.find(params[:id]).fullname
[Escaped Output] t("headline")
[Escaped Output] Author.find(params[:id]).headline
[Escaped Output] t("dates")
[Escaped Output] Author.find(params[:id]).dates
[Escaped Output] t("notes")
[Escaped Output] Author.find(params[:id]).notes
[Escaped Output] t("quotes present")
[Escaped Output] Author.find(params[:id]).quotes.count

blocked_users/index

[Escaped Output] t("blocked users")
[Escaped Output] @user.avatar.url(:thumb)
[Escaped Output] @user.firstname
[Escaped Output] ("@" + @user.nickname)
[Escaped Output] button_to("Remove Block", blocked_user, :method => :delete, :data => ({ :confirm => "Are you sure?" }), :class => " btn btn-md btn-outline-danger")

blocked_users/index.["BlockedUsersController#index"]

[Escaped Output] t("blocked users")
[Escaped Output] User.find(BlockedUser.new.blocked_id).avatar.url(:thumb)
[Escaped Output] User.find(BlockedUser.new.blocked_id).firstname
[Escaped Output] ("@" + User.find(BlockedUser.new.blocked_id).nickname)
[Escaped Output] button_to("Remove Block", get_blocked_user(current_user.id, User.find(BlockedUser.new.blocked_id).id), :method => :delete, :data => ({ :confirm => "Are you sure?" }), :class => " btn btn-md btn-outline-danger")

blog/_hots

[Escaped Output] link_to(post.title, post)
[Escaped Output] post.published.strftime("%Y-%m-%d")

blog/_posts

[Escaped Output] link_to(post.title, post)
[Escaped Output] post.published.strftime("%Y-%m-%d")

blog/_recents

[Escaped Output] link_to(post.title, post)
[Escaped Output] post.published.strftime("%Y-%m-%d")

carts/Copy (2) of show

[Escaped Output] javascript_include_tag("d4x-cart")
[Escaped Output] d4x_sanitizer(t("your current cart"))
[Escaped Output] d4x_sanitizer(t("code"))
[Escaped Output] d4x_sanitizer(t("product"))
[Escaped Output] d4x_sanitizer(t("details"))
[Escaped Output] d4x_sanitizer(t("quantity"))
[Escaped Output] d4x_sanitizer(t("price"))
[Escaped Output] d4x_sanitizer(t("Total"))
[Escaped Output] d4x_sanitizer(t("remove"))
[Escaped Output] cycle("oddd", "evend")
[Escaped Output] item.product_id
[Escaped Output] prod_name_by_code(item.product_id)
[Escaped Output] item.status
[Escaped Output] item.quantity
[Escaped Output] number_to_currency(item.single_price, :unit => "\u{20ac}")
[Escaped Output] number_to_currency(item.total_price, :unit => "\u{20ac}")
[Escaped Output] button_to("", item, :confirm => "are you sure?", :method => :delete, :class => "itemdestroy", :title => d4x_sanitizer(t("delete")), :name => "destroy", :size => "16x16")
[Escaped Output] cycle("oddd", "evend")
[Escaped Output] item.product_id
[Escaped Output] prod_name_by_code(item.product_id)
[Escaped Output] item.status
[Escaped Output] item.quantity
[Escaped Output] d4x_sanitizer(t("year"))
[Escaped Output] number_to_currency(item.single_price, :unit => "\u{20ac}")
[Escaped Output] number_to_currency(item.total_price, :unit => "\u{20ac}")
[Escaped Output] button_to("", item, :confirm => "are you sure?", :method => :delete, :class => "itemdestroy", :title => d4x_sanitizer(t("delete")), :name => "destroy", :size => "16x16")
[Escaped Output] cycle("oddd", "evend")
[Escaped Output] label_tag(d4x_sanitizer(t("total")), nil, :class => "yellow")
[Escaped Output] label_tag(number_to_currency(@cart.total_price, :unit => "\u{20ac}"), nil, :class => "black", :id => "total_cart")
[Escaped Output] link_to(d4x_sanitizer(t("continue shopping")), "/store")
[Escaped Output] link_to(d4x_sanitizer(t("checkout")), new_order_path)

carts/Copy (3) of show

[Escaped Output] javascript_include_tag("d4x-cart")
[Escaped Output] d4x_sanitizer(t("your current cart"))
[Escaped Output] d4x_sanitizer(t("code"))
[Escaped Output] d4x_sanitizer(t("product"))
[Escaped Output] d4x_sanitizer(t("details"))
[Escaped Output] d4x_sanitizer(t("quantity"))
[Escaped Output] d4x_sanitizer(t("price"))
[Escaped Output] d4x_sanitizer(t("Total"))
[Escaped Output] d4x_sanitizer(t("remove"))
[Escaped Output] cycle("oddd", "evend")
[Escaped Output] item.product_id
[Escaped Output] prod_name_by_code(item.product_id)
[Escaped Output] item.status
[Escaped Output] item.quantity
[Escaped Output] number_to_currency(item.single_price, :unit => "\u{20ac}")
[Escaped Output] number_to_currency(item.total_price, :unit => "\u{20ac}")
[Escaped Output] button_to("", item, :confirm => "are you sure?", :method => :delete, :class => "itemdestroy", :title => d4x_sanitizer(t("delete")), :name => "destroy", :size => "16x16")
[Escaped Output] cycle("oddd", "evend")
[Escaped Output] item.product_id
[Escaped Output] prod_name_by_code(item.product_id)
[Escaped Output] item.status
[Escaped Output] item.quantity
[Escaped Output] d4x_sanitizer(t("year"))
[Escaped Output] number_to_currency(item.single_price, :unit => "\u{20ac}")
[Escaped Output] number_to_currency(item.total_price, :unit => "\u{20ac}")
[Escaped Output] button_to("", item, :confirm => "are you sure?", :method => :delete, :class => "itemdestroy", :title => d4x_sanitizer(t("delete")), :name => "destroy", :size => "16x16")
[Escaped Output] cycle("oddd", "evend")
[Escaped Output] label_tag(d4x_sanitizer(t("total")), nil, :class => "yellow")
[Escaped Output] label_tag(number_to_currency(@cart.total_price, :unit => "\u{20ac}"), nil, :class => "black", :id => "total_cart")
[Escaped Output] link_to(d4x_sanitizer(t("continue shopping")), "/store", :class => "button-d4x")
[Escaped Output] link_to(d4x_sanitizer(t("checkout")), new_order_path, :class => "button-d4x")

carts/Copy of _final_cart

[Escaped Output] hidden_field_tag(:cart_id, session[:cart_id])
[Escaped Output] label_tag(d4x_sanitizer(t("package")), nil, :class => "white")
[Escaped Output] label_tag(d4x_sanitizer(t("email")), nil, :class => "white")
[Escaped Output] label_tag(d4x_sanitizer(t("years")), nil, :class => "white")
[Escaped Output] label_tag(d4x_sanitizer(t("month")), nil, :class => "white")
[Escaped Output] label_tag(d4x_sanitizer(t("annual subscription")), nil, :class => "white")
[Escaped Output] label_tag(product_name(@cart.prod_id), nil, :class => "white")
[Escaped Output] label_tag(((@cart.nick + "@") + @cart.domain), nil, :class => "white")
[Escaped Output] label_tag(@cart.items, nil, :class => "white")
[Escaped Output] label_tag(number_to_currency((@cart.total_price / 12), :unit => "\u{20ac}"), nil, :class => "white")
[Escaped Output] label_tag(number_to_currency(@cart.total_price, :unit => "\u{20ac}"), nil, :class => "white")
[Escaped Output] label_tag(d4x_sanitizer(t("total")), nil, :class => "white")
[Escaped Output] label_tag(number_to_currency((@cart.total_price * @cart.items), :unit => "\u{20ac}"), nil, :class => "white")

carts/Copy of show

[Escaped Output] javascript_include_tag("d4x-cart")
[Escaped Output] d4x_sanitizer(t("your current cart"))
[Escaped Output] d4x_sanitizer(t("code"))
[Escaped Output] d4x_sanitizer(t("product"))
[Escaped Output] d4x_sanitizer(t("details"))
[Escaped Output] d4x_sanitizer(t("quantity"))
[Escaped Output] d4x_sanitizer(t("price"))
[Escaped Output] d4x_sanitizer(t("Total"))
[Escaped Output] d4x_sanitizer(t("remove"))
[Escaped Output] cycle("odd", "even")
[Escaped Output] item.product_id
[Escaped Output] prod_name_by_code(item.product_id)
[Escaped Output] item.status
[Escaped Output] item.quantity
[Escaped Output] number_to_currency(item.single_price, :unit => "\u{20ac}")
[Escaped Output] number_to_currency(item.total_price, :unit => "\u{20ac}")
[Escaped Output] button_to("", item, :confirm => "are you sure?", :method => :delete, :class => "itemdestroy", :title => d4x_sanitizer(t("delete")), :name => "destroy", :size => "16x16")
[Escaped Output] cycle("odd", "even")
[Escaped Output] item.product_id
[Escaped Output] prod_name_by_code(item.product_id)
[Escaped Output] item.status
[Escaped Output] item.quantity
[Escaped Output] d4x_sanitizer(t("year"))
[Escaped Output] number_to_currency(item.single_price, :unit => "\u{20ac}")
[Escaped Output] number_to_currency(item.total_price, :unit => "\u{20ac}")
[Escaped Output] button_to("", item, :confirm => "are you sure?", :method => :delete, :class => "itemdestroy", :title => d4x_sanitizer(t("delete")), :name => "destroy", :size => "16x16")
[Escaped Output] cycle("odd", "even")
[Escaped Output] label_tag(d4x_sanitizer(t("total")), nil, :class => "yellow")
[Escaped Output] label_tag(number_to_currency(@cart.total_price, :unit => "\u{20ac}"), nil, :class => "black", :id => "total_cart")
[Escaped Output] link_to(d4x_sanitizer(t("continue shopping")), "/store")
[Escaped Output] link_to(d4x_sanitizer(t("checkout")), new_order_path)

carts/_final_cart

[Escaped Output] hidden_field_tag(:cart_id, session[:cart_id])
[Escaped Output] label_tag(d4x_sanitizer(t("package")), nil, :class => "white")
[Escaped Output] label_tag(d4x_sanitizer(t("email")), nil, :class => "white")
[Escaped Output] label_tag(d4x_sanitizer(t("years")), nil, :class => "white")
[Escaped Output] label_tag(d4x_sanitizer(t("month")), nil, :class => "white")
[Escaped Output] label_tag(d4x_sanitizer(t("annual subscription")), nil, :class => "white")
[Escaped Output] label_tag(product_name(@cart.prod_id), nil, :class => "white")
[Escaped Output] label_tag(@cart.items, nil, :class => "white")
[Escaped Output] label_tag(number_to_currency((@cart.total_price / 12), :unit => "\u{20ac}"), nil, :class => "white")
[Escaped Output] label_tag(number_to_currency(@cart.total_price, :unit => "\u{20ac}"), nil, :class => "white")
[Escaped Output] label_tag(d4x_sanitizer(t("total")), nil, :class => "white")
[Escaped Output] label_tag(number_to_currency((@cart.total_price * @cart.items), :unit => "\u{20ac}"), nil, :class => "white")

carts/_review

[Escaped Output] hidden_field_tag(:cart_id, @cart.id)
[Escaped Output] label_tag(d4x_sanitizer(t("package")), nil, :class => "white")
[Escaped Output] label_tag(d4x_sanitizer(t("months")), nil, :class => "white")
[Escaped Output] label_tag(d4x_sanitizer(t("month")), nil, :class => "white")
[Escaped Output] label_tag(d4x_sanitizer(t("annual subscription")), nil, :class => "white")
[Escaped Output] cycle(:odd, :even)
[Escaped Output] label_tag(@cart.prod_id, nil, :class => "white")
[Escaped Output] f.hidden_field(:id, :value => @cart.id)
[Escaped Output] f.hidden_field(:product_id, :value => @cart.prod_id)
[Escaped Output] f.select(:items, options_for_select([["1 year", "1"], ["2 years", "2"], ["3 years", "3"], ["4 years", "4"], ["5 years", "5"]], "0"), :class => "agadanga-selects")
[Escaped Output] form_for(@cart) do; [Escaped Output] f.hidden_field(:id, :value => @cart.id);[Escaped Output] f.hidden_field(:product_id, :value => @cart.prod_id);[Escaped Output] f.select(:items, options_for_select([["1 year", "1"], ["2 years", "2"], ["3 years", "3"], ["4 years", "4"], ["5 years", "5"]], "0"), :class => "agadanga-selects"); end
[Escaped Output] label_tag(number_to_currency((@cart.total_price / 12), :unit => "\u{20ac}"), nil, :class => "white")
[Escaped Output] label_tag(number_to_currency(@cart.total_price, :unit => "\u{20ac}"), nil, :class => "white")
[Escaped Output] label_tag(d4x_sanitizer(t("total")), nil, :class => "lcd lcd-bigger white")
[Escaped Output] label_tag(number_to_currency(@cart.total_price, :unit => "\u{20ac}"), nil, :class => "white")

carts/index

[Escaped Output] content_for(:head) do; [ignored]; end
[Escaped Output] d4x_sanitizer(t("order"))
[Escaped Output] d4x_sanitizer(t(:last_operation))
[Escaped Output] d4x_sanitizer(t(:items))
[Escaped Output] d4x_sanitizer(t(:total_price))
[Escaped Output] d4x_sanitizer(t("currency"))
[Escaped Output] d4x_sanitizer(t(:last_status))
[Escaped Output] cycle("odd", "even")
[Escaped Output] cart.id
[Escaped Output] cart.order_id
[Escaped Output] cart.last_operation
[Escaped Output] cart.items
[Escaped Output] cart.total_price
[Escaped Output] cart.currency
[Escaped Output] cart.purchased_at
[Escaped Output] link_to(image_tag("plugin.png", :border => 0, :mouseover => "plugin.png", :title => d4x_sanitizer(t("icon-show")), :size => "16x16"), cart)
[Escaped Output] link_to(image_tag("plugin_edit.png", :border => 0, :mouseover => "plugin_edit.png", :title => d4x_sanitizer(t("icon-edit")), :size => "16x16"), edit_cart_path(cart))
[Escaped Output] button_to("", cart, :confirm => "are you sure?", :method => :delete, :class => "pdestroy", :name => "destroy", :size => "16x16")

carts/index.["CartsController#index"]

[Escaped Output] content_for(:head) do; [ignored]; end
[Escaped Output] d4x_sanitizer(t("order"))
[Escaped Output] d4x_sanitizer(t(:last_operation))
[Escaped Output] d4x_sanitizer(t(:items))
[Escaped Output] d4x_sanitizer(t(:total_price))
[Escaped Output] d4x_sanitizer(t("currency"))
[Escaped Output] d4x_sanitizer(t(:last_status))
[Escaped Output] cycle("odd", "even")
[Escaped Output] cart.id
[Escaped Output] cart.order_id
[Escaped Output] cart.last_operation
[Escaped Output] cart.items
[Escaped Output] cart.total_price
[Escaped Output] cart.currency
[Escaped Output] cart.purchased_at
[Escaped Output] link_to(image_tag("plugin.png", :border => 0, :mouseover => "plugin.png", :title => d4x_sanitizer(t("icon-show")), :size => "16x16"), cart)
[Escaped Output] link_to(image_tag("plugin_edit.png", :border => 0, :mouseover => "plugin_edit.png", :title => d4x_sanitizer(t("icon-edit")), :size => "16x16"), edit_cart_path(cart))
[Escaped Output] button_to("", cart, :confirm => "are you sure?", :method => :delete, :class => "pdestroy", :name => "destroy", :size => "16x16")

carts/show

[Escaped Output] t("your current cart")
[Escaped Output] t("manage items")
[Escaped Output] t("manage items")
[Escaped Output] t("product")
[Escaped Output] t("quantity")
[Escaped Output] t("price")
[Escaped Output] t("total")
[Escaped Output] prod_name_by_code(item.product_id)
[Escaped Output] item.status
[Escaped Output] item.quantity
[Escaped Output] d4x_sanitizer(t("year"))
[Escaped Output] item.quantity
[Escaped Output] item.quantity
[Escaped Output] item.quantity
[Escaped Output] number_to_currency(item.single_price, :unit => "\u{20ac}")
[Escaped Output] number_to_currency(item.total_price, :unit => "\u{20ac}")
[Escaped Output] button_to(d4x_sanitizer(t("delete")), item, :confirm => "are you sure?", :method => :delete, :class => "btn btn-sm btn-outline-danger btn-block", :title => d4x_sanitizer(t("delete")), :name => "destroy")
[Escaped Output] label_tag(prod_name_by_code(item.product_id), nil, :class => "label label-primary")
[Escaped Output] label_tag(item.status, nil, :class => "real-yellow")
[Escaped Output] item.quantity
[Escaped Output] d4x_sanitizer(t("year"))
[Escaped Output] item.quantity
[Escaped Output] label_tag("LIFETIME")
[Escaped Output] item.quantity
[Escaped Output] item.quantity
[Escaped Output] number_to_currency(item.single_price, :unit => "\u{20ac}")
[Escaped Output] number_to_currency(item.total_price, :unit => "\u{20ac}")
[Escaped Output] button_to(d4x_sanitizer(t("delete")), item, :confirm => "are you sure?", :method => :delete, :class => "btn btn-sm btn-outline-danger btn-block", :title => d4x_sanitizer(t("delete")), :name => "destroy")
[Escaped Output] t("total")
[Escaped Output] number_to_currency(@cart.total_price, :unit => "\u{20ac}")
[Escaped Output] link_to(t("go to checkout"), new_order_path, :class => "btn btn-outline-warning btn-sm btn-block")
[Escaped Output] link_to(d4x_sanitizer(t("continue shopping")), "/store", :class => "btn btn-sm btn-outline-success btn-block")

carts/show.["CartsController#show"]

[Escaped Output] t("your current cart")
[Escaped Output] t("manage items")
[Escaped Output] t("manage items")
[Escaped Output] t("product")
[Escaped Output] t("quantity")
[Escaped Output] t("price")
[Escaped Output] t("total")
[Escaped Output] prod_name_by_code((Unresolved Model).new.product_id)
[Escaped Output] (Unresolved Model).new.status
[Escaped Output] (Unresolved Model).new.quantity
[Escaped Output] d4x_sanitizer(t("year"))
[Escaped Output] (Unresolved Model).new.quantity
[Escaped Output] (Unresolved Model).new.quantity
[Escaped Output] (Unresolved Model).new.quantity
[Escaped Output] number_to_currency((Unresolved Model).new.single_price, :unit => "\u{20ac}")
[Escaped Output] number_to_currency((Unresolved Model).new.total_price, :unit => "\u{20ac}")
[Escaped Output] button_to(d4x_sanitizer(t("delete")), (Unresolved Model).new, :confirm => "are you sure?", :method => :delete, :class => "btn btn-sm btn-outline-danger btn-block", :title => d4x_sanitizer(t("delete")), :name => "destroy")
[Escaped Output] label_tag(prod_name_by_code((Unresolved Model).new.product_id), nil, :class => "label label-primary")
[Escaped Output] label_tag((Unresolved Model).new.status, nil, :class => "real-yellow")
[Escaped Output] (Unresolved Model).new.quantity
[Escaped Output] d4x_sanitizer(t("year"))
[Escaped Output] (Unresolved Model).new.quantity
[Escaped Output] label_tag("LIFETIME")
[Escaped Output] (Unresolved Model).new.quantity
[Escaped Output] (Unresolved Model).new.quantity
[Escaped Output] number_to_currency((Unresolved Model).new.single_price, :unit => "\u{20ac}")
[Escaped Output] number_to_currency((Unresolved Model).new.total_price, :unit => "\u{20ac}")
[Escaped Output] button_to(d4x_sanitizer(t("delete")), (Unresolved Model).new, :confirm => "are you sure?", :method => :delete, :class => "btn btn-sm btn-outline-danger btn-block", :title => d4x_sanitizer(t("delete")), :name => "destroy")
[Escaped Output] t("total")
[Escaped Output] number_to_currency(Cart.find(params[:id]).total_price, :unit => "\u{20ac}")
[Escaped Output] link_to(t("go to checkout"), new_order_path, :class => "btn btn-outline-warning btn-sm btn-block")
[Escaped Output] link_to(d4x_sanitizer(t("continue shopping")), "/store", :class => "btn btn-sm btn-outline-success btn-block")

carts/showOLDOK

[Escaped Output] javascript_include_tag("d4x-cart")
[Escaped Output] d4x_sanitizer(t("menu-create-account"))
[Escaped Output] d4x_sanitizer(t("menu-configure"))
[Escaped Output] d4x_sanitizer(t("menu-demo"))
[Escaped Output] d4x_sanitizer(t("menu-terms"))
[Escaped Output] d4x_sanitizer(t("menu-contact"))
[Escaped Output] d4x_sanitizer(t("menu-about"))
[Escaped Output] label_tag(((@cart.nick + "@") + @cart.domain), nil, :id => "choosen-address", :class => "grey")
[Escaped Output] hidden_field_tag(:cart_id, @cart.id)
[Escaped Output] label_tag(d4x_sanitizer(t("package")), nil, :class => "grey")
[Escaped Output] label_tag(d4x_sanitizer(t("menu-subscribe")), nil, :class => "grey")
[Escaped Output] label_tag(d4x_sanitizer(t("month")), nil, :class => "grey")
[Escaped Output] label_tag(d4x_sanitizer(t("annual subscription")), nil, :class => "grey")
[Escaped Output] select_tag(:prod_id, options_for_select([[(d4x_sanitizer(t("mailbox")) + " 1 GB"), "2"], [(d4x_sanitizer(t("mailbox")) + " 3 GB"), "3"], [(d4x_sanitizer(t("mailbox")) + " 20 GB"), "4"]], @cart.prod_id), :class => "agadanga-selects")
[Escaped Output] f.hidden_field(:id, :value => @cart.id)
[Escaped Output] f.hidden_field(:product_id, :value => @cart.prod_id)
[Escaped Output] f.select(:items, options_for_select([[("1 " + d4x_sanitizer(t("year"))), "1"], [("2 " + d4x_sanitizer(t("years"))), "2"], [("3 " + d4x_sanitizer(t("years"))), "3"], [("4 " + d4x_sanitizer(t("years"))), "4"], [("5 " + d4x_sanitizer(t("years"))), "5"]], "0"), :class => "agadanga-selects")
[Escaped Output] form_for(@cart) do; [Escaped Output] f.hidden_field(:id, :value => @cart.id);[Escaped Output] f.hidden_field(:product_id, :value => @cart.prod_id);[Escaped Output] f.select(:items, options_for_select([[("1 " + d4x_sanitizer(t("year"))), "1"], [("2 " + d4x_sanitizer(t("years"))), "2"], [("3 " + d4x_sanitizer(t("years"))), "3"], [("4 " + d4x_sanitizer(t("years"))), "4"], [("5 " + d4x_sanitizer(t("years"))), "5"]], "0"), :class => "agadanga-selects"); end
[Escaped Output] label_tag(((@cart.total_price / 12).to_s + "0"), nil, :class => "white", :id => "total_month")
[Escaped Output] label_tag(number_to_currency(@cart.total_price, :unit => "\u{20ac}"), nil, :class => "white", :id => "total_price")
[Escaped Output] @cart.status
[Escaped Output] label_tag(d4x_sanitizer(t("total")), nil, :class => "yellow")
[Escaped Output] label_tag(number_to_currency(@cart.total_price, :unit => "\u{20ac}"), nil, :class => "black", :id => "total_cart")
[Escaped Output] link_to("Continue", new_order_path)

charges/new

[Escaped Output] label_tag("amount", "To Pay", :class => "amount")
[Escaped Output] label_tag("amount", "$#{@amount}.00", :class => "amount-figure")
[Escaped Output] label_tag(:couponCode, "Coupon:")
[Escaped Output] text_field_tag(:couponCode)
[Escaped Output] (@amount * 100)
[Escaped Output] form_tag(charges_path) do; [Escaped Output] label_tag("amount", "To Pay", :class => "amount");[Escaped Output] label_tag("amount", "$#{@amount}.00", :class => "amount-figure");[Escaped Output] label_tag(:couponCode, "Coupon:");[Escaped Output] text_field_tag(:couponCode);[Escaped Output] (@amount * 100); end

charges/new.["ChargesController#new"]

[Escaped Output] label_tag("amount", "To Pay", :class => "amount")
[Escaped Output] label_tag("amount", "$#{@amount}.00", :class => "amount-figure")
[Escaped Output] label_tag(:couponCode, "Coupon:")
[Escaped Output] text_field_tag(:couponCode)
[Escaped Output] (@amount * 100)
[Escaped Output] form_tag(charges_path) do; [Escaped Output] label_tag("amount", "To Pay", :class => "amount");[Escaped Output] label_tag("amount", "$#{@amount}.00", :class => "amount-figure");[Escaped Output] label_tag(:couponCode, "Coupon:");[Escaped Output] text_field_tag(:couponCode);[Escaped Output] (@amount * 100); end

contacts/_form

[Escaped Output] pluralize(@contact.errors.count, "error")
[Escaped Output] msg
[Escaped Output] f.text_field(:fullname, :class => "form-control center", :placeholder => t("fullname"))
[Escaped Output] f.text_field(:email, :class => "form-control center", :placeholder => t("email"))
[Escaped Output] f.text_field(:mobile, :class => "form-control center", :placeholder => t("mobile"))
[Escaped Output] f.text_field(:address, :class => "form-control center", :placeholder => t("address"))
[Escaped Output] f.text_field(:city, :class => "form-control center", :placeholder => t("city"))
[Escaped Output] f.text_field(:country, :class => "form-control center", :placeholder => t("country"))
[Escaped Output] f.file_field(:image, :onchange => "$(this).parent().parent().find('.form-control').html($(this).val().split(/[\\\\|/]/).pop());", :style => "display: none;")
[Escaped Output] f.submit(t("update"), :class => "btn btn-success btn-block")
[Escaped Output] form_for(@contact) do; if @contact.errors.any? then; [Escaped Output] pluralize(@contact.errors.count, "error"); @contact.errors.full_messages.each do; [Escaped Output] msg; end;end;[Escaped Output] f.text_field(:fullname, :class => "form-control center", :placeholder => t("fullname"));[Escaped Output] f.text_field(:email, :class => "form-control center", :placeholder => t("email"));[Escaped Output] f.text_field(:mobile, :class => "form-control center", :placeholder => t("mobile"));[Escaped Output] f.text_field(:address, :class => "form-control center", :placeholder => t("address"));[Escaped Output] f.text_field(:city, :class => "form-control center", :placeholder => t("city"));[Escaped Output] f.text_field(:country, :class => "form-control center", :placeholder => t("country"));[Escaped Output] f.file_field(:image, :onchange => "$(this).parent().parent().find('.form-control').html($(this).val().split(/[\\\\|/]/).pop());", :style => "display: none;");[Escaped Output] f.submit(t("update"), :class => "btn btn-success btn-block"); end

contacts/_form.["ContactsController#create", "Template:contacts/new"]

[Escaped Output] pluralize(Contact.new(contact_params).errors.count, "error")
[Escaped Output] msg
[Escaped Output] FormBuilder.new.text_field(:fullname, :class => "form-control center", :placeholder => t("fullname"))
[Escaped Output] FormBuilder.new.text_field(:email, :class => "form-control center", :placeholder => t("email"))
[Escaped Output] FormBuilder.new.text_field(:mobile, :class => "form-control center", :placeholder => t("mobile"))
[Escaped Output] FormBuilder.new.text_field(:address, :class => "form-control center", :placeholder => t("address"))
[Escaped Output] FormBuilder.new.text_field(:city, :class => "form-control center", :placeholder => t("city"))
[Escaped Output] FormBuilder.new.text_field(:country, :class => "form-control center", :placeholder => t("country"))
[Escaped Output] FormBuilder.new.file_field(:image, :onchange => "$(this).parent().parent().find('.form-control').html($(this).val().split(/[\\\\|/]/).pop());", :style => "display: none;")
[Escaped Output] FormBuilder.new.submit(t("update"), :class => "btn btn-success btn-block")
[Escaped Output] form_for(Contact.new(contact_params)) do; if Contact.new(contact_params).errors.any? then; [Escaped Output] pluralize(Contact.new(contact_params).errors.count, "error"); Contact.new(contact_params).errors.full_messages.each do; [Escaped Output] msg; end;end;[Escaped Output] FormBuilder.new.text_field(:fullname, :class => "form-control center", :placeholder => t("fullname"));[Escaped Output] FormBuilder.new.text_field(:email, :class => "form-control center", :placeholder => t("email"));[Escaped Output] FormBuilder.new.text_field(:mobile, :class => "form-control center", :placeholder => t("mobile"));[Escaped Output] FormBuilder.new.text_field(:address, :class => "form-control center", :placeholder => t("address"));[Escaped Output] FormBuilder.new.text_field(:city, :class => "form-control center", :placeholder => t("city"));[Escaped Output] FormBuilder.new.text_field(:country, :class => "form-control center", :placeholder => t("country"));[Escaped Output] FormBuilder.new.file_field(:image, :onchange => "$(this).parent().parent().find('.form-control').html($(this).val().split(/[\\\\|/]/).pop());", :style => "display: none;");[Escaped Output] FormBuilder.new.submit(t("update"), :class => "btn btn-success btn-block"); end

contacts/_form.["ContactsController#edit", "Template:contacts/edit"]

[Escaped Output] pluralize(Contact.find(params[:id]).errors.count, "error")
[Escaped Output] (Unresolved Model).new
[Escaped Output] FormBuilder.new.text_field(:fullname, :class => "form-control center", :placeholder => t("fullname"))
[Escaped Output] FormBuilder.new.text_field(:email, :class => "form-control center", :placeholder => t("email"))
[Escaped Output] FormBuilder.new.text_field(:mobile, :class => "form-control center", :placeholder => t("mobile"))
[Escaped Output] FormBuilder.new.text_field(:address, :class => "form-control center", :placeholder => t("address"))
[Escaped Output] FormBuilder.new.text_field(:city, :class => "form-control center", :placeholder => t("city"))
[Escaped Output] FormBuilder.new.text_field(:country, :class => "form-control center", :placeholder => t("country"))
[Escaped Output] FormBuilder.new.file_field(:image, :onchange => "$(this).parent().parent().find('.form-control').html($(this).val().split(/[\\\\|/]/).pop());", :style => "display: none;")
[Escaped Output] FormBuilder.new.submit(t("update"), :class => "btn btn-success btn-block")
[Escaped Output] form_for(Contact.find(params[:id])) do; if Contact.find(params[:id]).errors.any? then; [Escaped Output] pluralize(Contact.find(params[:id]).errors.count, "error"); Contact.find(params[:id]).errors.full_messages.each do; [Escaped Output] (Unresolved Model).new; end;end;[Escaped Output] FormBuilder.new.text_field(:fullname, :class => "form-control center", :placeholder => t("fullname"));[Escaped Output] FormBuilder.new.text_field(:email, :class => "form-control center", :placeholder => t("email"));[Escaped Output] FormBuilder.new.text_field(:mobile, :class => "form-control center", :placeholder => t("mobile"));[Escaped Output] FormBuilder.new.text_field(:address, :class => "form-control center", :placeholder => t("address"));[Escaped Output] FormBuilder.new.text_field(:city, :class => "form-control center", :placeholder => t("city"));[Escaped Output] FormBuilder.new.text_field(:country, :class => "form-control center", :placeholder => t("country"));[Escaped Output] FormBuilder.new.file_field(:image, :onchange => "$(this).parent().parent().find('.form-control').html($(this).val().split(/[\\\\|/]/).pop());", :style => "display: none;");[Escaped Output] FormBuilder.new.submit(t("update"), :class => "btn btn-success btn-block"); end

contacts/_form.["ContactsController#new", "Template:contacts/new"]

[Escaped Output] pluralize(Contact.new.errors.count, "error")
[Escaped Output] msg
[Escaped Output] FormBuilder.new.text_field(:fullname, :class => "form-control center", :placeholder => t("fullname"))
[Escaped Output] FormBuilder.new.text_field(:email, :class => "form-control center", :placeholder => t("email"))
[Escaped Output] FormBuilder.new.text_field(:mobile, :class => "form-control center", :placeholder => t("mobile"))
[Escaped Output] FormBuilder.new.text_field(:address, :class => "form-control center", :placeholder => t("address"))
[Escaped Output] FormBuilder.new.text_field(:city, :class => "form-control center", :placeholder => t("city"))
[Escaped Output] FormBuilder.new.text_field(:country, :class => "form-control center", :placeholder => t("country"))
[Escaped Output] FormBuilder.new.file_field(:image, :onchange => "$(this).parent().parent().find('.form-control').html($(this).val().split(/[\\\\|/]/).pop());", :style => "display: none;")
[Escaped Output] FormBuilder.new.submit(t("update"), :class => "btn btn-success btn-block")
[Escaped Output] form_for(Contact.new) do; if Contact.new.errors.any? then; [Escaped Output] pluralize(Contact.new.errors.count, "error"); Contact.new.errors.full_messages.each do; [Escaped Output] msg; end;end;[Escaped Output] FormBuilder.new.text_field(:fullname, :class => "form-control center", :placeholder => t("fullname"));[Escaped Output] FormBuilder.new.text_field(:email, :class => "form-control center", :placeholder => t("email"));[Escaped Output] FormBuilder.new.text_field(:mobile, :class => "form-control center", :placeholder => t("mobile"));[Escaped Output] FormBuilder.new.text_field(:address, :class => "form-control center", :placeholder => t("address"));[Escaped Output] FormBuilder.new.text_field(:city, :class => "form-control center", :placeholder => t("city"));[Escaped Output] FormBuilder.new.text_field(:country, :class => "form-control center", :placeholder => t("country"));[Escaped Output] FormBuilder.new.file_field(:image, :onchange => "$(this).parent().parent().find('.form-control').html($(this).val().split(/[\\\\|/]/).pop());", :style => "display: none;");[Escaped Output] FormBuilder.new.submit(t("update"), :class => "btn btn-success btn-block"); end

contacts/_form.["Template:contacts/edit"]

[Escaped Output] pluralize(@contact.errors.count, "error")
[Escaped Output] msg
[Escaped Output] FormBuilder.new.text_field(:fullname, :class => "form-control center", :placeholder => t("fullname"))
[Escaped Output] FormBuilder.new.text_field(:email, :class => "form-control center", :placeholder => t("email"))
[Escaped Output] FormBuilder.new.text_field(:mobile, :class => "form-control center", :placeholder => t("mobile"))
[Escaped Output] FormBuilder.new.text_field(:address, :class => "form-control center", :placeholder => t("address"))
[Escaped Output] FormBuilder.new.text_field(:city, :class => "form-control center", :placeholder => t("city"))
[Escaped Output] FormBuilder.new.text_field(:country, :class => "form-control center", :placeholder => t("country"))
[Escaped Output] FormBuilder.new.file_field(:image, :onchange => "$(this).parent().parent().find('.form-control').html($(this).val().split(/[\\\\|/]/).pop());", :style => "display: none;")
[Escaped Output] FormBuilder.new.submit(t("update"), :class => "btn btn-success btn-block")
[Escaped Output] form_for(@contact) do; if @contact.errors.any? then; [Escaped Output] pluralize(@contact.errors.count, "error"); @contact.errors.full_messages.each do; [Escaped Output] msg; end;end;[Escaped Output] FormBuilder.new.text_field(:fullname, :class => "form-control center", :placeholder => t("fullname"));[Escaped Output] FormBuilder.new.text_field(:email, :class => "form-control center", :placeholder => t("email"));[Escaped Output] FormBuilder.new.text_field(:mobile, :class => "form-control center", :placeholder => t("mobile"));[Escaped Output] FormBuilder.new.text_field(:address, :class => "form-control center", :placeholder => t("address"));[Escaped Output] FormBuilder.new.text_field(:city, :class => "form-control center", :placeholder => t("city"));[Escaped Output] FormBuilder.new.text_field(:country, :class => "form-control center", :placeholder => t("country"));[Escaped Output] FormBuilder.new.file_field(:image, :onchange => "$(this).parent().parent().find('.form-control').html($(this).val().split(/[\\\\|/]/).pop());", :style => "display: none;");[Escaped Output] FormBuilder.new.submit(t("update"), :class => "btn btn-success btn-block"); end

contacts/crop

[Escaped Output] image_tag(@contact.picture.url(:large), :id => "cropbox")
[Escaped Output] javascript_include_tag("jquery-1.7.2.min.js")
[Escaped Output] javascript_include_tag("jquery.color.js")
[Escaped Output] javascript_include_tag("jquery.Jcrop.min.js")
[Escaped Output] stylesheet_link_tag("jquery.Jcrop")
[Escaped Output] image_tag(@contact.picture.url(:large), :id => "preview")
[Escaped Output] f.hidden_field(attribute, :id => attribute)
[Escaped Output] f.submit("Crop")
[Escaped Output] form_for(@contact, :url => crop_contact_path(@contact.id)) do; for attribute in [:crop_x, :crop_y, :crop_w, :crop_h] do; [Escaped Output] f.hidden_field(attribute, :id => attribute);end;[Escaped Output] f.submit("Crop"); end
[Escaped Output] @contact.avatar_geometry(:large).width
[Escaped Output] @contact.avatar_geometry(:large).height
[Escaped Output] @contact.avatar_geometry(:original).width
[Escaped Output] @contact.avatar_geometry(:large).width

contacts/crop.["ContactsController#create"]

[Escaped Output] image_tag(Contact.new(contact_params).picture.url(:large), :id => "cropbox")
[Escaped Output] javascript_include_tag("jquery-1.7.2.min.js")
[Escaped Output] javascript_include_tag("jquery.color.js")
[Escaped Output] javascript_include_tag("jquery.Jcrop.min.js")
[Escaped Output] stylesheet_link_tag("jquery.Jcrop")
[Escaped Output] image_tag(Contact.new(contact_params).picture.url(:large), :id => "preview")
[Escaped Output] FormBuilder.new.hidden_field(attribute, :id => attribute)
[Escaped Output] FormBuilder.new.submit("Crop")
[Escaped Output] form_for(Contact.new(contact_params), :url => crop_contact_path(Contact.new(contact_params).id)) do; for attribute in [:crop_x, :crop_y, :crop_w, :crop_h] do; [Escaped Output] FormBuilder.new.hidden_field(attribute, :id => attribute);end;[Escaped Output] FormBuilder.new.submit("Crop"); end
[Escaped Output] Contact.new(contact_params).avatar_geometry(:large).width
[Escaped Output] Contact.new(contact_params).avatar_geometry(:large).height
[Escaped Output] Contact.new(contact_params).avatar_geometry(:original).width
[Escaped Output] Contact.new(contact_params).avatar_geometry(:large).width

contacts/crop.["ContactsController#update"]

[Escaped Output] image_tag(Contact.find(params[:id]).picture.url(:large), :id => "cropbox")
[Escaped Output] javascript_include_tag("jquery-1.7.2.min.js")
[Escaped Output] javascript_include_tag("jquery.color.js")
[Escaped Output] javascript_include_tag("jquery.Jcrop.min.js")
[Escaped Output] stylesheet_link_tag("jquery.Jcrop")
[Escaped Output] image_tag(Contact.find(params[:id]).picture.url(:large), :id => "preview")
[Escaped Output] FormBuilder.new.hidden_field(attribute, :id => attribute)
[Escaped Output] FormBuilder.new.submit("Crop")
[Escaped Output] form_for(Contact.find(params[:id]), :url => crop_contact_path(Contact.find(params[:id]).id)) do; for attribute in [:crop_x, :crop_y, :crop_w, :crop_h] do; [Escaped Output] FormBuilder.new.hidden_field(attribute, :id => attribute);end;[Escaped Output] FormBuilder.new.submit("Crop"); end
[Escaped Output] Contact.find(params[:id]).avatar_geometry(:large).width
[Escaped Output] Contact.find(params[:id]).avatar_geometry(:large).height
[Escaped Output] Contact.find(params[:id]).avatar_geometry(:original).width
[Escaped Output] Contact.find(params[:id]).avatar_geometry(:large).width

contacts/edit

[Escaped Output] render(partial => "form", {})

contacts/edit.["ContactsController#edit"]

[Escaped Output] render(partial => "form", {})

contacts/gallery

[Escaped Output] contact.picture.url(:thumb)
[Escaped Output] image_tag("missing_avatar.png", :class => "img-circle m-t-xs img-responsive")
[Escaped Output] contact.headline
[Escaped Output] contact.fullname
[Escaped Output] link_to(edit_contact_path(contact)) do; [ignored]; end
[Escaped Output] contact.email
[Escaped Output] contact.mobile
[Escaped Output] contact.company
[Escaped Output] contact.address
[Escaped Output] contact.postal_code
[Escaped Output] contact.city
[Escaped Output] contact.country

contacts/gallery.["ContactsController#gallery"]

[Escaped Output] contact.picture.url(:thumb)
[Escaped Output] image_tag("missing_avatar.png", :class => "img-circle m-t-xs img-responsive")
[Escaped Output] contact.headline
[Escaped Output] contact.fullname
[Escaped Output] link_to(edit_contact_path(contact)) do; [ignored]; end
[Escaped Output] contact.email
[Escaped Output] contact.mobile
[Escaped Output] contact.company
[Escaped Output] contact.address
[Escaped Output] contact.postal_code
[Escaped Output] contact.city
[Escaped Output] contact.country

contacts/index

[Escaped Output] t("contacts")
[Escaped Output] @contacts.count
[Escaped Output] user_path(user.id)
[Escaped Output] user.avatar.url(:thumb)
[Escaped Output] user.firstname
[Escaped Output] user_path(user)
[Escaped Output] ("@" + user.nickname)
[Escaped Output] link_to(raw("<i class=\"fa fa-envelope white\"></i>"), ("/compose?target_id=" + user.id.to_s), :class => "contacts__btn", :title => "send message")
[Escaped Output] button_to("Remove from Contacts", user_contact, :method => :delete, :data => ({ :confirm => "Are you sure?" }), :class => "btn btn-outline-success btn-md")

contacts/index.["ContactsController#index"]

[Escaped Output] t("contacts")
[Escaped Output] current_user.contacts.count
[Escaped Output] user_path(User.find(contact.contact_id).id)
[Escaped Output] User.find(contact.contact_id).avatar.url(:thumb)
[Escaped Output] User.find(contact.contact_id).firstname
[Escaped Output] user_path(User.find(contact.contact_id))
[Escaped Output] ("@" + User.find(contact.contact_id).nickname)
[Escaped Output] link_to(raw("<i class=\"fa fa-envelope white\"></i>"), ("/compose?target_id=" + User.find(contact.contact_id).id.to_s), :class => "contacts__btn", :title => "send message")
[Escaped Output] button_to("Remove from Contacts", get_user_contact(current_user.id, User.find(contact.contact_id).id), :method => :delete, :data => ({ :confirm => "Are you sure?" }), :class => "btn btn-outline-success btn-md")

contacts/new

[Escaped Output] render(partial => "form", {})

contacts/new.["ContactsController#new"]

[Escaped Output] render(partial => "form", {})

contacts/show

[Escaped Output] user.avatar.url(:thumb)
[Escaped Output] user.firstname
[Escaped Output] user.nickname
[Escaped Output] user.headline
[Escaped Output] get_current_status(user.id)
[Escaped Output] last_status_set(user.id)
[Escaped Output] time_ago_in_words(last_status_set(user.id))
[Escaped Output] t("ago")
[Escaped Output] t("never")
[Escaped Output] image_tag("online.png")
[Escaped Output] user.last_seen
[Escaped Output] time_ago_in_words(user.last_seen)
[Escaped Output] t("ago")
[Escaped Output] t("never")
[Escaped Output] t("mobile")
[Escaped Output] user.mobile
[Escaped Output] t("email")
[Escaped Output] user.email
[Escaped Output] t("member since")
[Escaped Output] user.created_at
[Escaped Output] time_ago_in_words(user.created_at)
[Escaped Output] t("ago")

contacts/show.["ContactsController#show"]

[Escaped Output] (User.find(params[:id]) or current_user).avatar.url(:thumb)
[Escaped Output] (User.find(params[:id]) or current_user).firstname
[Escaped Output] (User.find(params[:id]) or current_user).nickname
[Escaped Output] (User.find(params[:id]) or current_user).headline
[Escaped Output] get_current_status((User.find(params[:id]) or current_user).id)
[Escaped Output] last_status_set((User.find(params[:id]) or current_user).id)
[Escaped Output] time_ago_in_words(last_status_set((User.find(params[:id]) or current_user).id))
[Escaped Output] t("ago")
[Escaped Output] t("never")
[Escaped Output] image_tag("online.png")
[Escaped Output] (User.find(params[:id]) or current_user).last_seen
[Escaped Output] time_ago_in_words((User.find(params[:id]) or current_user).last_seen)
[Escaped Output] t("ago")
[Escaped Output] t("never")
[Escaped Output] t("mobile")
[Escaped Output] (User.find(params[:id]) or current_user).mobile
[Escaped Output] t("email")
[Escaped Output] (User.find(params[:id]) or current_user).email
[Escaped Output] t("member since")
[Escaped Output] (User.find(params[:id]) or current_user).created_at
[Escaped Output] time_ago_in_words((User.find(params[:id]) or current_user).created_at)
[Escaped Output] t("ago")

countries/_form

[Escaped Output] pluralize(@country.errors.count, "error")
[Escaped Output] msg
[Escaped Output] t("countries")
[Escaped Output] link_to(countries_path) do; [ignored]; end
[Escaped Output] f.label(:country_name)
[Escaped Output] f.text_field(:country_name, :class => "form-control")
[Escaped Output] f.label(:country_code)
[Escaped Output] f.text_field(:country_code, :class => "form-control")
[Escaped Output] link_to(t("cancel"), countries_path, :class => "btn btn-warning")
[Escaped Output] f.submit(t("save"), :class => "btn btn-success")
[Escaped Output] form_for(@country) do; if @country.errors.any? then; [Escaped Output] pluralize(@country.errors.count, "error"); @country.errors.full_messages.each do; [Escaped Output] msg; end;end;[Escaped Output] t("countries");[Escaped Output] link_to(countries_path) do; [ignored]; end;[Escaped Output] f.label(:country_name);[Escaped Output] f.text_field(:country_name, :class => "form-control");[Escaped Output] f.label(:country_code);[Escaped Output] f.text_field(:country_code, :class => "form-control");[Escaped Output] link_to(t("cancel"), countries_path, :class => "btn btn-warning");[Escaped Output] f.submit(t("save"), :class => "btn btn-success"); end

countries/_form.["CountriesController#create", "Template:countries/new"]

[Escaped Output] pluralize(Country.new(country_params).errors.count, "error")
[Escaped Output] msg
[Escaped Output] t("countries")
[Escaped Output] link_to(countries_path) do; [ignored]; end
[Escaped Output] FormBuilder.new.label(:country_name)
[Escaped Output] FormBuilder.new.text_field(:country_name, :class => "form-control")
[Escaped Output] FormBuilder.new.label(:country_code)
[Escaped Output] FormBuilder.new.text_field(:country_code, :class => "form-control")
[Escaped Output] link_to(t("cancel"), countries_path, :class => "btn btn-warning")
[Escaped Output] FormBuilder.new.submit(t("save"), :class => "btn btn-success")
[Escaped Output] form_for(Country.new(country_params)) do; if Country.new(country_params).errors.any? then; [Escaped Output] pluralize(Country.new(country_params).errors.count, "error"); Country.new(country_params).errors.full_messages.each do; [Escaped Output] msg; end;end;[Escaped Output] t("countries");[Escaped Output] link_to(countries_path) do; [ignored]; end;[Escaped Output] FormBuilder.new.label(:country_name);[Escaped Output] FormBuilder.new.text_field(:country_name, :class => "form-control");[Escaped Output] FormBuilder.new.label(:country_code);[Escaped Output] FormBuilder.new.text_field(:country_code, :class => "form-control");[Escaped Output] link_to(t("cancel"), countries_path, :class => "btn btn-warning");[Escaped Output] FormBuilder.new.submit(t("save"), :class => "btn btn-success"); end

countries/_form.["CountriesController#new", "Template:countries/new"]

[Escaped Output] pluralize(Country.new.errors.count, "error")
[Escaped Output] msg
[Escaped Output] t("countries")
[Escaped Output] link_to(countries_path) do; [ignored]; end
[Escaped Output] FormBuilder.new.label(:country_name)
[Escaped Output] FormBuilder.new.text_field(:country_name, :class => "form-control")
[Escaped Output] FormBuilder.new.label(:country_code)
[Escaped Output] FormBuilder.new.text_field(:country_code, :class => "form-control")
[Escaped Output] link_to(t("cancel"), countries_path, :class => "btn btn-warning")
[Escaped Output] FormBuilder.new.submit(t("save"), :class => "btn btn-success")
[Escaped Output] form_for(Country.new) do; if Country.new.errors.any? then; [Escaped Output] pluralize(Country.new.errors.count, "error"); Country.new.errors.full_messages.each do; [Escaped Output] msg; end;end;[Escaped Output] t("countries");[Escaped Output] link_to(countries_path) do; [ignored]; end;[Escaped Output] FormBuilder.new.label(:country_name);[Escaped Output] FormBuilder.new.text_field(:country_name, :class => "form-control");[Escaped Output] FormBuilder.new.label(:country_code);[Escaped Output] FormBuilder.new.text_field(:country_code, :class => "form-control");[Escaped Output] link_to(t("cancel"), countries_path, :class => "btn btn-warning");[Escaped Output] FormBuilder.new.submit(t("save"), :class => "btn btn-success"); end

countries/_form.["Template:countries/edit"]

[Escaped Output] pluralize(@country.errors.count, "error")
[Escaped Output] msg
[Escaped Output] t("countries")
[Escaped Output] link_to(countries_path) do; [ignored]; end
[Escaped Output] FormBuilder.new.label(:country_name)
[Escaped Output] FormBuilder.new.text_field(:country_name, :class => "form-control")
[Escaped Output] FormBuilder.new.label(:country_code)
[Escaped Output] FormBuilder.new.text_field(:country_code, :class => "form-control")
[Escaped Output] link_to(t("cancel"), countries_path, :class => "btn btn-warning")
[Escaped Output] FormBuilder.new.submit(t("save"), :class => "btn btn-success")
[Escaped Output] form_for(@country) do; if @country.errors.any? then; [Escaped Output] pluralize(@country.errors.count, "error"); @country.errors.full_messages.each do; [Escaped Output] msg; end;end;[Escaped Output] t("countries");[Escaped Output] link_to(countries_path) do; [ignored]; end;[Escaped Output] FormBuilder.new.label(:country_name);[Escaped Output] FormBuilder.new.text_field(:country_name, :class => "form-control");[Escaped Output] FormBuilder.new.label(:country_code);[Escaped Output] FormBuilder.new.text_field(:country_code, :class => "form-control");[Escaped Output] link_to(t("cancel"), countries_path, :class => "btn btn-warning");[Escaped Output] FormBuilder.new.submit(t("save"), :class => "btn btn-success"); end

countries/edit

[Escaped Output] render(partial => "form", {})

countries/edit.["CountriesController#edit"]

[Escaped Output] render(partial => "form", {})

countries/index

[Escaped Output] t(:country_name)
[Escaped Output] t(:country_code)
[Escaped Output] country.country_code
[Escaped Output] country.country_name
[Escaped Output] link_to(country) do; [ignored]; end
[Escaped Output] link_to(edit_country_path(country)) do; [ignored]; end
[Escaped Output] button_to(country, :method => :delete, :data => ({ :confirm => "Are you sure?" }), :class => "btn btn-xs btn-success") do; [ignored]; end

countries/index.["CountriesController#index"]

[Escaped Output] t(:country_name)
[Escaped Output] t(:country_code)
[Escaped Output] country.country_code
[Escaped Output] country.country_name
[Escaped Output] link_to(country) do; [ignored]; end
[Escaped Output] link_to(edit_country_path(country)) do; [ignored]; end
[Escaped Output] button_to(country, :method => :delete, :data => ({ :confirm => "Are you sure?" }), :class => "btn btn-xs btn-success") do; [ignored]; end

countries/new

[Escaped Output] render(partial => "form", {})

countries/new.["CountriesController#new"]

[Escaped Output] render(partial => "form", {})

countries/show

[Escaped Output] notice
[Escaped Output] t("country")
[Escaped Output] link_to(countries_path) do; [ignored]; end
[Escaped Output] link_to(edit_country_path(@country)) do; [ignored]; end
[Escaped Output] label_tag(:country_name)
[Escaped Output] @country.country_name
[Escaped Output] label_tag(:country_type)
[Escaped Output] @country.country_type

countries/show.["CountriesController#create"]

[Escaped Output] notice
[Escaped Output] t("country")
[Escaped Output] link_to(countries_path) do; [ignored]; end
[Escaped Output] link_to(edit_country_path(Country.new(country_params))) do; [ignored]; end
[Escaped Output] label_tag(:country_name)
[Escaped Output] Country.new(country_params).country_name
[Escaped Output] label_tag(:country_type)
[Escaped Output] Country.new(country_params).country_type

countries/show.["CountriesController#show"]

[Escaped Output] notice
[Escaped Output] t("country")
[Escaped Output] link_to(countries_path) do; [ignored]; end
[Escaped Output] link_to(edit_country_path(@country)) do; [ignored]; end
[Escaped Output] label_tag(:country_name)
[Escaped Output] @country.country_name
[Escaped Output] label_tag(:country_type)
[Escaped Output] @country.country_type

dashboard/index

[Escaped Output] check_box_tag("INVITED_ONLY", @option.id, true, :class => "task-check")
[Escaped Output] check_box_tag("OPEN", @option.id, false, :class => "task-check")
[Escaped Output] User.all.count
[Escaped Output] User.last.nickname
[Escaped Output] User.last.created_at
[Escaped Output] time_ago_in_words(User.last.created_at)
[Escaped Output] t("ago")
[Escaped Output] d4x_sanitizer(t("login"))
[Escaped Output] d4x_sanitizer("home")
[Escaped Output] d4x_sanitizer("blog")
[Escaped Output] d4x_sanitizer("shop")
[Escaped Output] d4x_sanitizer("register")
[Escaped Output] d4x_sanitizer("about")

dashboard/index.["DashboardController#index"]

[Escaped Output] check_box_tag("INVITED_ONLY", Option.where(:name => "REGISTRATIONS_STATUS").first.id, true, :class => "task-check")
[Escaped Output] check_box_tag("OPEN", Option.where(:name => "REGISTRATIONS_STATUS").first.id, false, :class => "task-check")
[Escaped Output] User.all.count
[Escaped Output] User.last.nickname
[Escaped Output] User.last.created_at
[Escaped Output] time_ago_in_words(User.last.created_at)
[Escaped Output] t("ago")
[Escaped Output] d4x_sanitizer(t("login"))
[Escaped Output] d4x_sanitizer("home")
[Escaped Output] d4x_sanitizer("blog")
[Escaped Output] d4x_sanitizer("shop")
[Escaped Output] d4x_sanitizer("register")
[Escaped Output] d4x_sanitizer("about")

devise/confirmations/new

[Escaped Output] javascript_include_tag("d4x-forgot-unlock")
[Escaped Output] d4x_sanitizer(t("confirm account"))
[Escaped Output] t("enter your address and a confirmation link will be sent to you")
[Escaped Output] render(partial => "devise/shared/dropdown_confirmation", {})
[Escaped Output] f.email_field(:email, :autofocus => true, :placeholder => d4x_sanitizer(t("email")), :class => "form-control text-center")
[Escaped Output] f.submit(t("confirm account"), :id => "bt-signin", :class => "btn btn-md btn-outline-success btn-block")
[Escaped Output] form_for(resource, :as => resource_name, :url => confirmation_path(resource_name), :html => ({ :method => :post })) do; [Escaped Output] f.email_field(:email, :autofocus => true, :placeholder => d4x_sanitizer(t("email")), :class => "form-control text-center");[Escaped Output] f.submit(t("confirm account"), :id => "bt-signin", :class => "btn btn-md btn-outline-success btn-block"); end
[Escaped Output] render(partial => "/shared/devise_footer", {})

devise/invitations/edit

[Escaped Output] render(partial => "/shared/devise_header_logo", {})
[Escaped Output] t("devise.invitations.edit.header")
[Escaped Output] devise_error_messages!
[Escaped Output] f.hidden_field(:invitation_token)
[Escaped Output] f.label(:password)
[Escaped Output] f.password_field(:password, :class => "form-control center")
[Escaped Output] f.label(:password_confirmation)
[Escaped Output] f.password_field(:password_confirmation, :class => "form-control center")
[Escaped Output] f.submit(t("devise.invitations.edit.submit_button"), :class => "btn btn-md btn-block btn-d4x")
[Escaped Output] form_for(resource, :as => resource_name, :url => invitation_path(resource_name), :html => ({ :method => :put })) do; [Escaped Output] devise_error_messages!;[Escaped Output] f.hidden_field(:invitation_token);[Escaped Output] f.label(:password);[Escaped Output] f.password_field(:password, :class => "form-control center");[Escaped Output] f.label(:password_confirmation);[Escaped Output] f.password_field(:password_confirmation, :class => "form-control center");[Escaped Output] f.submit(t("devise.invitations.edit.submit_button"), :class => "btn btn-md btn-block btn-d4x"); end

devise/invitations/new

[Escaped Output] render(partial => "/shared/devise_header_logo", {})
[Escaped Output] t("devise.invitations.new.header")
[Escaped Output] t("enter your address and the reset link will be sent to you")
[Escaped Output] devise_error_messages!
[Escaped Output] f.label(field)
[Escaped Output] f.text_field(field, :class => "form-control center")
[Escaped Output] f.submit(t("devise.invitations.new.submit_button"), :class => "btn btn-md btn-block btn-d4x")
[Escaped Output] form_for(resource, :as => resource_name, :url => invitation_path(resource_name), :html => ({ :method => :post })) do; [Escaped Output] devise_error_messages!;resource.class.invite_key_fields.each do; [Escaped Output] f.label(field);[Escaped Output] f.text_field(field, :class => "form-control center"); end;[Escaped Output] f.submit(t("devise.invitations.new.submit_button"), :class => "btn btn-md btn-block btn-d4x"); end
[Escaped Output] render(partial => "/shared/devise_footer", {})

devise/mailer/confirmation_instructions

[Escaped Output] @resource.firstname
[Escaped Output] @token

devise/mailer/invitation_instructions

[Escaped Output] @resource.firstname
[Escaped Output] @resource.email
[Escaped Output] t("devise.mailer.invitation_instructions.someone_invited_you", :url => "https://reloaded.oniline")
[Escaped Output] link_to(t("devise.mailer.invitation_instructions.accept"), accept_invitation_url(@resource, :invitation_token => (@token)), :class => "btn-primary")
[Escaped Output] t("devise.mailer.invitation_instructions.ignore").html_safe

devise/mailer/reset_password_instructions

[Escaped Output] @resource.firstname
[Escaped Output] @token

devise/mailer/unlock_instructions

[Escaped Output] @resource.firstname
[Escaped Output] @token

devise/new

[Escaped Output] javascript_include_tag("d4x-forgot-unlock")
[Escaped Output] render(partial => "/shared/devise_header_logo", {})
[Escaped Output] d4x_sanitizer(t("confirm account"))
[Escaped Output] t("enter your address and a confirmation link will be sent to you")
[Escaped Output] f.email_field(:email, :autofocus => true, :placeholder => d4x_sanitizer(t("email")), :class => "form-control center")
[Escaped Output] f.submit(d4x_sanitizer(t("resend confirmation instructions")), :class => "btn btn-d4x btn-block")
[Escaped Output] form_for(resource, :as => resource_name, :url => confirmation_path(resource_name), :html => ({ :method => :post })) do; [Escaped Output] f.email_field(:email, :autofocus => true, :placeholder => d4x_sanitizer(t("email")), :class => "form-control center");[Escaped Output] f.submit(d4x_sanitizer(t("resend confirmation instructions")), :class => "btn btn-d4x btn-block"); end
[Escaped Output] render(partial => "devise/shared/links_confirmation", {})
[Escaped Output] render(partial => "/shared/devise_footer", {})

devise/passwords/edit

[Escaped Output] javascript_include_tag("d4x-forgot-unlock")
[Escaped Output] javascript_include_tag("d4x-signin")
[Escaped Output] d4x_sanitizer(t("forgot password"))
[Escaped Output] t("enter your address and the reset link will be sent to you")
[Escaped Output] render(partial => "devise/shared/dropdown_confirmation", {})
[Escaped Output] f.hidden_field(:reset_password_token)
[Escaped Output] f.password_field(:password, :autofocus => true, :autocomplete => "off", :class => "form-control center", :placeholder => t("new password"))
[Escaped Output] f.password_field(:password_confirmation, :autocomplete => "off", :class => "form-control center", :placeholder => t("confirm"))
[Escaped Output] f.submit(t("change password"), :id => "bt-signin", :class => "btn btn-md btn-outline-success btn-block")
[Escaped Output] form_for(resource, :as => resource_name, :url => password_path(resource_name), :html => ({ :method => :put })) do; [Escaped Output] f.hidden_field(:reset_password_token);[Escaped Output] f.password_field(:password, :autofocus => true, :autocomplete => "off", :class => "form-control center", :placeholder => t("new password"));[Escaped Output] f.password_field(:password_confirmation, :autocomplete => "off", :class => "form-control center", :placeholder => t("confirm"));[Escaped Output] f.submit(t("change password"), :id => "bt-signin", :class => "btn btn-md btn-outline-success btn-block"); end
[Escaped Output] render(partial => "/shared/devise_footer", {})

devise/passwords/new

[Escaped Output] javascript_include_tag("d4x-forgot-unlock")
[Escaped Output] javascript_include_tag("d4x-signin")
[Escaped Output] d4x_sanitizer(t("forgot password"))
[Escaped Output] t("enter your address and the reset link will be sent to you")
[Escaped Output] render(partial => "devise/shared/dropdown_confirmation", {})
[Escaped Output] f.email_field(:email, :autofocus => true, :placeholder => d4x_sanitizer(t("email")), :class => "form-control center")
[Escaped Output] f.submit(t("reset password instructions"), :id => "bt-signin", :class => "btn btn-md btn-outline-success btn-block")
[Escaped Output] form_for(resource, :as => resource_name, :url => password_path(resource_name), :html => ({ :method => :post })) do; [Escaped Output] f.email_field(:email, :autofocus => true, :placeholder => d4x_sanitizer(t("email")), :class => "form-control center");[Escaped Output] f.submit(t("reset password instructions"), :id => "bt-signin", :class => "btn btn-md btn-outline-success btn-block"); end
[Escaped Output] render(partial => "/shared/devise_footer", {})

devise/registrations/activation

[Escaped Output] javascript_include_tag("d4x-activation")
[Escaped Output] d4x_sanitizer(t("activate_account"))
[Escaped Output] d4x_sanitizer(t("Use the email you have already registered"))
[Escaped Output] render(partial => "devise/shared/dropdown_confirmation", {})
[Escaped Output] text_field_tag(:couponCode, nil, :placeholder => "Coupon", :class => "form-control input-sm center")
[Escaped Output] d4x_sanitizer(t("Activate and Pay"))
[Escaped Output] (get_setting_value("CONTRIBUTION").to_i / 100)
[Escaped Output] d4x_sanitizer(t("with Credit Card"))
[Escaped Output] get_setting_value("CONTRIBUTION")
[Escaped Output] f.submit(t("activate_account"), :id => "bt-signin", :class => "btn btn-md btn-outline-success btn-block")
[Escaped Output] form_for("#") do; [Escaped Output] text_field_tag(:couponCode, nil, :placeholder => "Coupon", :class => "form-control input-sm center");[Escaped Output] d4x_sanitizer(t("Activate and Pay"));[Escaped Output] (get_setting_value("CONTRIBUTION").to_i / 100);[Escaped Output] d4x_sanitizer(t("with Credit Card"));[Escaped Output] get_setting_value("CONTRIBUTION");[Escaped Output] f.submit(t("activate_account"), :id => "bt-signin", :class => "btn btn-md btn-outline-success btn-block"); end
[Escaped Output] render(partial => "/shared/devise_footer", {})

devise/registrations/coupon_activation

[Escaped Output] javascript_include_tag("d4x-activation")
[Escaped Output] render(partial => "/shared/devise_header_logo", {})
[Escaped Output] d4x_sanitizer(t("activate_account"))
[Escaped Output] d4x_sanitizer(t("Use the email you have already registered"))
[Escaped Output] text_field_tag(:couponCode, params[:couponCode], :placeholder => "Coupon", :class => "form-control input-sm center")
[Escaped Output] d4x_sanitizer(t("Activate and Pay"))
[Escaped Output] (params[:amount].to_i / 100)
[Escaped Output] d4x_sanitizer(t("with Credit Card"))
[Escaped Output] params[:amount]
[Escaped Output] form_for("#") do; [Escaped Output] text_field_tag(:couponCode, params[:couponCode], :placeholder => "Coupon", :class => "form-control input-sm center");[Escaped Output] d4x_sanitizer(t("Activate and Pay"));[Escaped Output] (params[:amount].to_i / 100);[Escaped Output] d4x_sanitizer(t("with Credit Card"));[Escaped Output] params[:amount]; end
[Escaped Output] render(partial => "devise/shared/links_activation", {})
[Escaped Output] render(partial => "/shared/devise_footer", {})

devise/registrations/edit

[Escaped Output] javascript_include_tag("d4x-changepass")
[Escaped Output] d4x_sanitizer(t("change password"))
[Escaped Output] t("we need your current password to perform changes")
[Escaped Output] t("currently waiting confirmation for")
[Escaped Output] resource.unconfirmed_email
[Escaped Output] render(partial => "devise/shared/dropdown_confirmation", {})
[Escaped Output] f.password_field(:current_password, :autocomplete => "off", :class => "form-control center", :placeholder => d4x_sanitizer(t("current password")))
[Escaped Output] f.password_field(:password, :autocomplete => "off", :class => "form-control password center", :placeholder => d4x_sanitizer(t("new password")))
[Escaped Output] f.password_field(:password_confirmation, :autocomplete => "off", :class => "form-control center", :placeholder => "Password Confirmation")
[Escaped Output] f.submit(t("change password"), :id => "bt-signin", :class => "btn btn-md btn-outline-success btn-block")
[Escaped Output] form_for(resource, :as => resource_name, :url => registration_path(resource_name), :html => ({ :method => :put })) do; [Escaped Output] f.password_field(:current_password, :autocomplete => "off", :class => "form-control center", :placeholder => d4x_sanitizer(t("current password")));[Escaped Output] f.password_field(:password, :autocomplete => "off", :class => "form-control password center", :placeholder => d4x_sanitizer(t("new password")));[Escaped Output] f.password_field(:password_confirmation, :autocomplete => "off", :class => "form-control center", :placeholder => "Password Confirmation");[Escaped Output] f.submit(t("change password"), :id => "bt-signin", :class => "btn btn-md btn-outline-success btn-block"); end
[Escaped Output] render(partial => "/shared/devise_footer", {})

devise/registrations/new

[Escaped Output] d4x_sanitizer(t("sign up"))
[Escaped Output] hidden_field_tag(:invitation_token, :value => params[:invitation_token])
[Escaped Output] hidden_field_tag(:invite_email, :value => invited_email)
[Escaped Output] d4x_sanitizer(t("invitated sir"))
[Escaped Output] d4x_sanitizer(t("invalid invite"))
[Escaped Output] render(partial => "devise/shared/dropdown_confirmation", {})
[Escaped Output] f.text_field(:firstname, :class => "form-control firstname center", :placeholder => d4x_sanitizer(t("fullname")))
[Escaped Output] f.email_field(:email, :value => invited_email, :class => "form-control email center", :placeholder => t("current email"))
[Escaped Output] f.text_field(:nickname, :value => invited_name, :class => "form-control nickname center", :placeholder => d4x_sanitizer(t("nickname")))
[Escaped Output] f.password_field(:password, :class => "form-control password center", :placeholder => d4x_sanitizer(t("new password")))
[Escaped Output] check_box_tag(:agreement, :class => "i-checks")
[Escaped Output] link_to(d4x_sanitizer(t("i agree with terms and conditions")), "/terms")
[Escaped Output] f.submit(t("sign up"), :id => "signup-submit", :class => "btn btn-md btn-outline-success btn-block")
[Escaped Output] t("already have an account")
[Escaped Output] link_to(d4x_sanitizer(t("login")), new_session_path(resource_name), :id => "login-link")
[Escaped Output] form_for(resource, :as => resource_name, :url => registration_path(resource_name)) do; [Escaped Output] f.text_field(:firstname, :class => "form-control firstname center", :placeholder => d4x_sanitizer(t("fullname")));[Escaped Output] f.email_field(:email, :value => invited_email, :class => "form-control email center", :placeholder => t("current email"));[Escaped Output] f.text_field(:nickname, :value => invited_name, :class => "form-control nickname center", :placeholder => d4x_sanitizer(t("nickname")));[Escaped Output] f.password_field(:password, :class => "form-control password center", :placeholder => d4x_sanitizer(t("new password")));[Escaped Output] check_box_tag(:agreement, :class => "i-checks");[Escaped Output] link_to(d4x_sanitizer(t("i agree with terms and conditions")), "/terms");[Escaped Output] f.submit(t("sign up"), :id => "signup-submit", :class => "btn btn-md btn-outline-success btn-block");[Escaped Output] t("already have an account");[Escaped Output] link_to(d4x_sanitizer(t("login")), new_session_path(resource_name), :id => "login-link"); end
[Escaped Output] render(partial => "/shared/devise_footer", {})

devise/sessions/new

[Escaped Output] javascript_include_tag("d4x-signin")
[Escaped Output] d4x_sanitizer(t("login"))
[Escaped Output] render(partial => "devise/shared/dropdown_confirmation", {})
[Escaped Output] f.text_field(:nickname, :class => "form-control center", :size => "26", :placeholder => d4x_sanitizer(t("nickname")), :maxlength => 20)
[Escaped Output] f.password_field(:password, :class => "form-control center input-transparent", :placeholder => d4x_sanitizer(t("password")))
[Escaped Output] f.submit(t("login"), :id => "bt-signin", :class => "btn btn-md btn-outline-success btn-block")
[Escaped Output] form_for(resource, :as => resource_name, :url => session_path(resource_name)) do; [Escaped Output] f.text_field(:nickname, :class => "form-control center", :size => "26", :placeholder => d4x_sanitizer(t("nickname")), :maxlength => 20);[Escaped Output] f.password_field(:password, :class => "form-control center input-transparent", :placeholder => d4x_sanitizer(t("password")));[Escaped Output] f.submit(t("login"), :id => "bt-signin", :class => "btn btn-md btn-outline-success btn-block"); end
[Escaped Output] render(partial => "/shared/devise_footer", {})

devise/shared/_dropdown_confirmation

[Escaped Output] new_password_path(resource_name)
[Escaped Output] t("forgot password")
[Escaped Output] new_unlock_path(resource_name)
[Escaped Output] t("unlock instructions")
[Escaped Output] t("registration")
[Escaped Output] t("activate_account")
[Escaped Output] new_session_path(resource_name)
[Escaped Output] t("login")
[Escaped Output] new_confirmation_path(resource_name)
[Escaped Output] t("confirm account")

devise/shared/_dropdown_confirmation.["Template:devise/confirmations/new"]

[Escaped Output] new_password_path(resource_name)
[Escaped Output] t("forgot password")
[Escaped Output] new_unlock_path(resource_name)
[Escaped Output] t("unlock instructions")
[Escaped Output] t("registration")
[Escaped Output] t("activate_account")
[Escaped Output] new_session_path(resource_name)
[Escaped Output] t("login")
[Escaped Output] new_confirmation_path(resource_name)
[Escaped Output] t("confirm account")

devise/shared/_links_activation

[Escaped Output] link_to(t("forgot password"), new_password_path(resource_name), :id => "forgot-link")
[Escaped Output] link_to(t("unlock instructions"), new_unlock_path(resource_name), :id => "unlock-link")
[Escaped Output] link_to(t("registration"), new_registration_path(resource_name), :id => "signup-link")
[Escaped Output] link_to(t("login"), new_session_path(resource_name), :id => "login-link")
[Escaped Output] link_to(t("confirm account"), new_confirmation_path(resource_name), :id => "confirm-link")
[Escaped Output] link_to("Sign in with #{provider.to_s.titleize}", omniauth_authorize_path(resource_name, provider))

devise/shared/_links_activation.["Template:devise/registrations/coupon_activation"]

[Escaped Output] link_to(t("forgot password"), new_password_path(resource_name), :id => "forgot-link")
[Escaped Output] link_to(t("unlock instructions"), new_unlock_path(resource_name), :id => "unlock-link")
[Escaped Output] link_to(t("registration"), new_registration_path(resource_name), :id => "signup-link")
[Escaped Output] link_to(t("login"), new_session_path(resource_name), :id => "login-link")
[Escaped Output] link_to(t("confirm account"), new_confirmation_path(resource_name), :id => "confirm-link")
[Escaped Output] link_to("Sign in with #{provider.to_s.titleize}", omniauth_authorize_path(resource_name, provider))

devise/shared/_links_confirmation

[Escaped Output] link_to(t("forgot password"), new_password_path(resource_name), :id => "forgot-link")
[Escaped Output] link_to(t("unlock instructions"), new_unlock_path(resource_name), :id => "unlock-link")
[Escaped Output] link_to(t("registration"), new_registration_path(resource_name), :id => "signup-link")
[Escaped Output] link_to(t("activate_account"), "/activation", :id => "activation-link")
[Escaped Output] link_to(t("login"), new_session_path(resource_name), :id => "login-link")
[Escaped Output] link_to("Sign in with #{provider.to_s.titleize}", omniauth_authorize_path(resource_name, provider))

devise/shared/_links_confirmation.["Template:devise/new"]

[Escaped Output] link_to(t("forgot password"), new_password_path(resource_name), :id => "forgot-link")
[Escaped Output] link_to(t("unlock instructions"), new_unlock_path(resource_name), :id => "unlock-link")
[Escaped Output] link_to(t("registration"), new_registration_path(resource_name), :id => "signup-link")
[Escaped Output] link_to(t("activate_account"), "/activation", :id => "activation-link")
[Escaped Output] link_to(t("login"), new_session_path(resource_name), :id => "login-link")
[Escaped Output] link_to("Sign in with #{provider.to_s.titleize}", omniauth_authorize_path(resource_name, provider))

devise/shared/_links_password

[Escaped Output] link_to(t("registration"), new_registration_path(resource_name), :id => "signup-link")
[Escaped Output] link_to(t("confirm address"), new_confirmation_path(resource_name), :id => "confirm-link")
[Escaped Output] link_to(t("unlock instructions"), new_unlock_path(resource_name), :id => "unlock-link")
[Escaped Output] link_to(t("activate_account"), "/activation", :id => "activation-link")
[Escaped Output] link_to("Sign in with #{provider.to_s.titleize}", omniauth_authorize_path(resource_name, provider))

devise/shared/_links_register

[Escaped Output] link_to(t("login"), new_session_path(resource_name), :id => "login-link")
[Escaped Output] link_to("Sign in with #{provider.to_s.titleize}", omniauth_authorize_path(resource_name, provider))

devise/shared/_links_signin

[Escaped Output] link_to(t("registration"), new_registration_path(resource_name), :id => "signup-link")
[Escaped Output] link_to(t("forgot password"), new_password_path(resource_name), :id => "forgot-link")
[Escaped Output] link_to(t("unlock instructions"), new_unlock_path(resource_name), :id => "unlock-link")
[Escaped Output] link_to(t("confirm address"), new_confirmation_path(resource_name), :id => "confirm-link")
[Escaped Output] link_to(t("activate_account"), "/activation", :id => "activation-link")
[Escaped Output] link_to("Sign in with #{provider.to_s.titleize}", omniauth_authorize_path(resource_name, provider))

devise/shared/_links_unlock

[Escaped Output] link_to(t("registration"), new_registration_path(resource_name), :id => "signup-link")
[Escaped Output] link_to(t("login"), new_session_path(resource_name), :id => "login-link")
[Escaped Output] link_to(t("confirm address"), new_confirmation_path(resource_name), :id => "confirm-link")
[Escaped Output] link_to(t("Didn't receive unlock instructions?"), new_unlock_path(resource_name))
[Escaped Output] link_to(t("activate_account"), "/activation", :id => "activation-link")
[Escaped Output] link_to(t("forgot password"), new_password_path(resource_name), :id => "forgot-link")
[Escaped Output] link_to("Sign in with #{provider.to_s.titleize}", omniauth_authorize_path(resource_name, provider))

devise/two_factor_authentication/show

[Escaped Output] text_field_tag(:code)
[Escaped Output] submit_tag("Log in!")
[Escaped Output] form_tag([resource_name, :two_factor_authentication], :method => :put) do; [Escaped Output] text_field_tag(:code);[Escaped Output] submit_tag("Log in!"); end
[Escaped Output] link_to("Sign out", destroy_user_session_path, :method => :delete)

devise/unlocks/new

[Escaped Output] javascript_include_tag("d4x-signin")
[Escaped Output] javascript_include_tag("d4x-forgot-unlock")
[Escaped Output] d4x_sanitizer(t("unlock your account"))
[Escaped Output] t("enter your address and the unlock link will be sent to you")
[Escaped Output] render(partial => "devise/shared/dropdown_confirmation", {})
[Escaped Output] f.email_field(:email, :autofocus => true, :placeholder => d4x_sanitizer(t("email")), :class => "form-control center")
[Escaped Output] form_for(resource, :as => resource_name, :url => unlock_path(resource_name), :html => ({ :method => :post })) do; [Escaped Output] f.email_field(:email, :autofocus => true, :placeholder => d4x_sanitizer(t("email")), :class => "form-control center"); end
[Escaped Output] f.submit(t("unlock your account"), :id => "bt-signin", :class => "btn btn-md btn-outline-success btn-block")
[Escaped Output] form_for(resource, :as => resource_name, :url => session_path(resource_name)) do; [Escaped Output] form_for(resource, :as => resource_name, :url => unlock_path(resource_name), :html => ({ :method => :post })) do; [Escaped Output] f.email_field(:email, :autofocus => true, :placeholder => d4x_sanitizer(t("email")), :class => "form-control center"); end;[Escaped Output] f.submit(t("unlock your account"), :id => "bt-signin", :class => "btn btn-md btn-outline-success btn-block"); end
[Escaped Output] render(partial => "/shared/devise_footer", {})

domains/_form

[Escaped Output] pluralize(@domain.errors.count, "error")
[Escaped Output] msg
[Escaped Output] t("domain")
[Escaped Output] link_to(domains_path) do; [ignored]; end
[Escaped Output] f.label(:domain)
[Escaped Output] f.text_field(:domain, :class => "form-control")
[Escaped Output] f.label(:description)
[Escaped Output] f.text_field(:description, :class => "form-control")
[Escaped Output] f.label(:homedir)
[Escaped Output] f.text_field(:homedir, :class => "form-control")
[Escaped Output] f.label(:vmaildir)
[Escaped Output] f.text_field(:vmaildir, :class => "form-control")
[Escaped Output] f.label(:active)
[Escaped Output] f.check_box(:active)
[Escaped Output] link_to(t("cancel"), domains_path, :class => "btn btn-warning")
[Escaped Output] f.submit(t("save"), :class => "btn btn-success")
[Escaped Output] form_for(@domain) do; if @domain.errors.any? then; [Escaped Output] pluralize(@domain.errors.count, "error"); @domain.errors.full_messages.each do; [Escaped Output] msg; end;end;[Escaped Output] t("domain");[Escaped Output] link_to(domains_path) do; [ignored]; end;[Escaped Output] f.label(:domain);[Escaped Output] f.text_field(:domain, :class => "form-control");[Escaped Output] f.label(:description);[Escaped Output] f.text_field(:description, :class => "form-control");[Escaped Output] f.label(:homedir);[Escaped Output] f.text_field(:homedir, :class => "form-control");[Escaped Output] f.label(:vmaildir);[Escaped Output] f.text_field(:vmaildir, :class => "form-control");[Escaped Output] f.label(:active);[Escaped Output] f.check_box(:active);[Escaped Output] link_to(t("cancel"), domains_path, :class => "btn btn-warning");[Escaped Output] f.submit(t("save"), :class => "btn btn-success"); end

domains/_form.["DomainsController#create", "Template:domains/new"]

[Escaped Output] pluralize(Domain.new(params[:domain]).errors.count, "error")
[Escaped Output] msg
[Escaped Output] t("domain")
[Escaped Output] link_to(domains_path) do; [ignored]; end
[Escaped Output] FormBuilder.new.label(:domain)
[Escaped Output] FormBuilder.new.text_field(:domain, :class => "form-control")
[Escaped Output] FormBuilder.new.label(:description)
[Escaped Output] FormBuilder.new.text_field(:description, :class => "form-control")
[Escaped Output] FormBuilder.new.label(:homedir)
[Escaped Output] FormBuilder.new.text_field(:homedir, :class => "form-control")
[Escaped Output] FormBuilder.new.label(:vmaildir)
[Escaped Output] FormBuilder.new.text_field(:vmaildir, :class => "form-control")
[Escaped Output] FormBuilder.new.label(:active)
[Escaped Output] FormBuilder.new.check_box(:active)
[Escaped Output] link_to(t("cancel"), domains_path, :class => "btn btn-warning")
[Escaped Output] FormBuilder.new.submit(t("save"), :class => "btn btn-success")
[Escaped Output] form_for(Domain.new(params[:domain])) do; if Domain.new(params[:domain]).errors.any? then; [Escaped Output] pluralize(Domain.new(params[:domain]).errors.count, "error"); Domain.new(params[:domain]).errors.full_messages.each do; [Escaped Output] msg; end;end;[Escaped Output] t("domain");[Escaped Output] link_to(domains_path) do; [ignored]; end;[Escaped Output] FormBuilder.new.label(:domain);[Escaped Output] FormBuilder.new.text_field(:domain, :class => "form-control");[Escaped Output] FormBuilder.new.label(:description);[Escaped Output] FormBuilder.new.text_field(:description, :class => "form-control");[Escaped Output] FormBuilder.new.label(:homedir);[Escaped Output] FormBuilder.new.text_field(:homedir, :class => "form-control");[Escaped Output] FormBuilder.new.label(:vmaildir);[Escaped Output] FormBuilder.new.text_field(:vmaildir, :class => "form-control");[Escaped Output] FormBuilder.new.label(:active);[Escaped Output] FormBuilder.new.check_box(:active);[Escaped Output] link_to(t("cancel"), domains_path, :class => "btn btn-warning");[Escaped Output] FormBuilder.new.submit(t("save"), :class => "btn btn-success"); end

domains/_form.["DomainsController#edit", "Template:domains/edit"]

[Escaped Output] pluralize(Domain.find(params[:id]).errors.count, "error")
[Escaped Output] (Unresolved Model).new
[Escaped Output] t("domain")
[Escaped Output] link_to(domains_path) do; [ignored]; end
[Escaped Output] FormBuilder.new.label(:domain)
[Escaped Output] FormBuilder.new.text_field(:domain, :class => "form-control")
[Escaped Output] FormBuilder.new.label(:description)
[Escaped Output] FormBuilder.new.text_field(:description, :class => "form-control")
[Escaped Output] FormBuilder.new.label(:homedir)
[Escaped Output] FormBuilder.new.text_field(:homedir, :class => "form-control")
[Escaped Output] FormBuilder.new.label(:vmaildir)
[Escaped Output] FormBuilder.new.text_field(:vmaildir, :class => "form-control")
[Escaped Output] FormBuilder.new.label(:active)
[Escaped Output] FormBuilder.new.check_box(:active)
[Escaped Output] link_to(t("cancel"), domains_path, :class => "btn btn-warning")
[Escaped Output] FormBuilder.new.submit(t("save"), :class => "btn btn-success")
[Escaped Output] form_for(Domain.find(params[:id])) do; if Domain.find(params[:id]).errors.any? then; [Escaped Output] pluralize(Domain.find(params[:id]).errors.count, "error"); Domain.find(params[:id]).errors.full_messages.each do; [Escaped Output] (Unresolved Model).new; end;end;[Escaped Output] t("domain");[Escaped Output] link_to(domains_path) do; [ignored]; end;[Escaped Output] FormBuilder.new.label(:domain);[Escaped Output] FormBuilder.new.text_field(:domain, :class => "form-control");[Escaped Output] FormBuilder.new.label(:description);[Escaped Output] FormBuilder.new.text_field(:description, :class => "form-control");[Escaped Output] FormBuilder.new.label(:homedir);[Escaped Output] FormBuilder.new.text_field(:homedir, :class => "form-control");[Escaped Output] FormBuilder.new.label(:vmaildir);[Escaped Output] FormBuilder.new.text_field(:vmaildir, :class => "form-control");[Escaped Output] FormBuilder.new.label(:active);[Escaped Output] FormBuilder.new.check_box(:active);[Escaped Output] link_to(t("cancel"), domains_path, :class => "btn btn-warning");[Escaped Output] FormBuilder.new.submit(t("save"), :class => "btn btn-success"); end

domains/_form.["DomainsController#new", "Template:domains/new"]

[Escaped Output] pluralize(Domain.new.errors.count, "error")
[Escaped Output] msg
[Escaped Output] t("domain")
[Escaped Output] link_to(domains_path) do; [ignored]; end
[Escaped Output] FormBuilder.new.label(:domain)
[Escaped Output] FormBuilder.new.text_field(:domain, :class => "form-control")
[Escaped Output] FormBuilder.new.label(:description)
[Escaped Output] FormBuilder.new.text_field(:description, :class => "form-control")
[Escaped Output] FormBuilder.new.label(:homedir)
[Escaped Output] FormBuilder.new.text_field(:homedir, :class => "form-control")
[Escaped Output] FormBuilder.new.label(:vmaildir)
[Escaped Output] FormBuilder.new.text_field(:vmaildir, :class => "form-control")
[Escaped Output] FormBuilder.new.label(:active)
[Escaped Output] FormBuilder.new.check_box(:active)
[Escaped Output] link_to(t("cancel"), domains_path, :class => "btn btn-warning")
[Escaped Output] FormBuilder.new.submit(t("save"), :class => "btn btn-success")
[Escaped Output] form_for(Domain.new) do; if Domain.new.errors.any? then; [Escaped Output] pluralize(Domain.new.errors.count, "error"); Domain.new.errors.full_messages.each do; [Escaped Output] msg; end;end;[Escaped Output] t("domain");[Escaped Output] link_to(domains_path) do; [ignored]; end;[Escaped Output] FormBuilder.new.label(:domain);[Escaped Output] FormBuilder.new.text_field(:domain, :class => "form-control");[Escaped Output] FormBuilder.new.label(:description);[Escaped Output] FormBuilder.new.text_field(:description, :class => "form-control");[Escaped Output] FormBuilder.new.label(:homedir);[Escaped Output] FormBuilder.new.text_field(:homedir, :class => "form-control");[Escaped Output] FormBuilder.new.label(:vmaildir);[Escaped Output] FormBuilder.new.text_field(:vmaildir, :class => "form-control");[Escaped Output] FormBuilder.new.label(:active);[Escaped Output] FormBuilder.new.check_box(:active);[Escaped Output] link_to(t("cancel"), domains_path, :class => "btn btn-warning");[Escaped Output] FormBuilder.new.submit(t("save"), :class => "btn btn-success"); end

domains/_form.["Template:domains/edit"]

[Escaped Output] pluralize(@domain.errors.count, "error")
[Escaped Output] msg
[Escaped Output] t("domain")
[Escaped Output] link_to(domains_path) do; [ignored]; end
[Escaped Output] FormBuilder.new.label(:domain)
[Escaped Output] FormBuilder.new.text_field(:domain, :class => "form-control")
[Escaped Output] FormBuilder.new.label(:description)
[Escaped Output] FormBuilder.new.text_field(:description, :class => "form-control")
[Escaped Output] FormBuilder.new.label(:homedir)
[Escaped Output] FormBuilder.new.text_field(:homedir, :class => "form-control")
[Escaped Output] FormBuilder.new.label(:vmaildir)
[Escaped Output] FormBuilder.new.text_field(:vmaildir, :class => "form-control")
[Escaped Output] FormBuilder.new.label(:active)
[Escaped Output] FormBuilder.new.check_box(:active)
[Escaped Output] link_to(t("cancel"), domains_path, :class => "btn btn-warning")
[Escaped Output] FormBuilder.new.submit(t("save"), :class => "btn btn-success")
[Escaped Output] form_for(@domain) do; if @domain.errors.any? then; [Escaped Output] pluralize(@domain.errors.count, "error"); @domain.errors.full_messages.each do; [Escaped Output] msg; end;end;[Escaped Output] t("domain");[Escaped Output] link_to(domains_path) do; [ignored]; end;[Escaped Output] FormBuilder.new.label(:domain);[Escaped Output] FormBuilder.new.text_field(:domain, :class => "form-control");[Escaped Output] FormBuilder.new.label(:description);[Escaped Output] FormBuilder.new.text_field(:description, :class => "form-control");[Escaped Output] FormBuilder.new.label(:homedir);[Escaped Output] FormBuilder.new.text_field(:homedir, :class => "form-control");[Escaped Output] FormBuilder.new.label(:vmaildir);[Escaped Output] FormBuilder.new.text_field(:vmaildir, :class => "form-control");[Escaped Output] FormBuilder.new.label(:active);[Escaped Output] FormBuilder.new.check_box(:active);[Escaped Output] link_to(t("cancel"), domains_path, :class => "btn btn-warning");[Escaped Output] FormBuilder.new.submit(t("save"), :class => "btn btn-success"); end

domains/edit

[Escaped Output] render(partial => "form", {})

domains/edit.["DomainsController#edit"]

[Escaped Output] render(partial => "form", {})

domains/index

[Escaped Output] t("domains")
[Escaped Output] t(:domain)
[Escaped Output] t(:homedir)
[Escaped Output] t(:vmaildir)
[Escaped Output] t(:active)
[Escaped Output] t("edit")
[Escaped Output] t("delete")
[Escaped Output] domain.domain
[Escaped Output] domain.homedir
[Escaped Output] domain.vmaildir
[Escaped Output] domain.active
[Escaped Output] link_to(edit_domain_path(domain)) do; [ignored]; end
[Escaped Output] button_to(domain, :method => :delete, :data => ({ :confirm => "Are you sure?" }), :class => "btn btn-sm btn-outline-danger") do; [ignored]; end

domains/index.["DomainsController#index"]

[Escaped Output] t("domains")
[Escaped Output] t(:domain)
[Escaped Output] t(:homedir)
[Escaped Output] t(:vmaildir)
[Escaped Output] t(:active)
[Escaped Output] t("edit")
[Escaped Output] t("delete")
[Escaped Output] Domain.new.domain
[Escaped Output] Domain.new.homedir
[Escaped Output] Domain.new.vmaildir
[Escaped Output] Domain.new.active
[Escaped Output] link_to(edit_domain_path(Domain.new)) do; [ignored]; end
[Escaped Output] button_to(Domain.new, :method => :delete, :data => ({ :confirm => "Are you sure?" }), :class => "btn btn-sm btn-outline-danger") do; [ignored]; end

domains/new

[Escaped Output] render(partial => "form", {})

domains/new.["DomainsController#new"]

[Escaped Output] render(partial => "form", {})

domains/show

[Escaped Output] notice
[Escaped Output] t("domain")
[Escaped Output] link_to(domains_path) do; [ignored]; end
[Escaped Output] link_to(edit_domain_path(@domain)) do; [ignored]; end
[Escaped Output] label_tag(:domain)
[Escaped Output] @domain.domain
[Escaped Output] label_tag(:description)
[Escaped Output] @domain.description
[Escaped Output] label_tag(:homedir)
[Escaped Output] @domain.homedir
[Escaped Output] label_tag(:vmaildir)
[Escaped Output] @domain.vmaildir
[Escaped Output] label_tag(:active)
[Escaped Output] @domain.active

domains/show.["DomainsController#show"]

[Escaped Output] notice
[Escaped Output] t("domain")
[Escaped Output] link_to(domains_path) do; [ignored]; end
[Escaped Output] link_to(edit_domain_path(Domain.find(params[:id]))) do; [ignored]; end
[Escaped Output] label_tag(:domain)
[Escaped Output] Domain.find(params[:id]).domain
[Escaped Output] label_tag(:description)
[Escaped Output] Domain.find(params[:id]).description
[Escaped Output] label_tag(:homedir)
[Escaped Output] Domain.find(params[:id]).homedir
[Escaped Output] label_tag(:vmaildir)
[Escaped Output] Domain.find(params[:id]).vmaildir
[Escaped Output] label_tag(:active)
[Escaped Output] Domain.find(params[:id]).active

efiles/_form

[Escaped Output] pluralize(@efile.errors.count, "error")
[Escaped Output] msg
[Escaped Output] f.label(:original)
[Escaped Output] f.file_field(:original, :size => 50, :class => "form-control")
[Escaped Output] f.submit
[Escaped Output] form_for(@efile, :html => ({ :multipart => true })) do; if @efile.errors.any? then; [Escaped Output] pluralize(@efile.errors.count, "error"); @efile.errors.full_messages.each do; [Escaped Output] msg; end;end;[Escaped Output] f.label(:original);[Escaped Output] f.file_field(:original, :size => 50, :class => "form-control");[Escaped Output] f.submit; end

efiles/_form.["EfilesController#create", "Template:efiles/new"]

[Escaped Output] pluralize(Efile.new(params[:efile]).errors.count, "error")
[Escaped Output] msg
[Escaped Output] FormBuilder.new.label(:original)
[Escaped Output] FormBuilder.new.file_field(:original, :size => 50, :class => "form-control")
[Escaped Output] FormBuilder.new.submit
[Escaped Output] form_for(Efile.new(params[:efile]), :html => ({ :multipart => true })) do; if Efile.new(params[:efile]).errors.any? then; [Escaped Output] pluralize(Efile.new(params[:efile]).errors.count, "error"); Efile.new(params[:efile]).errors.full_messages.each do; [Escaped Output] msg; end;end;[Escaped Output] FormBuilder.new.label(:original);[Escaped Output] FormBuilder.new.file_field(:original, :size => 50, :class => "form-control");[Escaped Output] FormBuilder.new.submit; end

efiles/_form.["EfilesController#edit", "Template:efiles/edit"]

[Escaped Output] pluralize(Efile.find(params[:id]).errors.count, "error")
[Escaped Output] (Unresolved Model).new
[Escaped Output] FormBuilder.new.label(:original)
[Escaped Output] FormBuilder.new.file_field(:original, :size => 50, :class => "form-control")
[Escaped Output] FormBuilder.new.submit
[Escaped Output] form_for(Efile.find(params[:id]), :html => ({ :multipart => true })) do; if Efile.find(params[:id]).errors.any? then; [Escaped Output] pluralize(Efile.find(params[:id]).errors.count, "error"); Efile.find(params[:id]).errors.full_messages.each do; [Escaped Output] (Unresolved Model).new; end;end;[Escaped Output] FormBuilder.new.label(:original);[Escaped Output] FormBuilder.new.file_field(:original, :size => 50, :class => "form-control");[Escaped Output] FormBuilder.new.submit; end

efiles/_form.["EfilesController#new", "Template:efiles/new"]

[Escaped Output] pluralize(Efile.new.errors.count, "error")
[Escaped Output] msg
[Escaped Output] FormBuilder.new.label(:original)
[Escaped Output] FormBuilder.new.file_field(:original, :size => 50, :class => "form-control")
[Escaped Output] FormBuilder.new.submit
[Escaped Output] form_for(Efile.new, :html => ({ :multipart => true })) do; if Efile.new.errors.any? then; [Escaped Output] pluralize(Efile.new.errors.count, "error"); Efile.new.errors.full_messages.each do; [Escaped Output] msg; end;end;[Escaped Output] FormBuilder.new.label(:original);[Escaped Output] FormBuilder.new.file_field(:original, :size => 50, :class => "form-control");[Escaped Output] FormBuilder.new.submit; end

efiles/_form.["Template:efiles/edit"]

[Escaped Output] pluralize(@efile.errors.count, "error")
[Escaped Output] msg
[Escaped Output] FormBuilder.new.label(:original)
[Escaped Output] FormBuilder.new.file_field(:original, :size => 50, :class => "form-control")
[Escaped Output] FormBuilder.new.submit
[Escaped Output] form_for(@efile, :html => ({ :multipart => true })) do; if @efile.errors.any? then; [Escaped Output] pluralize(@efile.errors.count, "error"); @efile.errors.full_messages.each do; [Escaped Output] msg; end;end;[Escaped Output] FormBuilder.new.label(:original);[Escaped Output] FormBuilder.new.file_field(:original, :size => 50, :class => "form-control");[Escaped Output] FormBuilder.new.submit; end

efiles/edit

[Escaped Output] render(partial => "form", {})
[Escaped Output] link_to("Show", @efile)
[Escaped Output] link_to("Back", efiles_path)

efiles/edit.["EfilesController#edit"]

[Escaped Output] render(partial => "form", {})
[Escaped Output] link_to("Show", Efile.find(params[:id]))
[Escaped Output] link_to("Back", efiles_path)

efiles/index

[Escaped Output] link_to("New Efile", new_efile_path, :class => "btn btn-xs btn-warning")
[Escaped Output] efile.original_file_name
[Escaped Output] number_to_human_size(efile.original_file_size)
[Escaped Output] efile.original_content_type
[Escaped Output] link_to("Show", efile, :class => "btn btn-xs btn-primary")

efiles/index.["EfilesController#index"]

[Escaped Output] link_to("New Efile", new_efile_path, :class => "btn btn-xs btn-warning")
[Escaped Output] Efile.new.original_file_name
[Escaped Output] number_to_human_size(Efile.new.original_file_size)
[Escaped Output] Efile.new.original_content_type
[Escaped Output] link_to("Show", Efile.new, :class => "btn btn-xs btn-primary")

efiles/new

[Escaped Output] render(partial => "form", {})

efiles/new.["EfilesController#new"]

[Escaped Output] render(partial => "form", {})

efiles/show

[Escaped Output] label_tag(:serial_number)
[Escaped Output] label_tag(@efile.original_file_name)
[Escaped Output] label_tag(:content)
[Escaped Output] label_tag(@efile.original_content_type)
[Escaped Output] link_to("Back", efiles_path, :class => "btn btn-xs btn-warning")

efiles/show.["EfilesController#show"]

[Escaped Output] label_tag(:serial_number)
[Escaped Output] label_tag(Efile.find(params[:id]).original_file_name)
[Escaped Output] label_tag(:content)
[Escaped Output] label_tag(Efile.find(params[:id]).original_content_type)
[Escaped Output] link_to("Back", efiles_path, :class => "btn btn-xs btn-warning")

feedbacks/_form

[Escaped Output] pluralize(@feedback.errors.count, t("error"))
[Escaped Output] msg
[Escaped Output] f.label(d4x_sanitizer(t(:from)), :class => "show-item-label")
[Escaped Output] f.text_field(:from, :size => 90, :class => "def-input")
[Escaped Output] f.label(d4x_sanitizer(t(:email)), :class => "show-item-label")
[Escaped Output] f.text_field(:email, :size => 90, :class => "def-input")
[Escaped Output] f.label(d4x_sanitizer(t(:country)), :class => "show-item-label")
[Escaped Output] f.select(:country, options_for_select([["seleziona", " "], ["Afghanistan", "AF"], ["Albania", "AL"], ["Algeria", "DZ"], ["American Samoa", "AS"], ["Andorra", "AD"], ["Angola", "AO"], ["Anguilla", "AI"], ["Antarctica", "AQ"], ["Antigua & Barbuda", "AG"], ["Argentina", "AR"], ["Armenia", "AM"], ["Aruba", "AW"], ["Australia", "AU"], ["Austria", "AT"], ["Azerbaijan", "AZ"], ["Bahamas", "BS"], ["Bahrain", "BH"], ["Bangladesh", "BD"], ["Barbados", "BB"], ["Belarus", "BY"], ["Belgium", "BE"], ["Belize", "BZ"], ["Benin", "BJ"], ["Bermuda", "BM"], ["Bhutan", "BT"], ["Bolivia", "BO"], ["Bosnia and Herzeg.", "BA"], ["Botswana", "BW"], ["Bouvet Island", "BV"], ["Brazil", "BR"], ["British Ind. Ocean", "IO"], ["Brunei Darussalam", "BN"], ["Bulgaria", "BG"], ["Burkina Faso", "BF"], ["Burundi", "BI"], ["Cambodia", "KH"], ["Cameroon", "CM"], ["Canada", "CA"], ["Cape Verde", "CV"], ["Cayman Islands", "KY"], ["Central Afr.Republic", "CF"], ["Chad", "TD"], ["Chile", "CL"], ["China", "CN"], ["Christmas Island", "CX"], ["Cocos Islands", "CC"], ["Colombia", "CO"], ["Comoros", "KM"], ["Congo", "CG"], ["Congo, Republic of", "CD"], ["Cook Islands", "CK"], ["Costa Rica", "CR"], ["Cote d`Ivoire", "CI"], ["Croatia (Hrvatska)", "HR"], ["Cuba", "CU"], ["Cyprus", "CY"], ["Czech Republic", "CZ"], ["Denmark", "DK"], ["Djibouti", "DJ"], ["Dominica", "DM"], ["Dominican Republic", "DO"], ["East Timor", "TP"], ["Ecuador", "EC"], ["Egypt", "EG"], ["El Salvador", "SV"], ["Equatorial Guinea", "GQ"], ["Eritrea", "ER"], ["Estonia", "EE"], ["Ethiopia", "ET"], ["Falkland Islands", "FK"], ["Faroe Islands", "FO"], ["Fiji", "FJ"], ["Finland", "FI"], ["France", "FR"], ["France, Metropol.", "FX"], ["French Guiana", "GF"], ["French Polynesia", "PF"], ["French Sout Terr.", "TF"], ["Gabon", "GA"], ["Gambia", "GM"], ["Georgia", "GE"], ["Germany", "DE"], ["Ghana", "GH"], ["Gibraltar", "GI"], ["Greece", "GR"], ["Greenland", "GL"], ["Grenada", "GD"], ["Guadeloupe", "GP"], ["Guam", "GU"], ["Guatemala", "GT"], ["Guinea", "GN"], ["Guinea-Bissau", "GW"], ["Guyana", "GY"], ["Haiti", "HT"], ["Heard Mc Donald", "HM"], ["Holy See (Vatican)", "VA"], ["Honduras", "HN"], ["Hong Kong", "HK"], ["Hungary", "HU"], ["Iceland", "IS"], ["India", "IN"], ["Indonesia", "ID"], ["Iran", "IR"], ["Iraq", "IQ"], ["Ireland", "IE"], ["Israel", "IL"], ["Italy", "IT"], ["Jamaica", "JM"], ["Japan", "JP"], ["Jordan", "JO"], ["Kazakhstan", "KZ"], ["Kenya", "KE"], ["Kiribati", "KI"], ["Korea, Democratic", "KP"], ["Korea, Republic of", "KR"], ["Kuwait", "KW"], ["Kyrgyzstan", "KG"], ["Lao Peoples", "LA"], ["Latvia", "LV"], ["Lebanon", "LB"], ["Lesotho", "LS"], ["Liberia", "LR"], ["Libyan", "LY"], ["Liechtenstein", "LI"], ["Lithuania", "LT"], ["Luxembourg", "LU"], ["Macau", "MO"], ["Macedonia", "MK"], ["Madagascar", "MG"], ["Malawi", "MW"], ["Malaysia", "MY"], ["Maldives", "MV"], ["Mali", "ML"], ["Malta", "MT"], ["Marshall Islands", "MH"], ["Martinique", "MQ"], ["Mauritania", "MR"], ["Mauritius", "MU"], ["Mayotte", "YT"], ["Mexico", "MX"], ["Micronesia", "FM"], ["Moldova", "MD"], ["Monaco", "MC"], ["Mongolia", "MN"], ["Montserrat", "MS"], ["Morocco", "MA"], ["Mozambique", "MZ"], ["Myanmar", "MM"], ["Namibia", "NA"], ["Nauru", "NR"], ["Nepal", "NP"], ["Netherlands", "NL"], ["Netherlands Antilles", "AN"], ["New Caledonia", "NC"], ["New Zealand", "NZ"], ["Nicaragua", "NI"], ["Niger", "NE"], ["Nigeria", "NG"], ["Niue", "NU"], ["Norfolk Island", "NF"], ["Northern Mariana Isl", "MP"], ["Norway", "NO"], ["Oman", "OM"], ["Pakistan", "PK"], ["Palau", "PW"], ["Panama", "PA"], ["Papua New Guinea", "PG"], ["Paraguay", "PY"], ["Peru", "PE"], ["Philippines", "PH"], ["Pitcairn", "PN"], ["Poland", "PL"], ["Portugal", "PT"], ["Puerto Rico", "PR"], ["Qatar", "QA"], ["Reunion", "RE"], ["Romania", "RO"], ["Russian Federation", "RU"], ["Rwanda", "RW"], ["Saint Kitts & Nevis", "KN"], ["Saint LUCIA", "LC"], ["Saint Vincent", "VC"], ["Samoa", "WS"], ["San Marino", "SM"], ["Sao Tome & Principe", "ST"], ["Saudi Arabia", "SA"], ["Senegal", "SN"], ["Seychelles", "SC"], ["Sierra Leone", "SL"], ["Singapore", "SG"], ["Slovakia", "SK"], ["Slovenia", "SI"], ["Solomon Islands", "SB"], ["Somalia", "SO"], ["South Africa", "ZA"], ["South Georgia", "GS"], ["Spain", "ES"], ["Sri Lanka", "LK"], ["St. Helena", "SH"], ["St.Pierre & Miquelon", "PM"], ["Sudan", "SD"], ["Suriname", "SR"], ["Svalbard", "SJ"], ["Swaziland", "SZ"], ["Sweden", "SE"], ["Switzerland", "CH"], ["Syrian Arab Republic", "SY"], ["Taiwan", "TW"], ["Tajikistan", "TJ"], ["Tanzania", "TZ"], ["Thailand", "TH"], ["Togo", "TG"], ["Tokelau", "TK"], ["Tonga", "TO"], ["Trinidad & Tobago", "TT"], ["Tunisia", "TN"], ["Turkey", "TR"], ["Turkmenistan", "TM"], ["Turks & Caicos Isl.", "TC"], ["Tuvalu", "TV"], ["Uganda", "UG"], ["Ukraine", "UA"], ["United Arab Emir.", "AE"], ["United Kingdom", "GB"], ["United States", "US"], ["United States Minor", "UM"], ["Uruguay", "UY"], ["Uzbekistan", "UZ"], ["Vanuatu", "VU"], ["Venezuela", "VE"], ["Viet Nam", "VN"], ["Virgin Islands (Brit)", "VG"], ["Virgin Islands (U.S.)", "VI"], ["Wallis & Futuna Isl.", "WF"], ["Western Sahara", "EH"], ["Yemen", "YE"], ["Yugoslavia", "YU"], ["Zambia", "ZM"], ["Zimbabwe", "ZW"]], "0"), :class => "thin-control", :size => "20")
[Escaped Output] f.label(d4x_sanitizer(t(:message)), :class => "show-item-label")
[Escaped Output] f.text_area(:message, :size => "87x12")
[Escaped Output] f.label(d4x_sanitizer(t(:rating)), :class => "show-item-label")
[Escaped Output] f.select(:rating, options_for_select([["1", "1"], ["2", "2"], ["3", "3"], ["4", "4"], ["5", "5"], ["6", "6"], ["7", "7"], ["8", "8"], ["9", "9"], ["10", "10"]], "10"), :class => "thin-control", :size => "20")
[Escaped Output] f.submit("send", :class => "button-d4x")
[Escaped Output] form_for(@feedback) do; if @feedback.errors.any? then; [Escaped Output] pluralize(@feedback.errors.count, t("error")); @feedback.errors.full_messages.each do; [Escaped Output] msg; end;end;[Escaped Output] f.label(d4x_sanitizer(t(:from)), :class => "show-item-label");[Escaped Output] f.text_field(:from, :size => 90, :class => "def-input");[Escaped Output] f.label(d4x_sanitizer(t(:email)), :class => "show-item-label");[Escaped Output] f.text_field(:email, :size => 90, :class => "def-input");[Escaped Output] f.label(d4x_sanitizer(t(:country)), :class => "show-item-label");[Escaped Output] f.select(:country, options_for_select([["seleziona", " "], ["Afghanistan", "AF"], ["Albania", "AL"], ["Algeria", "DZ"], ["American Samoa", "AS"], ["Andorra", "AD"], ["Angola", "AO"], ["Anguilla", "AI"], ["Antarctica", "AQ"], ["Antigua & Barbuda", "AG"], ["Argentina", "AR"], ["Armenia", "AM"], ["Aruba", "AW"], ["Australia", "AU"], ["Austria", "AT"], ["Azerbaijan", "AZ"], ["Bahamas", "BS"], ["Bahrain", "BH"], ["Bangladesh", "BD"], ["Barbados", "BB"], ["Belarus", "BY"], ["Belgium", "BE"], ["Belize", "BZ"], ["Benin", "BJ"], ["Bermuda", "BM"], ["Bhutan", "BT"], ["Bolivia", "BO"], ["Bosnia and Herzeg.", "BA"], ["Botswana", "BW"], ["Bouvet Island", "BV"], ["Brazil", "BR"], ["British Ind. Ocean", "IO"], ["Brunei Darussalam", "BN"], ["Bulgaria", "BG"], ["Burkina Faso", "BF"], ["Burundi", "BI"], ["Cambodia", "KH"], ["Cameroon", "CM"], ["Canada", "CA"], ["Cape Verde", "CV"], ["Cayman Islands", "KY"], ["Central Afr.Republic", "CF"], ["Chad", "TD"], ["Chile", "CL"], ["China", "CN"], ["Christmas Island", "CX"], ["Cocos Islands", "CC"], ["Colombia", "CO"], ["Comoros", "KM"], ["Congo", "CG"], ["Congo, Republic of", "CD"], ["Cook Islands", "CK"], ["Costa Rica", "CR"], ["Cote d`Ivoire", "CI"], ["Croatia (Hrvatska)", "HR"], ["Cuba", "CU"], ["Cyprus", "CY"], ["Czech Republic", "CZ"], ["Denmark", "DK"], ["Djibouti", "DJ"], ["Dominica", "DM"], ["Dominican Republic", "DO"], ["East Timor", "TP"], ["Ecuador", "EC"], ["Egypt", "EG"], ["El Salvador", "SV"], ["Equatorial Guinea", "GQ"], ["Eritrea", "ER"], ["Estonia", "EE"], ["Ethiopia", "ET"], ["Falkland Islands", "FK"], ["Faroe Islands", "FO"], ["Fiji", "FJ"], ["Finland", "FI"], ["France", "FR"], ["France, Metropol.", "FX"], ["French Guiana", "GF"], ["French Polynesia", "PF"], ["French Sout Terr.", "TF"], ["Gabon", "GA"], ["Gambia", "GM"], ["Georgia", "GE"], ["Germany", "DE"], ["Ghana", "GH"], ["Gibraltar", "GI"], ["Greece", "GR"], ["Greenland", "GL"], ["Grenada", "GD"], ["Guadeloupe", "GP"], ["Guam", "GU"], ["Guatemala", "GT"], ["Guinea", "GN"], ["Guinea-Bissau", "GW"], ["Guyana", "GY"], ["Haiti", "HT"], ["Heard Mc Donald", "HM"], ["Holy See (Vatican)", "VA"], ["Honduras", "HN"], ["Hong Kong", "HK"], ["Hungary", "HU"], ["Iceland", "IS"], ["India", "IN"], ["Indonesia", "ID"], ["Iran", "IR"], ["Iraq", "IQ"], ["Ireland", "IE"], ["Israel", "IL"], ["Italy", "IT"], ["Jamaica", "JM"], ["Japan", "JP"], ["Jordan", "JO"], ["Kazakhstan", "KZ"], ["Kenya", "KE"], ["Kiribati", "KI"], ["Korea, Democratic", "KP"], ["Korea, Republic of", "KR"], ["Kuwait", "KW"], ["Kyrgyzstan", "KG"], ["Lao Peoples", "LA"], ["Latvia", "LV"], ["Lebanon", "LB"], ["Lesotho", "LS"], ["Liberia", "LR"], ["Libyan", "LY"], ["Liechtenstein", "LI"], ["Lithuania", "LT"], ["Luxembourg", "LU"], ["Macau", "MO"], ["Macedonia", "MK"], ["Madagascar", "MG"], ["Malawi", "MW"], ["Malaysia", "MY"], ["Maldives", "MV"], ["Mali", "ML"], ["Malta", "MT"], ["Marshall Islands", "MH"], ["Martinique", "MQ"], ["Mauritania", "MR"], ["Mauritius", "MU"], ["Mayotte", "YT"], ["Mexico", "MX"], ["Micronesia", "FM"], ["Moldova", "MD"], ["Monaco", "MC"], ["Mongolia", "MN"], ["Montserrat", "MS"], ["Morocco", "MA"], ["Mozambique", "MZ"], ["Myanmar", "MM"], ["Namibia", "NA"], ["Nauru", "NR"], ["Nepal", "NP"], ["Netherlands", "NL"], ["Netherlands Antilles", "AN"], ["New Caledonia", "NC"], ["New Zealand", "NZ"], ["Nicaragua", "NI"], ["Niger", "NE"], ["Nigeria", "NG"], ["Niue", "NU"], ["Norfolk Island", "NF"], ["Northern Mariana Isl", "MP"], ["Norway", "NO"], ["Oman", "OM"], ["Pakistan", "PK"], ["Palau", "PW"], ["Panama", "PA"], ["Papua New Guinea", "PG"], ["Paraguay", "PY"], ["Peru", "PE"], ["Philippines", "PH"], ["Pitcairn", "PN"], ["Poland", "PL"], ["Portugal", "PT"], ["Puerto Rico", "PR"], ["Qatar", "QA"], ["Reunion", "RE"], ["Romania", "RO"], ["Russian Federation", "RU"], ["Rwanda", "RW"], ["Saint Kitts & Nevis", "KN"], ["Saint LUCIA", "LC"], ["Saint Vincent", "VC"], ["Samoa", "WS"], ["San Marino", "SM"], ["Sao Tome & Principe", "ST"], ["Saudi Arabia", "SA"], ["Senegal", "SN"], ["Seychelles", "SC"], ["Sierra Leone", "SL"], ["Singapore", "SG"], ["Slovakia", "SK"], ["Slovenia", "SI"], ["Solomon Islands", "SB"], ["Somalia", "SO"], ["South Africa", "ZA"], ["South Georgia", "GS"], ["Spain", "ES"], ["Sri Lanka", "LK"], ["St. Helena", "SH"], ["St.Pierre & Miquelon", "PM"], ["Sudan", "SD"], ["Suriname", "SR"], ["Svalbard", "SJ"], ["Swaziland", "SZ"], ["Sweden", "SE"], ["Switzerland", "CH"], ["Syrian Arab Republic", "SY"], ["Taiwan", "TW"], ["Tajikistan", "TJ"], ["Tanzania", "TZ"], ["Thailand", "TH"], ["Togo", "TG"], ["Tokelau", "TK"], ["Tonga", "TO"], ["Trinidad & Tobago", "TT"], ["Tunisia", "TN"], ["Turkey", "TR"], ["Turkmenistan", "TM"], ["Turks & Caicos Isl.", "TC"], ["Tuvalu", "TV"], ["Uganda", "UG"], ["Ukraine", "UA"], ["United Arab Emir.", "AE"], ["United Kingdom", "GB"], ["United States", "US"], ["United States Minor", "UM"], ["Uruguay", "UY"], ["Uzbekistan", "UZ"], ["Vanuatu", "VU"], ["Venezuela", "VE"], ["Viet Nam", "VN"], ["Virgin Islands (Brit)", "VG"], ["Virgin Islands (U.S.)", "VI"], ["Wallis & Futuna Isl.", "WF"], ["Western Sahara", "EH"], ["Yemen", "YE"], ["Yugoslavia", "YU"], ["Zambia", "ZM"], ["Zimbabwe", "ZW"]], "0"), :class => "thin-control", :size => "20");[Escaped Output] f.label(d4x_sanitizer(t(:message)), :class => "show-item-label");[Escaped Output] f.text_area(:message, :size => "87x12");[Escaped Output] f.label(d4x_sanitizer(t(:rating)), :class => "show-item-label");[Escaped Output] f.select(:rating, options_for_select([["1", "1"], ["2", "2"], ["3", "3"], ["4", "4"], ["5", "5"], ["6", "6"], ["7", "7"], ["8", "8"], ["9", "9"], ["10", "10"]], "10"), :class => "thin-control", :size => "20");[Escaped Output] f.submit("send", :class => "button-d4x"); end

feedbacks/_form.["FeedbacksController#edit", "Template:feedbacks/edit"]

[Escaped Output] pluralize(Feedback.find(params[:id]).errors.count, t("error"))
[Escaped Output] (Unresolved Model).new
[Escaped Output] FormBuilder.new.label(d4x_sanitizer(t(:from)), :class => "show-item-label")
[Escaped Output] FormBuilder.new.text_field(:from, :size => 90, :class => "def-input")
[Escaped Output] FormBuilder.new.label(d4x_sanitizer(t(:email)), :class => "show-item-label")
[Escaped Output] FormBuilder.new.text_field(:email, :size => 90, :class => "def-input")
[Escaped Output] FormBuilder.new.label(d4x_sanitizer(t(:country)), :class => "show-item-label")
[Escaped Output] FormBuilder.new.select(:country, options_for_select([["seleziona", " "], ["Afghanistan", "AF"], ["Albania", "AL"], ["Algeria", "DZ"], ["American Samoa", "AS"], ["Andorra", "AD"], ["Angola", "AO"], ["Anguilla", "AI"], ["Antarctica", "AQ"], ["Antigua & Barbuda", "AG"], ["Argentina", "AR"], ["Armenia", "AM"], ["Aruba", "AW"], ["Australia", "AU"], ["Austria", "AT"], ["Azerbaijan", "AZ"], ["Bahamas", "BS"], ["Bahrain", "BH"], ["Bangladesh", "BD"], ["Barbados", "BB"], ["Belarus", "BY"], ["Belgium", "BE"], ["Belize", "BZ"], ["Benin", "BJ"], ["Bermuda", "BM"], ["Bhutan", "BT"], ["Bolivia", "BO"], ["Bosnia and Herzeg.", "BA"], ["Botswana", "BW"], ["Bouvet Island", "BV"], ["Brazil", "BR"], ["British Ind. Ocean", "IO"], ["Brunei Darussalam", "BN"], ["Bulgaria", "BG"], ["Burkina Faso", "BF"], ["Burundi", "BI"], ["Cambodia", "KH"], ["Cameroon", "CM"], ["Canada", "CA"], ["Cape Verde", "CV"], ["Cayman Islands", "KY"], ["Central Afr.Republic", "CF"], ["Chad", "TD"], ["Chile", "CL"], ["China", "CN"], ["Christmas Island", "CX"], ["Cocos Islands", "CC"], ["Colombia", "CO"], ["Comoros", "KM"], ["Congo", "CG"], ["Congo, Republic of", "CD"], ["Cook Islands", "CK"], ["Costa Rica", "CR"], ["Cote d`Ivoire", "CI"], ["Croatia (Hrvatska)", "HR"], ["Cuba", "CU"], ["Cyprus", "CY"], ["Czech Republic", "CZ"], ["Denmark", "DK"], ["Djibouti", "DJ"], ["Dominica", "DM"], ["Dominican Republic", "DO"], ["East Timor", "TP"], ["Ecuador", "EC"], ["Egypt", "EG"], ["El Salvador", "SV"], ["Equatorial Guinea", "GQ"], ["Eritrea", "ER"], ["Estonia", "EE"], ["Ethiopia", "ET"], ["Falkland Islands", "FK"], ["Faroe Islands", "FO"], ["Fiji", "FJ"], ["Finland", "FI"], ["France", "FR"], ["France, Metropol.", "FX"], ["French Guiana", "GF"], ["French Polynesia", "PF"], ["French Sout Terr.", "TF"], ["Gabon", "GA"], ["Gambia", "GM"], ["Georgia", "GE"], ["Germany", "DE"], ["Ghana", "GH"], ["Gibraltar", "GI"], ["Greece", "GR"], ["Greenland", "GL"], ["Grenada", "GD"], ["Guadeloupe", "GP"], ["Guam", "GU"], ["Guatemala", "GT"], ["Guinea", "GN"], ["Guinea-Bissau", "GW"], ["Guyana", "GY"], ["Haiti", "HT"], ["Heard Mc Donald", "HM"], ["Holy See (Vatican)", "VA"], ["Honduras", "HN"], ["Hong Kong", "HK"], ["Hungary", "HU"], ["Iceland", "IS"], ["India", "IN"], ["Indonesia", "ID"], ["Iran", "IR"], ["Iraq", "IQ"], ["Ireland", "IE"], ["Israel", "IL"], ["Italy", "IT"], ["Jamaica", "JM"], ["Japan", "JP"], ["Jordan", "JO"], ["Kazakhstan", "KZ"], ["Kenya", "KE"], ["Kiribati", "KI"], ["Korea, Democratic", "KP"], ["Korea, Republic of", "KR"], ["Kuwait", "KW"], ["Kyrgyzstan", "KG"], ["Lao Peoples", "LA"], ["Latvia", "LV"], ["Lebanon", "LB"], ["Lesotho", "LS"], ["Liberia", "LR"], ["Libyan", "LY"], ["Liechtenstein", "LI"], ["Lithuania", "LT"], ["Luxembourg", "LU"], ["Macau", "MO"], ["Macedonia", "MK"], ["Madagascar", "MG"], ["Malawi", "MW"], ["Malaysia", "MY"], ["Maldives", "MV"], ["Mali", "ML"], ["Malta", "MT"], ["Marshall Islands", "MH"], ["Martinique", "MQ"], ["Mauritania", "MR"], ["Mauritius", "MU"], ["Mayotte", "YT"], ["Mexico", "MX"], ["Micronesia", "FM"], ["Moldova", "MD"], ["Monaco", "MC"], ["Mongolia", "MN"], ["Montserrat", "MS"], ["Morocco", "MA"], ["Mozambique", "MZ"], ["Myanmar", "MM"], ["Namibia", "NA"], ["Nauru", "NR"], ["Nepal", "NP"], ["Netherlands", "NL"], ["Netherlands Antilles", "AN"], ["New Caledonia", "NC"], ["New Zealand", "NZ"], ["Nicaragua", "NI"], ["Niger", "NE"], ["Nigeria", "NG"], ["Niue", "NU"], ["Norfolk Island", "NF"], ["Northern Mariana Isl", "MP"], ["Norway", "NO"], ["Oman", "OM"], ["Pakistan", "PK"], ["Palau", "PW"], ["Panama", "PA"], ["Papua New Guinea", "PG"], ["Paraguay", "PY"], ["Peru", "PE"], ["Philippines", "PH"], ["Pitcairn", "PN"], ["Poland", "PL"], ["Portugal", "PT"], ["Puerto Rico", "PR"], ["Qatar", "QA"], ["Reunion", "RE"], ["Romania", "RO"], ["Russian Federation", "RU"], ["Rwanda", "RW"], ["Saint Kitts & Nevis", "KN"], ["Saint LUCIA", "LC"], ["Saint Vincent", "VC"], ["Samoa", "WS"], ["San Marino", "SM"], ["Sao Tome & Principe", "ST"], ["Saudi Arabia", "SA"], ["Senegal", "SN"], ["Seychelles", "SC"], ["Sierra Leone", "SL"], ["Singapore", "SG"], ["Slovakia", "SK"], ["Slovenia", "SI"], ["Solomon Islands", "SB"], ["Somalia", "SO"], ["South Africa", "ZA"], ["South Georgia", "GS"], ["Spain", "ES"], ["Sri Lanka", "LK"], ["St. Helena", "SH"], ["St.Pierre & Miquelon", "PM"], ["Sudan", "SD"], ["Suriname", "SR"], ["Svalbard", "SJ"], ["Swaziland", "SZ"], ["Sweden", "SE"], ["Switzerland", "CH"], ["Syrian Arab Republic", "SY"], ["Taiwan", "TW"], ["Tajikistan", "TJ"], ["Tanzania", "TZ"], ["Thailand", "TH"], ["Togo", "TG"], ["Tokelau", "TK"], ["Tonga", "TO"], ["Trinidad & Tobago", "TT"], ["Tunisia", "TN"], ["Turkey", "TR"], ["Turkmenistan", "TM"], ["Turks & Caicos Isl.", "TC"], ["Tuvalu", "TV"], ["Uganda", "UG"], ["Ukraine", "UA"], ["United Arab Emir.", "AE"], ["United Kingdom", "GB"], ["United States", "US"], ["United States Minor", "UM"], ["Uruguay", "UY"], ["Uzbekistan", "UZ"], ["Vanuatu", "VU"], ["Venezuela", "VE"], ["Viet Nam", "VN"], ["Virgin Islands (Brit)", "VG"], ["Virgin Islands (U.S.)", "VI"], ["Wallis & Futuna Isl.", "WF"], ["Western Sahara", "EH"], ["Yemen", "YE"], ["Yugoslavia", "YU"], ["Zambia", "ZM"], ["Zimbabwe", "ZW"]], "0"), :class => "thin-control", :size => "20")
[Escaped Output] FormBuilder.new.label(d4x_sanitizer(t(:message)), :class => "show-item-label")
[Escaped Output] FormBuilder.new.text_area(:message, :size => "87x12")
[Escaped Output] FormBuilder.new.label(d4x_sanitizer(t(:rating)), :class => "show-item-label")
[Escaped Output] FormBuilder.new.select(:rating, options_for_select([["1", "1"], ["2", "2"], ["3", "3"], ["4", "4"], ["5", "5"], ["6", "6"], ["7", "7"], ["8", "8"], ["9", "9"], ["10", "10"]], "10"), :class => "thin-control", :size => "20")
[Escaped Output] FormBuilder.new.submit("send", :class => "button-d4x")
[Escaped Output] form_for(Feedback.find(params[:id])) do; if Feedback.find(params[:id]).errors.any? then; [Escaped Output] pluralize(Feedback.find(params[:id]).errors.count, t("error")); Feedback.find(params[:id]).errors.full_messages.each do; [Escaped Output] (Unresolved Model).new; end;end;[Escaped Output] FormBuilder.new.label(d4x_sanitizer(t(:from)), :class => "show-item-label");[Escaped Output] FormBuilder.new.text_field(:from, :size => 90, :class => "def-input");[Escaped Output] FormBuilder.new.label(d4x_sanitizer(t(:email)), :class => "show-item-label");[Escaped Output] FormBuilder.new.text_field(:email, :size => 90, :class => "def-input");[Escaped Output] FormBuilder.new.label(d4x_sanitizer(t(:country)), :class => "show-item-label");[Escaped Output] FormBuilder.new.select(:country, options_for_select([["seleziona", " "], ["Afghanistan", "AF"], ["Albania", "AL"], ["Algeria", "DZ"], ["American Samoa", "AS"], ["Andorra", "AD"], ["Angola", "AO"], ["Anguilla", "AI"], ["Antarctica", "AQ"], ["Antigua & Barbuda", "AG"], ["Argentina", "AR"], ["Armenia", "AM"], ["Aruba", "AW"], ["Australia", "AU"], ["Austria", "AT"], ["Azerbaijan", "AZ"], ["Bahamas", "BS"], ["Bahrain", "BH"], ["Bangladesh", "BD"], ["Barbados", "BB"], ["Belarus", "BY"], ["Belgium", "BE"], ["Belize", "BZ"], ["Benin", "BJ"], ["Bermuda", "BM"], ["Bhutan", "BT"], ["Bolivia", "BO"], ["Bosnia and Herzeg.", "BA"], ["Botswana", "BW"], ["Bouvet Island", "BV"], ["Brazil", "BR"], ["British Ind. Ocean", "IO"], ["Brunei Darussalam", "BN"], ["Bulgaria", "BG"], ["Burkina Faso", "BF"], ["Burundi", "BI"], ["Cambodia", "KH"], ["Cameroon", "CM"], ["Canada", "CA"], ["Cape Verde", "CV"], ["Cayman Islands", "KY"], ["Central Afr.Republic", "CF"], ["Chad", "TD"], ["Chile", "CL"], ["China", "CN"], ["Christmas Island", "CX"], ["Cocos Islands", "CC"], ["Colombia", "CO"], ["Comoros", "KM"], ["Congo", "CG"], ["Congo, Republic of", "CD"], ["Cook Islands", "CK"], ["Costa Rica", "CR"], ["Cote d`Ivoire", "CI"], ["Croatia (Hrvatska)", "HR"], ["Cuba", "CU"], ["Cyprus", "CY"], ["Czech Republic", "CZ"], ["Denmark", "DK"], ["Djibouti", "DJ"], ["Dominica", "DM"], ["Dominican Republic", "DO"], ["East Timor", "TP"], ["Ecuador", "EC"], ["Egypt", "EG"], ["El Salvador", "SV"], ["Equatorial Guinea", "GQ"], ["Eritrea", "ER"], ["Estonia", "EE"], ["Ethiopia", "ET"], ["Falkland Islands", "FK"], ["Faroe Islands", "FO"], ["Fiji", "FJ"], ["Finland", "FI"], ["France", "FR"], ["France, Metropol.", "FX"], ["French Guiana", "GF"], ["French Polynesia", "PF"], ["French Sout Terr.", "TF"], ["Gabon", "GA"], ["Gambia", "GM"], ["Georgia", "GE"], ["Germany", "DE"], ["Ghana", "GH"], ["Gibraltar", "GI"], ["Greece", "GR"], ["Greenland", "GL"], ["Grenada", "GD"], ["Guadeloupe", "GP"], ["Guam", "GU"], ["Guatemala", "GT"], ["Guinea", "GN"], ["Guinea-Bissau", "GW"], ["Guyana", "GY"], ["Haiti", "HT"], ["Heard Mc Donald", "HM"], ["Holy See (Vatican)", "VA"], ["Honduras", "HN"], ["Hong Kong", "HK"], ["Hungary", "HU"], ["Iceland", "IS"], ["India", "IN"], ["Indonesia", "ID"], ["Iran", "IR"], ["Iraq", "IQ"], ["Ireland", "IE"], ["Israel", "IL"], ["Italy", "IT"], ["Jamaica", "JM"], ["Japan", "JP"], ["Jordan", "JO"], ["Kazakhstan", "KZ"], ["Kenya", "KE"], ["Kiribati", "KI"], ["Korea, Democratic", "KP"], ["Korea, Republic of", "KR"], ["Kuwait", "KW"], ["Kyrgyzstan", "KG"], ["Lao Peoples", "LA"], ["Latvia", "LV"], ["Lebanon", "LB"], ["Lesotho", "LS"], ["Liberia", "LR"], ["Libyan", "LY"], ["Liechtenstein", "LI"], ["Lithuania", "LT"], ["Luxembourg", "LU"], ["Macau", "MO"], ["Macedonia", "MK"], ["Madagascar", "MG"], ["Malawi", "MW"], ["Malaysia", "MY"], ["Maldives", "MV"], ["Mali", "ML"], ["Malta", "MT"], ["Marshall Islands", "MH"], ["Martinique", "MQ"], ["Mauritania", "MR"], ["Mauritius", "MU"], ["Mayotte", "YT"], ["Mexico", "MX"], ["Micronesia", "FM"], ["Moldova", "MD"], ["Monaco", "MC"], ["Mongolia", "MN"], ["Montserrat", "MS"], ["Morocco", "MA"], ["Mozambique", "MZ"], ["Myanmar", "MM"], ["Namibia", "NA"], ["Nauru", "NR"], ["Nepal", "NP"], ["Netherlands", "NL"], ["Netherlands Antilles", "AN"], ["New Caledonia", "NC"], ["New Zealand", "NZ"], ["Nicaragua", "NI"], ["Niger", "NE"], ["Nigeria", "NG"], ["Niue", "NU"], ["Norfolk Island", "NF"], ["Northern Mariana Isl", "MP"], ["Norway", "NO"], ["Oman", "OM"], ["Pakistan", "PK"], ["Palau", "PW"], ["Panama", "PA"], ["Papua New Guinea", "PG"], ["Paraguay", "PY"], ["Peru", "PE"], ["Philippines", "PH"], ["Pitcairn", "PN"], ["Poland", "PL"], ["Portugal", "PT"], ["Puerto Rico", "PR"], ["Qatar", "QA"], ["Reunion", "RE"], ["Romania", "RO"], ["Russian Federation", "RU"], ["Rwanda", "RW"], ["Saint Kitts & Nevis", "KN"], ["Saint LUCIA", "LC"], ["Saint Vincent", "VC"], ["Samoa", "WS"], ["San Marino", "SM"], ["Sao Tome & Principe", "ST"], ["Saudi Arabia", "SA"], ["Senegal", "SN"], ["Seychelles", "SC"], ["Sierra Leone", "SL"], ["Singapore", "SG"], ["Slovakia", "SK"], ["Slovenia", "SI"], ["Solomon Islands", "SB"], ["Somalia", "SO"], ["South Africa", "ZA"], ["South Georgia", "GS"], ["Spain", "ES"], ["Sri Lanka", "LK"], ["St. Helena", "SH"], ["St.Pierre & Miquelon", "PM"], ["Sudan", "SD"], ["Suriname", "SR"], ["Svalbard", "SJ"], ["Swaziland", "SZ"], ["Sweden", "SE"], ["Switzerland", "CH"], ["Syrian Arab Republic", "SY"], ["Taiwan", "TW"], ["Tajikistan", "TJ"], ["Tanzania", "TZ"], ["Thailand", "TH"], ["Togo", "TG"], ["Tokelau", "TK"], ["Tonga", "TO"], ["Trinidad & Tobago", "TT"], ["Tunisia", "TN"], ["Turkey", "TR"], ["Turkmenistan", "TM"], ["Turks & Caicos Isl.", "TC"], ["Tuvalu", "TV"], ["Uganda", "UG"], ["Ukraine", "UA"], ["United Arab Emir.", "AE"], ["United Kingdom", "GB"], ["United States", "US"], ["United States Minor", "UM"], ["Uruguay", "UY"], ["Uzbekistan", "UZ"], ["Vanuatu", "VU"], ["Venezuela", "VE"], ["Viet Nam", "VN"], ["Virgin Islands (Brit)", "VG"], ["Virgin Islands (U.S.)", "VI"], ["Wallis & Futuna Isl.", "WF"], ["Western Sahara", "EH"], ["Yemen", "YE"], ["Yugoslavia", "YU"], ["Zambia", "ZM"], ["Zimbabwe", "ZW"]], "0"), :class => "thin-control", :size => "20");[Escaped Output] FormBuilder.new.label(d4x_sanitizer(t(:message)), :class => "show-item-label");[Escaped Output] FormBuilder.new.text_area(:message, :size => "87x12");[Escaped Output] FormBuilder.new.label(d4x_sanitizer(t(:rating)), :class => "show-item-label");[Escaped Output] FormBuilder.new.select(:rating, options_for_select([["1", "1"], ["2", "2"], ["3", "3"], ["4", "4"], ["5", "5"], ["6", "6"], ["7", "7"], ["8", "8"], ["9", "9"], ["10", "10"]], "10"), :class => "thin-control", :size => "20");[Escaped Output] FormBuilder.new.submit("send", :class => "button-d4x"); end

feedbacks/_form.["FeedbacksController#new", "Template:feedbacks/new"]

[Escaped Output] pluralize(Feedback.new.errors.count, t("error"))
[Escaped Output] msg
[Escaped Output] FormBuilder.new.label(d4x_sanitizer(t(:from)), :class => "show-item-label")
[Escaped Output] FormBuilder.new.text_field(:from, :size => 90, :class => "def-input")
[Escaped Output] FormBuilder.new.label(d4x_sanitizer(t(:email)), :class => "show-item-label")
[Escaped Output] FormBuilder.new.text_field(:email, :size => 90, :class => "def-input")
[Escaped Output] FormBuilder.new.label(d4x_sanitizer(t(:country)), :class => "show-item-label")
[Escaped Output] FormBuilder.new.select(:country, options_for_select([["seleziona", " "], ["Afghanistan", "AF"], ["Albania", "AL"], ["Algeria", "DZ"], ["American Samoa", "AS"], ["Andorra", "AD"], ["Angola", "AO"], ["Anguilla", "AI"], ["Antarctica", "AQ"], ["Antigua & Barbuda", "AG"], ["Argentina", "AR"], ["Armenia", "AM"], ["Aruba", "AW"], ["Australia", "AU"], ["Austria", "AT"], ["Azerbaijan", "AZ"], ["Bahamas", "BS"], ["Bahrain", "BH"], ["Bangladesh", "BD"], ["Barbados", "BB"], ["Belarus", "BY"], ["Belgium", "BE"], ["Belize", "BZ"], ["Benin", "BJ"], ["Bermuda", "BM"], ["Bhutan", "BT"], ["Bolivia", "BO"], ["Bosnia and Herzeg.", "BA"], ["Botswana", "BW"], ["Bouvet Island", "BV"], ["Brazil", "BR"], ["British Ind. Ocean", "IO"], ["Brunei Darussalam", "BN"], ["Bulgaria", "BG"], ["Burkina Faso", "BF"], ["Burundi", "BI"], ["Cambodia", "KH"], ["Cameroon", "CM"], ["Canada", "CA"], ["Cape Verde", "CV"], ["Cayman Islands", "KY"], ["Central Afr.Republic", "CF"], ["Chad", "TD"], ["Chile", "CL"], ["China", "CN"], ["Christmas Island", "CX"], ["Cocos Islands", "CC"], ["Colombia", "CO"], ["Comoros", "KM"], ["Congo", "CG"], ["Congo, Republic of", "CD"], ["Cook Islands", "CK"], ["Costa Rica", "CR"], ["Cote d`Ivoire", "CI"], ["Croatia (Hrvatska)", "HR"], ["Cuba", "CU"], ["Cyprus", "CY"], ["Czech Republic", "CZ"], ["Denmark", "DK"], ["Djibouti", "DJ"], ["Dominica", "DM"], ["Dominican Republic", "DO"], ["East Timor", "TP"], ["Ecuador", "EC"], ["Egypt", "EG"], ["El Salvador", "SV"], ["Equatorial Guinea", "GQ"], ["Eritrea", "ER"], ["Estonia", "EE"], ["Ethiopia", "ET"], ["Falkland Islands", "FK"], ["Faroe Islands", "FO"], ["Fiji", "FJ"], ["Finland", "FI"], ["France", "FR"], ["France, Metropol.", "FX"], ["French Guiana", "GF"], ["French Polynesia", "PF"], ["French Sout Terr.", "TF"], ["Gabon", "GA"], ["Gambia", "GM"], ["Georgia", "GE"], ["Germany", "DE"], ["Ghana", "GH"], ["Gibraltar", "GI"], ["Greece", "GR"], ["Greenland", "GL"], ["Grenada", "GD"], ["Guadeloupe", "GP"], ["Guam", "GU"], ["Guatemala", "GT"], ["Guinea", "GN"], ["Guinea-Bissau", "GW"], ["Guyana", "GY"], ["Haiti", "HT"], ["Heard Mc Donald", "HM"], ["Holy See (Vatican)", "VA"], ["Honduras", "HN"], ["Hong Kong", "HK"], ["Hungary", "HU"], ["Iceland", "IS"], ["India", "IN"], ["Indonesia", "ID"], ["Iran", "IR"], ["Iraq", "IQ"], ["Ireland", "IE"], ["Israel", "IL"], ["Italy", "IT"], ["Jamaica", "JM"], ["Japan", "JP"], ["Jordan", "JO"], ["Kazakhstan", "KZ"], ["Kenya", "KE"], ["Kiribati", "KI"], ["Korea, Democratic", "KP"], ["Korea, Republic of", "KR"], ["Kuwait", "KW"], ["Kyrgyzstan", "KG"], ["Lao Peoples", "LA"], ["Latvia", "LV"], ["Lebanon", "LB"], ["Lesotho", "LS"], ["Liberia", "LR"], ["Libyan", "LY"], ["Liechtenstein", "LI"], ["Lithuania", "LT"], ["Luxembourg", "LU"], ["Macau", "MO"], ["Macedonia", "MK"], ["Madagascar", "MG"], ["Malawi", "MW"], ["Malaysia", "MY"], ["Maldives", "MV"], ["Mali", "ML"], ["Malta", "MT"], ["Marshall Islands", "MH"], ["Martinique", "MQ"], ["Mauritania", "MR"], ["Mauritius", "MU"], ["Mayotte", "YT"], ["Mexico", "MX"], ["Micronesia", "FM"], ["Moldova", "MD"], ["Monaco", "MC"], ["Mongolia", "MN"], ["Montserrat", "MS"], ["Morocco", "MA"], ["Mozambique", "MZ"], ["Myanmar", "MM"], ["Namibia", "NA"], ["Nauru", "NR"], ["Nepal", "NP"], ["Netherlands", "NL"], ["Netherlands Antilles", "AN"], ["New Caledonia", "NC"], ["New Zealand", "NZ"], ["Nicaragua", "NI"], ["Niger", "NE"], ["Nigeria", "NG"], ["Niue", "NU"], ["Norfolk Island", "NF"], ["Northern Mariana Isl", "MP"], ["Norway", "NO"], ["Oman", "OM"], ["Pakistan", "PK"], ["Palau", "PW"], ["Panama", "PA"], ["Papua New Guinea", "PG"], ["Paraguay", "PY"], ["Peru", "PE"], ["Philippines", "PH"], ["Pitcairn", "PN"], ["Poland", "PL"], ["Portugal", "PT"], ["Puerto Rico", "PR"], ["Qatar", "QA"], ["Reunion", "RE"], ["Romania", "RO"], ["Russian Federation", "RU"], ["Rwanda", "RW"], ["Saint Kitts & Nevis", "KN"], ["Saint LUCIA", "LC"], ["Saint Vincent", "VC"], ["Samoa", "WS"], ["San Marino", "SM"], ["Sao Tome & Principe", "ST"], ["Saudi Arabia", "SA"], ["Senegal", "SN"], ["Seychelles", "SC"], ["Sierra Leone", "SL"], ["Singapore", "SG"], ["Slovakia", "SK"], ["Slovenia", "SI"], ["Solomon Islands", "SB"], ["Somalia", "SO"], ["South Africa", "ZA"], ["South Georgia", "GS"], ["Spain", "ES"], ["Sri Lanka", "LK"], ["St. Helena", "SH"], ["St.Pierre & Miquelon", "PM"], ["Sudan", "SD"], ["Suriname", "SR"], ["Svalbard", "SJ"], ["Swaziland", "SZ"], ["Sweden", "SE"], ["Switzerland", "CH"], ["Syrian Arab Republic", "SY"], ["Taiwan", "TW"], ["Tajikistan", "TJ"], ["Tanzania", "TZ"], ["Thailand", "TH"], ["Togo", "TG"], ["Tokelau", "TK"], ["Tonga", "TO"], ["Trinidad & Tobago", "TT"], ["Tunisia", "TN"], ["Turkey", "TR"], ["Turkmenistan", "TM"], ["Turks & Caicos Isl.", "TC"], ["Tuvalu", "TV"], ["Uganda", "UG"], ["Ukraine", "UA"], ["United Arab Emir.", "AE"], ["United Kingdom", "GB"], ["United States", "US"], ["United States Minor", "UM"], ["Uruguay", "UY"], ["Uzbekistan", "UZ"], ["Vanuatu", "VU"], ["Venezuela", "VE"], ["Viet Nam", "VN"], ["Virgin Islands (Brit)", "VG"], ["Virgin Islands (U.S.)", "VI"], ["Wallis & Futuna Isl.", "WF"], ["Western Sahara", "EH"], ["Yemen", "YE"], ["Yugoslavia", "YU"], ["Zambia", "ZM"], ["Zimbabwe", "ZW"]], "0"), :class => "thin-control", :size => "20")
[Escaped Output] FormBuilder.new.label(d4x_sanitizer(t(:message)), :class => "show-item-label")
[Escaped Output] FormBuilder.new.text_area(:message, :size => "87x12")
[Escaped Output] FormBuilder.new.label(d4x_sanitizer(t(:rating)), :class => "show-item-label")
[Escaped Output] FormBuilder.new.select(:rating, options_for_select([["1", "1"], ["2", "2"], ["3", "3"], ["4", "4"], ["5", "5"], ["6", "6"], ["7", "7"], ["8", "8"], ["9", "9"], ["10", "10"]], "10"), :class => "thin-control", :size => "20")
[Escaped Output] FormBuilder.new.submit("send", :class => "button-d4x")
[Escaped Output] form_for(Feedback.new) do; if Feedback.new.errors.any? then; [Escaped Output] pluralize(Feedback.new.errors.count, t("error")); Feedback.new.errors.full_messages.each do; [Escaped Output] msg; end;end;[Escaped Output] FormBuilder.new.label(d4x_sanitizer(t(:from)), :class => "show-item-label");[Escaped Output] FormBuilder.new.text_field(:from, :size => 90, :class => "def-input");[Escaped Output] FormBuilder.new.label(d4x_sanitizer(t(:email)), :class => "show-item-label");[Escaped Output] FormBuilder.new.text_field(:email, :size => 90, :class => "def-input");[Escaped Output] FormBuilder.new.label(d4x_sanitizer(t(:country)), :class => "show-item-label");[Escaped Output] FormBuilder.new.select(:country, options_for_select([["seleziona", " "], ["Afghanistan", "AF"], ["Albania", "AL"], ["Algeria", "DZ"], ["American Samoa", "AS"], ["Andorra", "AD"], ["Angola", "AO"], ["Anguilla", "AI"], ["Antarctica", "AQ"], ["Antigua & Barbuda", "AG"], ["Argentina", "AR"], ["Armenia", "AM"], ["Aruba", "AW"], ["Australia", "AU"], ["Austria", "AT"], ["Azerbaijan", "AZ"], ["Bahamas", "BS"], ["Bahrain", "BH"], ["Bangladesh", "BD"], ["Barbados", "BB"], ["Belarus", "BY"], ["Belgium", "BE"], ["Belize", "BZ"], ["Benin", "BJ"], ["Bermuda", "BM"], ["Bhutan", "BT"], ["Bolivia", "BO"], ["Bosnia and Herzeg.", "BA"], ["Botswana", "BW"], ["Bouvet Island", "BV"], ["Brazil", "BR"], ["British Ind. Ocean", "IO"], ["Brunei Darussalam", "BN"], ["Bulgaria", "BG"], ["Burkina Faso", "BF"], ["Burundi", "BI"], ["Cambodia", "KH"], ["Cameroon", "CM"], ["Canada", "CA"], ["Cape Verde", "CV"], ["Cayman Islands", "KY"], ["Central Afr.Republic", "CF"], ["Chad", "TD"], ["Chile", "CL"], ["China", "CN"], ["Christmas Island", "CX"], ["Cocos Islands", "CC"], ["Colombia", "CO"], ["Comoros", "KM"], ["Congo", "CG"], ["Congo, Republic of", "CD"], ["Cook Islands", "CK"], ["Costa Rica", "CR"], ["Cote d`Ivoire", "CI"], ["Croatia (Hrvatska)", "HR"], ["Cuba", "CU"], ["Cyprus", "CY"], ["Czech Republic", "CZ"], ["Denmark", "DK"], ["Djibouti", "DJ"], ["Dominica", "DM"], ["Dominican Republic", "DO"], ["East Timor", "TP"], ["Ecuador", "EC"], ["Egypt", "EG"], ["El Salvador", "SV"], ["Equatorial Guinea", "GQ"], ["Eritrea", "ER"], ["Estonia", "EE"], ["Ethiopia", "ET"], ["Falkland Islands", "FK"], ["Faroe Islands", "FO"], ["Fiji", "FJ"], ["Finland", "FI"], ["France", "FR"], ["France, Metropol.", "FX"], ["French Guiana", "GF"], ["French Polynesia", "PF"], ["French Sout Terr.", "TF"], ["Gabon", "GA"], ["Gambia", "GM"], ["Georgia", "GE"], ["Germany", "DE"], ["Ghana", "GH"], ["Gibraltar", "GI"], ["Greece", "GR"], ["Greenland", "GL"], ["Grenada", "GD"], ["Guadeloupe", "GP"], ["Guam", "GU"], ["Guatemala", "GT"], ["Guinea", "GN"], ["Guinea-Bissau", "GW"], ["Guyana", "GY"], ["Haiti", "HT"], ["Heard Mc Donald", "HM"], ["Holy See (Vatican)", "VA"], ["Honduras", "HN"], ["Hong Kong", "HK"], ["Hungary", "HU"], ["Iceland", "IS"], ["India", "IN"], ["Indonesia", "ID"], ["Iran", "IR"], ["Iraq", "IQ"], ["Ireland", "IE"], ["Israel", "IL"], ["Italy", "IT"], ["Jamaica", "JM"], ["Japan", "JP"], ["Jordan", "JO"], ["Kazakhstan", "KZ"], ["Kenya", "KE"], ["Kiribati", "KI"], ["Korea, Democratic", "KP"], ["Korea, Republic of", "KR"], ["Kuwait", "KW"], ["Kyrgyzstan", "KG"], ["Lao Peoples", "LA"], ["Latvia", "LV"], ["Lebanon", "LB"], ["Lesotho", "LS"], ["Liberia", "LR"], ["Libyan", "LY"], ["Liechtenstein", "LI"], ["Lithuania", "LT"], ["Luxembourg", "LU"], ["Macau", "MO"], ["Macedonia", "MK"], ["Madagascar", "MG"], ["Malawi", "MW"], ["Malaysia", "MY"], ["Maldives", "MV"], ["Mali", "ML"], ["Malta", "MT"], ["Marshall Islands", "MH"], ["Martinique", "MQ"], ["Mauritania", "MR"], ["Mauritius", "MU"], ["Mayotte", "YT"], ["Mexico", "MX"], ["Micronesia", "FM"], ["Moldova", "MD"], ["Monaco", "MC"], ["Mongolia", "MN"], ["Montserrat", "MS"], ["Morocco", "MA"], ["Mozambique", "MZ"], ["Myanmar", "MM"], ["Namibia", "NA"], ["Nauru", "NR"], ["Nepal", "NP"], ["Netherlands", "NL"], ["Netherlands Antilles", "AN"], ["New Caledonia", "NC"], ["New Zealand", "NZ"], ["Nicaragua", "NI"], ["Niger", "NE"], ["Nigeria", "NG"], ["Niue", "NU"], ["Norfolk Island", "NF"], ["Northern Mariana Isl", "MP"], ["Norway", "NO"], ["Oman", "OM"], ["Pakistan", "PK"], ["Palau", "PW"], ["Panama", "PA"], ["Papua New Guinea", "PG"], ["Paraguay", "PY"], ["Peru", "PE"], ["Philippines", "PH"], ["Pitcairn", "PN"], ["Poland", "PL"], ["Portugal", "PT"], ["Puerto Rico", "PR"], ["Qatar", "QA"], ["Reunion", "RE"], ["Romania", "RO"], ["Russian Federation", "RU"], ["Rwanda", "RW"], ["Saint Kitts & Nevis", "KN"], ["Saint LUCIA", "LC"], ["Saint Vincent", "VC"], ["Samoa", "WS"], ["San Marino", "SM"], ["Sao Tome & Principe", "ST"], ["Saudi Arabia", "SA"], ["Senegal", "SN"], ["Seychelles", "SC"], ["Sierra Leone", "SL"], ["Singapore", "SG"], ["Slovakia", "SK"], ["Slovenia", "SI"], ["Solomon Islands", "SB"], ["Somalia", "SO"], ["South Africa", "ZA"], ["South Georgia", "GS"], ["Spain", "ES"], ["Sri Lanka", "LK"], ["St. Helena", "SH"], ["St.Pierre & Miquelon", "PM"], ["Sudan", "SD"], ["Suriname", "SR"], ["Svalbard", "SJ"], ["Swaziland", "SZ"], ["Sweden", "SE"], ["Switzerland", "CH"], ["Syrian Arab Republic", "SY"], ["Taiwan", "TW"], ["Tajikistan", "TJ"], ["Tanzania", "TZ"], ["Thailand", "TH"], ["Togo", "TG"], ["Tokelau", "TK"], ["Tonga", "TO"], ["Trinidad & Tobago", "TT"], ["Tunisia", "TN"], ["Turkey", "TR"], ["Turkmenistan", "TM"], ["Turks & Caicos Isl.", "TC"], ["Tuvalu", "TV"], ["Uganda", "UG"], ["Ukraine", "UA"], ["United Arab Emir.", "AE"], ["United Kingdom", "GB"], ["United States", "US"], ["United States Minor", "UM"], ["Uruguay", "UY"], ["Uzbekistan", "UZ"], ["Vanuatu", "VU"], ["Venezuela", "VE"], ["Viet Nam", "VN"], ["Virgin Islands (Brit)", "VG"], ["Virgin Islands (U.S.)", "VI"], ["Wallis & Futuna Isl.", "WF"], ["Western Sahara", "EH"], ["Yemen", "YE"], ["Yugoslavia", "YU"], ["Zambia", "ZM"], ["Zimbabwe", "ZW"]], "0"), :class => "thin-control", :size => "20");[Escaped Output] FormBuilder.new.label(d4x_sanitizer(t(:message)), :class => "show-item-label");[Escaped Output] FormBuilder.new.text_area(:message, :size => "87x12");[Escaped Output] FormBuilder.new.label(d4x_sanitizer(t(:rating)), :class => "show-item-label");[Escaped Output] FormBuilder.new.select(:rating, options_for_select([["1", "1"], ["2", "2"], ["3", "3"], ["4", "4"], ["5", "5"], ["6", "6"], ["7", "7"], ["8", "8"], ["9", "9"], ["10", "10"]], "10"), :class => "thin-control", :size => "20");[Escaped Output] FormBuilder.new.submit("send", :class => "button-d4x"); end

feedbacks/_form.["Template:feedbacks/edit"]

[Escaped Output] pluralize(@feedback.errors.count, t("error"))
[Escaped Output] msg
[Escaped Output] FormBuilder.new.label(d4x_sanitizer(t(:from)), :class => "show-item-label")
[Escaped Output] FormBuilder.new.text_field(:from, :size => 90, :class => "def-input")
[Escaped Output] FormBuilder.new.label(d4x_sanitizer(t(:email)), :class => "show-item-label")
[Escaped Output] FormBuilder.new.text_field(:email, :size => 90, :class => "def-input")
[Escaped Output] FormBuilder.new.label(d4x_sanitizer(t(:country)), :class => "show-item-label")
[Escaped Output] FormBuilder.new.select(:country, options_for_select([["seleziona", " "], ["Afghanistan", "AF"], ["Albania", "AL"], ["Algeria", "DZ"], ["American Samoa", "AS"], ["Andorra", "AD"], ["Angola", "AO"], ["Anguilla", "AI"], ["Antarctica", "AQ"], ["Antigua & Barbuda", "AG"], ["Argentina", "AR"], ["Armenia", "AM"], ["Aruba", "AW"], ["Australia", "AU"], ["Austria", "AT"], ["Azerbaijan", "AZ"], ["Bahamas", "BS"], ["Bahrain", "BH"], ["Bangladesh", "BD"], ["Barbados", "BB"], ["Belarus", "BY"], ["Belgium", "BE"], ["Belize", "BZ"], ["Benin", "BJ"], ["Bermuda", "BM"], ["Bhutan", "BT"], ["Bolivia", "BO"], ["Bosnia and Herzeg.", "BA"], ["Botswana", "BW"], ["Bouvet Island", "BV"], ["Brazil", "BR"], ["British Ind. Ocean", "IO"], ["Brunei Darussalam", "BN"], ["Bulgaria", "BG"], ["Burkina Faso", "BF"], ["Burundi", "BI"], ["Cambodia", "KH"], ["Cameroon", "CM"], ["Canada", "CA"], ["Cape Verde", "CV"], ["Cayman Islands", "KY"], ["Central Afr.Republic", "CF"], ["Chad", "TD"], ["Chile", "CL"], ["China", "CN"], ["Christmas Island", "CX"], ["Cocos Islands", "CC"], ["Colombia", "CO"], ["Comoros", "KM"], ["Congo", "CG"], ["Congo, Republic of", "CD"], ["Cook Islands", "CK"], ["Costa Rica", "CR"], ["Cote d`Ivoire", "CI"], ["Croatia (Hrvatska)", "HR"], ["Cuba", "CU"], ["Cyprus", "CY"], ["Czech Republic", "CZ"], ["Denmark", "DK"], ["Djibouti", "DJ"], ["Dominica", "DM"], ["Dominican Republic", "DO"], ["East Timor", "TP"], ["Ecuador", "EC"], ["Egypt", "EG"], ["El Salvador", "SV"], ["Equatorial Guinea", "GQ"], ["Eritrea", "ER"], ["Estonia", "EE"], ["Ethiopia", "ET"], ["Falkland Islands", "FK"], ["Faroe Islands", "FO"], ["Fiji", "FJ"], ["Finland", "FI"], ["France", "FR"], ["France, Metropol.", "FX"], ["French Guiana", "GF"], ["French Polynesia", "PF"], ["French Sout Terr.", "TF"], ["Gabon", "GA"], ["Gambia", "GM"], ["Georgia", "GE"], ["Germany", "DE"], ["Ghana", "GH"], ["Gibraltar", "GI"], ["Greece", "GR"], ["Greenland", "GL"], ["Grenada", "GD"], ["Guadeloupe", "GP"], ["Guam", "GU"], ["Guatemala", "GT"], ["Guinea", "GN"], ["Guinea-Bissau", "GW"], ["Guyana", "GY"], ["Haiti", "HT"], ["Heard Mc Donald", "HM"], ["Holy See (Vatican)", "VA"], ["Honduras", "HN"], ["Hong Kong", "HK"], ["Hungary", "HU"], ["Iceland", "IS"], ["India", "IN"], ["Indonesia", "ID"], ["Iran", "IR"], ["Iraq", "IQ"], ["Ireland", "IE"], ["Israel", "IL"], ["Italy", "IT"], ["Jamaica", "JM"], ["Japan", "JP"], ["Jordan", "JO"], ["Kazakhstan", "KZ"], ["Kenya", "KE"], ["Kiribati", "KI"], ["Korea, Democratic", "KP"], ["Korea, Republic of", "KR"], ["Kuwait", "KW"], ["Kyrgyzstan", "KG"], ["Lao Peoples", "LA"], ["Latvia", "LV"], ["Lebanon", "LB"], ["Lesotho", "LS"], ["Liberia", "LR"], ["Libyan", "LY"], ["Liechtenstein", "LI"], ["Lithuania", "LT"], ["Luxembourg", "LU"], ["Macau", "MO"], ["Macedonia", "MK"], ["Madagascar", "MG"], ["Malawi", "MW"], ["Malaysia", "MY"], ["Maldives", "MV"], ["Mali", "ML"], ["Malta", "MT"], ["Marshall Islands", "MH"], ["Martinique", "MQ"], ["Mauritania", "MR"], ["Mauritius", "MU"], ["Mayotte", "YT"], ["Mexico", "MX"], ["Micronesia", "FM"], ["Moldova", "MD"], ["Monaco", "MC"], ["Mongolia", "MN"], ["Montserrat", "MS"], ["Morocco", "MA"], ["Mozambique", "MZ"], ["Myanmar", "MM"], ["Namibia", "NA"], ["Nauru", "NR"], ["Nepal", "NP"], ["Netherlands", "NL"], ["Netherlands Antilles", "AN"], ["New Caledonia", "NC"], ["New Zealand", "NZ"], ["Nicaragua", "NI"], ["Niger", "NE"], ["Nigeria", "NG"], ["Niue", "NU"], ["Norfolk Island", "NF"], ["Northern Mariana Isl", "MP"], ["Norway", "NO"], ["Oman", "OM"], ["Pakistan", "PK"], ["Palau", "PW"], ["Panama", "PA"], ["Papua New Guinea", "PG"], ["Paraguay", "PY"], ["Peru", "PE"], ["Philippines", "PH"], ["Pitcairn", "PN"], ["Poland", "PL"], ["Portugal", "PT"], ["Puerto Rico", "PR"], ["Qatar", "QA"], ["Reunion", "RE"], ["Romania", "RO"], ["Russian Federation", "RU"], ["Rwanda", "RW"], ["Saint Kitts & Nevis", "KN"], ["Saint LUCIA", "LC"], ["Saint Vincent", "VC"], ["Samoa", "WS"], ["San Marino", "SM"], ["Sao Tome & Principe", "ST"], ["Saudi Arabia", "SA"], ["Senegal", "SN"], ["Seychelles", "SC"], ["Sierra Leone", "SL"], ["Singapore", "SG"], ["Slovakia", "SK"], ["Slovenia", "SI"], ["Solomon Islands", "SB"], ["Somalia", "SO"], ["South Africa", "ZA"], ["South Georgia", "GS"], ["Spain", "ES"], ["Sri Lanka", "LK"], ["St. Helena", "SH"], ["St.Pierre & Miquelon", "PM"], ["Sudan", "SD"], ["Suriname", "SR"], ["Svalbard", "SJ"], ["Swaziland", "SZ"], ["Sweden", "SE"], ["Switzerland", "CH"], ["Syrian Arab Republic", "SY"], ["Taiwan", "TW"], ["Tajikistan", "TJ"], ["Tanzania", "TZ"], ["Thailand", "TH"], ["Togo", "TG"], ["Tokelau", "TK"], ["Tonga", "TO"], ["Trinidad & Tobago", "TT"], ["Tunisia", "TN"], ["Turkey", "TR"], ["Turkmenistan", "TM"], ["Turks & Caicos Isl.", "TC"], ["Tuvalu", "TV"], ["Uganda", "UG"], ["Ukraine", "UA"], ["United Arab Emir.", "AE"], ["United Kingdom", "GB"], ["United States", "US"], ["United States Minor", "UM"], ["Uruguay", "UY"], ["Uzbekistan", "UZ"], ["Vanuatu", "VU"], ["Venezuela", "VE"], ["Viet Nam", "VN"], ["Virgin Islands (Brit)", "VG"], ["Virgin Islands (U.S.)", "VI"], ["Wallis & Futuna Isl.", "WF"], ["Western Sahara", "EH"], ["Yemen", "YE"], ["Yugoslavia", "YU"], ["Zambia", "ZM"], ["Zimbabwe", "ZW"]], "0"), :class => "thin-control", :size => "20")
[Escaped Output] FormBuilder.new.label(d4x_sanitizer(t(:message)), :class => "show-item-label")
[Escaped Output] FormBuilder.new.text_area(:message, :size => "87x12")
[Escaped Output] FormBuilder.new.label(d4x_sanitizer(t(:rating)), :class => "show-item-label")
[Escaped Output] FormBuilder.new.select(:rating, options_for_select([["1", "1"], ["2", "2"], ["3", "3"], ["4", "4"], ["5", "5"], ["6", "6"], ["7", "7"], ["8", "8"], ["9", "9"], ["10", "10"]], "10"), :class => "thin-control", :size => "20")
[Escaped Output] FormBuilder.new.submit("send", :class => "button-d4x")
[Escaped Output] form_for(@feedback) do; if @feedback.errors.any? then; [Escaped Output] pluralize(@feedback.errors.count, t("error")); @feedback.errors.full_messages.each do; [Escaped Output] msg; end;end;[Escaped Output] FormBuilder.new.label(d4x_sanitizer(t(:from)), :class => "show-item-label");[Escaped Output] FormBuilder.new.text_field(:from, :size => 90, :class => "def-input");[Escaped Output] FormBuilder.new.label(d4x_sanitizer(t(:email)), :class => "show-item-label");[Escaped Output] FormBuilder.new.text_field(:email, :size => 90, :class => "def-input");[Escaped Output] FormBuilder.new.label(d4x_sanitizer(t(:country)), :class => "show-item-label");[Escaped Output] FormBuilder.new.select(:country, options_for_select([["seleziona", " "], ["Afghanistan", "AF"], ["Albania", "AL"], ["Algeria", "DZ"], ["American Samoa", "AS"], ["Andorra", "AD"], ["Angola", "AO"], ["Anguilla", "AI"], ["Antarctica", "AQ"], ["Antigua & Barbuda", "AG"], ["Argentina", "AR"], ["Armenia", "AM"], ["Aruba", "AW"], ["Australia", "AU"], ["Austria", "AT"], ["Azerbaijan", "AZ"], ["Bahamas", "BS"], ["Bahrain", "BH"], ["Bangladesh", "BD"], ["Barbados", "BB"], ["Belarus", "BY"], ["Belgium", "BE"], ["Belize", "BZ"], ["Benin", "BJ"], ["Bermuda", "BM"], ["Bhutan", "BT"], ["Bolivia", "BO"], ["Bosnia and Herzeg.", "BA"], ["Botswana", "BW"], ["Bouvet Island", "BV"], ["Brazil", "BR"], ["British Ind. Ocean", "IO"], ["Brunei Darussalam", "BN"], ["Bulgaria", "BG"], ["Burkina Faso", "BF"], ["Burundi", "BI"], ["Cambodia", "KH"], ["Cameroon", "CM"], ["Canada", "CA"], ["Cape Verde", "CV"], ["Cayman Islands", "KY"], ["Central Afr.Republic", "CF"], ["Chad", "TD"], ["Chile", "CL"], ["China", "CN"], ["Christmas Island", "CX"], ["Cocos Islands", "CC"], ["Colombia", "CO"], ["Comoros", "KM"], ["Congo", "CG"], ["Congo, Republic of", "CD"], ["Cook Islands", "CK"], ["Costa Rica", "CR"], ["Cote d`Ivoire", "CI"], ["Croatia (Hrvatska)", "HR"], ["Cuba", "CU"], ["Cyprus", "CY"], ["Czech Republic", "CZ"], ["Denmark", "DK"], ["Djibouti", "DJ"], ["Dominica", "DM"], ["Dominican Republic", "DO"], ["East Timor", "TP"], ["Ecuador", "EC"], ["Egypt", "EG"], ["El Salvador", "SV"], ["Equatorial Guinea", "GQ"], ["Eritrea", "ER"], ["Estonia", "EE"], ["Ethiopia", "ET"], ["Falkland Islands", "FK"], ["Faroe Islands", "FO"], ["Fiji", "FJ"], ["Finland", "FI"], ["France", "FR"], ["France, Metropol.", "FX"], ["French Guiana", "GF"], ["French Polynesia", "PF"], ["French Sout Terr.", "TF"], ["Gabon", "GA"], ["Gambia", "GM"], ["Georgia", "GE"], ["Germany", "DE"], ["Ghana", "GH"], ["Gibraltar", "GI"], ["Greece", "GR"], ["Greenland", "GL"], ["Grenada", "GD"], ["Guadeloupe", "GP"], ["Guam", "GU"], ["Guatemala", "GT"], ["Guinea", "GN"], ["Guinea-Bissau", "GW"], ["Guyana", "GY"], ["Haiti", "HT"], ["Heard Mc Donald", "HM"], ["Holy See (Vatican)", "VA"], ["Honduras", "HN"], ["Hong Kong", "HK"], ["Hungary", "HU"], ["Iceland", "IS"], ["India", "IN"], ["Indonesia", "ID"], ["Iran", "IR"], ["Iraq", "IQ"], ["Ireland", "IE"], ["Israel", "IL"], ["Italy", "IT"], ["Jamaica", "JM"], ["Japan", "JP"], ["Jordan", "JO"], ["Kazakhstan", "KZ"], ["Kenya", "KE"], ["Kiribati", "KI"], ["Korea, Democratic", "KP"], ["Korea, Republic of", "KR"], ["Kuwait", "KW"], ["Kyrgyzstan", "KG"], ["Lao Peoples", "LA"], ["Latvia", "LV"], ["Lebanon", "LB"], ["Lesotho", "LS"], ["Liberia", "LR"], ["Libyan", "LY"], ["Liechtenstein", "LI"], ["Lithuania", "LT"], ["Luxembourg", "LU"], ["Macau", "MO"], ["Macedonia", "MK"], ["Madagascar", "MG"], ["Malawi", "MW"], ["Malaysia", "MY"], ["Maldives", "MV"], ["Mali", "ML"], ["Malta", "MT"], ["Marshall Islands", "MH"], ["Martinique", "MQ"], ["Mauritania", "MR"], ["Mauritius", "MU"], ["Mayotte", "YT"], ["Mexico", "MX"], ["Micronesia", "FM"], ["Moldova", "MD"], ["Monaco", "MC"], ["Mongolia", "MN"], ["Montserrat", "MS"], ["Morocco", "MA"], ["Mozambique", "MZ"], ["Myanmar", "MM"], ["Namibia", "NA"], ["Nauru", "NR"], ["Nepal", "NP"], ["Netherlands", "NL"], ["Netherlands Antilles", "AN"], ["New Caledonia", "NC"], ["New Zealand", "NZ"], ["Nicaragua", "NI"], ["Niger", "NE"], ["Nigeria", "NG"], ["Niue", "NU"], ["Norfolk Island", "NF"], ["Northern Mariana Isl", "MP"], ["Norway", "NO"], ["Oman", "OM"], ["Pakistan", "PK"], ["Palau", "PW"], ["Panama", "PA"], ["Papua New Guinea", "PG"], ["Paraguay", "PY"], ["Peru", "PE"], ["Philippines", "PH"], ["Pitcairn", "PN"], ["Poland", "PL"], ["Portugal", "PT"], ["Puerto Rico", "PR"], ["Qatar", "QA"], ["Reunion", "RE"], ["Romania", "RO"], ["Russian Federation", "RU"], ["Rwanda", "RW"], ["Saint Kitts & Nevis", "KN"], ["Saint LUCIA", "LC"], ["Saint Vincent", "VC"], ["Samoa", "WS"], ["San Marino", "SM"], ["Sao Tome & Principe", "ST"], ["Saudi Arabia", "SA"], ["Senegal", "SN"], ["Seychelles", "SC"], ["Sierra Leone", "SL"], ["Singapore", "SG"], ["Slovakia", "SK"], ["Slovenia", "SI"], ["Solomon Islands", "SB"], ["Somalia", "SO"], ["South Africa", "ZA"], ["South Georgia", "GS"], ["Spain", "ES"], ["Sri Lanka", "LK"], ["St. Helena", "SH"], ["St.Pierre & Miquelon", "PM"], ["Sudan", "SD"], ["Suriname", "SR"], ["Svalbard", "SJ"], ["Swaziland", "SZ"], ["Sweden", "SE"], ["Switzerland", "CH"], ["Syrian Arab Republic", "SY"], ["Taiwan", "TW"], ["Tajikistan", "TJ"], ["Tanzania", "TZ"], ["Thailand", "TH"], ["Togo", "TG"], ["Tokelau", "TK"], ["Tonga", "TO"], ["Trinidad & Tobago", "TT"], ["Tunisia", "TN"], ["Turkey", "TR"], ["Turkmenistan", "TM"], ["Turks & Caicos Isl.", "TC"], ["Tuvalu", "TV"], ["Uganda", "UG"], ["Ukraine", "UA"], ["United Arab Emir.", "AE"], ["United Kingdom", "GB"], ["United States", "US"], ["United States Minor", "UM"], ["Uruguay", "UY"], ["Uzbekistan", "UZ"], ["Vanuatu", "VU"], ["Venezuela", "VE"], ["Viet Nam", "VN"], ["Virgin Islands (Brit)", "VG"], ["Virgin Islands (U.S.)", "VI"], ["Wallis & Futuna Isl.", "WF"], ["Western Sahara", "EH"], ["Yemen", "YE"], ["Yugoslavia", "YU"], ["Zambia", "ZM"], ["Zimbabwe", "ZW"]], "0"), :class => "thin-control", :size => "20");[Escaped Output] FormBuilder.new.label(d4x_sanitizer(t(:message)), :class => "show-item-label");[Escaped Output] FormBuilder.new.text_area(:message, :size => "87x12");[Escaped Output] FormBuilder.new.label(d4x_sanitizer(t(:rating)), :class => "show-item-label");[Escaped Output] FormBuilder.new.select(:rating, options_for_select([["1", "1"], ["2", "2"], ["3", "3"], ["4", "4"], ["5", "5"], ["6", "6"], ["7", "7"], ["8", "8"], ["9", "9"], ["10", "10"]], "10"), :class => "thin-control", :size => "20");[Escaped Output] FormBuilder.new.submit("send", :class => "button-d4x"); end

feedbacks/_guest

[Escaped Output] pluralize(@feedback.errors.count, t("error"))
[Escaped Output] msg
[Escaped Output] d4x_sanitizer(t("send us your feedback"))
[Escaped Output] f.label(d4x_sanitizer(t(:from)), :class => "lcd yellow")
[Escaped Output] f.text_field(:from, :size => 30, :class => "def-input")
[Escaped Output] f.label(d4x_sanitizer(t(:email)), :class => "lcd yellow")
[Escaped Output] f.text_field(:email, :size => 30, :class => "def-input")
[Escaped Output] f.label(d4x_sanitizer(t(:country)), :class => "lcd yellow")
[Escaped Output] f.select(:country, options_for_select([["choose", " "], ["Afghanistan", "AF"], ["Albania", "AL"], ["Algeria", "DZ"], ["American Samoa", "AS"], ["Andorra", "AD"], ["Angola", "AO"], ["Anguilla", "AI"], ["Antarctica", "AQ"], ["Antigua & Barbuda", "AG"], ["Argentina", "AR"], ["Armenia", "AM"], ["Aruba", "AW"], ["Australia", "AU"], ["Austria", "AT"], ["Azerbaijan", "AZ"], ["Bahamas", "BS"], ["Bahrain", "BH"], ["Bangladesh", "BD"], ["Barbados", "BB"], ["Belarus", "BY"], ["Belgium", "BE"], ["Belize", "BZ"], ["Benin", "BJ"], ["Bermuda", "BM"], ["Bhutan", "BT"], ["Bolivia", "BO"], ["Bosnia and Herzeg.", "BA"], ["Botswana", "BW"], ["Bouvet Island", "BV"], ["Brazil", "BR"], ["British Ind. Ocean", "IO"], ["Brunei Darussalam", "BN"], ["Bulgaria", "BG"], ["Burkina Faso", "BF"], ["Burundi", "BI"], ["Cambodia", "KH"], ["Cameroon", "CM"], ["Canada", "CA"], ["Cape Verde", "CV"], ["Cayman Islands", "KY"], ["Central Afr.Republic", "CF"], ["Chad", "TD"], ["Chile", "CL"], ["China", "CN"], ["Christmas Island", "CX"], ["Cocos Islands", "CC"], ["Colombia", "CO"], ["Comoros", "KM"], ["Congo", "CG"], ["Congo, Republic of", "CD"], ["Cook Islands", "CK"], ["Costa Rica", "CR"], ["Cote d`Ivoire", "CI"], ["Croatia (Hrvatska)", "HR"], ["Cuba", "CU"], ["Cyprus", "CY"], ["Czech Republic", "CZ"], ["Denmark", "DK"], ["Djibouti", "DJ"], ["Dominica", "DM"], ["Dominican Republic", "DO"], ["East Timor", "TP"], ["Ecuador", "EC"], ["Egypt", "EG"], ["El Salvador", "SV"], ["Equatorial Guinea", "GQ"], ["Eritrea", "ER"], ["Estonia", "EE"], ["Ethiopia", "ET"], ["Falkland Islands", "FK"], ["Faroe Islands", "FO"], ["Fiji", "FJ"], ["Finland", "FI"], ["France", "FR"], ["France, Metropol.", "FX"], ["French Guiana", "GF"], ["French Polynesia", "PF"], ["French Sout Terr.", "TF"], ["Gabon", "GA"], ["Gambia", "GM"], ["Georgia", "GE"], ["Germany", "DE"], ["Ghana", "GH"], ["Gibraltar", "GI"], ["Greece", "GR"], ["Greenland", "GL"], ["Grenada", "GD"], ["Guadeloupe", "GP"], ["Guam", "GU"], ["Guatemala", "GT"], ["Guinea", "GN"], ["Guinea-Bissau", "GW"], ["Guyana", "GY"], ["Haiti", "HT"], ["Heard Mc Donald", "HM"], ["Holy See (Vatican)", "VA"], ["Honduras", "HN"], ["Hong Kong", "HK"], ["Hungary", "HU"], ["Iceland", "IS"], ["India", "IN"], ["Indonesia", "ID"], ["Iran", "IR"], ["Iraq", "IQ"], ["Ireland", "IE"], ["Israel", "IL"], ["Italy", "IT"], ["Jamaica", "JM"], ["Japan", "JP"], ["Jordan", "JO"], ["Kazakhstan", "KZ"], ["Kenya", "KE"], ["Kiribati", "KI"], ["Korea, Democratic", "KP"], ["Korea, Republic of", "KR"], ["Kuwait", "KW"], ["Kyrgyzstan", "KG"], ["Lao Peoples", "LA"], ["Latvia", "LV"], ["Lebanon", "LB"], ["Lesotho", "LS"], ["Liberia", "LR"], ["Libyan", "LY"], ["Liechtenstein", "LI"], ["Lithuania", "LT"], ["Luxembourg", "LU"], ["Macau", "MO"], ["Macedonia", "MK"], ["Madagascar", "MG"], ["Malawi", "MW"], ["Malaysia", "MY"], ["Maldives", "MV"], ["Mali", "ML"], ["Malta", "MT"], ["Marshall Islands", "MH"], ["Martinique", "MQ"], ["Mauritania", "MR"], ["Mauritius", "MU"], ["Mayotte", "YT"], ["Mexico", "MX"], ["Micronesia", "FM"], ["Moldova", "MD"], ["Monaco", "MC"], ["Mongolia", "MN"], ["Montserrat", "MS"], ["Morocco", "MA"], ["Mozambique", "MZ"], ["Myanmar", "MM"], ["Namibia", "NA"], ["Nauru", "NR"], ["Nepal", "NP"], ["Netherlands", "NL"], ["Netherlands Antilles", "AN"], ["New Caledonia", "NC"], ["New Zealand", "NZ"], ["Nicaragua", "NI"], ["Niger", "NE"], ["Nigeria", "NG"], ["Niue", "NU"], ["Norfolk Island", "NF"], ["Northern Mariana Isl", "MP"], ["Norway", "NO"], ["Oman", "OM"], ["Pakistan", "PK"], ["Palau", "PW"], ["Panama", "PA"], ["Papua New Guinea", "PG"], ["Paraguay", "PY"], ["Peru", "PE"], ["Philippines", "PH"], ["Pitcairn", "PN"], ["Poland", "PL"], ["Portugal", "PT"], ["Puerto Rico", "PR"], ["Qatar", "QA"], ["Reunion", "RE"], ["Romania", "RO"], ["Russian Federation", "RU"], ["Rwanda", "RW"], ["Saint Kitts & Nevis", "KN"], ["Saint LUCIA", "LC"], ["Saint Vincent", "VC"], ["Samoa", "WS"], ["San Marino", "SM"], ["Sao Tome & Principe", "ST"], ["Saudi Arabia", "SA"], ["Senegal", "SN"], ["Seychelles", "SC"], ["Sierra Leone", "SL"], ["Singapore", "SG"], ["Slovakia", "SK"], ["Slovenia", "SI"], ["Solomon Islands", "SB"], ["Somalia", "SO"], ["South Africa", "ZA"], ["South Georgia", "GS"], ["Spain", "ES"], ["Sri Lanka", "LK"], ["St. Helena", "SH"], ["St.Pierre & Miquelon", "PM"], ["Sudan", "SD"], ["Suriname", "SR"], ["Svalbard", "SJ"], ["Swaziland", "SZ"], ["Sweden", "SE"], ["Switzerland", "CH"], ["Syrian Arab Republic", "SY"], ["Taiwan", "TW"], ["Tajikistan", "TJ"], ["Tanzania", "TZ"], ["Thailand", "TH"], ["Togo", "TG"], ["Tokelau", "TK"], ["Tonga", "TO"], ["Trinidad & Tobago", "TT"], ["Tunisia", "TN"], ["Turkey", "TR"], ["Turkmenistan", "TM"], ["Turks & Caicos Isl.", "TC"], ["Tuvalu", "TV"], ["Uganda", "UG"], ["Ukraine", "UA"], ["United Arab Emir.", "AE"], ["United Kingdom", "GB"], ["United States", "US"], ["United States Minor", "UM"], ["Uruguay", "UY"], ["Uzbekistan", "UZ"], ["Vanuatu", "VU"], ["Venezuela", "VE"], ["Viet Nam", "VN"], ["Virgin Islands (Brit)", "VG"], ["Virgin Islands (U.S.)", "VI"], ["Wallis & Futuna Isl.", "WF"], ["Western Sahara", "EH"], ["Yemen", "YE"], ["Yugoslavia", "YU"], ["Zambia", "ZM"], ["Zimbabwe", "ZW"]], "0"), :class => "thin-control", :size => "20")
[Escaped Output] f.text_area(:message, :size => "40x5")
[Escaped Output] f.label(d4x_sanitizer(t(:rating)), :class => "lcd yellow")
[Escaped Output] f.select(:rating, options_for_select([["Rate!", "0"], ["1", "1"], ["2", "2"], ["3", "3"], ["4", "4"], ["5", "5"], ["6", "6"], ["7", "7"], ["8", "8"], ["9", "9"], ["10", "10"]], "choose"), :class => "thin-control", :size => "20")
[Escaped Output] f.submit("Send Now!", :class => "button-d4x", :id => "sendfi")
[Escaped Output] form_for(@feedback) do; if @feedback.errors.any? then; [Escaped Output] pluralize(@feedback.errors.count, t("error")); @feedback.errors.full_messages.each do; [Escaped Output] msg; end;end;[Escaped Output] d4x_sanitizer(t("send us your feedback"));[Escaped Output] f.label(d4x_sanitizer(t(:from)), :class => "lcd yellow");[Escaped Output] f.text_field(:from, :size => 30, :class => "def-input");[Escaped Output] f.label(d4x_sanitizer(t(:email)), :class => "lcd yellow");[Escaped Output] f.text_field(:email, :size => 30, :class => "def-input");[Escaped Output] f.label(d4x_sanitizer(t(:country)), :class => "lcd yellow");[Escaped Output] f.select(:country, options_for_select([["choose", " "], ["Afghanistan", "AF"], ["Albania", "AL"], ["Algeria", "DZ"], ["American Samoa", "AS"], ["Andorra", "AD"], ["Angola", "AO"], ["Anguilla", "AI"], ["Antarctica", "AQ"], ["Antigua & Barbuda", "AG"], ["Argentina", "AR"], ["Armenia", "AM"], ["Aruba", "AW"], ["Australia", "AU"], ["Austria", "AT"], ["Azerbaijan", "AZ"], ["Bahamas", "BS"], ["Bahrain", "BH"], ["Bangladesh", "BD"], ["Barbados", "BB"], ["Belarus", "BY"], ["Belgium", "BE"], ["Belize", "BZ"], ["Benin", "BJ"], ["Bermuda", "BM"], ["Bhutan", "BT"], ["Bolivia", "BO"], ["Bosnia and Herzeg.", "BA"], ["Botswana", "BW"], ["Bouvet Island", "BV"], ["Brazil", "BR"], ["British Ind. Ocean", "IO"], ["Brunei Darussalam", "BN"], ["Bulgaria", "BG"], ["Burkina Faso", "BF"], ["Burundi", "BI"], ["Cambodia", "KH"], ["Cameroon", "CM"], ["Canada", "CA"], ["Cape Verde", "CV"], ["Cayman Islands", "KY"], ["Central Afr.Republic", "CF"], ["Chad", "TD"], ["Chile", "CL"], ["China", "CN"], ["Christmas Island", "CX"], ["Cocos Islands", "CC"], ["Colombia", "CO"], ["Comoros", "KM"], ["Congo", "CG"], ["Congo, Republic of", "CD"], ["Cook Islands", "CK"], ["Costa Rica", "CR"], ["Cote d`Ivoire", "CI"], ["Croatia (Hrvatska)", "HR"], ["Cuba", "CU"], ["Cyprus", "CY"], ["Czech Republic", "CZ"], ["Denmark", "DK"], ["Djibouti", "DJ"], ["Dominica", "DM"], ["Dominican Republic", "DO"], ["East Timor", "TP"], ["Ecuador", "EC"], ["Egypt", "EG"], ["El Salvador", "SV"], ["Equatorial Guinea", "GQ"], ["Eritrea", "ER"], ["Estonia", "EE"], ["Ethiopia", "ET"], ["Falkland Islands", "FK"], ["Faroe Islands", "FO"], ["Fiji", "FJ"], ["Finland", "FI"], ["France", "FR"], ["France, Metropol.", "FX"], ["French Guiana", "GF"], ["French Polynesia", "PF"], ["French Sout Terr.", "TF"], ["Gabon", "GA"], ["Gambia", "GM"], ["Georgia", "GE"], ["Germany", "DE"], ["Ghana", "GH"], ["Gibraltar", "GI"], ["Greece", "GR"], ["Greenland", "GL"], ["Grenada", "GD"], ["Guadeloupe", "GP"], ["Guam", "GU"], ["Guatemala", "GT"], ["Guinea", "GN"], ["Guinea-Bissau", "GW"], ["Guyana", "GY"], ["Haiti", "HT"], ["Heard Mc Donald", "HM"], ["Holy See (Vatican)", "VA"], ["Honduras", "HN"], ["Hong Kong", "HK"], ["Hungary", "HU"], ["Iceland", "IS"], ["India", "IN"], ["Indonesia", "ID"], ["Iran", "IR"], ["Iraq", "IQ"], ["Ireland", "IE"], ["Israel", "IL"], ["Italy", "IT"], ["Jamaica", "JM"], ["Japan", "JP"], ["Jordan", "JO"], ["Kazakhstan", "KZ"], ["Kenya", "KE"], ["Kiribati", "KI"], ["Korea, Democratic", "KP"], ["Korea, Republic of", "KR"], ["Kuwait", "KW"], ["Kyrgyzstan", "KG"], ["Lao Peoples", "LA"], ["Latvia", "LV"], ["Lebanon", "LB"], ["Lesotho", "LS"], ["Liberia", "LR"], ["Libyan", "LY"], ["Liechtenstein", "LI"], ["Lithuania", "LT"], ["Luxembourg", "LU"], ["Macau", "MO"], ["Macedonia", "MK"], ["Madagascar", "MG"], ["Malawi", "MW"], ["Malaysia", "MY"], ["Maldives", "MV"], ["Mali", "ML"], ["Malta", "MT"], ["Marshall Islands", "MH"], ["Martinique", "MQ"], ["Mauritania", "MR"], ["Mauritius", "MU"], ["Mayotte", "YT"], ["Mexico", "MX"], ["Micronesia", "FM"], ["Moldova", "MD"], ["Monaco", "MC"], ["Mongolia", "MN"], ["Montserrat", "MS"], ["Morocco", "MA"], ["Mozambique", "MZ"], ["Myanmar", "MM"], ["Namibia", "NA"], ["Nauru", "NR"], ["Nepal", "NP"], ["Netherlands", "NL"], ["Netherlands Antilles", "AN"], ["New Caledonia", "NC"], ["New Zealand", "NZ"], ["Nicaragua", "NI"], ["Niger", "NE"], ["Nigeria", "NG"], ["Niue", "NU"], ["Norfolk Island", "NF"], ["Northern Mariana Isl", "MP"], ["Norway", "NO"], ["Oman", "OM"], ["Pakistan", "PK"], ["Palau", "PW"], ["Panama", "PA"], ["Papua New Guinea", "PG"], ["Paraguay", "PY"], ["Peru", "PE"], ["Philippines", "PH"], ["Pitcairn", "PN"], ["Poland", "PL"], ["Portugal", "PT"], ["Puerto Rico", "PR"], ["Qatar", "QA"], ["Reunion", "RE"], ["Romania", "RO"], ["Russian Federation", "RU"], ["Rwanda", "RW"], ["Saint Kitts & Nevis", "KN"], ["Saint LUCIA", "LC"], ["Saint Vincent", "VC"], ["Samoa", "WS"], ["San Marino", "SM"], ["Sao Tome & Principe", "ST"], ["Saudi Arabia", "SA"], ["Senegal", "SN"], ["Seychelles", "SC"], ["Sierra Leone", "SL"], ["Singapore", "SG"], ["Slovakia", "SK"], ["Slovenia", "SI"], ["Solomon Islands", "SB"], ["Somalia", "SO"], ["South Africa", "ZA"], ["South Georgia", "GS"], ["Spain", "ES"], ["Sri Lanka", "LK"], ["St. Helena", "SH"], ["St.Pierre & Miquelon", "PM"], ["Sudan", "SD"], ["Suriname", "SR"], ["Svalbard", "SJ"], ["Swaziland", "SZ"], ["Sweden", "SE"], ["Switzerland", "CH"], ["Syrian Arab Republic", "SY"], ["Taiwan", "TW"], ["Tajikistan", "TJ"], ["Tanzania", "TZ"], ["Thailand", "TH"], ["Togo", "TG"], ["Tokelau", "TK"], ["Tonga", "TO"], ["Trinidad & Tobago", "TT"], ["Tunisia", "TN"], ["Turkey", "TR"], ["Turkmenistan", "TM"], ["Turks & Caicos Isl.", "TC"], ["Tuvalu", "TV"], ["Uganda", "UG"], ["Ukraine", "UA"], ["United Arab Emir.", "AE"], ["United Kingdom", "GB"], ["United States", "US"], ["United States Minor", "UM"], ["Uruguay", "UY"], ["Uzbekistan", "UZ"], ["Vanuatu", "VU"], ["Venezuela", "VE"], ["Viet Nam", "VN"], ["Virgin Islands (Brit)", "VG"], ["Virgin Islands (U.S.)", "VI"], ["Wallis & Futuna Isl.", "WF"], ["Western Sahara", "EH"], ["Yemen", "YE"], ["Yugoslavia", "YU"], ["Zambia", "ZM"], ["Zimbabwe", "ZW"]], "0"), :class => "thin-control", :size => "20");[Escaped Output] f.text_area(:message, :size => "40x5");[Escaped Output] f.label(d4x_sanitizer(t(:rating)), :class => "lcd yellow");[Escaped Output] f.select(:rating, options_for_select([["Rate!", "0"], ["1", "1"], ["2", "2"], ["3", "3"], ["4", "4"], ["5", "5"], ["6", "6"], ["7", "7"], ["8", "8"], ["9", "9"], ["10", "10"]], "choose"), :class => "thin-control", :size => "20");[Escaped Output] f.submit("Send Now!", :class => "button-d4x", :id => "sendfi"); end

feedbacks/edit

[Escaped Output] link_to(image_tag("arrow_left.png", :border => 0, :title => d4x_sanitizer(t("back"))), feedbacks_path)
[Escaped Output] d4x_sanitizer(t("Editing Feedback"))
[Escaped Output] render(partial => "form", {})

feedbacks/edit.["FeedbacksController#edit"]

[Escaped Output] link_to(image_tag("arrow_left.png", :border => 0, :title => d4x_sanitizer(t("back"))), feedbacks_path)
[Escaped Output] d4x_sanitizer(t("Editing Feedback"))
[Escaped Output] render(partial => "form", {})

feedbacks/index

[Escaped Output] link_to(image_tag("user_add.png", :border => 0, :mouseover => "bug_add.png", :title => "Vulnerabilities"), new_feedback_path)
[Escaped Output] image_tag("bug.png", :border => 0, :mouseover => "bug.png", :title => "Vulnerabilities")
[Escaped Output] t(:sent_at)
[Escaped Output] t(:from)
[Escaped Output] t(:raiting)
[Escaped Output] t(:email)
[Escaped Output] cycle("odd", "even")
[Escaped Output] feedback.created_at.strftime("%Y-%m-%d")
[Escaped Output] link_to(feedback.from, feedback)
[Escaped Output] feedback.rating
[Escaped Output] feedback.email
[Escaped Output] link_to(image_tag("bug.png", :border => 0, :mouseover => "bug.png", :title => t("icon-show"), :size => "16x16"), feedback)
[Escaped Output] link_to(image_tag("bug_edit.png", :border => 0, :mouseover => "bug_edit.png", :title => t("icon-edit"), :size => "16x16"), edit_feedback_path(feedback))
[Escaped Output] button_to("", feedback, :confirm => "are you sure?", :method => :delete, :class => "adestroy", :name => "destroy", :size => "16x16")
[Escaped Output] will_paginate(@feedbacks, :per_page => 25)

feedbacks/index.["FeedbacksController#index"]

[Escaped Output] link_to(image_tag("user_add.png", :border => 0, :mouseover => "bug_add.png", :title => "Vulnerabilities"), new_feedback_path)
[Escaped Output] image_tag("bug.png", :border => 0, :mouseover => "bug.png", :title => "Vulnerabilities")
[Escaped Output] t(:sent_at)
[Escaped Output] t(:from)
[Escaped Output] t(:raiting)
[Escaped Output] t(:email)
[Escaped Output] cycle("odd", "even")
[Escaped Output] feedback.created_at.strftime("%Y-%m-%d")
[Escaped Output] link_to(feedback.from, feedback)
[Escaped Output] feedback.rating
[Escaped Output] feedback.email
[Escaped Output] link_to(image_tag("bug.png", :border => 0, :mouseover => "bug.png", :title => t("icon-show"), :size => "16x16"), feedback)
[Escaped Output] link_to(image_tag("bug_edit.png", :border => 0, :mouseover => "bug_edit.png", :title => t("icon-edit"), :size => "16x16"), edit_feedback_path(feedback))
[Escaped Output] button_to("", feedback, :confirm => "are you sure?", :method => :delete, :class => "adestroy", :name => "destroy", :size => "16x16")
[Escaped Output] will_paginate((Feedback.paginate(:page => params[:page]) or Feedback.where(:visible => true).paginate(:page => params[:page])), :per_page => 25)

feedbacks/new

[Escaped Output] link_to(image_tag("arrow_left.png", :border => 0, :title => t("back")), feedbacks_path)
[Escaped Output] d4x_sanitizer(t("send feedback"))
[Escaped Output] render(partial => "form", {})

feedbacks/new.["FeedbacksController#new"]

[Escaped Output] link_to(image_tag("arrow_left.png", :border => 0, :title => t("back")), feedbacks_path)
[Escaped Output] d4x_sanitizer(t("send feedback"))
[Escaped Output] render(partial => "form", {})

feedbacks/show

[Escaped Output] @feedback.id
[Escaped Output] image_tag("user_gray.png", :class => "middle")
[Escaped Output] label_tag(t("from"))
[Escaped Output] link_to(@feedback.from, @feedback.from)
[Escaped Output] image_tag("star.png", :class => "middle")
[Escaped Output] label_tag(d4x_sanitizer(t("rating")))
[Escaped Output] label_tag(@feedback.rating.to_s)
[Escaped Output] link_to(@feedback.from, edit_feedback_path(@feedback))
[Escaped Output] @feedback.from
[Escaped Output] @feedback.email
[Escaped Output] @feedback.message

feedbacks/show.["FeedbacksController#show"]

[Escaped Output] Feedback.find(params[:id]).id
[Escaped Output] image_tag("user_gray.png", :class => "middle")
[Escaped Output] label_tag(t("from"))
[Escaped Output] link_to(Feedback.find(params[:id]).from, Feedback.find(params[:id]).from)
[Escaped Output] image_tag("star.png", :class => "middle")
[Escaped Output] label_tag(d4x_sanitizer(t("rating")))
[Escaped Output] label_tag(Feedback.find(params[:id]).rating.to_s)
[Escaped Output] link_to(Feedback.find(params[:id]).from, edit_feedback_path(Feedback.find(params[:id])))
[Escaped Output] Feedback.find(params[:id]).from
[Escaped Output] Feedback.find(params[:id]).email
[Escaped Output] Feedback.find(params[:id]).message

friends/_form

[Escaped Output] pluralize(@friends.errors.count, t("error"))
[Escaped Output] msg
[Escaped Output] f.label(t(:user))
[Escaped Output] f.text_field(:user_id)
[Escaped Output] f.label(t(:friend))
[Escaped Output] f.text_field(:friend_id)
[Escaped Output] f.label(t(:deleted))
[Escaped Output] f.check_box(:deleted)
[Escaped Output] f.submit
[Escaped Output] form_for(@friends) do; if @friends.errors.any? then; [Escaped Output] pluralize(@friends.errors.count, t("error")); @friends.errors.full_messages.each do; [Escaped Output] msg; end;end;[Escaped Output] f.label(t(:user));[Escaped Output] f.text_field(:user_id);[Escaped Output] f.label(t(:friend));[Escaped Output] f.text_field(:friend_id);[Escaped Output] f.label(t(:deleted));[Escaped Output] f.check_box(:deleted);[Escaped Output] f.submit; end

friends/_form.["FriendsController#create", "Template:friends/new"]

[Escaped Output] pluralize(Friend.new(:user_id => current_user.id, :friend_id => params[:friend][:friend_id], :friendship => params[:friend][:friendship]).errors.count, t("error"))
[Escaped Output] msg
[Escaped Output] FormBuilder.new.label(t(:user))
[Escaped Output] FormBuilder.new.text_field(:user_id)
[Escaped Output] FormBuilder.new.label(t(:friend))
[Escaped Output] FormBuilder.new.text_field(:friend_id)
[Escaped Output] FormBuilder.new.label(t(:deleted))
[Escaped Output] FormBuilder.new.check_box(:deleted)
[Escaped Output] FormBuilder.new.submit
[Escaped Output] form_for(Friend.new(:user_id => current_user.id, :friend_id => params[:friend][:friend_id], :friendship => params[:friend][:friendship])) do; if Friend.new(:user_id => current_user.id, :friend_id => params[:friend][:friend_id], :friendship => params[:friend][:friendship]).errors.any? then; [Escaped Output] pluralize(Friend.new(:user_id => current_user.id, :friend_id => params[:friend][:friend_id], :friendship => params[:friend][:friendship]).errors.count, t("error")); Friend.new(:user_id => current_user.id, :friend_id => params[:friend][:friend_id], :friendship => params[:friend][:friendship]).errors.full_messages.each do; [Escaped Output] msg; end;end;[Escaped Output] FormBuilder.new.label(t(:user));[Escaped Output] FormBuilder.new.text_field(:user_id);[Escaped Output] FormBuilder.new.label(t(:friend));[Escaped Output] FormBuilder.new.text_field(:friend_id);[Escaped Output] FormBuilder.new.label(t(:deleted));[Escaped Output] FormBuilder.new.check_box(:deleted);[Escaped Output] FormBuilder.new.submit; end

friends/_form.["Template:friends/edit"]

[Escaped Output] pluralize(@friends.errors.count, t("error"))
[Escaped Output] msg
[Escaped Output] FormBuilder.new.label(t(:user))
[Escaped Output] FormBuilder.new.text_field(:user_id)
[Escaped Output] FormBuilder.new.label(t(:friend))
[Escaped Output] FormBuilder.new.text_field(:friend_id)
[Escaped Output] FormBuilder.new.label(t(:deleted))
[Escaped Output] FormBuilder.new.check_box(:deleted)
[Escaped Output] FormBuilder.new.submit
[Escaped Output] form_for(@friends) do; if @friends.errors.any? then; [Escaped Output] pluralize(@friends.errors.count, t("error")); @friends.errors.full_messages.each do; [Escaped Output] msg; end;end;[Escaped Output] FormBuilder.new.label(t(:user));[Escaped Output] FormBuilder.new.text_field(:user_id);[Escaped Output] FormBuilder.new.label(t(:friend));[Escaped Output] FormBuilder.new.text_field(:friend_id);[Escaped Output] FormBuilder.new.label(t(:deleted));[Escaped Output] FormBuilder.new.check_box(:deleted);[Escaped Output] FormBuilder.new.submit; end

friends/edit

[Escaped Output] notice
[Escaped Output] t("editing friend")
[Escaped Output] render(partial => "form", {})
[Escaped Output] link_to(t("Show"), @friend)
[Escaped Output] link_to(t("Back"), friends_path)

friends/edit.["FriendsController#edit"]

[Escaped Output] notice
[Escaped Output] t("editing friend")
[Escaped Output] render(partial => "form", {})
[Escaped Output] link_to(t("Show"), Friend.find(params[:id]))
[Escaped Output] link_to(t("Back"), friends_path)

friends/index

[Escaped Output] t("connections")
[Escaped Output] user.avatar.url(:thumb)
[Escaped Output] user.firstname
[Escaped Output] ("@" + user.nickname)
[Escaped Output] link_to(raw("<i class=\"fa fa-envelope white\"></i>"), ("/compose?target_id=" + user.id.to_s), :class => "btn btn-xs btn-dark", :title => "send message")
[Escaped Output] f.hidden_field(:friend_id, :value => user.id)
[Escaped Output] button_to(user, :class => "btn btn-xs btn-success", :method => :delete, :data => ({ :confirm => "Are you sure you want to disconnect this person?" }), :title => "Want to remove this connection?") do; ; end
[Escaped Output] form_for(friends_path) do; [Escaped Output] f.hidden_field(:friend_id, :value => user.id);[Escaped Output] button_to(user, :class => "btn btn-xs btn-success", :method => :delete, :data => ({ :confirm => "Are you sure you want to disconnect this person?" }), :title => "Want to remove this connection?") do; ; end; end
[Escaped Output] link_to(user.nickname) do; if have_to_show_photo(current_user.id, user.id) then; if user.avatar(:thumb).present? then; [Escaped Output] user.avatar.url(:thumb); else; [ignored]; end;else; [ignored];end;[Escaped Output] user.firstname;[Escaped Output] ("@" + user.nickname);user.email;[Escaped Output] link_to(raw("<i class=\"fa fa-envelope white\"></i>"), ("/compose?target_id=" + user.id.to_s), :class => "btn btn-xs btn-dark", :title => "send message");[Escaped Output] form_for(friends_path) do; [Escaped Output] f.hidden_field(:friend_id, :value => user.id);[Escaped Output] button_to(user, :class => "btn btn-xs btn-success", :method => :delete, :data => ({ :confirm => "Are you sure you want to disconnect this person?" }), :title => "Want to remove this connection?") do; ; end; end; end

friends/index.["FriendsController#index"]

[Escaped Output] t("connections")
[Escaped Output] user.avatar.url(:thumb)
[Escaped Output] user.firstname
[Escaped Output] ("@" + user.nickname)
[Escaped Output] link_to(raw("<i class=\"fa fa-envelope white\"></i>"), ("/compose?target_id=" + user.id.to_s), :class => "btn btn-xs btn-dark", :title => "send message")
[Escaped Output] FormBuilder.new.hidden_field(:friend_id, :value => user.id)
[Escaped Output] button_to(user, :class => "btn btn-xs btn-success", :method => :delete, :data => ({ :confirm => "Are you sure you want to disconnect this person?" }), :title => "Want to remove this connection?") do; ; end
[Escaped Output] form_for(friends_path) do; [Escaped Output] FormBuilder.new.hidden_field(:friend_id, :value => user.id);[Escaped Output] button_to(user, :class => "btn btn-xs btn-success", :method => :delete, :data => ({ :confirm => "Are you sure you want to disconnect this person?" }), :title => "Want to remove this connection?") do; ; end; end
[Escaped Output] link_to(user.nickname) do; if have_to_show_photo(current_user.id, user.id) then; if user.avatar(:thumb).present? then; [Escaped Output] user.avatar.url(:thumb); else; [ignored]; end;else; [ignored];end;[Escaped Output] user.firstname;[Escaped Output] ("@" + user.nickname);user.email;[Escaped Output] link_to(raw("<i class=\"fa fa-envelope white\"></i>"), ("/compose?target_id=" + user.id.to_s), :class => "btn btn-xs btn-dark", :title => "send message");[Escaped Output] form_for(friends_path) do; [Escaped Output] FormBuilder.new.hidden_field(:friend_id, :value => user.id);[Escaped Output] button_to(user, :class => "btn btn-xs btn-success", :method => :delete, :data => ({ :confirm => "Are you sure you want to disconnect this person?" }), :title => "Want to remove this connection?") do; ; end; end; end

friends/new

[Escaped Output] t("New friend")
[Escaped Output] render(partial => "form", {})
[Escaped Output] link_to(t("Back"), friends_path)

friends/new.["FriendsController#new"]

[Escaped Output] t("New friend")
[Escaped Output] render(partial => "form", {})
[Escaped Output] link_to(t("Back"), friends_path)

friends/show

[Escaped Output] t(:id)
[Escaped Output] @friend.id
[Escaped Output] t(:user)
[Escaped Output] @friend.user_id
[Escaped Output] t(:friend)
[Escaped Output] @friend.friend_id
[Escaped Output] t(:deleted)
[Escaped Output] @friend.deleted
[Escaped Output] link_to(t("edit"), edit_friend_path(@friend))
[Escaped Output] link_to(t("back"), friends_path)

friends/show.["FriendsController#show"]

[Escaped Output] t(:id)
[Escaped Output] Friend.find(params[:id]).id
[Escaped Output] t(:user)
[Escaped Output] Friend.find(params[:id]).user_id
[Escaped Output] t(:friend)
[Escaped Output] Friend.find(params[:id]).friend_id
[Escaped Output] t(:deleted)
[Escaped Output] Friend.find(params[:id]).deleted
[Escaped Output] link_to(t("edit"), edit_friend_path(Friend.find(params[:id])))
[Escaped Output] link_to(t("back"), friends_path)

groups/_form

[Escaped Output] pluralize(@group.errors.count, t("error"))
[Escaped Output] msg
[Escaped Output] f.label(t("group name"), nil, :class => "lcd")
[Escaped Output] f.text_field(:title, :size => 60, :class => "def-input")
[Escaped Output] f.label(t("headline"), nil, :class => "lcd")
[Escaped Output] f.text_field(:headline, :class => "def-input")
[Escaped Output] f.label(t("description"), nil, :class => "lcd")
[Escaped Output] f.text_area(:description, :size => "60x4")
[Escaped Output] f.label(t("motto"), nil, :class => "lcd")
[Escaped Output] f.text_area(:motto, :size => "60x4")
[Escaped Output] f.label(t("founder"), nil, :class => "lcd")
[Escaped Output] f.text_field(:founder, :class => "def-input")
[Escaped Output] f.label(t("fundation"), nil, :class => "lcd")
[Escaped Output] f.text_field(:creation_date, :class => "def-input")
[Escaped Output] f.label(t("mission"), nil, :class => "lcd")
[Escaped Output] f.text_area(:mission, :size => "60x4")
[Escaped Output] f.label(t("visibility"), nil, :class => "lcd")
[Escaped Output] f.select(:visibility, options_for_select([["Public", "PUBLIC"], ["Closed", "CLOSED"], ["Secret", "SECRET"]], "0"))
[Escaped Output] f.label(t("front image"), nil, :class => "lcd")
[Escaped Output] f.file_field(:image)
[Escaped Output] f.label(t("cover image"), nil, :class => "lcd")
[Escaped Output] f.file_field(:cover)
[Escaped Output] f.submit(:class => "button-d4x")
[Escaped Output] form_for(@group) do; if @group.errors.any? then; [Escaped Output] pluralize(@group.errors.count, t("error")); @group.errors.full_messages.each do; [Escaped Output] msg; end;end;[Escaped Output] f.label(t("group name"), nil, :class => "lcd");[Escaped Output] f.text_field(:title, :size => 60, :class => "def-input");[Escaped Output] f.label(t("headline"), nil, :class => "lcd");[Escaped Output] f.text_field(:headline, :class => "def-input");[Escaped Output] f.label(t("description"), nil, :class => "lcd");[Escaped Output] f.text_area(:description, :size => "60x4");[Escaped Output] f.label(t("motto"), nil, :class => "lcd");[Escaped Output] f.text_area(:motto, :size => "60x4");[Escaped Output] f.label(t("founder"), nil, :class => "lcd");[Escaped Output] f.text_field(:founder, :class => "def-input");[Escaped Output] f.label(t("fundation"), nil, :class => "lcd");[Escaped Output] f.text_field(:creation_date, :class => "def-input");[Escaped Output] f.label(t("mission"), nil, :class => "lcd");[Escaped Output] f.text_area(:mission, :size => "60x4");[Escaped Output] f.label(t("visibility"), nil, :class => "lcd");[Escaped Output] f.select(:visibility, options_for_select([["Public", "PUBLIC"], ["Closed", "CLOSED"], ["Secret", "SECRET"]], "0"));[Escaped Output] f.label(t("front image"), nil, :class => "lcd");[Escaped Output] f.file_field(:image);[Escaped Output] f.label(t("cover image"), nil, :class => "lcd");[Escaped Output] f.file_field(:cover);[Escaped Output] f.submit(:class => "button-d4x"); end

groups/_form.["GroupsController#create", "Template:groups/new"]

[Escaped Output] pluralize(Group.new(group_params).errors.count, t("error"))
[Escaped Output] msg
[Escaped Output] FormBuilder.new.label(t("group name"), nil, :class => "lcd")
[Escaped Output] FormBuilder.new.text_field(:title, :size => 60, :class => "def-input")
[Escaped Output] FormBuilder.new.label(t("headline"), nil, :class => "lcd")
[Escaped Output] FormBuilder.new.text_field(:headline, :class => "def-input")
[Escaped Output] FormBuilder.new.label(t("description"), nil, :class => "lcd")
[Escaped Output] FormBuilder.new.text_area(:description, :size => "60x4")
[Escaped Output] FormBuilder.new.label(t("motto"), nil, :class => "lcd")
[Escaped Output] FormBuilder.new.text_area(:motto, :size => "60x4")
[Escaped Output] FormBuilder.new.label(t("founder"), nil, :class => "lcd")
[Escaped Output] FormBuilder.new.text_field(:founder, :class => "def-input")
[Escaped Output] FormBuilder.new.label(t("fundation"), nil, :class => "lcd")
[Escaped Output] FormBuilder.new.text_field(:creation_date, :class => "def-input")
[Escaped Output] FormBuilder.new.label(t("mission"), nil, :class => "lcd")
[Escaped Output] FormBuilder.new.text_area(:mission, :size => "60x4")
[Escaped Output] FormBuilder.new.label(t("visibility"), nil, :class => "lcd")
[Escaped Output] FormBuilder.new.select(:visibility, options_for_select([["Public", "PUBLIC"], ["Closed", "CLOSED"], ["Secret", "SECRET"]], "0"))
[Escaped Output] FormBuilder.new.label(t("front image"), nil, :class => "lcd")
[Escaped Output] FormBuilder.new.file_field(:image)
[Escaped Output] FormBuilder.new.label(t("cover image"), nil, :class => "lcd")
[Escaped Output] FormBuilder.new.file_field(:cover)
[Escaped Output] FormBuilder.new.submit(:class => "button-d4x")
[Escaped Output] form_for(Group.new(group_params)) do; if Group.new(group_params).errors.any? then; [Escaped Output] pluralize(Group.new(group_params).errors.count, t("error")); Group.new(group_params).errors.full_messages.each do; [Escaped Output] msg; end;end;[Escaped Output] FormBuilder.new.label(t("group name"), nil, :class => "lcd");[Escaped Output] FormBuilder.new.text_field(:title, :size => 60, :class => "def-input");[Escaped Output] FormBuilder.new.label(t("headline"), nil, :class => "lcd");[Escaped Output] FormBuilder.new.text_field(:headline, :class => "def-input");[Escaped Output] FormBuilder.new.label(t("description"), nil, :class => "lcd");[Escaped Output] FormBuilder.new.text_area(:description, :size => "60x4");[Escaped Output] FormBuilder.new.label(t("motto"), nil, :class => "lcd");[Escaped Output] FormBuilder.new.text_area(:motto, :size => "60x4");[Escaped Output] FormBuilder.new.label(t("founder"), nil, :class => "lcd");[Escaped Output] FormBuilder.new.text_field(:founder, :class => "def-input");[Escaped Output] FormBuilder.new.label(t("fundation"), nil, :class => "lcd");[Escaped Output] FormBuilder.new.text_field(:creation_date, :class => "def-input");[Escaped Output] FormBuilder.new.label(t("mission"), nil, :class => "lcd");[Escaped Output] FormBuilder.new.text_area(:mission, :size => "60x4");[Escaped Output] FormBuilder.new.label(t("visibility"), nil, :class => "lcd");[Escaped Output] FormBuilder.new.select(:visibility, options_for_select([["Public", "PUBLIC"], ["Closed", "CLOSED"], ["Secret", "SECRET"]], "0"));[Escaped Output] FormBuilder.new.label(t("front image"), nil, :class => "lcd");[Escaped Output] FormBuilder.new.file_field(:image);[Escaped Output] FormBuilder.new.label(t("cover image"), nil, :class => "lcd");[Escaped Output] FormBuilder.new.file_field(:cover);[Escaped Output] FormBuilder.new.submit(:class => "button-d4x"); end

groups/_form.["GroupsController#edit", "Template:groups/edit"]

[Escaped Output] pluralize(Group.find(params[:id]).errors.count, t("error"))
[Escaped Output] (Unresolved Model).new
[Escaped Output] FormBuilder.new.label(t("group name"), nil, :class => "lcd")
[Escaped Output] FormBuilder.new.text_field(:title, :size => 60, :class => "def-input")
[Escaped Output] FormBuilder.new.label(t("headline"), nil, :class => "lcd")
[Escaped Output] FormBuilder.new.text_field(:headline, :class => "def-input")
[Escaped Output] FormBuilder.new.label(t("description"), nil, :class => "lcd")
[Escaped Output] FormBuilder.new.text_area(:description, :size => "60x4")
[Escaped Output] FormBuilder.new.label(t("motto"), nil, :class => "lcd")
[Escaped Output] FormBuilder.new.text_area(:motto, :size => "60x4")
[Escaped Output] FormBuilder.new.label(t("founder"), nil, :class => "lcd")
[Escaped Output] FormBuilder.new.text_field(:founder, :class => "def-input")
[Escaped Output] FormBuilder.new.label(t("fundation"), nil, :class => "lcd")
[Escaped Output] FormBuilder.new.text_field(:creation_date, :class => "def-input")
[Escaped Output] FormBuilder.new.label(t("mission"), nil, :class => "lcd")
[Escaped Output] FormBuilder.new.text_area(:mission, :size => "60x4")
[Escaped Output] FormBuilder.new.label(t("visibility"), nil, :class => "lcd")
[Escaped Output] FormBuilder.new.select(:visibility, options_for_select([["Public", "PUBLIC"], ["Closed", "CLOSED"], ["Secret", "SECRET"]], "0"))
[Escaped Output] FormBuilder.new.label(t("front image"), nil, :class => "lcd")
[Escaped Output] FormBuilder.new.file_field(:image)
[Escaped Output] FormBuilder.new.label(t("cover image"), nil, :class => "lcd")
[Escaped Output] FormBuilder.new.file_field(:cover)
[Escaped Output] FormBuilder.new.submit(:class => "button-d4x")
[Escaped Output] form_for(Group.find(params[:id])) do; if Group.find(params[:id]).errors.any? then; [Escaped Output] pluralize(Group.find(params[:id]).errors.count, t("error")); Group.find(params[:id]).errors.full_messages.each do; [Escaped Output] (Unresolved Model).new; end;end;[Escaped Output] FormBuilder.new.label(t("group name"), nil, :class => "lcd");[Escaped Output] FormBuilder.new.text_field(:title, :size => 60, :class => "def-input");[Escaped Output] FormBuilder.new.label(t("headline"), nil, :class => "lcd");[Escaped Output] FormBuilder.new.text_field(:headline, :class => "def-input");[Escaped Output] FormBuilder.new.label(t("description"), nil, :class => "lcd");[Escaped Output] FormBuilder.new.text_area(:description, :size => "60x4");[Escaped Output] FormBuilder.new.label(t("motto"), nil, :class => "lcd");[Escaped Output] FormBuilder.new.text_area(:motto, :size => "60x4");[Escaped Output] FormBuilder.new.label(t("founder"), nil, :class => "lcd");[Escaped Output] FormBuilder.new.text_field(:founder, :class => "def-input");[Escaped Output] FormBuilder.new.label(t("fundation"), nil, :class => "lcd");[Escaped Output] FormBuilder.new.text_field(:creation_date, :class => "def-input");[Escaped Output] FormBuilder.new.label(t("mission"), nil, :class => "lcd");[Escaped Output] FormBuilder.new.text_area(:mission, :size => "60x4");[Escaped Output] FormBuilder.new.label(t("visibility"), nil, :class => "lcd");[Escaped Output] FormBuilder.new.select(:visibility, options_for_select([["Public", "PUBLIC"], ["Closed", "CLOSED"], ["Secret", "SECRET"]], "0"));[Escaped Output] FormBuilder.new.label(t("front image"), nil, :class => "lcd");[Escaped Output] FormBuilder.new.file_field(:image);[Escaped Output] FormBuilder.new.label(t("cover image"), nil, :class => "lcd");[Escaped Output] FormBuilder.new.file_field(:cover);[Escaped Output] FormBuilder.new.submit(:class => "button-d4x"); end

groups/_form.["GroupsController#new", "Template:groups/new"]

[Escaped Output] pluralize(Group.new.errors.count, t("error"))
[Escaped Output] msg
[Escaped Output] FormBuilder.new.label(t("group name"), nil, :class => "lcd")
[Escaped Output] FormBuilder.new.text_field(:title, :size => 60, :class => "def-input")
[Escaped Output] FormBuilder.new.label(t("headline"), nil, :class => "lcd")
[Escaped Output] FormBuilder.new.text_field(:headline, :class => "def-input")
[Escaped Output] FormBuilder.new.label(t("description"), nil, :class => "lcd")
[Escaped Output] FormBuilder.new.text_area(:description, :size => "60x4")
[Escaped Output] FormBuilder.new.label(t("motto"), nil, :class => "lcd")
[Escaped Output] FormBuilder.new.text_area(:motto, :size => "60x4")
[Escaped Output] FormBuilder.new.label(t("founder"), nil, :class => "lcd")
[Escaped Output] FormBuilder.new.text_field(:founder, :class => "def-input")
[Escaped Output] FormBuilder.new.label(t("fundation"), nil, :class => "lcd")
[Escaped Output] FormBuilder.new.text_field(:creation_date, :class => "def-input")
[Escaped Output] FormBuilder.new.label(t("mission"), nil, :class => "lcd")
[Escaped Output] FormBuilder.new.text_area(:mission, :size => "60x4")
[Escaped Output] FormBuilder.new.label(t("visibility"), nil, :class => "lcd")
[Escaped Output] FormBuilder.new.select(:visibility, options_for_select([["Public", "PUBLIC"], ["Closed", "CLOSED"], ["Secret", "SECRET"]], "0"))
[Escaped Output] FormBuilder.new.label(t("front image"), nil, :class => "lcd")
[Escaped Output] FormBuilder.new.file_field(:image)
[Escaped Output] FormBuilder.new.label(t("cover image"), nil, :class => "lcd")
[Escaped Output] FormBuilder.new.file_field(:cover)
[Escaped Output] FormBuilder.new.submit(:class => "button-d4x")
[Escaped Output] form_for(Group.new) do; if Group.new.errors.any? then; [Escaped Output] pluralize(Group.new.errors.count, t("error")); Group.new.errors.full_messages.each do; [Escaped Output] msg; end;end;[Escaped Output] FormBuilder.new.label(t("group name"), nil, :class => "lcd");[Escaped Output] FormBuilder.new.text_field(:title, :size => 60, :class => "def-input");[Escaped Output] FormBuilder.new.label(t("headline"), nil, :class => "lcd");[Escaped Output] FormBuilder.new.text_field(:headline, :class => "def-input");[Escaped Output] FormBuilder.new.label(t("description"), nil, :class => "lcd");[Escaped Output] FormBuilder.new.text_area(:description, :size => "60x4");[Escaped Output] FormBuilder.new.label(t("motto"), nil, :class => "lcd");[Escaped Output] FormBuilder.new.text_area(:motto, :size => "60x4");[Escaped Output] FormBuilder.new.label(t("founder"), nil, :class => "lcd");[Escaped Output] FormBuilder.new.text_field(:founder, :class => "def-input");[Escaped Output] FormBuilder.new.label(t("fundation"), nil, :class => "lcd");[Escaped Output] FormBuilder.new.text_field(:creation_date, :class => "def-input");[Escaped Output] FormBuilder.new.label(t("mission"), nil, :class => "lcd");[Escaped Output] FormBuilder.new.text_area(:mission, :size => "60x4");[Escaped Output] FormBuilder.new.label(t("visibility"), nil, :class => "lcd");[Escaped Output] FormBuilder.new.select(:visibility, options_for_select([["Public", "PUBLIC"], ["Closed", "CLOSED"], ["Secret", "SECRET"]], "0"));[Escaped Output] FormBuilder.new.label(t("front image"), nil, :class => "lcd");[Escaped Output] FormBuilder.new.file_field(:image);[Escaped Output] FormBuilder.new.label(t("cover image"), nil, :class => "lcd");[Escaped Output] FormBuilder.new.file_field(:cover);[Escaped Output] FormBuilder.new.submit(:class => "button-d4x"); end

groups/_form.["Template:groups/edit"]

[Escaped Output] pluralize(@group.errors.count, t("error"))
[Escaped Output] msg
[Escaped Output] FormBuilder.new.label(t("group name"), nil, :class => "lcd")
[Escaped Output] FormBuilder.new.text_field(:title, :size => 60, :class => "def-input")
[Escaped Output] FormBuilder.new.label(t("headline"), nil, :class => "lcd")
[Escaped Output] FormBuilder.new.text_field(:headline, :class => "def-input")
[Escaped Output] FormBuilder.new.label(t("description"), nil, :class => "lcd")
[Escaped Output] FormBuilder.new.text_area(:description, :size => "60x4")
[Escaped Output] FormBuilder.new.label(t("motto"), nil, :class => "lcd")
[Escaped Output] FormBuilder.new.text_area(:motto, :size => "60x4")
[Escaped Output] FormBuilder.new.label(t("founder"), nil, :class => "lcd")
[Escaped Output] FormBuilder.new.text_field(:founder, :class => "def-input")
[Escaped Output] FormBuilder.new.label(t("fundation"), nil, :class => "lcd")
[Escaped Output] FormBuilder.new.text_field(:creation_date, :class => "def-input")
[Escaped Output] FormBuilder.new.label(t("mission"), nil, :class => "lcd")
[Escaped Output] FormBuilder.new.text_area(:mission, :size => "60x4")
[Escaped Output] FormBuilder.new.label(t("visibility"), nil, :class => "lcd")
[Escaped Output] FormBuilder.new.select(:visibility, options_for_select([["Public", "PUBLIC"], ["Closed", "CLOSED"], ["Secret", "SECRET"]], "0"))
[Escaped Output] FormBuilder.new.label(t("front image"), nil, :class => "lcd")
[Escaped Output] FormBuilder.new.file_field(:image)
[Escaped Output] FormBuilder.new.label(t("cover image"), nil, :class => "lcd")
[Escaped Output] FormBuilder.new.file_field(:cover)
[Escaped Output] FormBuilder.new.submit(:class => "button-d4x")
[Escaped Output] form_for(@group) do; if @group.errors.any? then; [Escaped Output] pluralize(@group.errors.count, t("error")); @group.errors.full_messages.each do; [Escaped Output] msg; end;end;[Escaped Output] FormBuilder.new.label(t("group name"), nil, :class => "lcd");[Escaped Output] FormBuilder.new.text_field(:title, :size => 60, :class => "def-input");[Escaped Output] FormBuilder.new.label(t("headline"), nil, :class => "lcd");[Escaped Output] FormBuilder.new.text_field(:headline, :class => "def-input");[Escaped Output] FormBuilder.new.label(t("description"), nil, :class => "lcd");[Escaped Output] FormBuilder.new.text_area(:description, :size => "60x4");[Escaped Output] FormBuilder.new.label(t("motto"), nil, :class => "lcd");[Escaped Output] FormBuilder.new.text_area(:motto, :size => "60x4");[Escaped Output] FormBuilder.new.label(t("founder"), nil, :class => "lcd");[Escaped Output] FormBuilder.new.text_field(:founder, :class => "def-input");[Escaped Output] FormBuilder.new.label(t("fundation"), nil, :class => "lcd");[Escaped Output] FormBuilder.new.text_field(:creation_date, :class => "def-input");[Escaped Output] FormBuilder.new.label(t("mission"), nil, :class => "lcd");[Escaped Output] FormBuilder.new.text_area(:mission, :size => "60x4");[Escaped Output] FormBuilder.new.label(t("visibility"), nil, :class => "lcd");[Escaped Output] FormBuilder.new.select(:visibility, options_for_select([["Public", "PUBLIC"], ["Closed", "CLOSED"], ["Secret", "SECRET"]], "0"));[Escaped Output] FormBuilder.new.label(t("front image"), nil, :class => "lcd");[Escaped Output] FormBuilder.new.file_field(:image);[Escaped Output] FormBuilder.new.label(t("cover image"), nil, :class => "lcd");[Escaped Output] FormBuilder.new.file_field(:cover);[Escaped Output] FormBuilder.new.submit(:class => "button-d4x"); end

groups/_mini_post

[Escaped Output] image_tag(mini_post.user.avatar.url, :class => "thumbnail")
[Escaped Output] link_to(mini_post.user.nickname, mini_post.user)
[Escaped Output] button_to("", mini_post, :confirm => "Are you sure you want to delete this post?", :title => "delete post", :method => :delete, :size => "16x16", :class => "destroy2013", :id => "mini-post-del")
[Escaped Output] mini_post.content_html
[Escaped Output] image_tag(mini_post.image, :class => "mini-post-image")
[Escaped Output] user_feed(mini_post.id)
[Escaped Output] f.hidden_field(:mini_post_id, :value => mini_post.id.to_s)
[Escaped Output] button_to(t("unlike"), [mini_post_liking.mini_post, mini_post_liking], :confirm => "Are you sure you want to unlike?", :alt => "unlike", :class => "button-like", :method => :delete, :id => "bt-unlike")
[Escaped Output] form_for(mini_post_liking) do; [Escaped Output] f.hidden_field(:mini_post_id, :value => mini_post.id.to_s);[Escaped Output] button_to(t("unlike"), [mini_post_liking.mini_post, mini_post_liking], :confirm => "Are you sure you want to unlike?", :alt => "unlike", :class => "button-like", :method => :delete, :id => "bt-unlike"); end
[Escaped Output] f.hidden_field(:mini_post_id, :value => mini_post.id.to_s)
[Escaped Output] button_to(t("undislike"), [mini_post_liking.mini_post, mini_post_liking], :confirm => "Are you sure you want to undislike?", :alt => "undislike", :class => "button-like", :method => :delete, :id => "bt-undislike")
[Escaped Output] form_for(mini_post_liking) do; [Escaped Output] f.hidden_field(:mini_post_id, :value => mini_post.id.to_s);[Escaped Output] button_to(t("undislike"), [mini_post_liking.mini_post, mini_post_liking], :confirm => "Are you sure you want to undislike?", :alt => "undislike", :class => "button-like", :method => :delete, :id => "bt-undislike"); end
[Escaped Output] f.hidden_field(:mini_post_id, :value => mini_post.id.to_s)
[Escaped Output] f.hidden_field(:liking, :value => true)
[Escaped Output] submit_tag(t("like"), :name => "feed", :id => "feed-icon-2013", :class => "button-like")
[Escaped Output] form_for(mini_post.mini_post_liking.build) do; [Escaped Output] f.hidden_field(:mini_post_id, :value => mini_post.id.to_s);[Escaped Output] f.hidden_field(:liking, :value => true);[Escaped Output] submit_tag(t("like"), :name => "feed", :id => "feed-icon-2013", :class => "button-like"); end
[Escaped Output] f.hidden_field(:mini_post_id, :value => mini_post.id.to_s)
[Escaped Output] f.hidden_field(:liking, :value => false)
[Escaped Output] submit_tag(t("dislike"), :name => "feed", :id => "feed-icon-2013", :class => "button-like")
[Escaped Output] form_for(mini_post.mini_post_liking.build) do; [Escaped Output] f.hidden_field(:mini_post_id, :value => mini_post.id.to_s);[Escaped Output] f.hidden_field(:liking, :value => false);[Escaped Output] submit_tag(t("dislike"), :name => "feed", :id => "feed-icon-2013", :class => "button-like"); end
[Escaped Output] time_ago_in_words(mini_post.created_at)
[Escaped Output] t("ago")
[Escaped Output] tot_likes_13(mini_post.id)
[Escaped Output] image_tag(mpcomment.user.avatar.url, :class => "thumbnail-comment")
[Escaped Output] link_to(mpcomment.user.nickname, mpcomment.user)
[Escaped Output] raw(cr2br(h(mpcomment.content)))
[Escaped Output] button_to("", [mpcomment.mini_post, mpcomment], :class => "destroy2013", :confirm => "are you sure?", :method => :delete)
[Escaped Output] time_ago_in_words(mpcomment.created_at)
[Escaped Output] t("ago")
[Escaped Output] user_feed_comm(mpcomment.id)
[Escaped Output] f.hidden_field(:mini_post_comment_liking_id, :value => mini_post_comm_liking.id.to_s)
[Escaped Output] button_to(t("unlike"), mini_post_comm_liking, :class => "button-unlike", :confirm => "Are you sure?", :title => "delete_comment", :method => :delete, :id => "del-comment")
[Escaped Output] form_for(mini_post_comm_liking) do; [Escaped Output] f.hidden_field(:mini_post_comment_liking_id, :value => mini_post_comm_liking.id.to_s);[Escaped Output] button_to(t("unlike"), mini_post_comm_liking, :class => "button-unlike", :confirm => "Are you sure?", :title => "delete_comment", :method => :delete, :id => "del-comment"); end
[Escaped Output] f.hidden_field(:mini_post_comment_liking_id, :value => mini_post_comm_liking.id.to_s)
[Escaped Output] button_to(t("undislike"), mini_post_comm_liking, :class => "button-undislike", :confirm => "Are you sure?", :title => "delete_comment", :method => :delete, :id => "del-comment")
[Escaped Output] form_for(mini_post_comm_liking) do; [Escaped Output] f.hidden_field(:mini_post_comment_liking_id, :value => mini_post_comm_liking.id.to_s);[Escaped Output] button_to(t("undislike"), mini_post_comm_liking, :class => "button-undislike", :confirm => "Are you sure?", :title => "delete_comment", :method => :delete, :id => "del-comment"); end
[Escaped Output] f.hidden_field(:liking, :value => true)
[Escaped Output] f.hidden_field(:mini_post_comment_id, :value => mpcomment.id.to_s)
[Escaped Output] submit_tag(t("like"), :name => "feed", :id => "feed-icon-2013", :class => "button-like")
[Escaped Output] form_for(mpcomment.mini_post_comment_liking.build) do; [Escaped Output] f.hidden_field(:liking, :value => true);[Escaped Output] f.hidden_field(:mini_post_comment_id, :value => mpcomment.id.to_s);[Escaped Output] submit_tag(t("like"), :name => "feed", :id => "feed-icon-2013", :class => "button-like"); end
[Escaped Output] f.hidden_field(:liking, :value => false)
[Escaped Output] f.hidden_field(:mini_post_comment_id, :value => mpcomment.id.to_s)
[Escaped Output] submit_tag(t("dislike"), :name => "feed", :id => "feed-icon-2013", :class => "button-like")
[Escaped Output] form_for(mpcomment.mini_post_comment_liking.build) do; [Escaped Output] f.hidden_field(:liking, :value => false);[Escaped Output] f.hidden_field(:mini_post_comment_id, :value => mpcomment.id.to_s);[Escaped Output] submit_tag(t("dislike"), :name => "feed", :id => "feed-icon-2013", :class => "button-like"); end
[Escaped Output] f.text_field(:content, :size => "50x1", :id => "comment-textbox", :value => t("newcomment"), :class => "def-input")
[Escaped Output] f.submit("", :id => "comment-button", :class => "addcomment", :mouseover => "/images/comment1.png", :title => t("comment"))
[Escaped Output] form_for([mini_post, mini_post.mini_post_comment.build]) do; [Escaped Output] f.text_field(:content, :size => "50x1", :id => "comment-textbox", :value => t("newcomment"), :class => "def-input");[Escaped Output] f.submit("", :id => "comment-button", :class => "addcomment", :mouseover => "/images/comment1.png", :title => t("comment")); end

groups/_mini_post.["Template:groups/show"]

[Escaped Output] image_tag((Unresolved Model).new.user.avatar.url, :class => "thumbnail")
[Escaped Output] link_to((Unresolved Model).new.user.nickname, (Unresolved Model).new.user)
[Escaped Output] button_to("", (Unresolved Model).new, :confirm => "Are you sure you want to delete this post?", :title => "delete post", :method => :delete, :size => "16x16", :class => "destroy2013", :id => "mini-post-del")
[Escaped Output] (Unresolved Model).new.content_html
[Escaped Output] image_tag((Unresolved Model).new.image, :class => "mini-post-image")
[Escaped Output] user_feed((Unresolved Model).new.id)
[Escaped Output] FormBuilder.new.hidden_field(:mini_post_id, :value => (Unresolved Model).new.id.to_s)
[Escaped Output] button_to(t("unlike"), [mini_post_liking.mini_post, mini_post_liking], :confirm => "Are you sure you want to unlike?", :alt => "unlike", :class => "button-like", :method => :delete, :id => "bt-unlike")
[Escaped Output] form_for(mini_post_liking) do; [Escaped Output] FormBuilder.new.hidden_field(:mini_post_id, :value => (Unresolved Model).new.id.to_s);[Escaped Output] button_to(t("unlike"), [mini_post_liking.mini_post, mini_post_liking], :confirm => "Are you sure you want to unlike?", :alt => "unlike", :class => "button-like", :method => :delete, :id => "bt-unlike"); end
[Escaped Output] FormBuilder.new.hidden_field(:mini_post_id, :value => (Unresolved Model).new.id.to_s)
[Escaped Output] button_to(t("undislike"), [mini_post_liking.mini_post, mini_post_liking], :confirm => "Are you sure you want to undislike?", :alt => "undislike", :class => "button-like", :method => :delete, :id => "bt-undislike")
[Escaped Output] form_for(mini_post_liking) do; [Escaped Output] FormBuilder.new.hidden_field(:mini_post_id, :value => (Unresolved Model).new.id.to_s);[Escaped Output] button_to(t("undislike"), [mini_post_liking.mini_post, mini_post_liking], :confirm => "Are you sure you want to undislike?", :alt => "undislike", :class => "button-like", :method => :delete, :id => "bt-undislike"); end
[Escaped Output] FormBuilder.new.hidden_field(:mini_post_id, :value => (Unresolved Model).new.id.to_s)
[Escaped Output] FormBuilder.new.hidden_field(:liking, :value => true)
[Escaped Output] submit_tag(t("like"), :name => "feed", :id => "feed-icon-2013", :class => "button-like")
[Escaped Output] form_for((Unresolved Model).new.mini_post_liking.build) do; [Escaped Output] FormBuilder.new.hidden_field(:mini_post_id, :value => (Unresolved Model).new.id.to_s);[Escaped Output] FormBuilder.new.hidden_field(:liking, :value => true);[Escaped Output] submit_tag(t("like"), :name => "feed", :id => "feed-icon-2013", :class => "button-like"); end
[Escaped Output] FormBuilder.new.hidden_field(:mini_post_id, :value => (Unresolved Model).new.id.to_s)
[Escaped Output] FormBuilder.new.hidden_field(:liking, :value => false)
[Escaped Output] submit_tag(t("dislike"), :name => "feed", :id => "feed-icon-2013", :class => "button-like")
[Escaped Output] form_for((Unresolved Model).new.mini_post_liking.build) do; [Escaped Output] FormBuilder.new.hidden_field(:mini_post_id, :value => (Unresolved Model).new.id.to_s);[Escaped Output] FormBuilder.new.hidden_field(:liking, :value => false);[Escaped Output] submit_tag(t("dislike"), :name => "feed", :id => "feed-icon-2013", :class => "button-like"); end
[Escaped Output] time_ago_in_words((Unresolved Model).new.created_at)
[Escaped Output] t("ago")
[Escaped Output] tot_likes_13((Unresolved Model).new.id)
[Escaped Output] image_tag(mpcomment.user.avatar.url, :class => "thumbnail-comment")
[Escaped Output] link_to(mpcomment.user.nickname, mpcomment.user)
[Escaped Output] raw(cr2br(h(mpcomment.content)))
[Escaped Output] button_to("", [mpcomment.mini_post, mpcomment], :class => "destroy2013", :confirm => "are you sure?", :method => :delete)
[Escaped Output] time_ago_in_words(mpcomment.created_at)
[Escaped Output] t("ago")
[Escaped Output] user_feed_comm(mpcomment.id)
[Escaped Output] FormBuilder.new.hidden_field(:mini_post_comment_liking_id, :value => mini_post_comm_liking.id.to_s)
[Escaped Output] button_to(t("unlike"), mini_post_comm_liking, :class => "button-unlike", :confirm => "Are you sure?", :title => "delete_comment", :method => :delete, :id => "del-comment")
[Escaped Output] form_for(mini_post_comm_liking) do; [Escaped Output] FormBuilder.new.hidden_field(:mini_post_comment_liking_id, :value => mini_post_comm_liking.id.to_s);[Escaped Output] button_to(t("unlike"), mini_post_comm_liking, :class => "button-unlike", :confirm => "Are you sure?", :title => "delete_comment", :method => :delete, :id => "del-comment"); end
[Escaped Output] FormBuilder.new.hidden_field(:mini_post_comment_liking_id, :value => mini_post_comm_liking.id.to_s)
[Escaped Output] button_to(t("undislike"), mini_post_comm_liking, :class => "button-undislike", :confirm => "Are you sure?", :title => "delete_comment", :method => :delete, :id => "del-comment")
[Escaped Output] form_for(mini_post_comm_liking) do; [Escaped Output] FormBuilder.new.hidden_field(:mini_post_comment_liking_id, :value => mini_post_comm_liking.id.to_s);[Escaped Output] button_to(t("undislike"), mini_post_comm_liking, :class => "button-undislike", :confirm => "Are you sure?", :title => "delete_comment", :method => :delete, :id => "del-comment"); end
[Escaped Output] FormBuilder.new.hidden_field(:liking, :value => true)
[Escaped Output] FormBuilder.new.hidden_field(:mini_post_comment_id, :value => mpcomment.id.to_s)
[Escaped Output] submit_tag(t("like"), :name => "feed", :id => "feed-icon-2013", :class => "button-like")
[Escaped Output] form_for(mpcomment.mini_post_comment_liking.build) do; [Escaped Output] FormBuilder.new.hidden_field(:liking, :value => true);[Escaped Output] FormBuilder.new.hidden_field(:mini_post_comment_id, :value => mpcomment.id.to_s);[Escaped Output] submit_tag(t("like"), :name => "feed", :id => "feed-icon-2013", :class => "button-like"); end
[Escaped Output] FormBuilder.new.hidden_field(:liking, :value => false)
[Escaped Output] FormBuilder.new.hidden_field(:mini_post_comment_id, :value => mpcomment.id.to_s)
[Escaped Output] submit_tag(t("dislike"), :name => "feed", :id => "feed-icon-2013", :class => "button-like")
[Escaped Output] form_for(mpcomment.mini_post_comment_liking.build) do; [Escaped Output] FormBuilder.new.hidden_field(:liking, :value => false);[Escaped Output] FormBuilder.new.hidden_field(:mini_post_comment_id, :value => mpcomment.id.to_s);[Escaped Output] submit_tag(t("dislike"), :name => "feed", :id => "feed-icon-2013", :class => "button-like"); end
[Escaped Output] FormBuilder.new.text_field(:content, :size => "50x1", :id => "comment-textbox", :value => t("newcomment"), :class => "def-input")
[Escaped Output] FormBuilder.new.submit("", :id => "comment-button", :class => "addcomment", :mouseover => "/images/comment1.png", :title => t("comment"))
[Escaped Output] form_for([(Unresolved Model).new, (Unresolved Model).new.mini_post_comment.build]) do; [Escaped Output] FormBuilder.new.text_field(:content, :size => "50x1", :id => "comment-textbox", :value => t("newcomment"), :class => "def-input");[Escaped Output] FormBuilder.new.submit("", :id => "comment-button", :class => "addcomment", :mouseover => "/images/comment1.png", :title => t("comment")); end

groups/edit

[Escaped Output] link_to(image_tag("arrow_left.png", :border => 0, :title => t("back")), exploits_path)
[Escaped Output] d4x_sanitizer(t("change group settings"))
[Escaped Output] render(partial => "form", {})

groups/edit.["GroupsController#edit"]

[Escaped Output] link_to(image_tag("arrow_left.png", :border => 0, :title => t("back")), exploits_path)
[Escaped Output] d4x_sanitizer(t("change group settings"))
[Escaped Output] render(partial => "form", {})

groups/index

[Escaped Output] link_to(image_tag("group_add.png", :border => 0, :mouseover => "group_add.png", :title => "Create a New Group"), new_group_path)
[Escaped Output] d4x_sanitizer(t("founded groups"))
[Escaped Output] d4x_sanitizer(t("group name"))
[Escaped Output] d4x_sanitizer(t("group founder"))
[Escaped Output] d4x_sanitizer(t("visibility"))
[Escaped Output] d4x_sanitizer(t("group members"))
[Escaped Output] d4x_sanitizer(t("group admins"))
[Escaped Output] d4x_sanitizer(t("group creation"))
[Escaped Output] group.title
[Escaped Output] group.founder
[Escaped Output] group.visibility
[Escaped Output] group.group_members.count
[Escaped Output] group.admins
[Escaped Output] group.creation_date
[Escaped Output] link_to(image_tag("group.png", :border => 0, :mouseover => "group_edit.png", :title => d4x_sanitizer(t("icon-show")), :size => "16x16"), group)
[Escaped Output] link_to(image_tag("group_edit.png", :border => 0, :mouseover => "group_edit.png", :title => d4x_sanitizer(t("icon-edit")), :size => "16x16"), edit_group_path(group))
[Escaped Output] button_to("", group, :confirm => "Are you sure?", :method => :delete, :class => "udestroy", :name => "destroy", :size => "16x16")
[Escaped Output] group.title
[Escaped Output] group.founder
[Escaped Output] group.group_members.count
[Escaped Output] group.admins
[Escaped Output] group.creation_date
[Escaped Output] link_to(image_tag("group.png", :border => 0, :mouseover => "group_edit.png", :title => d4x_sanitizer(t("icon-show")), :size => "16x16"), group)
[Escaped Output] link_to(image_tag("group_edit.png", :border => 0, :mouseover => "group_edit.png", :title => d4x_sanitizer(t("icon-edit")), :size => "16x16"), edit_group_path(group))
[Escaped Output] button_to("", group, :confirm => "Are you sure?", :method => :delete, :class => "udestroy", :name => "destroy", :size => "16x16")

groups/index.["GroupsController#index"]

[Escaped Output] link_to(image_tag("group_add.png", :border => 0, :mouseover => "group_add.png", :title => "Create a New Group"), new_group_path)
[Escaped Output] d4x_sanitizer(t("founded groups"))
[Escaped Output] d4x_sanitizer(t("group name"))
[Escaped Output] d4x_sanitizer(t("group founder"))
[Escaped Output] d4x_sanitizer(t("visibility"))
[Escaped Output] d4x_sanitizer(t("group members"))
[Escaped Output] d4x_sanitizer(t("group admins"))
[Escaped Output] d4x_sanitizer(t("group creation"))
[Escaped Output] Group.new.title
[Escaped Output] Group.new.founder
[Escaped Output] Group.new.visibility
[Escaped Output] Group.new.group_members.count
[Escaped Output] Group.new.admins
[Escaped Output] Group.new.creation_date
[Escaped Output] link_to(image_tag("group.png", :border => 0, :mouseover => "group_edit.png", :title => d4x_sanitizer(t("icon-show")), :size => "16x16"), Group.new)
[Escaped Output] link_to(image_tag("group_edit.png", :border => 0, :mouseover => "group_edit.png", :title => d4x_sanitizer(t("icon-edit")), :size => "16x16"), edit_group_path(Group.new))
[Escaped Output] button_to("", Group.new, :confirm => "Are you sure?", :method => :delete, :class => "udestroy", :name => "destroy", :size => "16x16")
[Escaped Output] Group.new.title
[Escaped Output] Group.new.founder
[Escaped Output] Group.new.group_members.count
[Escaped Output] Group.new.admins
[Escaped Output] Group.new.creation_date
[Escaped Output] link_to(image_tag("group.png", :border => 0, :mouseover => "group_edit.png", :title => d4x_sanitizer(t("icon-show")), :size => "16x16"), Group.new)
[Escaped Output] link_to(image_tag("group_edit.png", :border => 0, :mouseover => "group_edit.png", :title => d4x_sanitizer(t("icon-edit")), :size => "16x16"), edit_group_path(Group.new))
[Escaped Output] button_to("", Group.new, :confirm => "Are you sure?", :method => :delete, :class => "udestroy", :name => "destroy", :size => "16x16")

groups/new

[Escaped Output] link_to(image_tag("arrow_left.png", :border => 0, :title => d4x_sanitizer(t("back"))), groups_path)
[Escaped Output] d4x_sanitizer(t("creating new group"))
[Escaped Output] render(partial => "form", {})

groups/new.["GroupsController#new"]

[Escaped Output] link_to(image_tag("arrow_left.png", :border => 0, :title => d4x_sanitizer(t("back"))), groups_path)
[Escaped Output] d4x_sanitizer(t("creating new group"))
[Escaped Output] render(partial => "form", {})

groups/show

[Escaped Output] label_tag(@group.title, nil, :class => "lcd-giant yellow")
[Escaped Output] label_tag(@group.title, nil, :class => "lcd-giant yellow")
[Escaped Output] label_tag(@group.visibility, nil, :class => "lcd lcd-bigger orange")
[Escaped Output] label_tag("Searchable; Contents for Members; Public Membership: Just Join", nil, :class => "d4x-text yellow")
[Escaped Output] label_tag("Searchable, Membership by Invite or Authorized Request", nil, :class => "yellow")
[Escaped Output] label_tag("Not searchable; Membership by Invite Only", nil, :class => "yellow")
[Escaped Output] hidden_field_tag(:group_id, @group.id)
[Escaped Output] hidden_field_tag(:user_id, current_user.id)
[Escaped Output] submit_tag("Join Group Now", :class => "button-d4x-2013")
[Escaped Output] form_tag("/join-group") do; [Escaped Output] hidden_field_tag(:group_id, @group.id);[Escaped Output] hidden_field_tag(:user_id, current_user.id);[Escaped Output] submit_tag("Join Group Now", :class => "button-d4x-2013"); end
[Escaped Output] hidden_field_tag(:group_id, @group.id)
[Escaped Output] hidden_field_tag(:user_id, current_user.id)
[Escaped Output] submit_tag("Request Membership", :class => "button-d4x-2013")
[Escaped Output] form_tag("/request-membership") do; [Escaped Output] hidden_field_tag(:group_id, @group.id);[Escaped Output] hidden_field_tag(:user_id, current_user.id);[Escaped Output] submit_tag("Request Membership", :class => "button-d4x-2013"); end
[Escaped Output] image_tag(@group.image.url, :class => "group-image")
[Escaped Output] label_tag("GROUP DESCRIPTION", nil, :class => "lcd lcd-bigger orange")
[Escaped Output] @group.description
[Escaped Output] image_tag("user_gray.png", :class => "bullet")
[Escaped Output] label_tag(d4x_sanitizer(t("founder")), nil, :class => "lcd orange")
[Escaped Output] label_tag(@group.founder, nil, :class => "lcd yellow")
[Escaped Output] label_tag(d4x_sanitizer(t("oon")), nil, :class => "lcd orange")
[Escaped Output] label_tag(@group.creation_date.to_s(:long), nil, :class => "lcd orange")
[Escaped Output] label_tag(time_ago_in_words(@group.creation_date), nil, :class => "lcd yellow")
[Escaped Output] label_tag(d4x_sanitizer(t("ago")), nil, :class => "lcd yellow")
[Escaped Output] image_tag("user_green.png", :class => "middle")
[Escaped Output] label_tag(d4x_sanitizer(t("group-admins")), nil, :class => "lcd orange")
[Escaped Output] @group.admins
[Escaped Output] image_tag("group.png", :class => "middle")
[Escaped Output] label_tag(d4x_sanitizer(t("group-members")), nil, :class => "lcd orange")
[Escaped Output] @group.group_members.count
[Escaped Output] image_tag("user_red.png", :class => "middle")
[Escaped Output] label_tag(d4x_sanitizer(t("last-member")), nil, :class => "lcd orange")
[Escaped Output] last_member(@group.id)
[Escaped Output] label_tag("Release Membership", nil, :class => "lcd orange")
[Escaped Output] hidden_field_tag(:group_id, @group.id)
[Escaped Output] hidden_field_tag(:user_id, current_user.id)
[Escaped Output] submit_tag("Leave Group Now", :class => "button-d4x-2013 middle")
[Escaped Output] form_tag("/leave-group") do; [Escaped Output] hidden_field_tag(:group_id, @group.id);[Escaped Output] hidden_field_tag(:user_id, current_user.id);[Escaped Output] submit_tag("Leave Group Now", :class => "button-d4x-2013 middle"); end
[Escaped Output] render(partial => "shared/widget_group_member", {})
[Escaped Output] label_tag("Tell a friend, send an Invite", nil, :class => "lcd orange")
[Escaped Output] hidden_field_tag(:group_id, @group.id)
[Escaped Output] f.text_field(:reason, :class => "def-input center", :value => (((("Invitation to join " + @group.title) + " group (") + @group.id.to_s) + ")"))
[Escaped Output] f.text_field(:subject, :class => "def-input center", :value => "Your friend name")
[Escaped Output] f.email_field(:recipient_email, :class => "center", :value => "Your friend email address")
[Escaped Output] f.submit("Send Invitation to Join this Group", :class => "button-d4x-2013")
[Escaped Output] form_for(@invitation) do; [Escaped Output] hidden_field_tag(:group_id, @group.id);[Escaped Output] f.text_field(:reason, :class => "def-input center", :value => (((("Invitation to join " + @group.title) + " group (") + @group.id.to_s) + ")"));[Escaped Output] f.text_field(:subject, :class => "def-input center", :value => "Your friend name");[Escaped Output] f.email_field(:recipient_email, :class => "center", :value => "Your friend email address");[Escaped Output] f.submit("Send Invitation to Join this Group", :class => "button-d4x-2013"); end
[Escaped Output] label_tag("Add more Connections", nil, :class => "lcd orange")
[Escaped Output] f.hidden_field_tag(:group_id, @group.id.to_s)
[Escaped Output] f.hidden_field_tag(:user_id, @group.id)
[Escaped Output] f.hidden_field_tag(:role, "Member")
[Escaped Output] f.hidden_field_tag(:invited_by, current_user.nickname)
[Escaped Output] f.submit("Add Person to this Group", :class => "button-d4x-2013")
[Escaped Output] form_for(@group_member) do; [Escaped Output] f.hidden_field_tag(:group_id, @group.id.to_s);[Escaped Output] f.hidden_field_tag(:user_id, @group.id);[Escaped Output] f.hidden_field_tag(:role, "Member");[Escaped Output] f.hidden_field_tag(:invited_by, current_user.nickname);[Escaped Output] f.submit("Add Person to this Group", :class => "button-d4x-2013"); end
[Escaped Output] label_tag(d4x_sanitizer(t("group-wall")), nil, :class => "lcd lcd-bigger orange")
[Escaped Output] render(partial => "shared/d4x_group_share", {})
[Escaped Output] @mini_posts.to_a.last.created_at
[Escaped Output] render(partial => "mini_post", { :collection => (@mini_posts) })
[Escaped Output] image_tag("loader-girlie001.gif", :class => "loading none")
[Escaped Output] image_tag("loading.gif", :class => "loading none")

groups/show.["GroupsController#show"]

[Escaped Output] label_tag(@group.title, nil, :class => "lcd-giant yellow")
[Escaped Output] label_tag(@group.title, nil, :class => "lcd-giant yellow")
[Escaped Output] label_tag(@group.visibility, nil, :class => "lcd lcd-bigger orange")
[Escaped Output] label_tag("Searchable; Contents for Members; Public Membership: Just Join", nil, :class => "d4x-text yellow")
[Escaped Output] label_tag("Searchable, Membership by Invite or Authorized Request", nil, :class => "yellow")
[Escaped Output] label_tag("Not searchable; Membership by Invite Only", nil, :class => "yellow")
[Escaped Output] hidden_field_tag(:group_id, @group.id)
[Escaped Output] hidden_field_tag(:user_id, current_user.id)
[Escaped Output] submit_tag("Join Group Now", :class => "button-d4x-2013")
[Escaped Output] form_tag("/join-group") do; [Escaped Output] hidden_field_tag(:group_id, @group.id);[Escaped Output] hidden_field_tag(:user_id, current_user.id);[Escaped Output] submit_tag("Join Group Now", :class => "button-d4x-2013"); end
[Escaped Output] hidden_field_tag(:group_id, @group.id)
[Escaped Output] hidden_field_tag(:user_id, current_user.id)
[Escaped Output] submit_tag("Request Membership", :class => "button-d4x-2013")
[Escaped Output] form_tag("/request-membership") do; [Escaped Output] hidden_field_tag(:group_id, @group.id);[Escaped Output] hidden_field_tag(:user_id, current_user.id);[Escaped Output] submit_tag("Request Membership", :class => "button-d4x-2013"); end
[Escaped Output] image_tag(@group.image.url, :class => "group-image")
[Escaped Output] label_tag("GROUP DESCRIPTION", nil, :class => "lcd lcd-bigger orange")
[Escaped Output] @group.description
[Escaped Output] image_tag("user_gray.png", :class => "bullet")
[Escaped Output] label_tag(d4x_sanitizer(t("founder")), nil, :class => "lcd orange")
[Escaped Output] label_tag(@group.founder, nil, :class => "lcd yellow")
[Escaped Output] label_tag(d4x_sanitizer(t("oon")), nil, :class => "lcd orange")
[Escaped Output] label_tag(@group.creation_date.to_s(:long), nil, :class => "lcd orange")
[Escaped Output] label_tag(time_ago_in_words(@group.creation_date), nil, :class => "lcd yellow")
[Escaped Output] label_tag(d4x_sanitizer(t("ago")), nil, :class => "lcd yellow")
[Escaped Output] image_tag("user_green.png", :class => "middle")
[Escaped Output] label_tag(d4x_sanitizer(t("group-admins")), nil, :class => "lcd orange")
[Escaped Output] @group.admins
[Escaped Output] image_tag("group.png", :class => "middle")
[Escaped Output] label_tag(d4x_sanitizer(t("group-members")), nil, :class => "lcd orange")
[Escaped Output] @group.group_members.count
[Escaped Output] image_tag("user_red.png", :class => "middle")
[Escaped Output] label_tag(d4x_sanitizer(t("last-member")), nil, :class => "lcd orange")
[Escaped Output] last_member(@group.id)
[Escaped Output] label_tag("Release Membership", nil, :class => "lcd orange")
[Escaped Output] hidden_field_tag(:group_id, @group.id)
[Escaped Output] hidden_field_tag(:user_id, current_user.id)
[Escaped Output] submit_tag("Leave Group Now", :class => "button-d4x-2013 middle")
[Escaped Output] form_tag("/leave-group") do; [Escaped Output] hidden_field_tag(:group_id, @group.id);[Escaped Output] hidden_field_tag(:user_id, current_user.id);[Escaped Output] submit_tag("Leave Group Now", :class => "button-d4x-2013 middle"); end
[Escaped Output] render(partial => "shared/widget_group_member", {})
[Escaped Output] label_tag("Tell a friend, send an Invite", nil, :class => "lcd orange")
[Escaped Output] hidden_field_tag(:group_id, @group.id)
[Escaped Output] FormBuilder.new.text_field(:reason, :class => "def-input center", :value => (((("Invitation to join " + @group.title) + " group (") + @group.id.to_s) + ")"))
[Escaped Output] FormBuilder.new.text_field(:subject, :class => "def-input center", :value => "Your friend name")
[Escaped Output] FormBuilder.new.email_field(:recipient_email, :class => "center", :value => "Your friend email address")
[Escaped Output] FormBuilder.new.submit("Send Invitation to Join this Group", :class => "button-d4x-2013")
[Escaped Output] form_for(Invitation.new) do; [Escaped Output] hidden_field_tag(:group_id, @group.id);[Escaped Output] FormBuilder.new.text_field(:reason, :class => "def-input center", :value => (((("Invitation to join " + @group.title) + " group (") + @group.id.to_s) + ")"));[Escaped Output] FormBuilder.new.text_field(:subject, :class => "def-input center", :value => "Your friend name");[Escaped Output] FormBuilder.new.email_field(:recipient_email, :class => "center", :value => "Your friend email address");[Escaped Output] FormBuilder.new.submit("Send Invitation to Join this Group", :class => "button-d4x-2013"); end
[Escaped Output] label_tag("Add more Connections", nil, :class => "lcd orange")
[Escaped Output] FormBuilder.new.hidden_field_tag(:group_id, @group.id.to_s)
[Escaped Output] FormBuilder.new.hidden_field_tag(:user_id, @group.id)
[Escaped Output] FormBuilder.new.hidden_field_tag(:role, "Member")
[Escaped Output] FormBuilder.new.hidden_field_tag(:invited_by, current_user.nickname)
[Escaped Output] FormBuilder.new.submit("Add Person to this Group", :class => "button-d4x-2013")
[Escaped Output] form_for(GroupMember.new) do; [Escaped Output] FormBuilder.new.hidden_field_tag(:group_id, @group.id.to_s);[Escaped Output] FormBuilder.new.hidden_field_tag(:user_id, @group.id);[Escaped Output] FormBuilder.new.hidden_field_tag(:role, "Member");[Escaped Output] FormBuilder.new.hidden_field_tag(:invited_by, current_user.nickname);[Escaped Output] FormBuilder.new.submit("Add Person to this Group", :class => "button-d4x-2013"); end
[Escaped Output] label_tag(d4x_sanitizer(t("group-wall")), nil, :class => "lcd lcd-bigger orange")
[Escaped Output] render(partial => "shared/d4x_group_share", {})
[Escaped Output] group_posts(@group.id).to_a.last.created_at
[Escaped Output] render(partial => "mini_post", { :collection => group_posts(@group.id) })
[Escaped Output] image_tag("loader-girlie001.gif", :class => "loading none")
[Escaped Output] image_tag("loading.gif", :class => "loading none")

hashtags/index

[Escaped Output] link_to(hashtag.name, hashtag_path(hashtag.name))

hashtags/index.["HashtagsController#index"]

[Escaped Output] link_to(hashtag.name, hashtag_path(hashtag.name))

hashtags/show

[Escaped Output] params[:hashtag]
[Escaped Output] render_hashtaggable(hashtagged)
[Escaped Output] params[:hashtag]

hashtags/show.["HashtagsController#show"]

[Escaped Output] params[:hashtag]
[Escaped Output] render_hashtaggable(hashtagged)
[Escaped Output] params[:hashtag]

index/_footer_resp

[Escaped Output] link_to(image_tag("us.png", :alt => "English", :title => "English", :class => "d4xicon"), url_for(:locale => "en"))
[Escaped Output] link_to(image_tag("es.png", :alt => "Spanish", :title => "Spanish", :class => "d4xicon"), url_for(:locale => "es"))
[Escaped Output] link_to(image_tag("fr.png", :alt => "French", :title => "French", :class => "d4xicon"), url_for(:locale => "fr"))
[Escaped Output] link_to(image_tag("de.png", :alt => "German", :title => "German", :class => "d4xicon"), url_for(:locale => "de"))
[Escaped Output] link_to(image_tag("england.png", :alt => "English", :title => "English", :class => "d4xicon"), url_for(:locale => "en"))
[Escaped Output] link_to(image_tag("it.png", :title => "Italian", :alt => "Italian", :class => "d4xicon"), url_for(:locale => "it"))
[Escaped Output] link_to(image_tag("ru.png", :alt => "Russian", :title => "Russian", :class => "d4xicon"), url_for(:locale => "ru"))
[Escaped Output] link_to(image_tag("pt.png", :alt => "Portuguese", :title => "Portuguese", :class => "d4xicon"), url_for(:locale => "pt"))
[Escaped Output] link_to(image_tag("nl.png", :alt => "Dutch", :title => "Dutch", :class => "d4xicon"), url_for(:locale => "nl"))
[Escaped Output] link_to(image_tag("cn.png", :alt => "Chinese", :title => "Chinese", :class => "d4xicon"), url_for(:locale => "cn"))
[Escaped Output] link_to(image_tag("se.png", :alt => "Swedish", :title => "Swedish", :class => "d4xicon"), url_for(:locale => "se"))
[Escaped Output] get_setting_value("PROJECT_COPYRIGHT_YEARS")
[Escaped Output] link_to(get_setting_value("PROJECT_NAME"), "/about")
[Escaped Output] d4x_sanitizer(t("all_rights"))

index/d4x337

[Escaped Output] hidden_field_tag(:invitation_token, :value => params[:invitation_token])
[Escaped Output] hidden_field_tag(:invite_email, :value => invited_email)
[Escaped Output] hidden_field_tag(:invite_name, :value => invited_name)
[Escaped Output] d4x_sanitizer(t("invitated sir"))
[Escaped Output] d4x_sanitizer(t("invalid invite"))
[Escaped Output] hidden_field_tag(:request_token, :value => params[:request_token])
[Escaped Output] hidden_field_tag(:request_email, :value => requested_email)
[Escaped Output] hidden_field_tag(:request_name, :value => requested_name)
[Escaped Output] d4x_sanitizer(t("requested sir"))
[Escaped Output] d4x_sanitizer(t("invalid request"))
[Escaped Output] get_setting_value("PROJECT_NAME")
[Escaped Output] t("ideology")
[Escaped Output] t("services")
[Escaped Output] t("about")
[Escaped Output] t("contact")
[Escaped Output] d4x_sanitizer(t("register"))
[Escaped Output] d4x_sanitizer(t("login"))
[Escaped Output] label_tag(d4x_sanitizer(alert))
[Escaped Output] label_tag(d4x_sanitizer(notice))
[Escaped Output] get_setting_value("PROJECT_NAME")
[Escaped Output] get_setting_value("PROJECT_MOTTO")
[Escaped Output] t("welcome")
[Escaped Output] d4x_sanitizer("enter")
[Escaped Output] t("hello")
[Escaped Output] t("who_we_are")
[Escaped Output] t("our ideology")
[Escaped Output] t("Effective Impact")
[Escaped Output] t("ICT Consultancy")
[Escaped Output] t("Effective")
[Escaped Output] t("Impact")
[Escaped Output] t("consultancy shot")
[Escaped Output] t("High Quality")
[Escaped Output] t("Software Engineering")
[Escaped Output] t("Cyber Security")
[Escaped Output] t("High Quality")
[Escaped Output] t("Cyber Security")
[Escaped Output] t("software e security shot")
[Escaped Output] t("Education")
[Escaped Output] t("Programming and ICT Security")
[Escaped Output] t("Rocketship")
[Escaped Output] t("Education")
[Escaped Output] t("education shot")
[Escaped Output] t("testimonials")
[Escaped Output] t("testimonial_quote_01")
[Escaped Output] t("testimonial_quote_02")
[Escaped Output] t("Services")
[Escaped Output] t("Cyber Security")
[Escaped Output] t("cyber security text")
[Escaped Output] t("Info")
[Escaped Output] t("menu-contact")
[Escaped Output] t("Cyber Security")
[Escaped Output] t("cybersecurity main")
[Escaped Output] t("why us")
[Escaped Output] t("cybersecurity whyus")
[Escaped Output] t("technologies")
[Escaped Output] t("cybersecurity technologies")
[Escaped Output] t("solutions")
[Escaped Output] t("cybersecurity solutions")
[Escaped Output] t("Software Engineering")
[Escaped Output] t("software engineering text")
[Escaped Output] t("Info")
[Escaped Output] t("Software Engineering")
[Escaped Output] t("software main")
[Escaped Output] t("why us")
[Escaped Output] t("software whyus")
[Escaped Output] t("technologies")
[Escaped Output] t("software technologies")
[Escaped Output] t("solutions")
[Escaped Output] t("software solutions")
[Escaped Output] t("Web Design")
[Escaped Output] t("web design text")
[Escaped Output] t("Info")
[Escaped Output] t("menu-contact")
[Escaped Output] t("Web Design")
[Escaped Output] t("webdesign main")
[Escaped Output] t("why us")
[Escaped Output] t("webdesign whyus")
[Escaped Output] t("technologies")
[Escaped Output] t("webdesign technologies")
[Escaped Output] t("solutions")
[Escaped Output] t("webdesign solutions")
[Escaped Output] t("Education")
[Escaped Output] t("education text")
[Escaped Output] t("Info")
[Escaped Output] t("Education")
[Escaped Output] t("education main")
[Escaped Output] t("why us")
[Escaped Output] t("education whyus")
[Escaped Output] t("technologies")
[Escaped Output] t("education technologies")
[Escaped Output] t("solutions")
[Escaped Output] t("education solutions")
[Escaped Output] t("ICT Services")
[Escaped Output] t("ict services text")
[Escaped Output] t("Info")
[Escaped Output] t("ICT Services")
[Escaped Output] t("ictservices main")
[Escaped Output] t("why us")
[Escaped Output] t("ictservices whyus")
[Escaped Output] t("technologies")
[Escaped Output] t("ictservices technologies")
[Escaped Output] t("solutions")
[Escaped Output] t("ictservices solutions")
[Escaped Output] t("Social Media")
[Escaped Output] t("social media text")
[Escaped Output] t("info")
[Escaped Output] t("login")
[Escaped Output] t("register")
[Escaped Output] t("Social Media")
[Escaped Output] t("home main")
[Escaped Output] t("tips")
[Escaped Output] t("home tips")
[Escaped Output] t("rules")
[Escaped Output] t("home rules")
[Escaped Output] t("philosophy")
[Escaped Output] t("home philosophy")
[Escaped Output] t("What is")
[Escaped Output] get_setting_value("PROJECT_NAME")
[Escaped Output] t("Our Mission")
[Escaped Output] t("our mission text")
[Escaped Output] t("How we started it")
[Escaped Output] t("how we started text01")
[Escaped Output] t("how we started text02")
[Escaped Output] t("Why?")
[Escaped Output] t("why text")
[Escaped Output] t("Favorite Quote")
[Escaped Output] t("favorite quote text")
[Escaped Output] t("Skills")
[Escaped Output] t("Software Engineering")
[Escaped Output] t("Web Design")
[Escaped Output] t("Cyber Security")
[Escaped Output] t("Education")
[Escaped Output] t("Consultancy")
[Escaped Output] t("Beginner")
[Escaped Output] t("Intermediate")
[Escaped Output] t("Pro")
[Escaped Output] t("Master")
[Escaped Output] t("Contact")
[Escaped Output] t("Where we are")
[Escaped Output] get_setting_value("PROJECT_NAME")
[Escaped Output] t("email")
[Escaped Output] get_setting_value("CONTACT_EMAIL")
[Escaped Output] t("Phone")
[Escaped Output] t("Mobile")
[Escaped Output] get_setting_value("MOBILE")
[Escaped Output] t("This section is required")
[Escaped Output] t("subject")
[Escaped Output] t("Phone")
[Escaped Output] t("This section is required")
[Escaped Output] t("fullname")
[Escaped Output] t("This section is required")
[Escaped Output] t("Email")
[Escaped Output] t("This section is required")
[Escaped Output] t("Message")
[Escaped Output] t("send")
[Escaped Output] t("Up")
[Escaped Output] link_to(image_tag("us.png", :alt => "English", :title => "English", :class => "d4xicon"), url_for(:locale => "en"))
[Escaped Output] link_to(image_tag("es.png", :alt => "Spanish", :title => "Spanish", :class => "d4xicon"), url_for(:locale => "es"))
[Escaped Output] link_to(image_tag("fr.png", :alt => "French", :title => "French", :class => "d4xicon"), url_for(:locale => "fr"))
[Escaped Output] link_to(image_tag("de.png", :alt => "German", :title => "German", :class => "d4xicon"), url_for(:locale => "de"))
[Escaped Output] link_to(image_tag("england.png", :alt => "English", :title => "English", :class => "d4xicon"), url_for(:locale => "en"))
[Escaped Output] link_to(image_tag("it.png", :title => "Italian", :alt => "Italian", :class => "d4xicon"), url_for(:locale => "it"))
[Escaped Output] link_to(image_tag("ru.png", :alt => "Russian", :title => "Russian", :class => "d4xicon"), url_for(:locale => "ru"))
[Escaped Output] link_to(image_tag("pt.png", :alt => "Portuguese", :title => "Portuguese", :class => "d4xicon"), url_for(:locale => "pt"))
[Escaped Output] link_to(image_tag("nl.png", :alt => "Dutch", :title => "Dutch", :class => "d4xicon"), url_for(:locale => "nl"))
[Escaped Output] link_to(image_tag("cn.png", :alt => "Chinese", :title => "Chinese", :class => "d4xicon"), url_for(:locale => "cn"))
[Escaped Output] link_to(image_tag("se.png", :alt => "Swedish", :title => "Swedish", :class => "d4xicon"), url_for(:locale => "se"))
[Escaped Output] get_setting_value("PROJECT_COPYRIGHT_YEARS")
[Escaped Output] link_to(get_setting_value("PROJECT_NAME"), "/about")
[Escaped Output] d4x_sanitizer(t("all_rights"))
[Escaped Output] javascript_include_tag("js/bootstrap.min.js")
[Escaped Output] javascript_include_tag("js/particles.min.js")
[Escaped Output] javascript_include_tag("js/particlesRun.js")
[Escaped Output] javascript_include_tag("js/jquery.mixitup.js")
[Escaped Output] javascript_include_tag("js/form-validator.min.js")
[Escaped Output] javascript_include_tag("js/jquery.inview.min.js")
[Escaped Output] javascript_include_tag("js/jquery.countTo.js")
[Escaped Output] javascript_include_tag("js/jquery.magnific-popup.min.js")
[Escaped Output] javascript_include_tag("js/scrollreveal.min.js")
[Escaped Output] javascript_include_tag("js/style-switcher.js")
[Escaped Output] javascript_include_tag("js/main.js")

index/index

[Escaped Output] hidden_field_tag(:invitation_token, :value => params[:invitation_token])
[Escaped Output] hidden_field_tag(:invite_email, :value => invited_email)
[Escaped Output] hidden_field_tag(:invite_name, :value => invited_name)
[Escaped Output] d4x_sanitizer(t("invitated sir"))
[Escaped Output] d4x_sanitizer(t("invalid invite"))
[Escaped Output] hidden_field_tag(:request_token, :value => params[:request_token])
[Escaped Output] hidden_field_tag(:request_email, :value => requested_email)
[Escaped Output] hidden_field_tag(:request_name, :value => requested_name)
[Escaped Output] d4x_sanitizer(t("requested sir"))
[Escaped Output] d4x_sanitizer(t("invalid request"))
[Escaped Output] get_setting_value("PROJECT_NAME")
[Escaped Output] t("home")
[Escaped Output] t("ideology")
[Escaped Output] t("services")
[Escaped Output] t("about")
[Escaped Output] t("contact")
[Escaped Output] d4x_sanitizer(t("register"))
[Escaped Output] d4x_sanitizer(t("login"))
[Escaped Output] label_tag(d4x_sanitizer(alert))
[Escaped Output] label_tag(d4x_sanitizer(notice))
[Escaped Output] get_setting_value("PROJECT_NAME")
[Escaped Output] t("welcome to")
[Escaped Output] get_setting_value("PROJECT_NAME")
[Escaped Output] t("hello")
[Escaped Output] t("who_we_are")
[Escaped Output] t("our ideology")
[Escaped Output] t("Effective Impact")
[Escaped Output] t("ICT Consultancy")
[Escaped Output] t("Effective")
[Escaped Output] t("Impact")
[Escaped Output] t("cyber security text")
[Escaped Output] t("High Quality")
[Escaped Output] t("Software Engineering")
[Escaped Output] t("Cyber Security")
[Escaped Output] t("High Quality")
[Escaped Output] t("Cyber Security")
[Escaped Output] t("software engineering text")
[Escaped Output] t("Education")
[Escaped Output] t("Programming and ICT Security")
[Escaped Output] t("Rocketship")
[Escaped Output] t("Education")
[Escaped Output] t("education shot")
[Escaped Output] t("testimonials")
[Escaped Output] t("testimonial_quote_01")
[Escaped Output] t("testimonial_quote_02")
[Escaped Output] t("Services")
[Escaped Output] t("Cyber Security")
[Escaped Output] t("cyber security text")
[Escaped Output] t("Info")
[Escaped Output] t("Cyber Security")
[Escaped Output] t("why us")
[Escaped Output] t("cybersecurity whyus")
[Escaped Output] t("technologies")
[Escaped Output] t("cybersecurity technologies")
[Escaped Output] t("solutions")
[Escaped Output] t("cybersecurity solutions")
[Escaped Output] t("Software Engineering")
[Escaped Output] t("software engineering text")
[Escaped Output] t("Info")
[Escaped Output] t("Software Engineering")
[Escaped Output] t("why us")
[Escaped Output] t("software whyus")
[Escaped Output] t("technologies")
[Escaped Output] t("software technologies")
[Escaped Output] t("solutions")
[Escaped Output] t("software solutions")
[Escaped Output] t("Web Design")
[Escaped Output] t("web design text")
[Escaped Output] t("Info")
[Escaped Output] t("Web Design")
[Escaped Output] t("webdesign main")
[Escaped Output] t("why us")
[Escaped Output] t("webdesign whyus")
[Escaped Output] t("technologies")
[Escaped Output] t("webdesign technologies")
[Escaped Output] t("solutions")
[Escaped Output] t("webdesign solutions")
[Escaped Output] t("Education")
[Escaped Output] t("education text")
[Escaped Output] t("Info")
[Escaped Output] t("Education")
[Escaped Output] t("why us")
[Escaped Output] t("education whyus")
[Escaped Output] t("technologies")
[Escaped Output] t("education technologies")
[Escaped Output] t("ICT Services")
[Escaped Output] t("ict services text")
[Escaped Output] t("contact")
[Escaped Output] t("ICT Services")
[Escaped Output] t("ictservices main")
[Escaped Output] t("why us")
[Escaped Output] t("ictservices whyus")
[Escaped Output] t("technologies")
[Escaped Output] t("ictservices technologies")
[Escaped Output] t("solutions")
[Escaped Output] t("ictservices solutions")
[Escaped Output] t("Social Media")
[Escaped Output] t("social media text")
[Escaped Output] t("login")
[Escaped Output] t("register")
[Escaped Output] t("Social Media")
[Escaped Output] t("home main")
[Escaped Output] t("tips")
[Escaped Output] t("home tips")
[Escaped Output] t("rules")
[Escaped Output] t("home rules")
[Escaped Output] t("philosophy")
[Escaped Output] t("home philosophy")
[Escaped Output] t("What is")
[Escaped Output] get_setting_value("PROJECT_NAME")
[Escaped Output] t("Our Mission")
[Escaped Output] t("our mission text")
[Escaped Output] t("How we started it")
[Escaped Output] t("how we started text01")
[Escaped Output] t("how we started text02")
[Escaped Output] t("Why?")
[Escaped Output] t("why text")
[Escaped Output] t("Favorite Quote")
[Escaped Output] t("favorite quote text")
[Escaped Output] t("Skills")
[Escaped Output] t("Software Engineering")
[Escaped Output] t("Web Design")
[Escaped Output] t("Cyber Security")
[Escaped Output] t("Education")
[Escaped Output] t("Consultancy")
[Escaped Output] t("Beginner")
[Escaped Output] t("Intermediate")
[Escaped Output] t("Pro")
[Escaped Output] t("Master")
[Escaped Output] t("Contact")
[Escaped Output] t("Where we are")
[Escaped Output] get_setting_value("PROJECT_NAME")
[Escaped Output] get_setting_value("ADDRESS")
[Escaped Output] get_setting_value("POSTCODE")
[Escaped Output] get_setting_value("LOCATION")
[Escaped Output] t("email")
[Escaped Output] get_setting_value("CONTACT_EMAIL")
[Escaped Output] t("Phone")
[Escaped Output] get_setting_value("TELEPHONE")
[Escaped Output] t("Mobile")
[Escaped Output] get_setting_value("MOBILE")
[Escaped Output] t("This section is required")
[Escaped Output] t("subject")
[Escaped Output] t("Phone")
[Escaped Output] t("This section is required")
[Escaped Output] t("fullname")
[Escaped Output] t("This section is required")
[Escaped Output] t("Email")
[Escaped Output] t("This section is required")
[Escaped Output] t("Message")
[Escaped Output] t("send")
[Escaped Output] t("up")
[Escaped Output] link_to(image_tag("it.png", :alt => "Italian", :title => "Italian", :class => "d4xicon"), url_for(:locale => "it"))
[Escaped Output] link_to(image_tag("es.png", :alt => "Spanish", :title => "Spanish", :class => "d4xicon"), url_for(:locale => "es"))
[Escaped Output] link_to(image_tag("de.png", :alt => "German", :title => "German", :class => "d4xicon"), url_for(:locale => "de"))
[Escaped Output] link_to(image_tag("england.png", :alt => "English", :title => "English", :class => "d4xicon"), url_for(:locale => "en"))
[Escaped Output] link_to(image_tag("nl.png", :alt => "Dutch", :title => "Dutch", :class => "d4xicon"), url_for(:locale => "nl"))
[Escaped Output] link_to(image_tag("pt.png", :alt => "Portuguese", :title => "Portuguese", :class => "d4xicon"), url_for(:locale => "pt"))
[Escaped Output] link_to(image_tag("fr.png", :alt => "French", :title => "French", :class => "d4xicon"), url_for(:locale => "fr"))
[Escaped Output] link_to(image_tag("no.png", :alt => "Norvay", :title => "Norvay", :class => "d4xicon"), url_for(:locale => "no"))
[Escaped Output] link_to(image_tag("se.png", :alt => "Swedish", :title => "Swedish", :class => "d4xicon"), url_for(:locale => "se"))
[Escaped Output] link_to(image_tag("cn.png", :alt => "Chinese", :title => "Chinese", :class => "d4xicon"), url_for(:locale => "cn"))
[Escaped Output] link_to(image_tag("ru.png", :alt => "Russian", :title => "Russian", :class => "d4xicon"), url_for(:locale => "ru"))
[Escaped Output] get_setting_value("PROJECT_COPYRIGHT_YEARS")
[Escaped Output] link_to(get_setting_value("PROJECT_NAME"), "/about")
[Escaped Output] d4x_sanitizer(t("all_rights"))
[Escaped Output] javascript_include_tag("js/bootstrap.min.js")
[Escaped Output] javascript_include_tag("js/particles.min.js")
[Escaped Output] javascript_include_tag("js/particlesRun.js")
[Escaped Output] javascript_include_tag("js/jquery.mixitup.js")
[Escaped Output] javascript_include_tag("js/form-validator.min.js")
[Escaped Output] javascript_include_tag("js/jquery.inview.min.js")
[Escaped Output] javascript_include_tag("js/jquery.countTo.js")
[Escaped Output] javascript_include_tag("js/jquery.magnific-popup.min.js")
[Escaped Output] javascript_include_tag("js/scrollreveal.min.js")
[Escaped Output] javascript_include_tag("js/style-switcher.js")
[Escaped Output] javascript_include_tag("js/main.js")

index/index.["IndexController#index"]

[Escaped Output] hidden_field_tag(:invitation_token, :value => params[:invitation_token])
[Escaped Output] hidden_field_tag(:invite_email, :value => get_token_email(params[:invitation_token]))
[Escaped Output] hidden_field_tag(:invite_name, :value => get_token_name(params[:invitation_token]))
[Escaped Output] d4x_sanitizer(t("invitated sir"))
[Escaped Output] d4x_sanitizer(t("invalid invite"))
[Escaped Output] hidden_field_tag(:request_token, :value => params[:request_token])
[Escaped Output] hidden_field_tag(:request_email, :value => get_token_email_for_requests(params[:request_token]))
[Escaped Output] hidden_field_tag(:request_name, :value => get_token_name_for_requests(params[:request_token]))
[Escaped Output] d4x_sanitizer(t("requested sir"))
[Escaped Output] d4x_sanitizer(t("invalid request"))
[Escaped Output] get_setting_value("PROJECT_NAME")
[Escaped Output] t("home")
[Escaped Output] t("ideology")
[Escaped Output] t("services")
[Escaped Output] t("about")
[Escaped Output] t("contact")
[Escaped Output] d4x_sanitizer(t("register"))
[Escaped Output] d4x_sanitizer(t("login"))
[Escaped Output] label_tag(d4x_sanitizer(alert))
[Escaped Output] label_tag(d4x_sanitizer(notice))
[Escaped Output] get_setting_value("PROJECT_NAME")
[Escaped Output] t("welcome to")
[Escaped Output] get_setting_value("PROJECT_NAME")
[Escaped Output] t("hello")
[Escaped Output] t("who_we_are")
[Escaped Output] t("our ideology")
[Escaped Output] t("Effective Impact")
[Escaped Output] t("ICT Consultancy")
[Escaped Output] t("Effective")
[Escaped Output] t("Impact")
[Escaped Output] t("cyber security text")
[Escaped Output] t("High Quality")
[Escaped Output] t("Software Engineering")
[Escaped Output] t("Cyber Security")
[Escaped Output] t("High Quality")
[Escaped Output] t("Cyber Security")
[Escaped Output] t("software engineering text")
[Escaped Output] t("Education")
[Escaped Output] t("Programming and ICT Security")
[Escaped Output] t("Rocketship")
[Escaped Output] t("Education")
[Escaped Output] t("education shot")
[Escaped Output] t("testimonials")
[Escaped Output] t("testimonial_quote_01")
[Escaped Output] t("testimonial_quote_02")
[Escaped Output] t("Services")
[Escaped Output] t("Cyber Security")
[Escaped Output] t("cyber security text")
[Escaped Output] t("Info")
[Escaped Output] t("Cyber Security")
[Escaped Output] t("why us")
[Escaped Output] t("cybersecurity whyus")
[Escaped Output] t("technologies")
[Escaped Output] t("cybersecurity technologies")
[Escaped Output] t("solutions")
[Escaped Output] t("cybersecurity solutions")
[Escaped Output] t("Software Engineering")
[Escaped Output] t("software engineering text")
[Escaped Output] t("Info")
[Escaped Output] t("Software Engineering")
[Escaped Output] t("why us")
[Escaped Output] t("software whyus")
[Escaped Output] t("technologies")
[Escaped Output] t("software technologies")
[Escaped Output] t("solutions")
[Escaped Output] t("software solutions")
[Escaped Output] t("Web Design")
[Escaped Output] t("web design text")
[Escaped Output] t("Info")
[Escaped Output] t("Web Design")
[Escaped Output] t("webdesign main")
[Escaped Output] t("why us")
[Escaped Output] t("webdesign whyus")
[Escaped Output] t("technologies")
[Escaped Output] t("webdesign technologies")
[Escaped Output] t("solutions")
[Escaped Output] t("webdesign solutions")
[Escaped Output] t("Education")
[Escaped Output] t("education text")
[Escaped Output] t("Info")
[Escaped Output] t("Education")
[Escaped Output] t("why us")
[Escaped Output] t("education whyus")
[Escaped Output] t("technologies")
[Escaped Output] t("education technologies")
[Escaped Output] t("ICT Services")
[Escaped Output] t("ict services text")
[Escaped Output] t("contact")
[Escaped Output] t("ICT Services")
[Escaped Output] t("ictservices main")
[Escaped Output] t("why us")
[Escaped Output] t("ictservices whyus")
[Escaped Output] t("technologies")
[Escaped Output] t("ictservices technologies")
[Escaped Output] t("solutions")
[Escaped Output] t("ictservices solutions")
[Escaped Output] t("Social Media")
[Escaped Output] t("social media text")
[Escaped Output] t("login")
[Escaped Output] t("register")
[Escaped Output] t("Social Media")
[Escaped Output] t("home main")
[Escaped Output] t("tips")
[Escaped Output] t("home tips")
[Escaped Output] t("rules")
[Escaped Output] t("home rules")
[Escaped Output] t("philosophy")
[Escaped Output] t("home philosophy")
[Escaped Output] t("What is")
[Escaped Output] get_setting_value("PROJECT_NAME")
[Escaped Output] t("Our Mission")
[Escaped Output] t("our mission text")
[Escaped Output] t("How we started it")
[Escaped Output] t("how we started text01")
[Escaped Output] t("how we started text02")
[Escaped Output] t("Why?")
[Escaped Output] t("why text")
[Escaped Output] t("Favorite Quote")
[Escaped Output] t("favorite quote text")
[Escaped Output] t("Skills")
[Escaped Output] t("Software Engineering")
[Escaped Output] t("Web Design")
[Escaped Output] t("Cyber Security")
[Escaped Output] t("Education")
[Escaped Output] t("Consultancy")
[Escaped Output] t("Beginner")
[Escaped Output] t("Intermediate")
[Escaped Output] t("Pro")
[Escaped Output] t("Master")
[Escaped Output] t("Contact")
[Escaped Output] t("Where we are")
[Escaped Output] get_setting_value("PROJECT_NAME")
[Escaped Output] get_setting_value("ADDRESS")
[Escaped Output] get_setting_value("POSTCODE")
[Escaped Output] get_setting_value("LOCATION")
[Escaped Output] t("email")
[Escaped Output] get_setting_value("CONTACT_EMAIL")
[Escaped Output] t("Phone")
[Escaped Output] get_setting_value("TELEPHONE")
[Escaped Output] t("Mobile")
[Escaped Output] get_setting_value("MOBILE")
[Escaped Output] t("This section is required")
[Escaped Output] t("subject")
[Escaped Output] t("Phone")
[Escaped Output] t("This section is required")
[Escaped Output] t("fullname")
[Escaped Output] t("This section is required")
[Escaped Output] t("Email")
[Escaped Output] t("This section is required")
[Escaped Output] t("Message")
[Escaped Output] t("send")
[Escaped Output] t("up")
[Escaped Output] link_to(image_tag("it.png", :alt => "Italian", :title => "Italian", :class => "d4xicon"), url_for(:locale => "it"))
[Escaped Output] link_to(image_tag("es.png", :alt => "Spanish", :title => "Spanish", :class => "d4xicon"), url_for(:locale => "es"))
[Escaped Output] link_to(image_tag("de.png", :alt => "German", :title => "German", :class => "d4xicon"), url_for(:locale => "de"))
[Escaped Output] link_to(image_tag("england.png", :alt => "English", :title => "English", :class => "d4xicon"), url_for(:locale => "en"))
[Escaped Output] link_to(image_tag("nl.png", :alt => "Dutch", :title => "Dutch", :class => "d4xicon"), url_for(:locale => "nl"))
[Escaped Output] link_to(image_tag("pt.png", :alt => "Portuguese", :title => "Portuguese", :class => "d4xicon"), url_for(:locale => "pt"))
[Escaped Output] link_to(image_tag("fr.png", :alt => "French", :title => "French", :class => "d4xicon"), url_for(:locale => "fr"))
[Escaped Output] link_to(image_tag("no.png", :alt => "Norvay", :title => "Norvay", :class => "d4xicon"), url_for(:locale => "no"))
[Escaped Output] link_to(image_tag("se.png", :alt => "Swedish", :title => "Swedish", :class => "d4xicon"), url_for(:locale => "se"))
[Escaped Output] link_to(image_tag("cn.png", :alt => "Chinese", :title => "Chinese", :class => "d4xicon"), url_for(:locale => "cn"))
[Escaped Output] link_to(image_tag("ru.png", :alt => "Russian", :title => "Russian", :class => "d4xicon"), url_for(:locale => "ru"))
[Escaped Output] get_setting_value("PROJECT_COPYRIGHT_YEARS")
[Escaped Output] link_to(get_setting_value("PROJECT_NAME"), "/about")
[Escaped Output] d4x_sanitizer(t("all_rights"))
[Escaped Output] javascript_include_tag("js/bootstrap.min.js")
[Escaped Output] javascript_include_tag("js/particles.min.js")
[Escaped Output] javascript_include_tag("js/particlesRun.js")
[Escaped Output] javascript_include_tag("js/jquery.mixitup.js")
[Escaped Output] javascript_include_tag("js/form-validator.min.js")
[Escaped Output] javascript_include_tag("js/jquery.inview.min.js")
[Escaped Output] javascript_include_tag("js/jquery.countTo.js")
[Escaped Output] javascript_include_tag("js/jquery.magnific-popup.min.js")
[Escaped Output] javascript_include_tag("js/scrollreveal.min.js")
[Escaped Output] javascript_include_tag("js/style-switcher.js")
[Escaped Output] javascript_include_tag("js/main.js")

invitations/_form

[Escaped Output] pluralize(@invitation.errors.count, d4x_sanitizer(t("error")))
[Escaped Output] d4x_sanitizer(msg)
[Escaped Output] label_tag(t("from"), nil, :class => "grey")
[Escaped Output] label_tag(current_user.firstname, nil, :class => "grey")
[Escaped Output] f.text_field(:subject, :class => "form-control center", :placeholder => d4x_sanitizer(t("fullname")))
[Escaped Output] f.email_field(:recipient_email, :class => "form-control center", :placeholder => d4x_sanitizer(t("email")))
[Escaped Output] f.submit(d4x_sanitizer(t("send")), :class => "button-d4x-tiny")
[Escaped Output] form_for(@invitation) do; if @invitation.errors.any? then; [Escaped Output] pluralize(@invitation.errors.count, d4x_sanitizer(t("error"))); @invitation.errors.full_messages.each do; [Escaped Output] d4x_sanitizer(msg); end;end;[Escaped Output] label_tag(t("from"), nil, :class => "grey");[Escaped Output] label_tag(current_user.firstname, nil, :class => "grey");[Escaped Output] f.text_field(:subject, :class => "form-control center", :placeholder => d4x_sanitizer(t("fullname")));[Escaped Output] f.email_field(:recipient_email, :class => "form-control center", :placeholder => d4x_sanitizer(t("email")));[Escaped Output] f.submit(d4x_sanitizer(t("send")), :class => "button-d4x-tiny"); end

invitations/_form.["InvitationsController#edit", "Template:invitations/edit"]

[Escaped Output] pluralize(Invitation.find(params[:id]).errors.count, d4x_sanitizer(t("error")))
[Escaped Output] d4x_sanitizer((Unresolved Model).new)
[Escaped Output] label_tag(t("from"), nil, :class => "grey")
[Escaped Output] label_tag(current_user.firstname, nil, :class => "grey")
[Escaped Output] FormBuilder.new.text_field(:subject, :class => "form-control center", :placeholder => d4x_sanitizer(t("fullname")))
[Escaped Output] FormBuilder.new.email_field(:recipient_email, :class => "form-control center", :placeholder => d4x_sanitizer(t("email")))
[Escaped Output] FormBuilder.new.submit(d4x_sanitizer(t("send")), :class => "button-d4x-tiny")
[Escaped Output] form_for(Invitation.find(params[:id])) do; if Invitation.find(params[:id]).errors.any? then; [Escaped Output] pluralize(Invitation.find(params[:id]).errors.count, d4x_sanitizer(t("error"))); Invitation.find(params[:id]).errors.full_messages.each do; [Escaped Output] d4x_sanitizer((Unresolved Model).new); end;end;[Escaped Output] label_tag(t("from"), nil, :class => "grey");[Escaped Output] label_tag(current_user.firstname, nil, :class => "grey");[Escaped Output] FormBuilder.new.text_field(:subject, :class => "form-control center", :placeholder => d4x_sanitizer(t("fullname")));[Escaped Output] FormBuilder.new.email_field(:recipient_email, :class => "form-control center", :placeholder => d4x_sanitizer(t("email")));[Escaped Output] FormBuilder.new.submit(d4x_sanitizer(t("send")), :class => "button-d4x-tiny"); end

invitations/_form.["InvitationsController#new", "Template:invitations/new"]

[Escaped Output] pluralize(Invitation.new.errors.count, d4x_sanitizer(t("error")))
[Escaped Output] d4x_sanitizer(msg)
[Escaped Output] label_tag(t("from"), nil, :class => "grey")
[Escaped Output] label_tag(current_user.firstname, nil, :class => "grey")
[Escaped Output] FormBuilder.new.text_field(:subject, :class => "form-control center", :placeholder => d4x_sanitizer(t("fullname")))
[Escaped Output] FormBuilder.new.email_field(:recipient_email, :class => "form-control center", :placeholder => d4x_sanitizer(t("email")))
[Escaped Output] FormBuilder.new.submit(d4x_sanitizer(t("send")), :class => "button-d4x-tiny")
[Escaped Output] form_for(Invitation.new) do; if Invitation.new.errors.any? then; [Escaped Output] pluralize(Invitation.new.errors.count, d4x_sanitizer(t("error"))); Invitation.new.errors.full_messages.each do; [Escaped Output] d4x_sanitizer(msg); end;end;[Escaped Output] label_tag(t("from"), nil, :class => "grey");[Escaped Output] label_tag(current_user.firstname, nil, :class => "grey");[Escaped Output] FormBuilder.new.text_field(:subject, :class => "form-control center", :placeholder => d4x_sanitizer(t("fullname")));[Escaped Output] FormBuilder.new.email_field(:recipient_email, :class => "form-control center", :placeholder => d4x_sanitizer(t("email")));[Escaped Output] FormBuilder.new.submit(d4x_sanitizer(t("send")), :class => "button-d4x-tiny"); end

invitations/_form.["Template:invitations/edit"]

[Escaped Output] pluralize(@invitation.errors.count, d4x_sanitizer(t("error")))
[Escaped Output] d4x_sanitizer(msg)
[Escaped Output] label_tag(t("from"), nil, :class => "grey")
[Escaped Output] label_tag(current_user.firstname, nil, :class => "grey")
[Escaped Output] FormBuilder.new.text_field(:subject, :class => "form-control center", :placeholder => d4x_sanitizer(t("fullname")))
[Escaped Output] FormBuilder.new.email_field(:recipient_email, :class => "form-control center", :placeholder => d4x_sanitizer(t("email")))
[Escaped Output] FormBuilder.new.submit(d4x_sanitizer(t("send")), :class => "button-d4x-tiny")
[Escaped Output] form_for(@invitation) do; if @invitation.errors.any? then; [Escaped Output] pluralize(@invitation.errors.count, d4x_sanitizer(t("error"))); @invitation.errors.full_messages.each do; [Escaped Output] d4x_sanitizer(msg); end;end;[Escaped Output] label_tag(t("from"), nil, :class => "grey");[Escaped Output] label_tag(current_user.firstname, nil, :class => "grey");[Escaped Output] FormBuilder.new.text_field(:subject, :class => "form-control center", :placeholder => d4x_sanitizer(t("fullname")));[Escaped Output] FormBuilder.new.email_field(:recipient_email, :class => "form-control center", :placeholder => d4x_sanitizer(t("email")));[Escaped Output] FormBuilder.new.submit(d4x_sanitizer(t("send")), :class => "button-d4x-tiny"); end

invitations/admin

[Escaped Output] link_to(image_tag("invitations.gif", :border => 0, :mouseover => "invitations1.gif", :title => t("icon-invitations"), :size => "30x30"), new_invitation_path)
[Escaped Output] t("sent listing")
[Escaped Output] t(:sender)
[Escaped Output] t(:target_id)
[Escaped Output] t(:email)
[Escaped Output] t(:invite_status)
[Escaped Output] cycle("odd", "even")
[Escaped Output] current_user.nickname
[Escaped Output] invitation.target_id
[Escaped Output] invitation.target_email
[Escaped Output] invitation.read_at
[Escaped Output] link_to(t("show"), invitation)
[Escaped Output] link_to(image_tag("star_green.png", :border => 0, :mouseover => "star_green.png", :title => t("icon-show"), :size => "16x16"), invitation)
[Escaped Output] link_to(image_tag("edit.gif", :border => 0, :mouseover => "update.gif", :title => t("icon-edit"), :size => "16x16"), edit_invitation_path(invitation))
[Escaped Output] button_to("", invitation, :confirm => "are you sure?", :method => :delete, :class => "destroy", :name => "destroy", :size => "16x16")

invitations/admin.["InvitationsController#admin"]

[Escaped Output] link_to(image_tag("invitations.gif", :border => 0, :mouseover => "invitations1.gif", :title => t("icon-invitations"), :size => "30x30"), new_invitation_path)
[Escaped Output] t("sent listing")
[Escaped Output] t(:sender)
[Escaped Output] t(:target_id)
[Escaped Output] t(:email)
[Escaped Output] t(:invite_status)
[Escaped Output] cycle("odd", "even")
[Escaped Output] current_user.nickname
[Escaped Output] Invitation.new.target_id
[Escaped Output] Invitation.new.target_email
[Escaped Output] Invitation.new.read_at
[Escaped Output] link_to(t("show"), Invitation.new)
[Escaped Output] link_to(image_tag("star_green.png", :border => 0, :mouseover => "star_green.png", :title => t("icon-show"), :size => "16x16"), Invitation.new)
[Escaped Output] link_to(image_tag("edit.gif", :border => 0, :mouseover => "update.gif", :title => t("icon-edit"), :size => "16x16"), edit_invitation_path(Invitation.new))
[Escaped Output] button_to("", Invitation.new, :confirm => "are you sure?", :method => :delete, :class => "destroy", :name => "destroy", :size => "16x16")

invitations/edit

[Escaped Output] t("editing invitaiton")
[Escaped Output] render(partial => "form", {})
[Escaped Output] link_to(t("Show"), @invitation)
[Escaped Output] link_to(t("Back"), invitations_path)

invitations/edit.["InvitationsController#edit"]

[Escaped Output] t("editing invitaiton")
[Escaped Output] render(partial => "form", {})
[Escaped Output] link_to(t("Show"), Invitation.find(params[:id]))
[Escaped Output] link_to(t("Back"), invitations_path)

invitations/index

[Escaped Output] label_tag(t("sent invitations"), nil, :class => "")
[Escaped Output] invitation.user.avatar.url(:thumb)
[Escaped Output] label_tag(("@" + user_nick(invitation.user_id)), nil, :class => "orange")
[Escaped Output] t("has invited")
[Escaped Output] label_tag(invitation.recipient_email.downcase, nil, :class => "grey")
[Escaped Output] time_ago_in_words_converter(invitation.created_at)
[Escaped Output] t("ago")
[Escaped Output] t("cancel invitation")
[Escaped Output] button_to(invitation, :class => "btn btn-sm btn-outline-warning", :method => :delete, :title => t("cancel invitation"), :confirm => t("Are you sure you want to cancel this invitation?")) do; [Escaped Output] t("cancel invitation"); end
[Escaped Output] t("stato")
[Escaped Output] label_tag(invitation_is_accepted(invitation), nil, :class => "lcd lightlime")
[Escaped Output] t("send invitation!")
[Escaped Output] content_for(:rightside_title) do; [Escaped Output] t("send invitation!"); end
[Escaped Output] t("invite a friend")
[Escaped Output] content_for(:rightside_subtitle) do; [Escaped Output] t("invite a friend"); end
[Escaped Output] pluralize(@invitation.errors.count, d4x_sanitizer(t("error")))
[Escaped Output] d4x_sanitizer(msg)
[Escaped Output] label_tag(t("from"), nil, :class => "grey")
[Escaped Output] label_tag(current_user.firstname, nil, :class => "grey")
[Escaped Output] f.text_field(:subject, :class => "form-control center", :placeholder => d4x_sanitizer(t("fullname")))
[Escaped Output] f.email_field(:recipient_email, :class => "form-control center", :placeholder => d4x_sanitizer(t("email")))
[Escaped Output] f.submit(d4x_sanitizer(t("send")), :class => "btn btn-outline-primary btn-block")
[Escaped Output] form_for(@invitation) do; if @invitation.errors.any? then; [Escaped Output] pluralize(@invitation.errors.count, d4x_sanitizer(t("error"))); @invitation.errors.full_messages.each do; [Escaped Output] d4x_sanitizer(msg); end;end;[Escaped Output] label_tag(t("from"), nil, :class => "grey");[Escaped Output] label_tag(current_user.firstname, nil, :class => "grey");[Escaped Output] f.text_field(:subject, :class => "form-control center", :placeholder => d4x_sanitizer(t("fullname")));[Escaped Output] f.email_field(:recipient_email, :class => "form-control center", :placeholder => d4x_sanitizer(t("email")));[Escaped Output] f.submit(d4x_sanitizer(t("send")), :class => "btn btn-outline-primary btn-block"); end
[Escaped Output] t("invites")
[Escaped Output] t("invitations list")
[Escaped Output] hidden_field_tag(:import, :invitations)
[Escaped Output] f.file_field(:invitations_list, :class => "btn btn-outline-primary btn-block")
[Escaped Output] f.submit(d4x_sanitizer(t("upload")), :class => "btn btn-outline-primary btn-block")
[Escaped Output] form_for(@user, :html => ({ :multipart => true })) do; [Escaped Output] t("invitations list");[Escaped Output] hidden_field_tag(:import, :invitations);[Escaped Output] f.file_field(:invitations_list, :class => "btn btn-outline-primary btn-block");[Escaped Output] f.submit(d4x_sanitizer(t("upload")), :class => "btn btn-outline-primary btn-block"); end
[Escaped Output] content_for(:rightside_content) do; [Escaped Output] form_for(@invitation) do; if @invitation.errors.any? then; [Escaped Output] pluralize(@invitation.errors.count, d4x_sanitizer(t("error"))); @invitation.errors.full_messages.each do; [Escaped Output] d4x_sanitizer(msg); end;end;[Escaped Output] label_tag(t("from"), nil, :class => "grey");[Escaped Output] label_tag(current_user.firstname, nil, :class => "grey");[Escaped Output] f.text_field(:subject, :class => "form-control center", :placeholder => d4x_sanitizer(t("fullname")));[Escaped Output] f.email_field(:recipient_email, :class => "form-control center", :placeholder => d4x_sanitizer(t("email")));[Escaped Output] f.submit(d4x_sanitizer(t("send")), :class => "btn btn-outline-primary btn-block"); end;[Escaped Output] t("invites");[Escaped Output] form_for(@user, :html => ({ :multipart => true })) do; [Escaped Output] t("invitations list");[Escaped Output] hidden_field_tag(:import, :invitations);[Escaped Output] f.file_field(:invitations_list, :class => "btn btn-outline-primary btn-block");[Escaped Output] f.submit(d4x_sanitizer(t("upload")), :class => "btn btn-outline-primary btn-block"); end; end

invitations/index.["InvitationsController#index"]

[Escaped Output] label_tag(t("sent invitations"), nil, :class => "")
[Escaped Output] (Unresolved Model).new.user.avatar.url(:thumb)
[Escaped Output] label_tag(("@" + user_nick((Unresolved Model).new.user_id)), nil, :class => "orange")
[Escaped Output] t("has invited")
[Escaped Output] label_tag((Unresolved Model).new.recipient_email.downcase, nil, :class => "grey")
[Escaped Output] time_ago_in_words_converter((Unresolved Model).new.created_at)
[Escaped Output] t("ago")
[Escaped Output] t("cancel invitation")
[Escaped Output] button_to((Unresolved Model).new, :class => "btn btn-sm btn-outline-warning", :method => :delete, :title => t("cancel invitation"), :confirm => t("Are you sure you want to cancel this invitation?")) do; [Escaped Output] t("cancel invitation"); end
[Escaped Output] t("stato")
[Escaped Output] label_tag(invitation_is_accepted((Unresolved Model).new), nil, :class => "lcd lightlime")
[Escaped Output] t("send invitation!")
[Escaped Output] content_for(:rightside_title) do; [Escaped Output] t("send invitation!"); end
[Escaped Output] t("invite a friend")
[Escaped Output] content_for(:rightside_subtitle) do; [Escaped Output] t("invite a friend"); end
[Escaped Output] pluralize(Invitation.new.errors.count, d4x_sanitizer(t("error")))
[Escaped Output] d4x_sanitizer(msg)
[Escaped Output] label_tag(t("from"), nil, :class => "grey")
[Escaped Output] label_tag(current_user.firstname, nil, :class => "grey")
[Escaped Output] FormBuilder.new.text_field(:subject, :class => "form-control center", :placeholder => d4x_sanitizer(t("fullname")))
[Escaped Output] FormBuilder.new.email_field(:recipient_email, :class => "form-control center", :placeholder => d4x_sanitizer(t("email")))
[Escaped Output] FormBuilder.new.submit(d4x_sanitizer(t("send")), :class => "btn btn-outline-primary btn-block")
[Escaped Output] form_for(Invitation.new) do; if Invitation.new.errors.any? then; [Escaped Output] pluralize(Invitation.new.errors.count, d4x_sanitizer(t("error"))); Invitation.new.errors.full_messages.each do; [Escaped Output] d4x_sanitizer(msg); end;end;[Escaped Output] label_tag(t("from"), nil, :class => "grey");[Escaped Output] label_tag(current_user.firstname, nil, :class => "grey");[Escaped Output] FormBuilder.new.text_field(:subject, :class => "form-control center", :placeholder => d4x_sanitizer(t("fullname")));[Escaped Output] FormBuilder.new.email_field(:recipient_email, :class => "form-control center", :placeholder => d4x_sanitizer(t("email")));[Escaped Output] FormBuilder.new.submit(d4x_sanitizer(t("send")), :class => "btn btn-outline-primary btn-block"); end
[Escaped Output] t("invites")
[Escaped Output] t("invitations list")
[Escaped Output] hidden_field_tag(:import, :invitations)
[Escaped Output] FormBuilder.new.file_field(:invitations_list, :class => "btn btn-outline-primary btn-block")
[Escaped Output] FormBuilder.new.submit(d4x_sanitizer(t("upload")), :class => "btn btn-outline-primary btn-block")
[Escaped Output] form_for(User.find(current_user.id), :html => ({ :multipart => true })) do; [Escaped Output] t("invitations list");[Escaped Output] hidden_field_tag(:import, :invitations);[Escaped Output] FormBuilder.new.file_field(:invitations_list, :class => "btn btn-outline-primary btn-block");[Escaped Output] FormBuilder.new.submit(d4x_sanitizer(t("upload")), :class => "btn btn-outline-primary btn-block"); end
[Escaped Output] content_for(:rightside_content) do; [Escaped Output] form_for(Invitation.new) do; if Invitation.new.errors.any? then; [Escaped Output] pluralize(Invitation.new.errors.count, d4x_sanitizer(t("error"))); Invitation.new.errors.full_messages.each do; [Escaped Output] d4x_sanitizer(msg); end;end;[Escaped Output] label_tag(t("from"), nil, :class => "grey");[Escaped Output] label_tag(current_user.firstname, nil, :class => "grey");[Escaped Output] FormBuilder.new.text_field(:subject, :class => "form-control center", :placeholder => d4x_sanitizer(t("fullname")));[Escaped Output] FormBuilder.new.email_field(:recipient_email, :class => "form-control center", :placeholder => d4x_sanitizer(t("email")));[Escaped Output] FormBuilder.new.submit(d4x_sanitizer(t("send")), :class => "btn btn-outline-primary btn-block"); end;[Escaped Output] t("invites");[Escaped Output] form_for(User.find(current_user.id), :html => ({ :multipart => true })) do; [Escaped Output] t("invitations list");[Escaped Output] hidden_field_tag(:import, :invitations);[Escaped Output] FormBuilder.new.file_field(:invitations_list, :class => "btn btn-outline-primary btn-block");[Escaped Output] FormBuilder.new.submit(d4x_sanitizer(t("upload")), :class => "btn btn-outline-primary btn-block"); end; end

invitations/new

[Escaped Output] render(partial => "form", {})

invitations/new.["InvitationsController#new"]

[Escaped Output] render(partial => "form", {})

invitations/show

[Escaped Output] t(:from)
[Escaped Output] @invitation.sender_id
[Escaped Output] t(:to)
[Escaped Output] @invitation.target_id
[Escaped Output] t(:email)
[Escaped Output] @invitation.target_email
[Escaped Output] t(:subject)
[Escaped Output] @invitation.subject
[Escaped Output] t(:description)
[Escaped Output] @invitation.description
[Escaped Output] t(:reason)
[Escaped Output] @invitation.reason
[Escaped Output] t(:archivied)
[Escaped Output] @invitation.archivied
[Escaped Output] t(:email_sent)
[Escaped Output] @invitation.email_sent
[Escaped Output] t(:read_at)
[Escaped Output] @invitation.read_at
[Escaped Output] link_to(t("edit"), edit_invitation_path(@invitation))
[Escaped Output] link_to(t("back"), invitations_path)

invitations/show.["InvitationsController#show"]

[Escaped Output] t(:from)
[Escaped Output] Invitation.find(params[:id]).sender_id
[Escaped Output] t(:to)
[Escaped Output] Invitation.find(params[:id]).target_id
[Escaped Output] t(:email)
[Escaped Output] Invitation.find(params[:id]).target_email
[Escaped Output] t(:subject)
[Escaped Output] Invitation.find(params[:id]).subject
[Escaped Output] t(:description)
[Escaped Output] Invitation.find(params[:id]).description
[Escaped Output] t(:reason)
[Escaped Output] Invitation.find(params[:id]).reason
[Escaped Output] t(:archivied)
[Escaped Output] Invitation.find(params[:id]).archivied
[Escaped Output] t(:email_sent)
[Escaped Output] Invitation.find(params[:id]).email_sent
[Escaped Output] t(:read_at)
[Escaped Output] Invitation.find(params[:id]).read_at
[Escaped Output] link_to(t("edit"), edit_invitation_path(Invitation.find(params[:id])))
[Escaped Output] link_to(t("back"), invitations_path)

invoices/_form

[Escaped Output] pluralize(@option.errors.count, t("error"))
[Escaped Output] msg
[Escaped Output] f.label(:key, :class => "show-item-label")
[Escaped Output] f.text_field(:name, :size => 50, :class => "def-input")
[Escaped Output] f.label(:value, :class => "show-item-label")
[Escaped Output] f.text_field(:value, :size => 50, :class => "def-input")
[Escaped Output] f.label(:description, :class => "show-item-label")
[Escaped Output] f.text_area(:description, :size => "50x7")
[Escaped Output] f.submit("update", :class => "button-d4x")
[Escaped Output] form_for(@option) do; if @option.errors.any? then; [Escaped Output] pluralize(@option.errors.count, t("error")); @option.errors.full_messages.each do; [Escaped Output] msg; end;end;[Escaped Output] f.label(:key, :class => "show-item-label");[Escaped Output] f.text_field(:name, :size => 50, :class => "def-input");[Escaped Output] f.label(:value, :class => "show-item-label");[Escaped Output] f.text_field(:value, :size => 50, :class => "def-input");[Escaped Output] f.label(:description, :class => "show-item-label");[Escaped Output] f.text_area(:description, :size => "50x7");[Escaped Output] f.submit("update", :class => "button-d4x"); end

invoices/_form.["Template:invoices/edit"]

[Escaped Output] pluralize(@option.errors.count, t("error"))
[Escaped Output] msg
[Escaped Output] FormBuilder.new.label(:key, :class => "show-item-label")
[Escaped Output] FormBuilder.new.text_field(:name, :size => 50, :class => "def-input")
[Escaped Output] FormBuilder.new.label(:value, :class => "show-item-label")
[Escaped Output] FormBuilder.new.text_field(:value, :size => 50, :class => "def-input")
[Escaped Output] FormBuilder.new.label(:description, :class => "show-item-label")
[Escaped Output] FormBuilder.new.text_area(:description, :size => "50x7")
[Escaped Output] FormBuilder.new.submit("update", :class => "button-d4x")
[Escaped Output] form_for(@option) do; if @option.errors.any? then; [Escaped Output] pluralize(@option.errors.count, t("error")); @option.errors.full_messages.each do; [Escaped Output] msg; end;end;[Escaped Output] FormBuilder.new.label(:key, :class => "show-item-label");[Escaped Output] FormBuilder.new.text_field(:name, :size => 50, :class => "def-input");[Escaped Output] FormBuilder.new.label(:value, :class => "show-item-label");[Escaped Output] FormBuilder.new.text_field(:value, :size => 50, :class => "def-input");[Escaped Output] FormBuilder.new.label(:description, :class => "show-item-label");[Escaped Output] FormBuilder.new.text_area(:description, :size => "50x7");[Escaped Output] FormBuilder.new.submit("update", :class => "button-d4x"); end

invoices/edit

[Escaped Output] link_to(image_tag("arrow_left.png", :border => 0, :title => t("back")), options_path)
[Escaped Output] t("editing option")
[Escaped Output] render(partial => "form", {})

invoices/edit.["InvoicesController#edit"]

[Escaped Output] link_to(image_tag("arrow_left.png", :border => 0, :title => t("back")), options_path)
[Escaped Output] t("editing option")
[Escaped Output] render(partial => "form", {})

invoices/index

[Escaped Output] content_for(:head) do; [ignored]; end
[Escaped Output] render(partial => "/agadanga/big_icons_some_active", {})
[Escaped Output] content_for(:big_icons_menu) do; [Escaped Output] render(partial => "/agadanga/big_icons_some_active", {}); end
[Escaped Output] render(partial => "/agadanga/no_folder_selected", {})
[Escaped Output] content_for(:folders_list) do; [Escaped Output] render(partial => "/agadanga/no_folder_selected", {}); end
[Escaped Output] link_to(image_tag("cog_add.png", :border => 0, :mouseover => "cog_add.png", :title => "options"), new_option_path)
[Escaped Output] t(:option)
[Escaped Output] t(:value)
[Escaped Output] t(:description)
[Escaped Output] cycle("odd", "even")
[Escaped Output] option.name
[Escaped Output] option.value
[Escaped Output] option.description
[Escaped Output] link_to(image_tag("cog.png", :border => 0, :mouseover => "cog.png", :title => t("show"), :size => "16x16"), option)
[Escaped Output] link_to(image_tag("cog_edit.png", :border => 0, :mouseover => "cog_edit.png", :title => t("edit"), :size => "16x16"), edit_option_path(option))
[Escaped Output] button_to("", option, :confirm => "are you sure?", :method => :delete, :class => "odestroy", :title => t("delete"), :name => "destroy", :size => "16x16")

invoices/index.["InvoicesController#index"]

[Escaped Output] content_for(:head) do; [ignored]; end
[Escaped Output] render(partial => "/agadanga/big_icons_some_active", {})
[Escaped Output] content_for(:big_icons_menu) do; [Escaped Output] render(partial => "/agadanga/big_icons_some_active", {}); end
[Escaped Output] render(partial => "/agadanga/no_folder_selected", {})
[Escaped Output] content_for(:folders_list) do; [Escaped Output] render(partial => "/agadanga/no_folder_selected", {}); end
[Escaped Output] link_to(image_tag("cog_add.png", :border => 0, :mouseover => "cog_add.png", :title => "options"), new_option_path)
[Escaped Output] t(:option)
[Escaped Output] t(:value)
[Escaped Output] t(:description)
[Escaped Output] cycle("odd", "even")
[Escaped Output] option.name
[Escaped Output] option.value
[Escaped Output] option.description
[Escaped Output] link_to(image_tag("cog.png", :border => 0, :mouseover => "cog.png", :title => t("show"), :size => "16x16"), option)
[Escaped Output] link_to(image_tag("cog_edit.png", :border => 0, :mouseover => "cog_edit.png", :title => t("edit"), :size => "16x16"), edit_option_path(option))
[Escaped Output] button_to("", option, :confirm => "are you sure?", :method => :delete, :class => "odestroy", :title => t("delete"), :name => "destroy", :size => "16x16")

invoices/new

[Escaped Output] link_to(image_tag("arrow_left.png", :border => 0, :title => t("back")), options_path)
[Escaped Output] t("new option")
[Escaped Output] render(partial => "form", {})

invoices/new.["InvoicesController#new"]

[Escaped Output] link_to(image_tag("arrow_left.png", :border => 0, :title => t("back")), options_path)
[Escaped Output] t("new option")
[Escaped Output] render(partial => "form", {})

invoices/show

[Escaped Output] link_to(image_tag("arrow_left.png", :border => 0, :title => t("back")), options_path)
[Escaped Output] link_to(image_tag("cog_add.png", :border => 0, :mouseover => "cog_add.png", :title => "new", :size => "16x16"), new_option_path)
[Escaped Output] link_to(image_tag("cog_edit.png", :border => 0, :mouseover => "cog_edit.png", :title => t(:edit), :size => "16x16"), edit_option_path(@option))
[Escaped Output] @option.id
[Escaped Output] t("name")
[Escaped Output] @option.name
[Escaped Output] t("value")
[Escaped Output] @option.value
[Escaped Output] t("description")
[Escaped Output] @option.description

invoices/show.["InvoicesController#show"]

[Escaped Output] link_to(image_tag("arrow_left.png", :border => 0, :title => t("back")), options_path)
[Escaped Output] link_to(image_tag("cog_add.png", :border => 0, :mouseover => "cog_add.png", :title => "new", :size => "16x16"), new_option_path)
[Escaped Output] link_to(image_tag("cog_edit.png", :border => 0, :mouseover => "cog_edit.png", :title => t(:edit), :size => "16x16"), edit_option_path(@option))
[Escaped Output] @option.id
[Escaped Output] t("name")
[Escaped Output] @option.name
[Escaped Output] t("value")
[Escaped Output] @option.value
[Escaped Output] t("description")
[Escaped Output] @option.description

layouts/_footer

[Escaped Output] link_to(image_tag("us.png", :alt => "English", :title => "English", :class => "d4xicon"), url_for(:locale => "en"))
[Escaped Output] link_to(image_tag("es.png", :alt => "Spanish", :title => "Spanish", :class => "d4xicon"), url_for(:locale => "es"))
[Escaped Output] link_to(image_tag("fr.png", :alt => "French", :title => "French", :class => "d4xicon"), url_for(:locale => "fr"))
[Escaped Output] link_to(image_tag("de.png", :alt => "German", :title => "German", :class => "d4xicon"), url_for(:locale => "de"))
[Escaped Output] link_to(image_tag("england.png", :alt => "English", :title => "English", :class => "d4xicon"), url_for(:locale => "en"))
[Escaped Output] link_to(image_tag("pt.png", :alt => "Portuguese", :title => "Portuguese", :class => "d4xicon"), url_for(:locale => "pt"))
[Escaped Output] link_to(image_tag("it.png", :title => "Italian", :alt => "Italian", :class => "d4xicon"), url_for(:locale => "it"))
[Escaped Output] link_to(image_tag("nl.png", :alt => "Dutch", :title => "Dutch", :class => "d4xicon"), url_for(:locale => "nl"))
[Escaped Output] link_to(image_tag("ru.png", :alt => "Russian", :title => "Russian", :class => "d4xicon"), url_for(:locale => "ru"))
[Escaped Output] link_to(image_tag("cn.png", :alt => "Chinese", :title => "Chinese", :class => "d4xicon"), url_for(:locale => "cn"))
[Escaped Output] link_to(image_tag("se.png", :alt => "Swedish", :title => "Swedish", :class => "d4xicon"), url_for(:locale => "se"))
[Escaped Output] link_to(image_tag("il.png", :alt => "Hebrew", :title => "Hebrew", :class => "d4xicon"), url_for(:locale => "il"))
[Escaped Output] link_to(image_tag("pl.png", :alt => "Polish", :title => "Polish", :class => "d4xicon"), url_for(:locale => "pl"))
[Escaped Output] @years = get_setting_value("PROJECT_COPYRIGHT_YEARS")
[Escaped Output] @years = get_setting_value("PROJECT_NAME")
[Escaped Output] d4x_sanitizer(t("all_rights"))

layouts/application

[Escaped Output] get_setting_value("PROJECT_NAME")
[Escaped Output] get_setting_value("PROJECT_MOTTO")
[Escaped Output] get_setting_value("PROJECT_AUTHOR")
[Escaped Output] get_setting_value("PROJECT_KEYWORDS")
[Escaped Output] stylesheet_link_tag(params[:controller])
[Escaped Output] stylesheet_link_tag("application", :media => "all")
[Escaped Output] stylesheet_link_tag("users")
[Escaped Output] javascript_include_tag("devise")
[Escaped Output] javascript_include_tag("bootbox")
[Escaped Output] javascript_include_tag("bootstrap-maxlength")
[Escaped Output] javascript_include_tag("jquery.tablecloth")
[Escaped Output] javascript_include_tag("jquery.tablesorter")
[Escaped Output] javascript_include_tag("modernizr")
[Escaped Output] javascript_include_tag("typeahead.bundle.min")
[Escaped Output] javascript_include_tag("tinymce/tinymce.min")
[Escaped Output] stylesheet_link_tag("bootstrap.icon-large-grey")
[Escaped Output] stylesheet_link_tag("bootstrap.icon-large-red")
[Escaped Output] stylesheet_link_tag("bootstrap.icon-large-blue")
[Escaped Output] stylesheet_link_tag("bootstrap.icon-large-green")
[Escaped Output] stylesheet_link_tag("bootstrap.icon-large-yellow")
[Escaped Output] stylesheet_link_tag("bootstrap.icon-large-violet")
[Escaped Output] stylesheet_link_tag("bootstrap.icon-large-cyan")
[Escaped Output] stylesheet_link_tag("css/dstyle.css", :title => "main-css")
[Escaped Output] csrf_meta_tags
[Escaped Output] yield(:javascript_includes)
[Escaped Output] yield(:head)
[Escaped Output] javascript_include_tag("typeahead.bundle.min")
[Escaped Output] javascript_include_tag("bootstrap-maxlength")
[Escaped Output] link_to(image_tag("logo15.png", :class => "imagelogo"), "/")
[Escaped Output] t("home")
[Escaped Output] t("timeline")
[Escaped Output] t("messaging")
[Escaped Output] t("blog")
[Escaped Output] t("email")
[Escaped Output] t("settings")
[Escaped Output] t("logout")
[Escaped Output] params[:controller]
[Escaped Output] params[:action]
[Escaped Output] flash[:notice]
[Escaped Output] t("notice")
[Escaped Output] flash[:alert]
[Escaped Output] t("warning")
[Escaped Output] flash[:error]
[Escaped Output] t("error")
[Escaped Output] yield
[Escaped Output] render(partial => "messages/footer", {})

layouts/application.["Api::SessionsController#destroy"]

[Escaped Output] get_setting_value("PROJECT_NAME")
[Escaped Output] get_setting_value("PROJECT_MOTTO")
[Escaped Output] get_setting_value("PROJECT_AUTHOR")
[Escaped Output] get_setting_value("PROJECT_KEYWORDS")
[Escaped Output] stylesheet_link_tag(params[:controller])
[Escaped Output] stylesheet_link_tag("application", :media => "all")
[Escaped Output] stylesheet_link_tag("users")
[Escaped Output] javascript_include_tag("devise")
[Escaped Output] javascript_include_tag("bootbox")
[Escaped Output] javascript_include_tag("bootstrap-maxlength")
[Escaped Output] javascript_include_tag("jquery.tablecloth")
[Escaped Output] javascript_include_tag("jquery.tablesorter")
[Escaped Output] javascript_include_tag("modernizr")
[Escaped Output] javascript_include_tag("typeahead.bundle.min")
[Escaped Output] javascript_include_tag("tinymce/tinymce.min")
[Escaped Output] stylesheet_link_tag("bootstrap.icon-large-grey")
[Escaped Output] stylesheet_link_tag("bootstrap.icon-large-red")
[Escaped Output] stylesheet_link_tag("bootstrap.icon-large-blue")
[Escaped Output] stylesheet_link_tag("bootstrap.icon-large-green")
[Escaped Output] stylesheet_link_tag("bootstrap.icon-large-yellow")
[Escaped Output] stylesheet_link_tag("bootstrap.icon-large-violet")
[Escaped Output] stylesheet_link_tag("bootstrap.icon-large-cyan")
[Escaped Output] stylesheet_link_tag("css/dstyle.css", :title => "main-css")
[Escaped Output] csrf_meta_tags
[Escaped Output] yield(:javascript_includes)
[Escaped Output] yield(:head)
[Escaped Output] javascript_include_tag("typeahead.bundle.min")
[Escaped Output] javascript_include_tag("bootstrap-maxlength")
[Escaped Output] link_to(image_tag("logo15.png", :class => "imagelogo"), "/")
[Escaped Output] t("home")
[Escaped Output] t("timeline")
[Escaped Output] t("messaging")
[Escaped Output] t("blog")
[Escaped Output] t("email")
[Escaped Output] t("settings")
[Escaped Output] t("logout")
[Escaped Output] params[:controller]
[Escaped Output] params[:action]
[Escaped Output] flash[:notice]
[Escaped Output] t("notice")
[Escaped Output] flash[:alert]
[Escaped Output] t("warning")
[Escaped Output] flash[:error]
[Escaped Output] t("error")
[Escaped Output] yield
[Escaped Output] render(partial => "messages/footer", {})

layouts/blog

[Escaped Output] get_setting_value("PROJECT_NAME")
[Escaped Output] get_setting_value("PROJECT_MOTTO")
[Escaped Output] get_setting_value("PROJECT_AUTHOR")
[Escaped Output] get_setting_value("PROJECT_KEYWORDS")
[Escaped Output] stylesheet_link_tag(params[:controller])
[Escaped Output] stylesheet_link_tag("application", :media => "all")
[Escaped Output] stylesheet_link_tag("users")
[Escaped Output] javascript_include_tag("jquery-3.2.1.min.js")
[Escaped Output] stylesheet_link_tag("css/dstyle.css", :title => "main-css")
[Escaped Output] stylesheet_link_tag("css/app.css")
[Escaped Output] csrf_meta_tags
[Escaped Output] yield(:javascript_includes)
[Escaped Output] yield(:head)
[Escaped Output] javascript_include_tag("bootstrap-maxlength")
[Escaped Output] @bg
[Escaped Output] render(partial => "/shared/reloaded_loader", {})
[Escaped Output] render(partial => "/shared/reloaded_header", {})
[Escaped Output] render(partial => "/shared/reloaded_summary", {})
[Escaped Output] render(partial => "/shared/reloaded_sidebar", {})
[Escaped Output] render(partial => "/shared/alerts_toaster", {})
[Escaped Output] yield
[Escaped Output] yield(:rightside_content)
[Escaped Output] javascript_include_tag("js/app.min.js")

layouts/blog.["PostsController#edit"]

[Escaped Output] get_setting_value("PROJECT_NAME")
[Escaped Output] get_setting_value("PROJECT_MOTTO")
[Escaped Output] get_setting_value("PROJECT_AUTHOR")
[Escaped Output] get_setting_value("PROJECT_KEYWORDS")
[Escaped Output] stylesheet_link_tag(params[:controller])
[Escaped Output] stylesheet_link_tag("application", :media => "all")
[Escaped Output] stylesheet_link_tag("users")
[Escaped Output] javascript_include_tag("jquery-3.2.1.min.js")
[Escaped Output] stylesheet_link_tag("css/dstyle.css", :title => "main-css")
[Escaped Output] stylesheet_link_tag("css/app.css")
[Escaped Output] csrf_meta_tags
[Escaped Output] yield(:javascript_includes)
[Escaped Output] yield(:head)
[Escaped Output] javascript_include_tag("bootstrap-maxlength")
[Escaped Output] current_user.background
[Escaped Output] render(partial => "/shared/reloaded_loader", {})
[Escaped Output] render(partial => "/shared/reloaded_header", {})
[Escaped Output] render(partial => "/shared/reloaded_summary", {})
[Escaped Output] render(partial => "/shared/reloaded_sidebar", {})
[Escaped Output] render(partial => "/shared/alerts_toaster", {})
[Escaped Output] yield
[Escaped Output] yield(:rightside_content)
[Escaped Output] javascript_include_tag("js/app.min.js")

layouts/blogOK

[Escaped Output] get_setting_value("PROJECT_NAME")
[Escaped Output] get_setting_value("PROJECT_MOTTO")
[Escaped Output] get_setting_value("PROJECT_AUTHOR")
[Escaped Output] get_setting_value("PROJECT_KEYWORDS")
[Escaped Output] stylesheet_link_tag(params[:controller])
[Escaped Output] stylesheet_link_tag("application", :media => "all")
[Escaped Output] stylesheet_link_tag("users")
[Escaped Output] javascript_include_tag("devise")
[Escaped Output] csrf_meta_tags
[Escaped Output] yield(:javascript_includes)
[Escaped Output] yield(:head)
[Escaped Output] javascript_include_tag("typeahead.bundle.min")
[Escaped Output] javascript_include_tag("bootstrap-maxlength")
[Escaped Output] params[:controller]
[Escaped Output] params[:action]
[Escaped Output] link_to(image_tag("logo15.png", :class => "imagelogo"), "/")
[Escaped Output] hidden_field_tag(:area, "firstname")
[Escaped Output] text_field_tag(:findthis, params[:query], :class => "typeahead form-controls input-sm", :placeholder => d4x_sanitizer(t("search")))
[Escaped Output] button_tag(raw("<i class=\"fa fa-search white\"></i>"), :id => "search-submit", :class => "btn btn-primary btn-sm", :method => "post", :title => d4x_sanitizer(t("search")))
[Escaped Output] form_tag("/search", :method => "get", :role => "search") do; [Escaped Output] hidden_field_tag(:area, "firstname");[Escaped Output] text_field_tag(:findthis, params[:query], :class => "typeahead form-controls input-sm", :placeholder => d4x_sanitizer(t("search")));[Escaped Output] button_tag(raw("<i class=\"fa fa-search white\"></i>"), :id => "search-submit", :class => "btn btn-primary btn-sm", :method => "post", :title => d4x_sanitizer(t("search"))); end
[Escaped Output] @blog.title
[Escaped Output] @blog.motto
[Escaped Output] flash[:notice]
[Escaped Output] t("notice")
[Escaped Output] flash[:alert]
[Escaped Output] t("warning")
[Escaped Output] flash[:error]
[Escaped Output] t("error")
[Escaped Output] yield
[Escaped Output] render(partial => "posts/footer", {})
[Escaped Output] render(partial => "posts/footeru", {})
[Escaped Output] render(partial => "posts/footeru", {})

layouts/d4x337blog

[Escaped Output] get_setting_value("PROJECT_NAME")
[Escaped Output] get_setting_value("PROJECT_MOTTO")
[Escaped Output] get_setting_value("PROJECT_AUTHOR")
[Escaped Output] get_setting_value("PROJECT_KEYWORDS")
[Escaped Output] stylesheet_link_tag(params[:controller])
[Escaped Output] stylesheet_link_tag("application", :media => "all")
[Escaped Output] stylesheet_link_tag("users")
[Escaped Output] javascript_include_tag("jquery-3.2.1.min.js")
[Escaped Output] stylesheet_link_tag("css/dstyle.css", :title => "main-css")
[Escaped Output] stylesheet_link_tag("css/app.min.css")
[Escaped Output] csrf_meta_tags
[Escaped Output] yield(:javascript_includes)
[Escaped Output] yield(:head)
[Escaped Output] javascript_include_tag("bootstrap-maxlength")
[Escaped Output] @bg
[Escaped Output] render(partial => "/shared/reloaded_loader", {})
[Escaped Output] render(partial => "/shared/reloaded_header", {})
[Escaped Output] render(partial => "/shared/reloaded_summary", {})
[Escaped Output] render(partial => "/shared/reloaded_sidebar", {})
[Escaped Output] render(partial => "/shared/alerts_toaster", {})
[Escaped Output] yield
[Escaped Output] yield(:rightside_content)
[Escaped Output] javascript_include_tag("js/app.min.js")

layouts/dashboard

[Escaped Output] get_setting_value("PROJECT_NAME")
[Escaped Output] get_setting_value("PROJECT_MOTTO")
[Escaped Output] get_setting_value("PROJECT_AUTHOR")
[Escaped Output] get_setting_value("PROJECT_KEYWORDS")
[Escaped Output] stylesheet_link_tag(params[:controller])
[Escaped Output] stylesheet_link_tag("application", :media => "all")
[Escaped Output] stylesheet_link_tag("users")
[Escaped Output] javascript_include_tag("devise")
[Escaped Output] stylesheet_link_tag("css/dstyle.css", :title => "main-css")
[Escaped Output] stylesheet_link_tag("css/app.css")
[Escaped Output] csrf_meta_tags
[Escaped Output] yield(:javascript_includes)
[Escaped Output] yield(:head)
[Escaped Output] javascript_include_tag("bootstrap-maxlength")
[Escaped Output] @bg
[Escaped Output] render(partial => "/shared/reloaded_loader", {})
[Escaped Output] render(partial => "/shared/reloaded_header", {})
[Escaped Output] render(partial => "/shared/reloaded_summary", {})
[Escaped Output] render(partial => "/shared/reloaded_sidebar", {})
[Escaped Output] render(partial => "/shared/alerts_toaster", {})
[Escaped Output] yield
[Escaped Output] yield(:rightside_title)
[Escaped Output] yield(:rightside_subtitle)
[Escaped Output] yield(:rightside_content)
[Escaped Output] javascript_include_tag("js/app.min.js")

layouts/dashboard.["AdsController#edit"]

[Escaped Output] get_setting_value("PROJECT_NAME")
[Escaped Output] get_setting_value("PROJECT_MOTTO")
[Escaped Output] get_setting_value("PROJECT_AUTHOR")
[Escaped Output] get_setting_value("PROJECT_KEYWORDS")
[Escaped Output] stylesheet_link_tag(params[:controller])
[Escaped Output] stylesheet_link_tag("application", :media => "all")
[Escaped Output] stylesheet_link_tag("users")
[Escaped Output] javascript_include_tag("devise")
[Escaped Output] stylesheet_link_tag("css/dstyle.css", :title => "main-css")
[Escaped Output] stylesheet_link_tag("css/app.css")
[Escaped Output] csrf_meta_tags
[Escaped Output] yield(:javascript_includes)
[Escaped Output] yield(:head)
[Escaped Output] javascript_include_tag("bootstrap-maxlength")
[Escaped Output] current_user.background
[Escaped Output] render(partial => "/shared/reloaded_loader", {})
[Escaped Output] render(partial => "/shared/reloaded_header", {})
[Escaped Output] render(partial => "/shared/reloaded_summary", {})
[Escaped Output] render(partial => "/shared/reloaded_sidebar", {})
[Escaped Output] render(partial => "/shared/alerts_toaster", {})
[Escaped Output] yield
[Escaped Output] yield(:rightside_title)
[Escaped Output] yield(:rightside_subtitle)
[Escaped Output] yield(:rightside_content)
[Escaped Output] javascript_include_tag("js/app.min.js")

layouts/devise

[Escaped Output] get_setting_value("PROJECT_NAME")
[Escaped Output] get_setting_value("PROJECT_MOTTO")
[Escaped Output] get_setting_value("PROJECT_AUTHOR")
[Escaped Output] get_setting_value("PROJECT_KEYWORDS")
[Escaped Output] csrf_meta_tags
[Escaped Output] stylesheet_link_tag("application", :media => "all")
[Escaped Output] stylesheet_link_tag("users")
[Escaped Output] stylesheet_link_tag("css/newstyle.css")
[Escaped Output] stylesheet_link_tag("css/app.css")
[Escaped Output] javascript_include_tag("js/app.min.js")
[Escaped Output] javascript_include_tag("devise")
[Escaped Output] yield(:javascript_includes)
[Escaped Output] yield(:head)
[Escaped Output] notice
[Escaped Output] t("notice")
[Escaped Output] alert
[Escaped Output] t("warning")
[Escaped Output] value
[Escaped Output] key
[Escaped Output] yield
[Escaped Output] yield(:javascript)

layouts/devise.["PhoneNumbersController#new"]

[Escaped Output] get_setting_value("PROJECT_NAME")
[Escaped Output] get_setting_value("PROJECT_MOTTO")
[Escaped Output] get_setting_value("PROJECT_AUTHOR")
[Escaped Output] get_setting_value("PROJECT_KEYWORDS")
[Escaped Output] csrf_meta_tags
[Escaped Output] stylesheet_link_tag("application", :media => "all")
[Escaped Output] stylesheet_link_tag("users")
[Escaped Output] stylesheet_link_tag("css/newstyle.css")
[Escaped Output] stylesheet_link_tag("css/app.css")
[Escaped Output] javascript_include_tag("js/app.min.js")
[Escaped Output] javascript_include_tag("devise")
[Escaped Output] yield(:javascript_includes)
[Escaped Output] yield(:head)
[Escaped Output] notice
[Escaped Output] t("notice")
[Escaped Output] alert
[Escaped Output] t("warning")
[Escaped Output] value
[Escaped Output] key
[Escaped Output] yield
[Escaped Output] yield(:javascript)

layouts/email

[Escaped Output] get_setting_value("PROJECT_NAME")
[Escaped Output] get_setting_value("PROJECT_MOTTO")
[Escaped Output] get_setting_value("PROJECT_AUTHOR")
[Escaped Output] get_setting_value("PROJECT_KEYWORDS")
[Escaped Output] stylesheet_link_tag(params[:controller])
[Escaped Output] stylesheet_link_tag("application", :media => "all")
[Escaped Output] stylesheet_link_tag("users")
[Escaped Output] javascript_include_tag("devise")
[Escaped Output] stylesheet_link_tag("css/dstyle.css", :title => "main-css")
[Escaped Output] javascript_include_tag("modernizr")
[Escaped Output] stylesheet_link_tag("css/app.css")
[Escaped Output] csrf_meta_tags
[Escaped Output] yield(:javascript_includes)
[Escaped Output] yield(:head)
[Escaped Output] @bg
[Escaped Output] render(partial => "/shared/reloaded_loader", {})
[Escaped Output] render(partial => "/shared/reloaded_header", {})
[Escaped Output] render(partial => "/shared/reloaded_summary", {})
[Escaped Output] render(partial => "/shared/reloaded_sidebar", {})
[Escaped Output] render(partial => "/shared/alerts_toaster", {})
[Escaped Output] yield
[Escaped Output] yield(:rightcol)
[Escaped Output] javascript_include_tag("js/app.min.js")

layouts/home

[Escaped Output] get_setting_value("PROJECT_NAME")
[Escaped Output] get_setting_value("PROJECT_MOTTO")
[Escaped Output] get_setting_value("PROJECT_AUTHOR")
[Escaped Output] get_setting_value("PROJECT_KEYWORDS")
[Escaped Output] stylesheet_link_tag(params[:controller])
[Escaped Output] stylesheet_link_tag("application", :media => "all")
[Escaped Output] stylesheet_link_tag("users")
[Escaped Output] javascript_include_tag("pictures.js")
[Escaped Output] stylesheet_link_tag("css/dstyle.css", :title => "main-css")
[Escaped Output] stylesheet_link_tag("css/app.css")
[Escaped Output] csrf_meta_tags
[Escaped Output] yield(:javascript_includes)
[Escaped Output] yield(:head)
[Escaped Output] @bg
[Escaped Output] render(partial => "/shared/reloaded_loader", {})
[Escaped Output] render(partial => "/shared/reloaded_header_demo", {})
[Escaped Output] render(partial => "/shared/reloaded_summary_demo", {})
[Escaped Output] render(partial => "/shared/reloaded_sidebar_demo", {})
[Escaped Output] render(partial => "/shared/alerts_toaster", {})
[Escaped Output] yield
[Escaped Output] javascript_include_tag("js/app.min.js")

layouts/indexnew

[Escaped Output] get_setting_value("PROJECT_NAME")
[Escaped Output] get_setting_value("PROJECT_MOTTO")
[Escaped Output] get_setting_value("PROJECT_AUTHOR")
[Escaped Output] csrf_meta_tags
[Escaped Output] javascript_include_tag("jquery-3.2.1.min.js")
[Escaped Output] stylesheet_link_tag("css/royal_preloader.css")
[Escaped Output] stylesheet_link_tag("css/bootstrap.min.css")
[Escaped Output] @skin
[Escaped Output] yield(:javascript_includes)
[Escaped Output] yield(:head)
[Escaped Output] yield

layouts/indexnew.["IndexController#about"]

[Escaped Output] get_setting_value("PROJECT_NAME")
[Escaped Output] get_setting_value("PROJECT_MOTTO")
[Escaped Output] get_setting_value("PROJECT_AUTHOR")
[Escaped Output] csrf_meta_tags
[Escaped Output] javascript_include_tag("jquery-3.2.1.min.js")
[Escaped Output] stylesheet_link_tag("css/royal_preloader.css")
[Escaped Output] stylesheet_link_tag("css/bootstrap.min.css")

[Escaped Output] yield(:javascript_includes)
[Escaped Output] yield(:head)
[Escaped Output] yield

layouts/messages

[Escaped Output] get_setting_value("PROJECT_NAME")
[Escaped Output] get_setting_value("PROJECT_MOTTO")
[Escaped Output] get_setting_value("PROJECT_AUTHOR")
[Escaped Output] get_setting_value("PROJECT_KEYWORDS")
[Escaped Output] stylesheet_link_tag(params[:controller])
[Escaped Output] stylesheet_link_tag("application", :media => "all")
[Escaped Output] stylesheet_link_tag("users")
[Escaped Output] javascript_include_tag("jquery-3.2.1.min.js")
[Escaped Output] stylesheet_link_tag("css/dstyle.css", :title => "main-css")
[Escaped Output] stylesheet_link_tag("css/newstyle.css")
[Escaped Output] stylesheet_link_tag("css/app.css")
[Escaped Output] csrf_meta_tags
[Escaped Output] yield(:javascript_includes)
[Escaped Output] yield(:head)
[Escaped Output] javascript_include_tag("bootstrap-maxlength")
[Escaped Output] @bg
[Escaped Output] render(partial => "/shared/reloaded_loader", {})
[Escaped Output] render(partial => "/shared/reloaded_header", {})
[Escaped Output] render(partial => "/shared/reloaded_summary", {})
[Escaped Output] render(partial => "/shared/reloaded_sidebar", {})
[Escaped Output] render(partial => "/shared/alerts_toaster", {})
[Escaped Output] yield
[Escaped Output] yield(:rightside_content)
[Escaped Output] javascript_include_tag("js/app.min.js")

layouts/messages.["Api::V1::MessagesController#fetch_message"]

[Escaped Output] get_setting_value("PROJECT_NAME")
[Escaped Output] get_setting_value("PROJECT_MOTTO")
[Escaped Output] get_setting_value("PROJECT_AUTHOR")
[Escaped Output] get_setting_value("PROJECT_KEYWORDS")
[Escaped Output] stylesheet_link_tag(params[:controller])
[Escaped Output] stylesheet_link_tag("application", :media => "all")
[Escaped Output] stylesheet_link_tag("users")
[Escaped Output] javascript_include_tag("jquery-3.2.1.min.js")
[Escaped Output] stylesheet_link_tag("css/dstyle.css", :title => "main-css")
[Escaped Output] stylesheet_link_tag("css/newstyle.css")
[Escaped Output] stylesheet_link_tag("css/app.css")
[Escaped Output] csrf_meta_tags
[Escaped Output] yield(:javascript_includes)
[Escaped Output] yield(:head)
[Escaped Output] javascript_include_tag("bootstrap-maxlength")
[Escaped Output] current_user.background
[Escaped Output] render(partial => "/shared/reloaded_loader", {})
[Escaped Output] render(partial => "/shared/reloaded_header", {})
[Escaped Output] render(partial => "/shared/reloaded_summary", {})
[Escaped Output] render(partial => "/shared/reloaded_sidebar", {})
[Escaped Output] render(partial => "/shared/alerts_toaster", {})
[Escaped Output] yield
[Escaped Output] yield(:rightside_content)
[Escaped Output] javascript_include_tag("js/app.min.js")

layouts/profile

[Escaped Output] get_setting_value("PROJECT_NAME")
[Escaped Output] get_setting_value("PROJECT_MOTTO")
[Escaped Output] get_setting_value("PROJECT_AUTHOR")
[Escaped Output] get_setting_value("PROJECT_KEYWORDS")
[Escaped Output] stylesheet_link_tag(params[:controller])
[Escaped Output] stylesheet_link_tag("application", :media => "all")
[Escaped Output] stylesheet_link_tag("users")
[Escaped Output] stylesheet_link_tag("css/dstyle.css", :title => "main-css")
[Escaped Output] javascript_include_tag("devise")
[Escaped Output] stylesheet_link_tag("css/newstyle.css")
[Escaped Output] stylesheet_link_tag("css/app.css")
[Escaped Output] csrf_meta_tags
[Escaped Output] yield(:javascript_includes)
[Escaped Output] yield(:head)
[Escaped Output] javascript_include_tag("bootstrap-maxlength")
[Escaped Output] @bg
[Escaped Output] render(partial => "/shared/reloaded_loader", {})
[Escaped Output] render(partial => "/shared/reloaded_header", {})
[Escaped Output] render(partial => "/shared/reloaded_summary", {})
[Escaped Output] render(partial => "/shared/reloaded_sidebar", {})
[Escaped Output] render(partial => "/shared/alerts_toaster", {})
[Escaped Output] yield
[Escaped Output] javascript_include_tag("js/app.min.js")

layouts/reloaded

[Escaped Output] get_setting_value("PROJECT_NAME")
[Escaped Output] get_setting_value("PROJECT_MOTTO")
[Escaped Output] get_setting_value("PROJECT_AUTHOR")
[Escaped Output] get_setting_value("PROJECT_KEYWORDS")
[Escaped Output] stylesheet_link_tag(params[:controller])
[Escaped Output] stylesheet_link_tag("application", :media => "all")
[Escaped Output] stylesheet_link_tag("users")
[Escaped Output] javascript_include_tag("devise")
[Escaped Output] stylesheet_link_tag("css/dstyle.css", :title => "main-css")
[Escaped Output] stylesheet_link_tag("css/app.css")
[Escaped Output] csrf_meta_tags
[Escaped Output] yield(:javascript_includes)
[Escaped Output] yield(:head)
[Escaped Output] javascript_include_tag("typeahead.bundle.min")
[Escaped Output] javascript_include_tag("bootstrap-maxlength")
[Escaped Output] @bg = current_user.background
[Escaped Output] @bg
[Escaped Output] render(partial => "/shared/reloaded_loader", {})
[Escaped Output] render(partial => "/shared/reloaded_header", {})
[Escaped Output] render(partial => "/shared/reloaded_summary", {})
[Escaped Output] render(partial => "/shared/reloaded_sidebar", {})
[Escaped Output] yield(:page_title)
[Escaped Output] yield(:page_descr)
[Escaped Output] flash[:notice]
[Escaped Output] t("notice")
[Escaped Output] flash[:alert]
[Escaped Output] t("warning")
[Escaped Output] flash[:error]
[Escaped Output] t("error")
[Escaped Output] yield
[Escaped Output] javascript_include_tag("js/app.min.js")

layouts/reloaded.["DatingController#profile"]

[Escaped Output] get_setting_value("PROJECT_NAME")
[Escaped Output] get_setting_value("PROJECT_MOTTO")
[Escaped Output] get_setting_value("PROJECT_AUTHOR")
[Escaped Output] get_setting_value("PROJECT_KEYWORDS")
[Escaped Output] stylesheet_link_tag(params[:controller])
[Escaped Output] stylesheet_link_tag("application", :media => "all")
[Escaped Output] stylesheet_link_tag("users")
[Escaped Output] javascript_include_tag("devise")
[Escaped Output] stylesheet_link_tag("css/dstyle.css", :title => "main-css")
[Escaped Output] stylesheet_link_tag("css/app.css")
[Escaped Output] csrf_meta_tags
[Escaped Output] yield(:javascript_includes)
[Escaped Output] yield(:head)
[Escaped Output] javascript_include_tag("typeahead.bundle.min")
[Escaped Output] javascript_include_tag("bootstrap-maxlength")
[Escaped Output] @bg = current_user.background
[Escaped Output] current_user.background
[Escaped Output] render(partial => "/shared/reloaded_loader", {})
[Escaped Output] render(partial => "/shared/reloaded_header", {})
[Escaped Output] render(partial => "/shared/reloaded_summary", {})
[Escaped Output] render(partial => "/shared/reloaded_sidebar", {})
[Escaped Output] yield(:page_title)
[Escaped Output] yield(:page_descr)
[Escaped Output] flash[:notice]
[Escaped Output] t("notice")
[Escaped Output] flash[:alert]
[Escaped Output] t("warning")
[Escaped Output] flash[:error]
[Escaped Output] t("error")
[Escaped Output] yield
[Escaped Output] javascript_include_tag("js/app.min.js")

layouts/search

[Escaped Output] get_setting_value("PROJECT_NAME")
[Escaped Output] get_setting_value("PROJECT_MOTTO")
[Escaped Output] get_setting_value("PROJECT_AUTHOR")
[Escaped Output] get_setting_value("PROJECT_KEYWORDS")
[Escaped Output] stylesheet_link_tag(params[:controller])
[Escaped Output] stylesheet_link_tag("application", :media => "all")
[Escaped Output] stylesheet_link_tag("users")
[Escaped Output] javascript_include_tag("pictures.js")
[Escaped Output] stylesheet_link_tag("css/dstyle.css", :title => "main-css")
[Escaped Output] stylesheet_link_tag("css/app.css")
[Escaped Output] csrf_meta_tags
[Escaped Output] yield(:javascript_includes)
[Escaped Output] yield(:head)
[Escaped Output] @bg
[Escaped Output] render(partial => "/shared/reloaded_loader", {})
[Escaped Output] render(partial => "/shared/reloaded_header", {})
[Escaped Output] render(partial => "/shared/reloaded_summary", {})
[Escaped Output] render(partial => "/shared/reloaded_sidebar", {})
[Escaped Output] render(partial => "/shared/alerts_toaster", {})
[Escaped Output] yield
[Escaped Output] javascript_include_tag("js/app.min.js")

layouts/search.["Api::V1::SearchController#fetch_search"]

[Escaped Output] get_setting_value("PROJECT_NAME")
[Escaped Output] get_setting_value("PROJECT_MOTTO")
[Escaped Output] get_setting_value("PROJECT_AUTHOR")
[Escaped Output] get_setting_value("PROJECT_KEYWORDS")
[Escaped Output] stylesheet_link_tag(params[:controller])
[Escaped Output] stylesheet_link_tag("application", :media => "all")
[Escaped Output] stylesheet_link_tag("users")
[Escaped Output] javascript_include_tag("pictures.js")
[Escaped Output] stylesheet_link_tag("css/dstyle.css", :title => "main-css")
[Escaped Output] stylesheet_link_tag("css/app.css")
[Escaped Output] csrf_meta_tags
[Escaped Output] yield(:javascript_includes)
[Escaped Output] yield(:head)
[Escaped Output] current_user.background
[Escaped Output] render(partial => "/shared/reloaded_loader", {})
[Escaped Output] render(partial => "/shared/reloaded_header", {})
[Escaped Output] render(partial => "/shared/reloaded_summary", {})
[Escaped Output] render(partial => "/shared/reloaded_sidebar", {})
[Escaped Output] render(partial => "/shared/alerts_toaster", {})
[Escaped Output] yield
[Escaped Output] javascript_include_tag("js/app.min.js")

layouts/social

[Escaped Output] get_setting_value("PROJECT_NAME")
[Escaped Output] get_setting_value("PROJECT_MOTTO")
[Escaped Output] get_setting_value("PROJECT_AUTHOR")
[Escaped Output] get_setting_value("PROJECT_KEYWORDS")
[Escaped Output] stylesheet_link_tag(params[:controller])
[Escaped Output] stylesheet_link_tag("application", :media => "all")
[Escaped Output] stylesheet_link_tag("users")
[Escaped Output] javascript_include_tag("devise")
[Escaped Output] javascript_include_tag("bootbox")
[Escaped Output] javascript_include_tag("bootstrap-maxlength")
[Escaped Output] javascript_include_tag("jquery.tablecloth")
[Escaped Output] javascript_include_tag("jquery.tablesorter")
[Escaped Output] javascript_include_tag("modernizr")
[Escaped Output] javascript_include_tag("typeahead.bundle.min")
[Escaped Output] javascript_include_tag("tinymce/tinymce.min")
[Escaped Output] stylesheet_link_tag("bootstrap.icon-large-grey")
[Escaped Output] stylesheet_link_tag("bootstrap.icon-large-red")
[Escaped Output] stylesheet_link_tag("bootstrap.icon-large-blue")
[Escaped Output] stylesheet_link_tag("bootstrap.icon-large-green")
[Escaped Output] stylesheet_link_tag("bootstrap.icon-large-yellow")
[Escaped Output] stylesheet_link_tag("bootstrap.icon-large-violet")
[Escaped Output] stylesheet_link_tag("bootstrap.icon-large-cyan")
[Escaped Output] stylesheet_link_tag("css/dstyle.css", :title => "main-css")
[Escaped Output] stylesheet_link_tag("css/newstyle.css")
[Escaped Output] stylesheet_link_tag("css/app.css")
[Escaped Output] csrf_meta_tags
[Escaped Output] yield(:javascript_includes)
[Escaped Output] yield(:head)
[Escaped Output] javascript_include_tag("bootstrap-maxlength")
[Escaped Output] @bg
[Escaped Output] render(partial => "/shared/reloaded_loader", {})
[Escaped Output] render(partial => "/shared/reloaded_header", {})
[Escaped Output] render(partial => "/shared/reloaded_summary", {})
[Escaped Output] render(partial => "/shared/reloaded_sidebar", {})
[Escaped Output] render(partial => "/shared/alerts_toaster", {})
[Escaped Output] yield
[Escaped Output] yield(:rightside_title)
[Escaped Output] yield(:rightside_subtitle)
[Escaped Output] yield(:rightside_content)
[Escaped Output] javascript_include_tag("js/app.min.js")

layouts/social.["InvitationsController#edit"]

[Escaped Output] get_setting_value("PROJECT_NAME")
[Escaped Output] get_setting_value("PROJECT_MOTTO")
[Escaped Output] get_setting_value("PROJECT_AUTHOR")
[Escaped Output] get_setting_value("PROJECT_KEYWORDS")
[Escaped Output] stylesheet_link_tag(params[:controller])
[Escaped Output] stylesheet_link_tag("application", :media => "all")
[Escaped Output] stylesheet_link_tag("users")
[Escaped Output] javascript_include_tag("devise")
[Escaped Output] javascript_include_tag("bootbox")
[Escaped Output] javascript_include_tag("bootstrap-maxlength")
[Escaped Output] javascript_include_tag("jquery.tablecloth")
[Escaped Output] javascript_include_tag("jquery.tablesorter")
[Escaped Output] javascript_include_tag("modernizr")
[Escaped Output] javascript_include_tag("typeahead.bundle.min")
[Escaped Output] javascript_include_tag("tinymce/tinymce.min")
[Escaped Output] stylesheet_link_tag("bootstrap.icon-large-grey")
[Escaped Output] stylesheet_link_tag("bootstrap.icon-large-red")
[Escaped Output] stylesheet_link_tag("bootstrap.icon-large-blue")
[Escaped Output] stylesheet_link_tag("bootstrap.icon-large-green")
[Escaped Output] stylesheet_link_tag("bootstrap.icon-large-yellow")
[Escaped Output] stylesheet_link_tag("bootstrap.icon-large-violet")
[Escaped Output] stylesheet_link_tag("bootstrap.icon-large-cyan")
[Escaped Output] stylesheet_link_tag("css/dstyle.css", :title => "main-css")
[Escaped Output] stylesheet_link_tag("css/newstyle.css")
[Escaped Output] stylesheet_link_tag("css/app.css")
[Escaped Output] csrf_meta_tags
[Escaped Output] yield(:javascript_includes)
[Escaped Output] yield(:head)
[Escaped Output] javascript_include_tag("bootstrap-maxlength")
[Escaped Output] current_user.background
[Escaped Output] render(partial => "/shared/reloaded_loader", {})
[Escaped Output] render(partial => "/shared/reloaded_header", {})
[Escaped Output] render(partial => "/shared/reloaded_summary", {})
[Escaped Output] render(partial => "/shared/reloaded_sidebar", {})
[Escaped Output] render(partial => "/shared/alerts_toaster", {})
[Escaped Output] yield
[Escaped Output] yield(:rightside_title)
[Escaped Output] yield(:rightside_subtitle)
[Escaped Output] yield(:rightside_content)
[Escaped Output] javascript_include_tag("js/app.min.js")

links/_form

[Escaped Output] pluralize(@link.errors.count, t("error"))
[Escaped Output] msg
[Escaped Output] f.label(t(:name), :class => "show-item-label")
[Escaped Output] f.text_field(:name, :size => 90, :class => "def-input")
[Escaped Output] f.label(t(:url), :class => "show-item-label")
[Escaped Output] f.url_field(:url, :size => 90)
[Escaped Output] f.label(t(:description), :class => "show-item-label")
[Escaped Output] f.text_field(:description, :size => 90, :class => "def-input")
[Escaped Output] f.label(t(:summary), :class => "show-item-label")
[Escaped Output] f.text_area(:notes, :size => "87x12")
[Escaped Output] f.label(t(:image), :class => "show-item-label")
[Escaped Output] f.text_field(:image, :class => "def-input")
[Escaped Output] f.file_field(:image)
[Escaped Output] f.label(t(:target), :class => "show-item-label")
[Escaped Output] f.select(:target, options_for_select([["_blank", "_blank"], ["_window", "_window"], ["_self", "_self"], ["_parent", "_parent"]], @link.target))
[Escaped Output] f.label(t(:visible), :class => "show-item-label")
[Escaped Output] f.check_box(:visible)
[Escaped Output] f.label(t(:rating), :class => "show-item-label")
[Escaped Output] f.select(:rating, options_for_select([["0 - unrated", "0"], ["1 - disaster", "1"], ["2 - two", "2"], ["3 - heavy insufficient", "3"], ["4 - insuffient", "4"], ["5 - scarso", "5"], ["6 - sufficient", "6"], ["7 - average", "7"], ["8 - good", "8"], ["9 - very good", "9"], ["10- cool", "10"]], @link.rating))
[Escaped Output] image_tag(@link.image.url, :class => "snapshot")
[Escaped Output] f.submit(:class => "button-d4x")
[Escaped Output] form_for(@link) do; if @link.errors.any? then; [Escaped Output] pluralize(@link.errors.count, t("error")); @link.errors.full_messages.each do; [Escaped Output] msg; end;end;[Escaped Output] f.label(t(:name), :class => "show-item-label");[Escaped Output] f.text_field(:name, :size => 90, :class => "def-input");[Escaped Output] f.label(t(:url), :class => "show-item-label");[Escaped Output] f.url_field(:url, :size => 90);[Escaped Output] f.label(t(:description), :class => "show-item-label");[Escaped Output] f.text_field(:description, :size => 90, :class => "def-input");[Escaped Output] f.label(t(:summary), :class => "show-item-label");[Escaped Output] f.text_area(:notes, :size => "87x12");[Escaped Output] f.label(t(:image), :class => "show-item-label");[Escaped Output] f.text_field(:image, :class => "def-input");[Escaped Output] f.file_field(:image);[Escaped Output] f.label(t(:target), :class => "show-item-label");[Escaped Output] f.select(:target, options_for_select([["_blank", "_blank"], ["_window", "_window"], ["_self", "_self"], ["_parent", "_parent"]], @link.target));[Escaped Output] f.label(t(:visible), :class => "show-item-label");[Escaped Output] f.check_box(:visible);[Escaped Output] f.label(t(:rating), :class => "show-item-label");[Escaped Output] f.select(:rating, options_for_select([["0 - unrated", "0"], ["1 - disaster", "1"], ["2 - two", "2"], ["3 - heavy insufficient", "3"], ["4 - insuffient", "4"], ["5 - scarso", "5"], ["6 - sufficient", "6"], ["7 - average", "7"], ["8 - good", "8"], ["9 - very good", "9"], ["10- cool", "10"]], @link.rating));[Escaped Output] image_tag(@link.image.url, :class => "snapshot");[Escaped Output] f.submit(:class => "button-d4x"); end

links/_form.["LinksController#create", "Template:links/new"]

[Escaped Output] pluralize(Link.new(links_params).errors.count, t("error"))
[Escaped Output] msg
[Escaped Output] FormBuilder.new.label(t(:name), :class => "show-item-label")
[Escaped Output] FormBuilder.new.text_field(:name, :size => 90, :class => "def-input")
[Escaped Output] FormBuilder.new.label(t(:url), :class => "show-item-label")
[Escaped Output] FormBuilder.new.url_field(:url, :size => 90)
[Escaped Output] FormBuilder.new.label(t(:description), :class => "show-item-label")
[Escaped Output] FormBuilder.new.text_field(:description, :size => 90, :class => "def-input")
[Escaped Output] FormBuilder.new.label(t(:summary), :class => "show-item-label")
[Escaped Output] FormBuilder.new.text_area(:notes, :size => "87x12")
[Escaped Output] FormBuilder.new.label(t(:image), :class => "show-item-label")
[Escaped Output] FormBuilder.new.text_field(:image, :class => "def-input")
[Escaped Output] FormBuilder.new.file_field(:image)
[Escaped Output] FormBuilder.new.label(t(:target), :class => "show-item-label")
[Escaped Output] FormBuilder.new.select(:target, options_for_select([["_blank", "_blank"], ["_window", "_window"], ["_self", "_self"], ["_parent", "_parent"]], Link.new(links_params).target))
[Escaped Output] FormBuilder.new.label(t(:visible), :class => "show-item-label")
[Escaped Output] FormBuilder.new.check_box(:visible)
[Escaped Output] FormBuilder.new.label(t(:rating), :class => "show-item-label")
[Escaped Output] FormBuilder.new.select(:rating, options_for_select([["0 - unrated", "0"], ["1 - disaster", "1"], ["2 - two", "2"], ["3 - heavy insufficient", "3"], ["4 - insuffient", "4"], ["5 - scarso", "5"], ["6 - sufficient", "6"], ["7 - average", "7"], ["8 - good", "8"], ["9 - very good", "9"], ["10- cool", "10"]], Link.new(links_params).rating))
[Escaped Output] image_tag(Link.new(links_params).image.url, :class => "snapshot")
[Escaped Output] FormBuilder.new.submit(:class => "button-d4x")
[Escaped Output] form_for(Link.new(links_params)) do; if Link.new(links_params).errors.any? then; [Escaped Output] pluralize(Link.new(links_params).errors.count, t("error")); Link.new(links_params).errors.full_messages.each do; [Escaped Output] msg; end;end;[Escaped Output] FormBuilder.new.label(t(:name), :class => "show-item-label");[Escaped Output] FormBuilder.new.text_field(:name, :size => 90, :class => "def-input");[Escaped Output] FormBuilder.new.label(t(:url), :class => "show-item-label");[Escaped Output] FormBuilder.new.url_field(:url, :size => 90);[Escaped Output] FormBuilder.new.label(t(:description), :class => "show-item-label");[Escaped Output] FormBuilder.new.text_field(:description, :size => 90, :class => "def-input");[Escaped Output] FormBuilder.new.label(t(:summary), :class => "show-item-label");[Escaped Output] FormBuilder.new.text_area(:notes, :size => "87x12");[Escaped Output] FormBuilder.new.label(t(:image), :class => "show-item-label");[Escaped Output] FormBuilder.new.text_field(:image, :class => "def-input");[Escaped Output] FormBuilder.new.file_field(:image);[Escaped Output] FormBuilder.new.label(t(:target), :class => "show-item-label");[Escaped Output] FormBuilder.new.select(:target, options_for_select([["_blank", "_blank"], ["_window", "_window"], ["_self", "_self"], ["_parent", "_parent"]], Link.new(links_params).target));[Escaped Output] FormBuilder.new.label(t(:visible), :class => "show-item-label");[Escaped Output] FormBuilder.new.check_box(:visible);[Escaped Output] FormBuilder.new.label(t(:rating), :class => "show-item-label");[Escaped Output] FormBuilder.new.select(:rating, options_for_select([["0 - unrated", "0"], ["1 - disaster", "1"], ["2 - two", "2"], ["3 - heavy insufficient", "3"], ["4 - insuffient", "4"], ["5 - scarso", "5"], ["6 - sufficient", "6"], ["7 - average", "7"], ["8 - good", "8"], ["9 - very good", "9"], ["10- cool", "10"]], Link.new(links_params).rating));[Escaped Output] image_tag(Link.new(links_params).image.url, :class => "snapshot");[Escaped Output] FormBuilder.new.submit(:class => "button-d4x"); end

links/_form.["LinksController#edit", "Template:links/edit"]

[Escaped Output] pluralize(Link.find(params[:id]).errors.count, t("error"))
[Escaped Output] (Unresolved Model).new
[Escaped Output] FormBuilder.new.label(t(:name), :class => "show-item-label")
[Escaped Output] FormBuilder.new.text_field(:name, :size => 90, :class => "def-input")
[Escaped Output] FormBuilder.new.label(t(:url), :class => "show-item-label")
[Escaped Output] FormBuilder.new.url_field(:url, :size => 90)
[Escaped Output] FormBuilder.new.label(t(:description), :class => "show-item-label")
[Escaped Output] FormBuilder.new.text_field(:description, :size => 90, :class => "def-input")
[Escaped Output] FormBuilder.new.label(t(:summary), :class => "show-item-label")
[Escaped Output] FormBuilder.new.text_area(:notes, :size => "87x12")
[Escaped Output] FormBuilder.new.label(t(:image), :class => "show-item-label")
[Escaped Output] FormBuilder.new.text_field(:image, :class => "def-input")
[Escaped Output] FormBuilder.new.file_field(:image)
[Escaped Output] FormBuilder.new.label(t(:target), :class => "show-item-label")
[Escaped Output] FormBuilder.new.select(:target, options_for_select([["_blank", "_blank"], ["_window", "_window"], ["_self", "_self"], ["_parent", "_parent"]], Link.find(params[:id]).target))
[Escaped Output] FormBuilder.new.label(t(:visible), :class => "show-item-label")
[Escaped Output] FormBuilder.new.check_box(:visible)
[Escaped Output] FormBuilder.new.label(t(:rating), :class => "show-item-label")
[Escaped Output] FormBuilder.new.select(:rating, options_for_select([["0 - unrated", "0"], ["1 - disaster", "1"], ["2 - two", "2"], ["3 - heavy insufficient", "3"], ["4 - insuffient", "4"], ["5 - scarso", "5"], ["6 - sufficient", "6"], ["7 - average", "7"], ["8 - good", "8"], ["9 - very good", "9"], ["10- cool", "10"]], Link.find(params[:id]).rating))
[Escaped Output] image_tag(Link.find(params[:id]).image.url, :class => "snapshot")
[Escaped Output] FormBuilder.new.submit(:class => "button-d4x")
[Escaped Output] form_for(Link.find(params[:id])) do; if Link.find(params[:id]).errors.any? then; [Escaped Output] pluralize(Link.find(params[:id]).errors.count, t("error")); Link.find(params[:id]).errors.full_messages.each do; [Escaped Output] (Unresolved Model).new; end;end;[Escaped Output] FormBuilder.new.label(t(:name), :class => "show-item-label");[Escaped Output] FormBuilder.new.text_field(:name, :size => 90, :class => "def-input");[Escaped Output] FormBuilder.new.label(t(:url), :class => "show-item-label");[Escaped Output] FormBuilder.new.url_field(:url, :size => 90);[Escaped Output] FormBuilder.new.label(t(:description), :class => "show-item-label");[Escaped Output] FormBuilder.new.text_field(:description, :size => 90, :class => "def-input");[Escaped Output] FormBuilder.new.label(t(:summary), :class => "show-item-label");[Escaped Output] FormBuilder.new.text_area(:notes, :size => "87x12");[Escaped Output] FormBuilder.new.label(t(:image), :class => "show-item-label");[Escaped Output] FormBuilder.new.text_field(:image, :class => "def-input");[Escaped Output] FormBuilder.new.file_field(:image);[Escaped Output] FormBuilder.new.label(t(:target), :class => "show-item-label");[Escaped Output] FormBuilder.new.select(:target, options_for_select([["_blank", "_blank"], ["_window", "_window"], ["_self", "_self"], ["_parent", "_parent"]], Link.find(params[:id]).target));[Escaped Output] FormBuilder.new.label(t(:visible), :class => "show-item-label");[Escaped Output] FormBuilder.new.check_box(:visible);[Escaped Output] FormBuilder.new.label(t(:rating), :class => "show-item-label");[Escaped Output] FormBuilder.new.select(:rating, options_for_select([["0 - unrated", "0"], ["1 - disaster", "1"], ["2 - two", "2"], ["3 - heavy insufficient", "3"], ["4 - insuffient", "4"], ["5 - scarso", "5"], ["6 - sufficient", "6"], ["7 - average", "7"], ["8 - good", "8"], ["9 - very good", "9"], ["10- cool", "10"]], Link.find(params[:id]).rating));[Escaped Output] image_tag(Link.find(params[:id]).image.url, :class => "snapshot");[Escaped Output] FormBuilder.new.submit(:class => "button-d4x"); end

links/_form.["LinksController#new", "Template:links/new"]

[Escaped Output] pluralize(Link.new.errors.count, t("error"))
[Escaped Output] msg
[Escaped Output] FormBuilder.new.label(t(:name), :class => "show-item-label")
[Escaped Output] FormBuilder.new.text_field(:name, :size => 90, :class => "def-input")
[Escaped Output] FormBuilder.new.label(t(:url), :class => "show-item-label")
[Escaped Output] FormBuilder.new.url_field(:url, :size => 90)
[Escaped Output] FormBuilder.new.label(t(:description), :class => "show-item-label")
[Escaped Output] FormBuilder.new.text_field(:description, :size => 90, :class => "def-input")
[Escaped Output] FormBuilder.new.label(t(:summary), :class => "show-item-label")
[Escaped Output] FormBuilder.new.text_area(:notes, :size => "87x12")
[Escaped Output] FormBuilder.new.label(t(:image), :class => "show-item-label")
[Escaped Output] FormBuilder.new.text_field(:image, :class => "def-input")
[Escaped Output] FormBuilder.new.file_field(:image)
[Escaped Output] FormBuilder.new.label(t(:target), :class => "show-item-label")
[Escaped Output] FormBuilder.new.select(:target, options_for_select([["_blank", "_blank"], ["_window", "_window"], ["_self", "_self"], ["_parent", "_parent"]], Link.new.target))
[Escaped Output] FormBuilder.new.label(t(:visible), :class => "show-item-label")
[Escaped Output] FormBuilder.new.check_box(:visible)
[Escaped Output] FormBuilder.new.label(t(:rating), :class => "show-item-label")
[Escaped Output] FormBuilder.new.select(:rating, options_for_select([["0 - unrated", "0"], ["1 - disaster", "1"], ["2 - two", "2"], ["3 - heavy insufficient", "3"], ["4 - insuffient", "4"], ["5 - scarso", "5"], ["6 - sufficient", "6"], ["7 - average", "7"], ["8 - good", "8"], ["9 - very good", "9"], ["10- cool", "10"]], Link.new.rating))
[Escaped Output] image_tag(Link.new.image.url, :class => "snapshot")
[Escaped Output] FormBuilder.new.submit(:class => "button-d4x")
[Escaped Output] form_for(Link.new) do; if Link.new.errors.any? then; [Escaped Output] pluralize(Link.new.errors.count, t("error")); Link.new.errors.full_messages.each do; [Escaped Output] msg; end;end;[Escaped Output] FormBuilder.new.label(t(:name), :class => "show-item-label");[Escaped Output] FormBuilder.new.text_field(:name, :size => 90, :class => "def-input");[Escaped Output] FormBuilder.new.label(t(:url), :class => "show-item-label");[Escaped Output] FormBuilder.new.url_field(:url, :size => 90);[Escaped Output] FormBuilder.new.label(t(:description), :class => "show-item-label");[Escaped Output] FormBuilder.new.text_field(:description, :size => 90, :class => "def-input");[Escaped Output] FormBuilder.new.label(t(:summary), :class => "show-item-label");[Escaped Output] FormBuilder.new.text_area(:notes, :size => "87x12");[Escaped Output] FormBuilder.new.label(t(:image), :class => "show-item-label");[Escaped Output] FormBuilder.new.text_field(:image, :class => "def-input");[Escaped Output] FormBuilder.new.file_field(:image);[Escaped Output] FormBuilder.new.label(t(:target), :class => "show-item-label");[Escaped Output] FormBuilder.new.select(:target, options_for_select([["_blank", "_blank"], ["_window", "_window"], ["_self", "_self"], ["_parent", "_parent"]], Link.new.target));[Escaped Output] FormBuilder.new.label(t(:visible), :class => "show-item-label");[Escaped Output] FormBuilder.new.check_box(:visible);[Escaped Output] FormBuilder.new.label(t(:rating), :class => "show-item-label");[Escaped Output] FormBuilder.new.select(:rating, options_for_select([["0 - unrated", "0"], ["1 - disaster", "1"], ["2 - two", "2"], ["3 - heavy insufficient", "3"], ["4 - insuffient", "4"], ["5 - scarso", "5"], ["6 - sufficient", "6"], ["7 - average", "7"], ["8 - good", "8"], ["9 - very good", "9"], ["10- cool", "10"]], Link.new.rating));[Escaped Output] image_tag(Link.new.image.url, :class => "snapshot");[Escaped Output] FormBuilder.new.submit(:class => "button-d4x"); end

links/_form.["Template:links/edit"]

[Escaped Output] pluralize(@link.errors.count, t("error"))
[Escaped Output] msg
[Escaped Output] FormBuilder.new.label(t(:name), :class => "show-item-label")
[Escaped Output] FormBuilder.new.text_field(:name, :size => 90, :class => "def-input")
[Escaped Output] FormBuilder.new.label(t(:url), :class => "show-item-label")
[Escaped Output] FormBuilder.new.url_field(:url, :size => 90)
[Escaped Output] FormBuilder.new.label(t(:description), :class => "show-item-label")
[Escaped Output] FormBuilder.new.text_field(:description, :size => 90, :class => "def-input")
[Escaped Output] FormBuilder.new.label(t(:summary), :class => "show-item-label")
[Escaped Output] FormBuilder.new.text_area(:notes, :size => "87x12")
[Escaped Output] FormBuilder.new.label(t(:image), :class => "show-item-label")
[Escaped Output] FormBuilder.new.text_field(:image, :class => "def-input")
[Escaped Output] FormBuilder.new.file_field(:image)
[Escaped Output] FormBuilder.new.label(t(:target), :class => "show-item-label")
[Escaped Output] FormBuilder.new.select(:target, options_for_select([["_blank", "_blank"], ["_window", "_window"], ["_self", "_self"], ["_parent", "_parent"]], @link.target))
[Escaped Output] FormBuilder.new.label(t(:visible), :class => "show-item-label")
[Escaped Output] FormBuilder.new.check_box(:visible)
[Escaped Output] FormBuilder.new.label(t(:rating), :class => "show-item-label")
[Escaped Output] FormBuilder.new.select(:rating, options_for_select([["0 - unrated", "0"], ["1 - disaster", "1"], ["2 - two", "2"], ["3 - heavy insufficient", "3"], ["4 - insuffient", "4"], ["5 - scarso", "5"], ["6 - sufficient", "6"], ["7 - average", "7"], ["8 - good", "8"], ["9 - very good", "9"], ["10- cool", "10"]], @link.rating))
[Escaped Output] image_tag(@link.image.url, :class => "snapshot")
[Escaped Output] FormBuilder.new.submit(:class => "button-d4x")
[Escaped Output] form_for(@link) do; if @link.errors.any? then; [Escaped Output] pluralize(@link.errors.count, t("error")); @link.errors.full_messages.each do; [Escaped Output] msg; end;end;[Escaped Output] FormBuilder.new.label(t(:name), :class => "show-item-label");[Escaped Output] FormBuilder.new.text_field(:name, :size => 90, :class => "def-input");[Escaped Output] FormBuilder.new.label(t(:url), :class => "show-item-label");[Escaped Output] FormBuilder.new.url_field(:url, :size => 90);[Escaped Output] FormBuilder.new.label(t(:description), :class => "show-item-label");[Escaped Output] FormBuilder.new.text_field(:description, :size => 90, :class => "def-input");[Escaped Output] FormBuilder.new.label(t(:summary), :class => "show-item-label");[Escaped Output] FormBuilder.new.text_area(:notes, :size => "87x12");[Escaped Output] FormBuilder.new.label(t(:image), :class => "show-item-label");[Escaped Output] FormBuilder.new.text_field(:image, :class => "def-input");[Escaped Output] FormBuilder.new.file_field(:image);[Escaped Output] FormBuilder.new.label(t(:target), :class => "show-item-label");[Escaped Output] FormBuilder.new.select(:target, options_for_select([["_blank", "_blank"], ["_window", "_window"], ["_self", "_self"], ["_parent", "_parent"]], @link.target));[Escaped Output] FormBuilder.new.label(t(:visible), :class => "show-item-label");[Escaped Output] FormBuilder.new.check_box(:visible);[Escaped Output] FormBuilder.new.label(t(:rating), :class => "show-item-label");[Escaped Output] FormBuilder.new.select(:rating, options_for_select([["0 - unrated", "0"], ["1 - disaster", "1"], ["2 - two", "2"], ["3 - heavy insufficient", "3"], ["4 - insuffient", "4"], ["5 - scarso", "5"], ["6 - sufficient", "6"], ["7 - average", "7"], ["8 - good", "8"], ["9 - very good", "9"], ["10- cool", "10"]], @link.rating));[Escaped Output] image_tag(@link.image.url, :class => "snapshot");[Escaped Output] FormBuilder.new.submit(:class => "button-d4x"); end

links/_top

[Escaped Output] image_tag("link.png", :border => 0, :mouseover => "link.png", :title => "Cool Links", :size => "16x16")
[Escaped Output] t("favourite links")
[Escaped Output] @link.name
[Escaped Output] @link.description
[Escaped Output] t("notes")
[Escaped Output] @link.notes
[Escaped Output] link_to(@link.url, @link.url, :target => "_blank")
[Escaped Output] link_to(image_tag(@link.image.url, :class => "snapshot"), @link.url, :target => "_blank")

links/edit

[Escaped Output] link_to(image_tag("arrow_left.png", :border => 0, :title => t("back")), links_path)
[Escaped Output] t("editing link")
[Escaped Output] render(partial => "form", {})

links/edit.["LinksController#edit"]

[Escaped Output] link_to(image_tag("arrow_left.png", :border => 0, :title => t("back")), links_path)
[Escaped Output] t("editing link")
[Escaped Output] render(partial => "form", {})

links/index

[Escaped Output] link_to(image_tag("link_add.png", :border => 0, :mouseover => "link_add.png", :title => "add new link details"), new_link_path)
[Escaped Output] image_tag("link.png", :border => 0, :mouseover => "link.png", :title => "Cool Links", :size => "16x16")
[Escaped Output] t("cool links")
[Escaped Output] t(:name)
[Escaped Output] t(:url)
[Escaped Output] t(:description)
[Escaped Output] cycle("odd", "even")
[Escaped Output] link_to(link.name, link)
[Escaped Output] link_to(link.url, link.url, :target => "blank")
[Escaped Output] link.description
[Escaped Output] link_to(image_tag("link.png", :border => 0, :mouseover => "link.png", :title => t("icon-show"), :size => "16x16"), link)
[Escaped Output] link_to(image_tag("link_edit.png", :border => 0, :mouseover => "link_edit.png", :title => t("icon-edit"), :size => "16x16"), edit_link_path(link))
[Escaped Output] button_to("", link, :confirm => "are you sure?", :method => :delete, :class => "ldestroy", :name => "destroy", :size => "16x16")
[Escaped Output] will_paginate(@links, :per_page => 25)

links/index.["LinksController#index"]

[Escaped Output] link_to(image_tag("link_add.png", :border => 0, :mouseover => "link_add.png", :title => "add new link details"), new_link_path)
[Escaped Output] image_tag("link.png", :border => 0, :mouseover => "link.png", :title => "Cool Links", :size => "16x16")
[Escaped Output] t("cool links")
[Escaped Output] t(:name)
[Escaped Output] t(:url)
[Escaped Output] t(:description)
[Escaped Output] cycle("odd", "even")
[Escaped Output] link_to(link.name, link)
[Escaped Output] link_to(link.url, link.url, :target => "blank")
[Escaped Output] link.description
[Escaped Output] link_to(image_tag("link.png", :border => 0, :mouseover => "link.png", :title => t("icon-show"), :size => "16x16"), link)
[Escaped Output] link_to(image_tag("link_edit.png", :border => 0, :mouseover => "link_edit.png", :title => t("icon-edit"), :size => "16x16"), edit_link_path(link))
[Escaped Output] button_to("", link, :confirm => "are you sure?", :method => :delete, :class => "ldestroy", :name => "destroy", :size => "16x16")
[Escaped Output] will_paginate((Link.paginate(:page => params[:page]) or Link.where(:visible => "Y").paginate(:page => params[:page])), :per_page => 25)

links/list

[Escaped Output] link_to(link.name, edit_link_path(link))
[Escaped Output] link.name
[Escaped Output] link_to(link.url, link.url, :target => "_blank")
[Escaped Output] link.description
[Escaped Output] image_tag(link.image.url, :class => "snapshot", :width => "700")

links/list.["LinksController#list"]

[Escaped Output] link_to(Link.new.name, edit_link_path(Link.new))
[Escaped Output] Link.new.name
[Escaped Output] link_to(Link.new.url, Link.new.url, :target => "_blank")
[Escaped Output] Link.new.description
[Escaped Output] image_tag(Link.new.image.url, :class => "snapshot", :width => "700")

links/new

[Escaped Output] link_to(image_tag("arrow_left.png", :border => 0, :title => t("back")), links_path)
[Escaped Output] t("add new link")
[Escaped Output] render(partial => "form", {})

links/new.["LinksController#new"]

[Escaped Output] link_to(image_tag("arrow_left.png", :border => 0, :title => t("back")), links_path)
[Escaped Output] t("add new link")
[Escaped Output] render(partial => "form", {})

links/show

[Escaped Output] link_to(@link.name, edit_link_path(@link))
[Escaped Output] @link.name
[Escaped Output] link_to(@link.url, @link.url, :target => "_blank")
[Escaped Output] @link.description
[Escaped Output] image_tag(@link.image.url, :class => "snapshot", :width => "700")

links/show.["LinksController#show"]

[Escaped Output] link_to(Link.find(params[:id]).name, edit_link_path(Link.find(params[:id])))
[Escaped Output] Link.find(params[:id]).name
[Escaped Output] link_to(Link.find(params[:id]).url, Link.find(params[:id]).url, :target => "_blank")
[Escaped Output] Link.find(params[:id]).description
[Escaped Output] image_tag(Link.find(params[:id]).image.url, :class => "snapshot", :width => "700")

mail_accounts/_account

[Escaped Output] pluralize(@mail_account.errors.count, t("error"))
[Escaped Output] msg
[Escaped Output] javascript_include_tag("d4x-mail-accounts")
[Escaped Output] content_for(:head) do; [Escaped Output] javascript_include_tag("d4x-mail-accounts"); end
[Escaped Output] f.label(t("from name"), :class => "show-item-label")
[Escaped Output] f.text_field(:name, :size => 60, :class => "thin-control")
[Escaped Output] f.label(t(:password), :class => "show-item-label")
[Escaped Output] f.password_field(:password, :size => 60, :class => "thin-control")
[Escaped Output] f.label(t(:password), :class => "show-item-label")
[Escaped Output] f.password_field(:password, :size => 60, :class => "thin-control")
[Escaped Output] f.submit(:class => "button-d4x")
[Escaped Output] form_for(@mail_account) do; if @mail_account.errors.any? then; [Escaped Output] pluralize(@mail_account.errors.count, t("error")); @mail_account.errors.full_messages.each do; [Escaped Output] msg; end;end;[Escaped Output] content_for(:head) do; [Escaped Output] javascript_include_tag("d4x-mail-accounts"); end;[Escaped Output] f.label(t("from name"), :class => "show-item-label");[Escaped Output] f.text_field(:name, :size => 60, :class => "thin-control");[Escaped Output] f.label(t(:password), :class => "show-item-label");[Escaped Output] f.password_field(:password, :size => 60, :class => "thin-control");[Escaped Output] f.label(t(:password), :class => "show-item-label");[Escaped Output] f.password_field(:password, :size => 60, :class => "thin-control");[Escaped Output] f.submit(:class => "button-d4x"); end

mail_accounts/_form

[Escaped Output] pluralize(@mail_account.errors.count, t("error"))
[Escaped Output] msg
[Escaped Output] javascript_include_tag("d4x-mail-accounts")
[Escaped Output] content_for(:head) do; [Escaped Output] javascript_include_tag("d4x-mail-accounts"); end
[Escaped Output] f.label("choose account and domain for Uberbox creation")
[Escaped Output] select_tag(:domain, options_for_select(@domains, "hackers.it"), :onchange => "#")
[Escaped Output] f.label(t(:user_id), :class => "show-item-label")
[Escaped Output] f.text_field(:user_id, :size => 20, :class => "thin-control")
[Escaped Output] f.label(t(:login), :class => "show-item-label")
[Escaped Output] f.email_field(:login, :size => 60, :class => "thin-control")
[Escaped Output] f.label(t("from name"), :class => "show-item-label")
[Escaped Output] f.text_field(:name, :size => 60, :class => "thin-control")
[Escaped Output] f.label(t(:password), :class => "show-item-label")
[Escaped Output] f.password_field(:password, :size => 60, :class => "thin-control")
[Escaped Output] f.label(t(:uid), :class => "show-item-label")
[Escaped Output] f.text_field(:uid, :size => 6, :class => "thin-control")
[Escaped Output] f.label(t(:gid), :class => "show-item-label")
[Escaped Output] f.text_field(:gid, :size => 6, :class => "thin-control")
[Escaped Output] f.label(t(:quota), :class => "show-item-label")
[Escaped Output] f.select(:quota, options_for_select([["100 MegaByte", "100000000S"], ["1 GigaByte", "1000000000S"], ["3 GigaByte", "3000000000S"], ["5 GigaByte", "5000000000S"]], "1000000000S"), :class => "thin-control", :size => "20")
[Escaped Output] f.label(t(:home), :class => "show-item-label")
[Escaped Output] f.text_field(:home, :size => 60, :class => "thin-control")
[Escaped Output] f.label(t(:maildir), :class => "show-item-label")
[Escaped Output] f.text_field(:maildir, :size => 40, :class => "thin-control")
[Escaped Output] f.submit(:class => "button-d4x")
[Escaped Output] form_for(@mail_account) do; if @mail_account.errors.any? then; [Escaped Output] pluralize(@mail_account.errors.count, t("error")); @mail_account.errors.full_messages.each do; [Escaped Output] msg; end;end;[Escaped Output] content_for(:head) do; [Escaped Output] javascript_include_tag("d4x-mail-accounts"); end;@users = users_without_uberbox;@domains = available_domains;[Escaped Output] f.label("choose account and domain for Uberbox creation");[Escaped Output] select_tag(:domain, options_for_select(@domains, "hackers.it"), :onchange => "#");[Escaped Output] f.label(t(:user_id), :class => "show-item-label");[Escaped Output] f.text_field(:user_id, :size => 20, :class => "thin-control");[Escaped Output] f.label(t(:login), :class => "show-item-label");[Escaped Output] f.email_field(:login, :size => 60, :class => "thin-control");[Escaped Output] f.label(t("from name"), :class => "show-item-label");[Escaped Output] f.text_field(:name, :size => 60, :class => "thin-control");[Escaped Output] f.label(t(:password), :class => "show-item-label");[Escaped Output] f.password_field(:password, :size => 60, :class => "thin-control");[Escaped Output] f.label(t(:uid), :class => "show-item-label");[Escaped Output] f.text_field(:uid, :size => 6, :class => "thin-control");[Escaped Output] f.label(t(:gid), :class => "show-item-label");[Escaped Output] f.text_field(:gid, :size => 6, :class => "thin-control");[Escaped Output] f.label(t(:quota), :class => "show-item-label");[Escaped Output] f.select(:quota, options_for_select([["100 MegaByte", "100000000S"], ["1 GigaByte", "1000000000S"], ["3 GigaByte", "3000000000S"], ["5 GigaByte", "5000000000S"]], "1000000000S"), :class => "thin-control", :size => "20");[Escaped Output] f.label(t(:home), :class => "show-item-label");[Escaped Output] f.text_field(:home, :size => 60, :class => "thin-control");[Escaped Output] f.label(t(:maildir), :class => "show-item-label");[Escaped Output] f.text_field(:maildir, :size => 40, :class => "thin-control");[Escaped Output] f.submit(:class => "button-d4x"); end

mail_accounts/_form.["MailAccountsController#createOLDKO", "Template:mail_accounts/new"]

[Escaped Output] pluralize(MailAccount.new(:user_id => User.find_by_nickname(params[:nicks]).id, :login => ((params[:nicks] + "@") + Domain.find_by_domain(params[:domain]).domain), :name => params[:name], :password => params[:password], :tip => params[:password], :quota => params[:quota], :maildir => Domain.find_by_domain(params[:domain]).vmaildir, :home => Domain.find_by_domain(params[:domain]).homedir).errors.count, t("error"))
[Escaped Output] msg
[Escaped Output] javascript_include_tag("d4x-mail-accounts")
[Escaped Output] content_for(:head) do; [Escaped Output] javascript_include_tag("d4x-mail-accounts"); end
[Escaped Output] FormBuilder.new.label("choose account and domain for Uberbox creation")
[Escaped Output] select_tag(:domain, options_for_select(available_domains, "hackers.it"), :onchange => "#")
[Escaped Output] FormBuilder.new.label(t(:user_id), :class => "show-item-label")
[Escaped Output] FormBuilder.new.text_field(:user_id, :size => 20, :class => "thin-control")
[Escaped Output] FormBuilder.new.label(t(:login), :class => "show-item-label")
[Escaped Output] FormBuilder.new.email_field(:login, :size => 60, :class => "thin-control")
[Escaped Output] FormBuilder.new.label(t("from name"), :class => "show-item-label")
[Escaped Output] FormBuilder.new.text_field(:name, :size => 60, :class => "thin-control")
[Escaped Output] FormBuilder.new.label(t(:password), :class => "show-item-label")
[Escaped Output] FormBuilder.new.password_field(:password, :size => 60, :class => "thin-control")
[Escaped Output] FormBuilder.new.label(t(:uid), :class => "show-item-label")
[Escaped Output] FormBuilder.new.text_field(:uid, :size => 6, :class => "thin-control")
[Escaped Output] FormBuilder.new.label(t(:gid), :class => "show-item-label")
[Escaped Output] FormBuilder.new.text_field(:gid, :size => 6, :class => "thin-control")
[Escaped Output] FormBuilder.new.label(t(:quota), :class => "show-item-label")
[Escaped Output] FormBuilder.new.select(:quota, options_for_select([["100 MegaByte", "100000000S"], ["1 GigaByte", "1000000000S"], ["3 GigaByte", "3000000000S"], ["5 GigaByte", "5000000000S"]], "1000000000S"), :class => "thin-control", :size => "20")
[Escaped Output] FormBuilder.new.label(t(:home), :class => "show-item-label")
[Escaped Output] FormBuilder.new.text_field(:home, :size => 60, :class => "thin-control")
[Escaped Output] FormBuilder.new.label(t(:maildir), :class => "show-item-label")
[Escaped Output] FormBuilder.new.text_field(:maildir, :size => 40, :class => "thin-control")
[Escaped Output] FormBuilder.new.submit(:class => "button-d4x")
[Escaped Output] form_for(MailAccount.new(:user_id => User.find_by_nickname(params[:nicks]).id, :login => ((params[:nicks] + "@") + Domain.find_by_domain(params[:domain]).domain), :name => params[:name], :password => params[:password], :tip => params[:password], :quota => params[:quota], :maildir => Domain.find_by_domain(params[:domain]).vmaildir, :home => Domain.find_by_domain(params[:domain]).homedir)) do; if MailAccount.new(:user_id => User.find_by_nickname(params[:nicks]).id, :login => ((params[:nicks] + "@") + Domain.find_by_domain(params[:domain]).domain), :name => params[:name], :password => params[:password], :tip => params[:password], :quota => params[:quota], :maildir => Domain.find_by_domain(params[:domain]).vmaildir, :home => Domain.find_by_domain(params[:domain]).homedir).errors.any? then; [Escaped Output] pluralize(MailAccount.new(:user_id => User.find_by_nickname(params[:nicks]).id, :login => ((params[:nicks] + "@") + Domain.find_by_domain(params[:domain]).domain), :name => params[:name], :password => params[:password], :tip => params[:password], :quota => params[:quota], :maildir => Domain.find_by_domain(params[:domain]).vmaildir, :home => Domain.find_by_domain(params[:domain]).homedir).errors.count, t("error")); MailAccount.new(:user_id => User.find_by_nickname(params[:nicks]).id, :login => ((params[:nicks] + "@") + Domain.find_by_domain(params[:domain]).domain), :name => params[:name], :password => params[:password], :tip => params[:password], :quota => params[:quota], :maildir => Domain.find_by_domain(params[:domain]).vmaildir, :home => Domain.find_by_domain(params[:domain]).homedir).errors.full_messages.each do; [Escaped Output] msg; end;end;[Escaped Output] content_for(:head) do; [Escaped Output] javascript_include_tag("d4x-mail-accounts"); end;@users = users_without_uberbox;@domains = available_domains;[Escaped Output] FormBuilder.new.label("choose account and domain for Uberbox creation");[Escaped Output] select_tag(:domain, options_for_select(available_domains, "hackers.it"), :onchange => "#");[Escaped Output] FormBuilder.new.label(t(:user_id), :class => "show-item-label");[Escaped Output] FormBuilder.new.text_field(:user_id, :size => 20, :class => "thin-control");[Escaped Output] FormBuilder.new.label(t(:login), :class => "show-item-label");[Escaped Output] FormBuilder.new.email_field(:login, :size => 60, :class => "thin-control");[Escaped Output] FormBuilder.new.label(t("from name"), :class => "show-item-label");[Escaped Output] FormBuilder.new.text_field(:name, :size => 60, :class => "thin-control");[Escaped Output] FormBuilder.new.label(t(:password), :class => "show-item-label");[Escaped Output] FormBuilder.new.password_field(:password, :size => 60, :class => "thin-control");[Escaped Output] FormBuilder.new.label(t(:uid), :class => "show-item-label");[Escaped Output] FormBuilder.new.text_field(:uid, :size => 6, :class => "thin-control");[Escaped Output] FormBuilder.new.label(t(:gid), :class => "show-item-label");[Escaped Output] FormBuilder.new.text_field(:gid, :size => 6, :class => "thin-control");[Escaped Output] FormBuilder.new.label(t(:quota), :class => "show-item-label");[Escaped Output] FormBuilder.new.select(:quota, options_for_select([["100 MegaByte", "100000000S"], ["1 GigaByte", "1000000000S"], ["3 GigaByte", "3000000000S"], ["5 GigaByte", "5000000000S"]], "1000000000S"), :class => "thin-control", :size => "20");[Escaped Output] FormBuilder.new.label(t(:home), :class => "show-item-label");[Escaped Output] FormBuilder.new.text_field(:home, :size => 60, :class => "thin-control");[Escaped Output] FormBuilder.new.label(t(:maildir), :class => "show-item-label");[Escaped Output] FormBuilder.new.text_field(:maildir, :size => 40, :class => "thin-control");[Escaped Output] FormBuilder.new.submit(:class => "button-d4x"); end

mail_accounts/_form.["MailAccountsController#edit", "Template:mail_accounts/edit"]

[Escaped Output] pluralize(MailAccount.find(params[:id]).errors.count, t("error"))
[Escaped Output] (Unresolved Model).new
[Escaped Output] javascript_include_tag("d4x-mail-accounts")
[Escaped Output] content_for(:head) do; [Escaped Output] javascript_include_tag("d4x-mail-accounts"); end
[Escaped Output] FormBuilder.new.label("choose account and domain for Uberbox creation")
[Escaped Output] select_tag(:domain, options_for_select(available_domains, "hackers.it"), :onchange => "#")
[Escaped Output] FormBuilder.new.label(t(:user_id), :class => "show-item-label")
[Escaped Output] FormBuilder.new.text_field(:user_id, :size => 20, :class => "thin-control")
[Escaped Output] FormBuilder.new.label(t(:login), :class => "show-item-label")
[Escaped Output] FormBuilder.new.email_field(:login, :size => 60, :class => "thin-control")
[Escaped Output] FormBuilder.new.label(t("from name"), :class => "show-item-label")
[Escaped Output] FormBuilder.new.text_field(:name, :size => 60, :class => "thin-control")
[Escaped Output] FormBuilder.new.label(t(:password), :class => "show-item-label")
[Escaped Output] FormBuilder.new.password_field(:password, :size => 60, :class => "thin-control")
[Escaped Output] FormBuilder.new.label(t(:uid), :class => "show-item-label")
[Escaped Output] FormBuilder.new.text_field(:uid, :size => 6, :class => "thin-control")
[Escaped Output] FormBuilder.new.label(t(:gid), :class => "show-item-label")
[Escaped Output] FormBuilder.new.text_field(:gid, :size => 6, :class => "thin-control")
[Escaped Output] FormBuilder.new.label(t(:quota), :class => "show-item-label")
[Escaped Output] FormBuilder.new.select(:quota, options_for_select([["100 MegaByte", "100000000S"], ["1 GigaByte", "1000000000S"], ["3 GigaByte", "3000000000S"], ["5 GigaByte", "5000000000S"]], "1000000000S"), :class => "thin-control", :size => "20")
[Escaped Output] FormBuilder.new.label(t(:home), :class => "show-item-label")
[Escaped Output] FormBuilder.new.text_field(:home, :size => 60, :class => "thin-control")
[Escaped Output] FormBuilder.new.label(t(:maildir), :class => "show-item-label")
[Escaped Output] FormBuilder.new.text_field(:maildir, :size => 40, :class => "thin-control")
[Escaped Output] FormBuilder.new.submit(:class => "button-d4x")
[Escaped Output] form_for(MailAccount.find(params[:id])) do; if MailAccount.find(params[:id]).errors.any? then; [Escaped Output] pluralize(MailAccount.find(params[:id]).errors.count, t("error")); MailAccount.find(params[:id]).errors.full_messages.each do; [Escaped Output] (Unresolved Model).new; end;end;[Escaped Output] content_for(:head) do; [Escaped Output] javascript_include_tag("d4x-mail-accounts"); end;@users = users_without_uberbox;@domains = available_domains;[Escaped Output] FormBuilder.new.label("choose account and domain for Uberbox creation");[Escaped Output] select_tag(:domain, options_for_select(available_domains, "hackers.it"), :onchange => "#");[Escaped Output] FormBuilder.new.label(t(:user_id), :class => "show-item-label");[Escaped Output] FormBuilder.new.text_field(:user_id, :size => 20, :class => "thin-control");[Escaped Output] FormBuilder.new.label(t(:login), :class => "show-item-label");[Escaped Output] FormBuilder.new.email_field(:login, :size => 60, :class => "thin-control");[Escaped Output] FormBuilder.new.label(t("from name"), :class => "show-item-label");[Escaped Output] FormBuilder.new.text_field(:name, :size => 60, :class => "thin-control");[Escaped Output] FormBuilder.new.label(t(:password), :class => "show-item-label");[Escaped Output] FormBuilder.new.password_field(:password, :size => 60, :class => "thin-control");[Escaped Output] FormBuilder.new.label(t(:uid), :class => "show-item-label");[Escaped Output] FormBuilder.new.text_field(:uid, :size => 6, :class => "thin-control");[Escaped Output] FormBuilder.new.label(t(:gid), :class => "show-item-label");[Escaped Output] FormBuilder.new.text_field(:gid, :size => 6, :class => "thin-control");[Escaped Output] FormBuilder.new.label(t(:quota), :class => "show-item-label");[Escaped Output] FormBuilder.new.select(:quota, options_for_select([["100 MegaByte", "100000000S"], ["1 GigaByte", "1000000000S"], ["3 GigaByte", "3000000000S"], ["5 GigaByte", "5000000000S"]], "1000000000S"), :class => "thin-control", :size => "20");[Escaped Output] FormBuilder.new.label(t(:home), :class => "show-item-label");[Escaped Output] FormBuilder.new.text_field(:home, :size => 60, :class => "thin-control");[Escaped Output] FormBuilder.new.label(t(:maildir), :class => "show-item-label");[Escaped Output] FormBuilder.new.text_field(:maildir, :size => 40, :class => "thin-control");[Escaped Output] FormBuilder.new.submit(:class => "button-d4x"); end

mail_accounts/_form.["MailAccountsController#new", "Template:mail_accounts/new"]

[Escaped Output] pluralize(MailAccount.new.errors.count, t("error"))
[Escaped Output] msg
[Escaped Output] javascript_include_tag("d4x-mail-accounts")
[Escaped Output] content_for(:head) do; [Escaped Output] javascript_include_tag("d4x-mail-accounts"); end
[Escaped Output] FormBuilder.new.label("choose account and domain for Uberbox creation")
[Escaped Output] select_tag(:domain, options_for_select(available_domains, "hackers.it"), :onchange => "#")
[Escaped Output] FormBuilder.new.label(t(:user_id), :class => "show-item-label")
[Escaped Output] FormBuilder.new.text_field(:user_id, :size => 20, :class => "thin-control")
[Escaped Output] FormBuilder.new.label(t(:login), :class => "show-item-label")
[Escaped Output] FormBuilder.new.email_field(:login, :size => 60, :class => "thin-control")
[Escaped Output] FormBuilder.new.label(t("from name"), :class => "show-item-label")
[Escaped Output] FormBuilder.new.text_field(:name, :size => 60, :class => "thin-control")
[Escaped Output] FormBuilder.new.label(t(:password), :class => "show-item-label")
[Escaped Output] FormBuilder.new.password_field(:password, :size => 60, :class => "thin-control")
[Escaped Output] FormBuilder.new.label(t(:uid), :class => "show-item-label")
[Escaped Output] FormBuilder.new.text_field(:uid, :size => 6, :class => "thin-control")
[Escaped Output] FormBuilder.new.label(t(:gid), :class => "show-item-label")
[Escaped Output] FormBuilder.new.text_field(:gid, :size => 6, :class => "thin-control")
[Escaped Output] FormBuilder.new.label(t(:quota), :class => "show-item-label")
[Escaped Output] FormBuilder.new.select(:quota, options_for_select([["100 MegaByte", "100000000S"], ["1 GigaByte", "1000000000S"], ["3 GigaByte", "3000000000S"], ["5 GigaByte", "5000000000S"]], "1000000000S"), :class => "thin-control", :size => "20")
[Escaped Output] FormBuilder.new.label(t(:home), :class => "show-item-label")
[Escaped Output] FormBuilder.new.text_field(:home, :size => 60, :class => "thin-control")
[Escaped Output] FormBuilder.new.label(t(:maildir), :class => "show-item-label")
[Escaped Output] FormBuilder.new.text_field(:maildir, :size => 40, :class => "thin-control")
[Escaped Output] FormBuilder.new.submit(:class => "button-d4x")
[Escaped Output] form_for(MailAccount.new) do; if MailAccount.new.errors.any? then; [Escaped Output] pluralize(MailAccount.new.errors.count, t("error")); MailAccount.new.errors.full_messages.each do; [Escaped Output] msg; end;end;[Escaped Output] content_for(:head) do; [Escaped Output] javascript_include_tag("d4x-mail-accounts"); end;@users = users_without_uberbox;@domains = available_domains;[Escaped Output] FormBuilder.new.label("choose account and domain for Uberbox creation");[Escaped Output] select_tag(:domain, options_for_select(available_domains, "hackers.it"), :onchange => "#");[Escaped Output] FormBuilder.new.label(t(:user_id), :class => "show-item-label");[Escaped Output] FormBuilder.new.text_field(:user_id, :size => 20, :class => "thin-control");[Escaped Output] FormBuilder.new.label(t(:login), :class => "show-item-label");[Escaped Output] FormBuilder.new.email_field(:login, :size => 60, :class => "thin-control");[Escaped Output] FormBuilder.new.label(t("from name"), :class => "show-item-label");[Escaped Output] FormBuilder.new.text_field(:name, :size => 60, :class => "thin-control");[Escaped Output] FormBuilder.new.label(t(:password), :class => "show-item-label");[Escaped Output] FormBuilder.new.password_field(:password, :size => 60, :class => "thin-control");[Escaped Output] FormBuilder.new.label(t(:uid), :class => "show-item-label");[Escaped Output] FormBuilder.new.text_field(:uid, :size => 6, :class => "thin-control");[Escaped Output] FormBuilder.new.label(t(:gid), :class => "show-item-label");[Escaped Output] FormBuilder.new.text_field(:gid, :size => 6, :class => "thin-control");[Escaped Output] FormBuilder.new.label(t(:quota), :class => "show-item-label");[Escaped Output] FormBuilder.new.select(:quota, options_for_select([["100 MegaByte", "100000000S"], ["1 GigaByte", "1000000000S"], ["3 GigaByte", "3000000000S"], ["5 GigaByte", "5000000000S"]], "1000000000S"), :class => "thin-control", :size => "20");[Escaped Output] FormBuilder.new.label(t(:home), :class => "show-item-label");[Escaped Output] FormBuilder.new.text_field(:home, :size => 60, :class => "thin-control");[Escaped Output] FormBuilder.new.label(t(:maildir), :class => "show-item-label");[Escaped Output] FormBuilder.new.text_field(:maildir, :size => 40, :class => "thin-control");[Escaped Output] FormBuilder.new.submit(:class => "button-d4x"); end

mail_accounts/_form.["Template:mail_accounts/edit"]

[Escaped Output] pluralize(@mail_account.errors.count, t("error"))
[Escaped Output] msg
[Escaped Output] javascript_include_tag("d4x-mail-accounts")
[Escaped Output] content_for(:head) do; [Escaped Output] javascript_include_tag("d4x-mail-accounts"); end
[Escaped Output] FormBuilder.new.label("choose account and domain for Uberbox creation")
[Escaped Output] select_tag(:domain, options_for_select(available_domains, "hackers.it"), :onchange => "#")
[Escaped Output] FormBuilder.new.label(t(:user_id), :class => "show-item-label")
[Escaped Output] FormBuilder.new.text_field(:user_id, :size => 20, :class => "thin-control")
[Escaped Output] FormBuilder.new.label(t(:login), :class => "show-item-label")
[Escaped Output] FormBuilder.new.email_field(:login, :size => 60, :class => "thin-control")
[Escaped Output] FormBuilder.new.label(t("from name"), :class => "show-item-label")
[Escaped Output] FormBuilder.new.text_field(:name, :size => 60, :class => "thin-control")
[Escaped Output] FormBuilder.new.label(t(:password), :class => "show-item-label")
[Escaped Output] FormBuilder.new.password_field(:password, :size => 60, :class => "thin-control")
[Escaped Output] FormBuilder.new.label(t(:uid), :class => "show-item-label")
[Escaped Output] FormBuilder.new.text_field(:uid, :size => 6, :class => "thin-control")
[Escaped Output] FormBuilder.new.label(t(:gid), :class => "show-item-label")
[Escaped Output] FormBuilder.new.text_field(:gid, :size => 6, :class => "thin-control")
[Escaped Output] FormBuilder.new.label(t(:quota), :class => "show-item-label")
[Escaped Output] FormBuilder.new.select(:quota, options_for_select([["100 MegaByte", "100000000S"], ["1 GigaByte", "1000000000S"], ["3 GigaByte", "3000000000S"], ["5 GigaByte", "5000000000S"]], "1000000000S"), :class => "thin-control", :size => "20")
[Escaped Output] FormBuilder.new.label(t(:home), :class => "show-item-label")
[Escaped Output] FormBuilder.new.text_field(:home, :size => 60, :class => "thin-control")
[Escaped Output] FormBuilder.new.label(t(:maildir), :class => "show-item-label")
[Escaped Output] FormBuilder.new.text_field(:maildir, :size => 40, :class => "thin-control")
[Escaped Output] FormBuilder.new.submit(:class => "button-d4x")
[Escaped Output] form_for(@mail_account) do; if @mail_account.errors.any? then; [Escaped Output] pluralize(@mail_account.errors.count, t("error")); @mail_account.errors.full_messages.each do; [Escaped Output] msg; end;end;[Escaped Output] content_for(:head) do; [Escaped Output] javascript_include_tag("d4x-mail-accounts"); end;@users = users_without_uberbox;@domains = available_domains;[Escaped Output] FormBuilder.new.label("choose account and domain for Uberbox creation");[Escaped Output] select_tag(:domain, options_for_select(available_domains, "hackers.it"), :onchange => "#");[Escaped Output] FormBuilder.new.label(t(:user_id), :class => "show-item-label");[Escaped Output] FormBuilder.new.text_field(:user_id, :size => 20, :class => "thin-control");[Escaped Output] FormBuilder.new.label(t(:login), :class => "show-item-label");[Escaped Output] FormBuilder.new.email_field(:login, :size => 60, :class => "thin-control");[Escaped Output] FormBuilder.new.label(t("from name"), :class => "show-item-label");[Escaped Output] FormBuilder.new.text_field(:name, :size => 60, :class => "thin-control");[Escaped Output] FormBuilder.new.label(t(:password), :class => "show-item-label");[Escaped Output] FormBuilder.new.password_field(:password, :size => 60, :class => "thin-control");[Escaped Output] FormBuilder.new.label(t(:uid), :class => "show-item-label");[Escaped Output] FormBuilder.new.text_field(:uid, :size => 6, :class => "thin-control");[Escaped Output] FormBuilder.new.label(t(:gid), :class => "show-item-label");[Escaped Output] FormBuilder.new.text_field(:gid, :size => 6, :class => "thin-control");[Escaped Output] FormBuilder.new.label(t(:quota), :class => "show-item-label");[Escaped Output] FormBuilder.new.select(:quota, options_for_select([["100 MegaByte", "100000000S"], ["1 GigaByte", "1000000000S"], ["3 GigaByte", "3000000000S"], ["5 GigaByte", "5000000000S"]], "1000000000S"), :class => "thin-control", :size => "20");[Escaped Output] FormBuilder.new.label(t(:home), :class => "show-item-label");[Escaped Output] FormBuilder.new.text_field(:home, :size => 60, :class => "thin-control");[Escaped Output] FormBuilder.new.label(t(:maildir), :class => "show-item-label");[Escaped Output] FormBuilder.new.text_field(:maildir, :size => 40, :class => "thin-control");[Escaped Output] FormBuilder.new.submit(:class => "button-d4x"); end

mail_accounts/configure

[Escaped Output] d4x_sanitizer(t("congratulations, you can now configure your uberbox"))

mail_accounts/configure.["MailAccountsController#configure"]

[Escaped Output] d4x_sanitizer(t("congratulations, you can now configure your uberbox"))

mail_accounts/edit

[Escaped Output] link_to(image_tag("user_add.png", :border => 0, :mouseover => "user_add.png", :name => "admin mail_accountes"), new_mail_account_path)
[Escaped Output] d4x_sanitizer(t("update mail account"))
[Escaped Output] render(partial => "form", {})

mail_accounts/edit.["MailAccountsController#edit"]

[Escaped Output] link_to(image_tag("user_add.png", :border => 0, :mouseover => "user_add.png", :name => "admin mail_accountes"), new_mail_account_path)
[Escaped Output] d4x_sanitizer(t("update mail account"))
[Escaped Output] render(partial => "form", {})

mail_accounts/index

[Escaped Output] t("mail_accounts")
[Escaped Output] t(:mail_account)
[Escaped Output] t(:user)
[Escaped Output] t(:address)
[Escaped Output] t(:fullname)
[Escaped Output] t(:home)
[Escaped Output] t(:maildir)
[Escaped Output] t(:quota)
[Escaped Output] t(:active)
[Escaped Output] mail_account.user_id
[Escaped Output] mail_account.login
[Escaped Output] mail_account.name
[Escaped Output] mail_account.home
[Escaped Output] mail_account.maildir
[Escaped Output] mail_account.quota
[Escaped Output] mail_account.active
[Escaped Output] link_to(d4x_sanitizer(t("edit")), edit_mail_account_path(mail_account), :class => "btn btn-xs btn-warning")
[Escaped Output] button_to(d4x_sanitizer(t("delete")), mail_account, :method => :delete, :data => ({ :confirm => "Are you sure?" }), :class => "btn btn-xs btn-danger")

mail_accounts/index.["MailAccountsController#index"]

[Escaped Output] t("mail_accounts")
[Escaped Output] t(:mail_account)
[Escaped Output] t(:user)
[Escaped Output] t(:address)
[Escaped Output] t(:fullname)
[Escaped Output] t(:home)
[Escaped Output] t(:maildir)
[Escaped Output] t(:quota)
[Escaped Output] t(:active)
[Escaped Output] MailAccount.new.user_id
[Escaped Output] MailAccount.new.login
[Escaped Output] MailAccount.new.name
[Escaped Output] MailAccount.new.home
[Escaped Output] MailAccount.new.maildir
[Escaped Output] MailAccount.new.quota
[Escaped Output] MailAccount.new.active
[Escaped Output] link_to(d4x_sanitizer(t("edit")), edit_mail_account_path(MailAccount.new), :class => "btn btn-xs btn-warning")
[Escaped Output] button_to(d4x_sanitizer(t("delete")), MailAccount.new, :method => :delete, :data => ({ :confirm => "Are you sure?" }), :class => "btn btn-xs btn-danger")

mail_accounts/new

[Escaped Output] image_tag("box.png", :border => 0, :mouseover => "box.png", :name => "new mail account")
[Escaped Output] d4x_sanitizer(t("mail_accounts"))
[Escaped Output] render(partial => "form", {})

mail_accounts/new.["MailAccountsController#new"]

[Escaped Output] image_tag("box.png", :border => 0, :mouseover => "box.png", :name => "new mail account")
[Escaped Output] d4x_sanitizer(t("mail_accounts"))
[Escaped Output] render(partial => "form", {})

mail_accounts/show

[Escaped Output] link_to(image_tag("box.png", :border => 0, :mouseover => "box.png", :title => "new mail_account"), new_mail_account_path)
[Escaped Output] d4x_sanitizer(t("mail accounts"))
[Escaped Output] d4x_sanitizer(t("name"))
[Escaped Output] @mail_account.name
[Escaped Output] t("user")
[Escaped Output] @mail_account.user_id
[Escaped Output] t("uid")
[Escaped Output] @mail_account.uid
[Escaped Output] t("gid")
[Escaped Output] @mail_account.gid
[Escaped Output] t("home")
[Escaped Output] @mail_account.home
[Escaped Output] t("maildir")
[Escaped Output] @mail_account.maildir
[Escaped Output] t("quota")
[Escaped Output] @mail_account.quota

mail_accounts/show.["MailAccountsController#show"]

[Escaped Output] link_to(image_tag("box.png", :border => 0, :mouseover => "box.png", :title => "new mail_account"), new_mail_account_path)
[Escaped Output] d4x_sanitizer(t("mail accounts"))
[Escaped Output] d4x_sanitizer(t("name"))
[Escaped Output] MailAccount.find(params[:id]).name
[Escaped Output] t("user")
[Escaped Output] MailAccount.find(params[:id]).user_id
[Escaped Output] t("uid")
[Escaped Output] MailAccount.find(params[:id]).uid
[Escaped Output] t("gid")
[Escaped Output] MailAccount.find(params[:id]).gid
[Escaped Output] t("home")
[Escaped Output] MailAccount.find(params[:id]).home
[Escaped Output] t("maildir")
[Escaped Output] MailAccount.find(params[:id]).maildir
[Escaped Output] t("quota")
[Escaped Output] MailAccount.find(params[:id]).quota

mail_accounts/subscribe

[Escaped Output] javascript_include_tag("d4x-mail-accounts")
[Escaped Output] content_for(:head) do; [Escaped Output] javascript_include_tag("d4x-mail-accounts"); end
[Escaped Output] label_tag(("You can create your " + @prod.name))
[Escaped Output] f.hidden_field(:user_id, :value => current_user.id)
[Escaped Output] f.hidden_field(:uid, :value => 2000)
[Escaped Output] f.hidden_field(:gid, :value => 2000)
[Escaped Output] f.hidden_field(:home, :value => "/var/vmail")
[Escaped Output] f.hidden_field(:quota, :value => "1000000000S")
[Escaped Output] f.hidden_field(:quota, :value => "3000000000S")
[Escaped Output] f.hidden_field(:quota, :value => "5000000000S")
[Escaped Output] f.label(d4x_sanitizer(t(:login)), :class => "lcd lcd-bigger orange")
[Escaped Output] f.text_field(:login, :size => 16, :class => "big-control center", :value => current_user.nickname)
[Escaped Output] image_tag("/images/att.png", :size => "60x60")
[Escaped Output] f.label(:domain, :class => "lcd lcd-bigger orange")
[Escaped Output] select_tag(:domain, options_for_select(@domains, "hackers.it"), :onchange => "#", :class => "bigg-control center")
[Escaped Output] f.label(d4x_sanitizer(t("from name")), :class => "lcd lcd-bigger orange")
[Escaped Output] f.text_field(:name, :size => 40, :class => "big-control center", :value => ((current_user.firstname + " ") + current_user.lastname))
[Escaped Output] f.label(d4x_sanitizer(t(:password)), :class => "lcd lcd-bigger orange")
[Escaped Output] f.password_field(:password, :size => 40, :class => "big-control center")
[Escaped Output] f.label("confirm", :class => "lcd lcd-bigger orange")
[Escaped Output] f.password_field(:password, :size => 40, :class => "big-control center")
[Escaped Output] f.submit("Create Mailbox", :class => "button-d4x", :name => "subscribed")
[Escaped Output] form_for(MailAccount.new) do; [Escaped Output] content_for(:head) do; [Escaped Output] javascript_include_tag("d4x-mail-accounts"); end;if params["prod_id"].present? then; @prod = Product.find(params["prod_id"]); [Escaped Output] label_tag(("You can create your " + @prod.name));end;@users = users_without_uberbox;@domains = available_domains;[Escaped Output] f.hidden_field(:user_id, :value => current_user.id);[Escaped Output] f.hidden_field(:uid, :value => 2000);[Escaped Output] f.hidden_field(:gid, :value => 2000);[Escaped Output] f.hidden_field(:home, :value => "/var/vmail");if (@prod.id == 2) then; [Escaped Output] f.hidden_field(:quota, :value => "1000000000S");else; if (@prod.id == 3) then; [Escaped Output] f.hidden_field(:quota, :value => "3000000000S"); else; if (@prod.id == 4) then; [Escaped Output] f.hidden_field(:quota, :value => "5000000000S"); end; end;end;[Escaped Output] f.label(d4x_sanitizer(t(:login)), :class => "lcd lcd-bigger orange");[Escaped Output] f.text_field(:login, :size => 16, :class => "big-control center", :value => current_user.nickname);[Escaped Output] image_tag("/images/att.png", :size => "60x60");[Escaped Output] f.label(:domain, :class => "lcd lcd-bigger orange");[Escaped Output] select_tag(:domain, options_for_select(@domains, "hackers.it"), :onchange => "#", :class => "bigg-control center");[Escaped Output] f.label(d4x_sanitizer(t("from name")), :class => "lcd lcd-bigger orange");[Escaped Output] f.text_field(:name, :size => 40, :class => "big-control center", :value => ((current_user.firstname + " ") + current_user.lastname));[Escaped Output] f.label(d4x_sanitizer(t(:password)), :class => "lcd lcd-bigger orange");[Escaped Output] f.password_field(:password, :size => 40, :class => "big-control center");[Escaped Output] f.label("confirm", :class => "lcd lcd-bigger orange");[Escaped Output] f.password_field(:password, :size => 40, :class => "big-control center");[Escaped Output] f.submit("Create Mailbox", :class => "button-d4x", :name => "subscribed"); end

mail_accounts/subscribe.["MailAccountsController#subscribe"]

[Escaped Output] javascript_include_tag("d4x-mail-accounts")
[Escaped Output] content_for(:head) do; [Escaped Output] javascript_include_tag("d4x-mail-accounts"); end
[Escaped Output] label_tag(("You can create your " + Product.find(params["prod_id"]).name))
[Escaped Output] FormBuilder.new.hidden_field(:user_id, :value => current_user.id)
[Escaped Output] FormBuilder.new.hidden_field(:uid, :value => 2000)
[Escaped Output] FormBuilder.new.hidden_field(:gid, :value => 2000)
[Escaped Output] FormBuilder.new.hidden_field(:home, :value => "/var/vmail")
[Escaped Output] FormBuilder.new.hidden_field(:quota, :value => "1000000000S")
[Escaped Output] FormBuilder.new.hidden_field(:quota, :value => "3000000000S")
[Escaped Output] FormBuilder.new.hidden_field(:quota, :value => "5000000000S")
[Escaped Output] FormBuilder.new.label(d4x_sanitizer(t(:login)), :class => "lcd lcd-bigger orange")
[Escaped Output] FormBuilder.new.text_field(:login, :size => 16, :class => "big-control center", :value => current_user.nickname)
[Escaped Output] image_tag("/images/att.png", :size => "60x60")
[Escaped Output] FormBuilder.new.label(:domain, :class => "lcd lcd-bigger orange")
[Escaped Output] select_tag(:domain, options_for_select(available_domains, "hackers.it"), :onchange => "#", :class => "bigg-control center")
[Escaped Output] FormBuilder.new.label(d4x_sanitizer(t("from name")), :class => "lcd lcd-bigger orange")
[Escaped Output] FormBuilder.new.text_field(:name, :size => 40, :class => "big-control center", :value => ((current_user.firstname + " ") + current_user.lastname))
[Escaped Output] FormBuilder.new.label(d4x_sanitizer(t(:password)), :class => "lcd lcd-bigger orange")
[Escaped Output] FormBuilder.new.password_field(:password, :size => 40, :class => "big-control center")
[Escaped Output] FormBuilder.new.label("confirm", :class => "lcd lcd-bigger orange")
[Escaped Output] FormBuilder.new.password_field(:password, :size => 40, :class => "big-control center")
[Escaped Output] FormBuilder.new.submit("Create Mailbox", :class => "button-d4x", :name => "subscribed")
[Escaped Output] form_for(MailAccount.new) do; [Escaped Output] content_for(:head) do; [Escaped Output] javascript_include_tag("d4x-mail-accounts"); end;if params["prod_id"].present? then; @prod = Product.find(params["prod_id"]); [Escaped Output] label_tag(("You can create your " + Product.find(params["prod_id"]).name));end;@users = users_without_uberbox;@domains = available_domains;[Escaped Output] FormBuilder.new.hidden_field(:user_id, :value => current_user.id);[Escaped Output] FormBuilder.new.hidden_field(:uid, :value => 2000);[Escaped Output] FormBuilder.new.hidden_field(:gid, :value => 2000);[Escaped Output] FormBuilder.new.hidden_field(:home, :value => "/var/vmail");if (Product.find(params["prod_id"]).id == 2) then; [Escaped Output] FormBuilder.new.hidden_field(:quota, :value => "1000000000S");else; if (Product.find(params["prod_id"]).id == 3) then; [Escaped Output] FormBuilder.new.hidden_field(:quota, :value => "3000000000S"); else; if (Product.find(params["prod_id"]).id == 4) then; [Escaped Output] FormBuilder.new.hidden_field(:quota, :value => "5000000000S"); end; end;end;[Escaped Output] FormBuilder.new.label(d4x_sanitizer(t(:login)), :class => "lcd lcd-bigger orange");[Escaped Output] FormBuilder.new.text_field(:login, :size => 16, :class => "big-control center", :value => current_user.nickname);[Escaped Output] image_tag("/images/att.png", :size => "60x60");[Escaped Output] FormBuilder.new.label(:domain, :class => "lcd lcd-bigger orange");[Escaped Output] select_tag(:domain, options_for_select(available_domains, "hackers.it"), :onchange => "#", :class => "bigg-control center");[Escaped Output] FormBuilder.new.label(d4x_sanitizer(t("from name")), :class => "lcd lcd-bigger orange");[Escaped Output] FormBuilder.new.text_field(:name, :size => 40, :class => "big-control center", :value => ((current_user.firstname + " ") + current_user.lastname));[Escaped Output] FormBuilder.new.label(d4x_sanitizer(t(:password)), :class => "lcd lcd-bigger orange");[Escaped Output] FormBuilder.new.password_field(:password, :size => 40, :class => "big-control center");[Escaped Output] FormBuilder.new.label("confirm", :class => "lcd lcd-bigger orange");[Escaped Output] FormBuilder.new.password_field(:password, :size => 40, :class => "big-control center");[Escaped Output] FormBuilder.new.submit("Create Mailbox", :class => "button-d4x", :name => "subscribed"); end

messages/_footer

[Escaped Output] t("compose")
[Escaped Output] current_user.nickname
[Escaped Output] t("profile")
[Escaped Output] t("profile")
[Escaped Output] @received.count
[Escaped Output] t("inbox")
[Escaped Output] @sent.count
[Escaped Output] t("sent")
[Escaped Output] @contacts.count
[Escaped Output] t("contacts")
[Escaped Output] t("settings")

messages/_footer.["Template:layouts/application"]

[Escaped Output] t("compose")
[Escaped Output] current_user.nickname
[Escaped Output] t("profile")
[Escaped Output] t("profile")
[Escaped Output] Message.where(:target_id => current_user.id).order(:created_at).reverse_order.count
[Escaped Output] t("inbox")
[Escaped Output] Message.where(:sender_id => current_user.id).order(:created_at).reverse_order.count
[Escaped Output] t("sent")
[Escaped Output] current_user.contacts.count
[Escaped Output] t("contacts")
[Escaped Output] t("settings")

messages/avatar

[Escaped Output] label_tag("profile picture", nil, :class => "lightlime ")
[Escaped Output] pluralize(current_user.errors.count, "error")
[Escaped Output] d4x_sanitizer(msg)
[Escaped Output] t("upload")
[Escaped Output] t("photo")
[Escaped Output] f.file_field(:avatar, :onchange => "$(this).parent().parent().find('.form-control').html($(this).val().split(/[\\\\|/]/).pop());", :style => "display: none;")
[Escaped Output] image_tag(current_user.avatar.url(:large), :class => "jcrop-preview", :id => "target", :width => "70%")
[Escaped Output] f.submit(d4x_sanitizer(t("upload")), :class => "btn btn-outline-success btn-block")
[Escaped Output] form_for(current_user, :html => ({ :multipart => true })) do; if current_user.errors.any? then; [Escaped Output] pluralize(current_user.errors.count, "error"); current_user.errors.full_messages.each do; [Escaped Output] d4x_sanitizer(msg); end;end;[Escaped Output] t("upload");[Escaped Output] t("photo");[Escaped Output] f.file_field(:avatar, :onchange => "$(this).parent().parent().find('.form-control').html($(this).val().split(/[\\\\|/]/).pop());", :style => "display: none;");[Escaped Output] image_tag(current_user.avatar.url(:large), :class => "jcrop-preview", :id => "target", :width => "70%");[Escaped Output] f.submit(d4x_sanitizer(t("upload")), :class => "btn btn-outline-success btn-block"); end

messages/avatar.["MessagesController#avatar"]

[Escaped Output] label_tag("profile picture", nil, :class => "lightlime ")
[Escaped Output] pluralize(current_user.errors.count, "error")
[Escaped Output] d4x_sanitizer(msg)
[Escaped Output] t("upload")
[Escaped Output] t("photo")
[Escaped Output] FormBuilder.new.file_field(:avatar, :onchange => "$(this).parent().parent().find('.form-control').html($(this).val().split(/[\\\\|/]/).pop());", :style => "display: none;")
[Escaped Output] image_tag(current_user.avatar.url(:large), :class => "jcrop-preview", :id => "target", :width => "70%")
[Escaped Output] FormBuilder.new.submit(d4x_sanitizer(t("upload")), :class => "btn btn-outline-success btn-block")
[Escaped Output] form_for(current_user, :html => ({ :multipart => true })) do; if current_user.errors.any? then; [Escaped Output] pluralize(current_user.errors.count, "error"); current_user.errors.full_messages.each do; [Escaped Output] d4x_sanitizer(msg); end;end;[Escaped Output] t("upload");[Escaped Output] t("photo");[Escaped Output] FormBuilder.new.file_field(:avatar, :onchange => "$(this).parent().parent().find('.form-control').html($(this).val().split(/[\\\\|/]/).pop());", :style => "display: none;");[Escaped Output] image_tag(current_user.avatar.url(:large), :class => "jcrop-preview", :id => "target", :width => "70%");[Escaped Output] FormBuilder.new.submit(d4x_sanitizer(t("upload")), :class => "btn btn-outline-success btn-block"); end

messages/check_passphrase

[Escaped Output] t("revealing encrypted message")
[Escaped Output] image_tag("lock_open.png")
[Escaped Output] t("the message has been destroyed")
[Escaped Output] @sender.avatar.url(:thumb)
[Escaped Output] @sent_at
[Escaped Output] time_ago_in_words(@sent_at)
[Escaped Output] t("ago")
[Escaped Output] @target.avatar.url(:thumb)
[Escaped Output] @content
[Escaped Output] link_to(image_tag(@efile.original.url, :width => "150px"), @efile.original.url)
[Escaped Output] t("attachment")
[Escaped Output] link_to(@efile.original_file_name, @efile.original.url)
[Escaped Output] t("the message has been destroyed")

messages/check_passphrase.["MessagesController#check_passphrase"]

[Escaped Output] t("revealing encrypted message")
[Escaped Output] image_tag("lock_open.png")
[Escaped Output] t("the message has been destroyed")
[Escaped Output] User.find(Message.find_by_read_token(params[:token]).sender_id).avatar.url(:thumb)
[Escaped Output] Message.find_by_read_token(params[:token]).created_at
[Escaped Output] time_ago_in_words(Message.find_by_read_token(params[:token]).created_at)
[Escaped Output] t("ago")
[Escaped Output] User.find(Message.find_by_read_token(params[:token]).target_id).avatar.url(:thumb)
[Escaped Output] Message.find_by_read_token(params[:token]).reveal_message
[Escaped Output] link_to(image_tag(Message.find_by_read_token(params[:token]).efiles.first.original.url, :width => "150px"), Message.find_by_read_token(params[:token]).efiles.first.original.url)
[Escaped Output] t("attachment")
[Escaped Output] link_to(Message.find_by_read_token(params[:token]).efiles.first.original_file_name, Message.find_by_read_token(params[:token]).efiles.first.original.url)
[Escaped Output] t("the message has been destroyed")

messages/close_account

[Escaped Output] link_to("Ok, I stay in", "/", :confirm => "Are you sure?", :method => :delete, :class => "btn btn-outline-success btn-block")
[Escaped Output] link_to(t("close my account"), registration_path(current_user), :confirm => "Are you sure?", :method => :delete, :class => "btn btn-outline-danger btn-block")

messages/close_account.["MessagesController#close_account"]

[Escaped Output] link_to("Ok, I stay in", "/", :confirm => "Are you sure?", :method => :delete, :class => "btn btn-outline-success btn-block")
[Escaped Output] link_to(t("close my account"), registration_path(current_user), :confirm => "Are you sure?", :method => :delete, :class => "btn btn-outline-danger btn-block")

messages/compose

[Escaped Output] javascript_include_tag("jsencrypt.js")
[Escaped Output] hidden_field_tag(:genskey)
[Escaped Output] hidden_field_tag(:encrypted)
[Escaped Output] label_tag(t("compose new"), nil, :class => "lightlime")
[Escaped Output] current_user.avatar.url(:thumb)
[Escaped Output] email_field_tag(:target_name, nil, :class => "form-control input-sm ttt", :placeholder => t("email"))
[Escaped Output] user.avatar.url(:thumb)
[Escaped Output] user.firstname
[Escaped Output] user.nickname
[Escaped Output] hidden_field_tag(:target_id, params[:target_id])
[Escaped Output] text_field_tag(:remote, @user.firstname, :class => "typeahead ttt d4zxsearch", :placeholder => "Recipient")
[Escaped Output] text_field_tag(:remote, params[:query], :class => "typeahead ttt d4xsearch", :placeholder => "Recipient")
[Escaped Output] current_user.avatar.url(:thumb)
[Escaped Output] password_field_tag(:aespass, nil, :class => "form-control input-sm center", :id => "aespass", :placeholder => "Pre Shared Passphrase")
[Escaped Output] f.text_area(:content, :class => "form-control custom-control traspa", :placeholder => "Content", :maxlength => "337", :rows => 3, :style => "resize:none")
[Escaped Output] f.file_field(:efile, :onchange => "$(this).parent().parent().find('.form-control').html($(this).val().split(/[\\\\|/]/).pop());", :style => "display: none;")
[Escaped Output] form_for(@message, :html => ({ :multipart => true })) do; [Escaped Output] hidden_field_tag(:genskey);[Escaped Output] hidden_field_tag(:encrypted);[Escaped Output] label_tag(t("compose new"), nil, :class => "lightlime");if current_user.avatar(:thumb).present? then; [Escaped Output] current_user.avatar.url(:thumb);else; [ignored];end;[Escaped Output] email_field_tag(:target_name, nil, :class => "form-control input-sm ttt", :placeholder => t("email"));@contact = User.all;@contact.each do; if user.avatar(:thumb).present? then; [Escaped Output] user.avatar.url(:thumb);else; [ignored];end;[Escaped Output] user.firstname;[Escaped Output] user.nickname; end;if params[:target_id].present? then; @user = User.find(params[:target_id]); [Escaped Output] hidden_field_tag(:target_id, params[:target_id]); [Escaped Output] text_field_tag(:remote, @user.firstname, :class => "typeahead ttt d4zxsearch", :placeholder => "Recipient");else; [Escaped Output] text_field_tag(:remote, params[:query], :class => "typeahead ttt d4xsearch", :placeholder => "Recipient");end;if current_user.avatar(:thumb).present? then; [Escaped Output] current_user.avatar.url(:thumb);else; [ignored];end;[Escaped Output] password_field_tag(:aespass, nil, :class => "form-control input-sm center", :id => "aespass", :placeholder => "Pre Shared Passphrase");[Escaped Output] f.text_area(:content, :class => "form-control custom-control traspa", :placeholder => "Content", :maxlength => "337", :rows => 3, :style => "resize:none");[Escaped Output] f.file_field(:efile, :onchange => "$(this).parent().parent().find('.form-control').html($(this).val().split(/[\\\\|/]/).pop());", :style => "display: none;"); end
[Escaped Output] content_for(:rightside_content) do; [ignored]; end

messages/compose.["MessagesController#compose"]

[Escaped Output] javascript_include_tag("jsencrypt.js")
[Escaped Output] hidden_field_tag(:genskey)
[Escaped Output] hidden_field_tag(:encrypted)
[Escaped Output] label_tag(t("compose new"), nil, :class => "lightlime")
[Escaped Output] current_user.avatar.url(:thumb)
[Escaped Output] email_field_tag(:target_name, nil, :class => "form-control input-sm ttt", :placeholder => t("email"))
[Escaped Output] User.new.avatar.url(:thumb)
[Escaped Output] User.new.firstname
[Escaped Output] User.new.nickname
[Escaped Output] hidden_field_tag(:target_id, params[:target_id])
[Escaped Output] text_field_tag(:remote, User.find(params[:target_id]).firstname, :class => "typeahead ttt d4zxsearch", :placeholder => "Recipient")
[Escaped Output] text_field_tag(:remote, params[:query], :class => "typeahead ttt d4xsearch", :placeholder => "Recipient")
[Escaped Output] current_user.avatar.url(:thumb)
[Escaped Output] password_field_tag(:aespass, nil, :class => "form-control input-sm center", :id => "aespass", :placeholder => "Pre Shared Passphrase")
[Escaped Output] FormBuilder.new.text_area(:content, :class => "form-control custom-control traspa", :placeholder => "Content", :maxlength => "337", :rows => 3, :style => "resize:none")
[Escaped Output] FormBuilder.new.file_field(:efile, :onchange => "$(this).parent().parent().find('.form-control').html($(this).val().split(/[\\\\|/]/).pop());", :style => "display: none;")
[Escaped Output] form_for(Message.new, :html => ({ :multipart => true })) do; [Escaped Output] hidden_field_tag(:genskey);[Escaped Output] hidden_field_tag(:encrypted);[Escaped Output] label_tag(t("compose new"), nil, :class => "lightlime");if current_user.avatar(:thumb).present? then; [Escaped Output] current_user.avatar.url(:thumb);else; [ignored];end;[Escaped Output] email_field_tag(:target_name, nil, :class => "form-control input-sm ttt", :placeholder => t("email"));@contact = User.all;User.all.each do; if User.new.avatar(:thumb).present? then; [Escaped Output] User.new.avatar.url(:thumb);else; [ignored];end;[Escaped Output] User.new.firstname;[Escaped Output] User.new.nickname; end;if params[:target_id].present? then; @user = User.find(params[:target_id]); [Escaped Output] hidden_field_tag(:target_id, params[:target_id]); [Escaped Output] text_field_tag(:remote, User.find(params[:target_id]).firstname, :class => "typeahead ttt d4zxsearch", :placeholder => "Recipient");else; [Escaped Output] text_field_tag(:remote, params[:query], :class => "typeahead ttt d4xsearch", :placeholder => "Recipient");end;if current_user.avatar(:thumb).present? then; [Escaped Output] current_user.avatar.url(:thumb);else; [ignored];end;[Escaped Output] password_field_tag(:aespass, nil, :class => "form-control input-sm center", :id => "aespass", :placeholder => "Pre Shared Passphrase");[Escaped Output] FormBuilder.new.text_area(:content, :class => "form-control custom-control traspa", :placeholder => "Content", :maxlength => "337", :rows => 3, :style => "resize:none");[Escaped Output] FormBuilder.new.file_field(:efile, :onchange => "$(this).parent().parent().find('.form-control').html($(this).val().split(/[\\\\|/]/).pop());", :style => "display: none;"); end
[Escaped Output] content_for(:rightside_content) do; [ignored]; end

messages/info

[Escaped Output] @years = get_setting_value("PROJECT_COPYRIGHT_YEARS")
[Escaped Output] @years = get_setting_value("PROJECT_NAME")
[Escaped Output] @years = get_setting_value("PROJECT_MOTTO")
[Escaped Output] d4x_sanitizer(t("developer"))
[Escaped Output] @author = get_setting_value("PROJECT_AUTHOR")
[Escaped Output] d4x_sanitizer(t("all_rights"))
[Escaped Output] link_to(get_setting_value("LINK_TWITTER")) do; ; end
[Escaped Output] link_to(get_setting_value("LINK_LINKEDIN")) do; ; end
[Escaped Output] link_to(get_setting_value("LINK_LINKEDIN")) do; ; end

messages/language

[Escaped Output] pluralize(current_user.errors.count, "error")
[Escaped Output] d4x_sanitizer(msg)
[Escaped Output] t("choose your language")
[Escaped Output] image_tag("us.png", :alt => "English", :title => "English", :class => "d4xicon")
[Escaped Output] image_tag("es.png", :alt => "Spanish", :title => "Spanish", :class => "d4xicon")
[Escaped Output] image_tag("fr.png", :alt => "French", :title => "French", :class => "d4xicon")
[Escaped Output] image_tag("de.png", :alt => "German", :title => "German", :class => "d4xicon")
[Escaped Output] image_tag("england.png", :alt => "English", :title => "English", :class => "d4xicon")
[Escaped Output] image_tag("pt.png", :alt => "Portuguese", :title => "Portuguese", :class => "d4xicon")
[Escaped Output] image_tag("it.png", :title => "Italian", :alt => "Italian", :class => "d4xicon")
[Escaped Output] image_tag("nl.png", :alt => "Dutch", :title => "Dutch", :class => "d4xicon")
[Escaped Output] image_tag("ru.png", :alt => "Russian", :title => "Russian", :class => "d4xicon")
[Escaped Output] image_tag("cn.png", :alt => "Chinese", :title => "Chinese", :class => "d4xicon")
[Escaped Output] image_tag("se.png", :alt => "Swedish", :title => "Swedish", :class => "d4xicon")
[Escaped Output] f.select(:locale, options_for_select([["English", "en"], ["Italian", "it"], ["Spanish", "es"], ["Portoguese", "pt"], ["French", "fr"], ["Dutch", "nl"], ["German", "de"], ["Swedish", "se"], ["Russian", "ru"], ["Chinese", "cn"]], current_user.locale), {}, :class => "btn btn-dark btn-block")
[Escaped Output] f.submit(d4x_sanitizer(t("update")), :class => "btn btn-outline-warning btn-block")
[Escaped Output] form_for(current_user, :html => ({ :multipart => true })) do; if current_user.errors.any? then; [Escaped Output] pluralize(current_user.errors.count, "error"); current_user.errors.full_messages.each do; [Escaped Output] d4x_sanitizer(msg); end;end;[Escaped Output] t("choose your language");[Escaped Output] image_tag("us.png", :alt => "English", :title => "English", :class => "d4xicon");[Escaped Output] image_tag("es.png", :alt => "Spanish", :title => "Spanish", :class => "d4xicon");[Escaped Output] image_tag("fr.png", :alt => "French", :title => "French", :class => "d4xicon");[Escaped Output] image_tag("de.png", :alt => "German", :title => "German", :class => "d4xicon");[Escaped Output] image_tag("england.png", :alt => "English", :title => "English", :class => "d4xicon");[Escaped Output] image_tag("pt.png", :alt => "Portuguese", :title => "Portuguese", :class => "d4xicon");[Escaped Output] image_tag("it.png", :title => "Italian", :alt => "Italian", :class => "d4xicon");[Escaped Output] image_tag("nl.png", :alt => "Dutch", :title => "Dutch", :class => "d4xicon");[Escaped Output] image_tag("ru.png", :alt => "Russian", :title => "Russian", :class => "d4xicon");[Escaped Output] image_tag("cn.png", :alt => "Chinese", :title => "Chinese", :class => "d4xicon");[Escaped Output] image_tag("se.png", :alt => "Swedish", :title => "Swedish", :class => "d4xicon");[Escaped Output] f.select(:locale, options_for_select([["English", "en"], ["Italian", "it"], ["Spanish", "es"], ["Portoguese", "pt"], ["French", "fr"], ["Dutch", "nl"], ["German", "de"], ["Swedish", "se"], ["Russian", "ru"], ["Chinese", "cn"]], current_user.locale), {}, :class => "btn btn-dark btn-block");[Escaped Output] f.submit(d4x_sanitizer(t("update")), :class => "btn btn-outline-warning btn-block"); end

messages/language.["MessagesController#language"]

[Escaped Output] pluralize(current_user.errors.count, "error")
[Escaped Output] d4x_sanitizer(msg)
[Escaped Output] t("choose your language")
[Escaped Output] image_tag("us.png", :alt => "English", :title => "English", :class => "d4xicon")
[Escaped Output] image_tag("es.png", :alt => "Spanish", :title => "Spanish", :class => "d4xicon")
[Escaped Output] image_tag("fr.png", :alt => "French", :title => "French", :class => "d4xicon")
[Escaped Output] image_tag("de.png", :alt => "German", :title => "German", :class => "d4xicon")
[Escaped Output] image_tag("england.png", :alt => "English", :title => "English", :class => "d4xicon")
[Escaped Output] image_tag("pt.png", :alt => "Portuguese", :title => "Portuguese", :class => "d4xicon")
[Escaped Output] image_tag("it.png", :title => "Italian", :alt => "Italian", :class => "d4xicon")
[Escaped Output] image_tag("nl.png", :alt => "Dutch", :title => "Dutch", :class => "d4xicon")
[Escaped Output] image_tag("ru.png", :alt => "Russian", :title => "Russian", :class => "d4xicon")
[Escaped Output] image_tag("cn.png", :alt => "Chinese", :title => "Chinese", :class => "d4xicon")
[Escaped Output] image_tag("se.png", :alt => "Swedish", :title => "Swedish", :class => "d4xicon")
[Escaped Output] FormBuilder.new.select(:locale, options_for_select([["English", "en"], ["Italian", "it"], ["Spanish", "es"], ["Portoguese", "pt"], ["French", "fr"], ["Dutch", "nl"], ["German", "de"], ["Swedish", "se"], ["Russian", "ru"], ["Chinese", "cn"]], current_user.locale), {}, :class => "btn btn-dark btn-block")
[Escaped Output] FormBuilder.new.submit(d4x_sanitizer(t("update")), :class => "btn btn-outline-warning btn-block")
[Escaped Output] form_for(current_user, :html => ({ :multipart => true })) do; if current_user.errors.any? then; [Escaped Output] pluralize(current_user.errors.count, "error"); current_user.errors.full_messages.each do; [Escaped Output] d4x_sanitizer(msg); end;end;[Escaped Output] t("choose your language");[Escaped Output] image_tag("us.png", :alt => "English", :title => "English", :class => "d4xicon");[Escaped Output] image_tag("es.png", :alt => "Spanish", :title => "Spanish", :class => "d4xicon");[Escaped Output] image_tag("fr.png", :alt => "French", :title => "French", :class => "d4xicon");[Escaped Output] image_tag("de.png", :alt => "German", :title => "German", :class => "d4xicon");[Escaped Output] image_tag("england.png", :alt => "English", :title => "English", :class => "d4xicon");[Escaped Output] image_tag("pt.png", :alt => "Portuguese", :title => "Portuguese", :class => "d4xicon");[Escaped Output] image_tag("it.png", :title => "Italian", :alt => "Italian", :class => "d4xicon");[Escaped Output] image_tag("nl.png", :alt => "Dutch", :title => "Dutch", :class => "d4xicon");[Escaped Output] image_tag("ru.png", :alt => "Russian", :title => "Russian", :class => "d4xicon");[Escaped Output] image_tag("cn.png", :alt => "Chinese", :title => "Chinese", :class => "d4xicon");[Escaped Output] image_tag("se.png", :alt => "Swedish", :title => "Swedish", :class => "d4xicon");[Escaped Output] FormBuilder.new.select(:locale, options_for_select([["English", "en"], ["Italian", "it"], ["Spanish", "es"], ["Portoguese", "pt"], ["French", "fr"], ["Dutch", "nl"], ["German", "de"], ["Swedish", "se"], ["Russian", "ru"], ["Chinese", "cn"]], current_user.locale), {}, :class => "btn btn-dark btn-block");[Escaped Output] FormBuilder.new.submit(d4x_sanitizer(t("update")), :class => "btn btn-outline-warning btn-block"); end

messages/passphrase

[Escaped Output] hidden_field_tag(:token, params[:token])
[Escaped Output] params[:token]
[Escaped Output] current_user.avatar.url(:thumb)
[Escaped Output] current_user.avatar.url(:thumb)
[Escaped Output] password_field_tag(:aespass, nil, :class => "form-control input-lg center", :id => "aespass", :placeholder => "Shared Passphrase")
[Escaped Output] form_tag("check_passphrase") do; [Escaped Output] hidden_field_tag(:token, params[:token]);[Escaped Output] params[:token];if current_user.avatar(:thumb).present? then; [Escaped Output] current_user.avatar.url(:thumb);else; [ignored];end;if current_user.avatar(:thumb).present? then; [Escaped Output] current_user.avatar.url(:thumb);else; [ignored];end;[Escaped Output] password_field_tag(:aespass, nil, :class => "form-control input-lg center", :id => "aespass", :placeholder => "Shared Passphrase"); end

messages/privacy_settings

[Escaped Output] f.select(:email_privacy, options_for_select([["Everybody", "0"], ["My Contacts Only", "1"], ["Nobody", "2"]], current_user.email_privacy), {}, :class => "btn btn-sm btn-dark btn-block")
[Escaped Output] f.select(:picture_privacy, options_for_select([["Everybody", "0"], ["My Contacts Only", "1"], ["Nobody", "2"]], current_user.picture_privacy), {}, :class => "btn btn-sm btn-dark btn-block")
[Escaped Output] f.select(:status_privacy, options_for_select([["Everybody", "0"], ["My Contacts Only", "1"], ["Nobody", "2"]], current_user.status_privacy), {}, :class => "btn btn-sm btn-dark btn-block")
[Escaped Output] t("show")
[Escaped Output] t("last seen_online")
[Escaped Output] f.select(:last_access_privacy, options_for_select([["Everybody", "0"], ["My Contacts Only", "1"], ["Nobody", "2"]], current_user.last_access_privacy), {}, :class => "btn btn-sm btn-dark btn-block")
[Escaped Output] f.submit(d4x_sanitizer(t("update")), :class => "btn btn-outline-primary btn-block")
[Escaped Output] form_for(current_user) do; [Escaped Output] f.select(:email_privacy, options_for_select([["Everybody", "0"], ["My Contacts Only", "1"], ["Nobody", "2"]], current_user.email_privacy), {}, :class => "btn btn-sm btn-dark btn-block");[Escaped Output] f.select(:picture_privacy, options_for_select([["Everybody", "0"], ["My Contacts Only", "1"], ["Nobody", "2"]], current_user.picture_privacy), {}, :class => "btn btn-sm btn-dark btn-block");[Escaped Output] f.select(:status_privacy, options_for_select([["Everybody", "0"], ["My Contacts Only", "1"], ["Nobody", "2"]], current_user.status_privacy), {}, :class => "btn btn-sm btn-dark btn-block");[Escaped Output] t("show");[Escaped Output] t("last seen_online");[Escaped Output] f.select(:last_access_privacy, options_for_select([["Everybody", "0"], ["My Contacts Only", "1"], ["Nobody", "2"]], current_user.last_access_privacy), {}, :class => "btn btn-sm btn-dark btn-block");[Escaped Output] f.submit(d4x_sanitizer(t("update")), :class => "btn btn-outline-primary btn-block"); end

messages/privacy_settings.["MessagesController#privacy_settings"]

[Escaped Output] FormBuilder.new.select(:email_privacy, options_for_select([["Everybody", "0"], ["My Contacts Only", "1"], ["Nobody", "2"]], current_user.email_privacy), {}, :class => "btn btn-sm btn-dark btn-block")
[Escaped Output] FormBuilder.new.select(:picture_privacy, options_for_select([["Everybody", "0"], ["My Contacts Only", "1"], ["Nobody", "2"]], current_user.picture_privacy), {}, :class => "btn btn-sm btn-dark btn-block")
[Escaped Output] FormBuilder.new.select(:status_privacy, options_for_select([["Everybody", "0"], ["My Contacts Only", "1"], ["Nobody", "2"]], current_user.status_privacy), {}, :class => "btn btn-sm btn-dark btn-block")
[Escaped Output] t("show")
[Escaped Output] t("last seen_online")
[Escaped Output] FormBuilder.new.select(:last_access_privacy, options_for_select([["Everybody", "0"], ["My Contacts Only", "1"], ["Nobody", "2"]], current_user.last_access_privacy), {}, :class => "btn btn-sm btn-dark btn-block")
[Escaped Output] FormBuilder.new.submit(d4x_sanitizer(t("update")), :class => "btn btn-outline-primary btn-block")
[Escaped Output] form_for(current_user) do; [Escaped Output] FormBuilder.new.select(:email_privacy, options_for_select([["Everybody", "0"], ["My Contacts Only", "1"], ["Nobody", "2"]], current_user.email_privacy), {}, :class => "btn btn-sm btn-dark btn-block");[Escaped Output] FormBuilder.new.select(:picture_privacy, options_for_select([["Everybody", "0"], ["My Contacts Only", "1"], ["Nobody", "2"]], current_user.picture_privacy), {}, :class => "btn btn-sm btn-dark btn-block");[Escaped Output] FormBuilder.new.select(:status_privacy, options_for_select([["Everybody", "0"], ["My Contacts Only", "1"], ["Nobody", "2"]], current_user.status_privacy), {}, :class => "btn btn-sm btn-dark btn-block");[Escaped Output] t("show");[Escaped Output] t("last seen_online");[Escaped Output] FormBuilder.new.select(:last_access_privacy, options_for_select([["Everybody", "0"], ["My Contacts Only", "1"], ["Nobody", "2"]], current_user.last_access_privacy), {}, :class => "btn btn-sm btn-dark btn-block");[Escaped Output] FormBuilder.new.submit(d4x_sanitizer(t("update")), :class => "btn btn-outline-primary btn-block"); end

messages/profile

[Escaped Output] current_user.avatar.url(:thumb)
[Escaped Output] current_user.firstname
[Escaped Output] current_user.nickname
[Escaped Output] current_user.headline
[Escaped Output] get_current_status(current_user.id)
[Escaped Output] link_to(image_tag("cog_edit.png", :border => 0, :mouseover => "cog_edit.png", :title => t(:edit), :size => "16x16"), edit_user_path(current_user))
[Escaped Output] t("about")
[Escaped Output] current_user.firstname
[Escaped Output] current_user.about
[Escaped Output] t("favorite quote")
[Escaped Output] current_user.quote
[Escaped Output] current_user.location
[Escaped Output] current_user.mobile
[Escaped Output] current_user.email
[Escaped Output] current_user.linkedin_url
[Escaped Output] current_user.skype_id
[Escaped Output] current_user.instagram_id
[Escaped Output] current_user.facebook_user
[Escaped Output] current_user.github_id
[Escaped Output] current_user.twitter_user
[Escaped Output] image_tag("online.png")
[Escaped Output] t("online")
[Escaped Output] image_tag("online.png")
[Escaped Output] current_user.last_seen
[Escaped Output] time_ago_in_words(current_user.last_seen)
[Escaped Output] t("ago")
[Escaped Output] t("never")
[Escaped Output] current_user.created_at
[Escaped Output] time_ago_in_words(current_user.created_at)
[Escaped Output] t("ago")

messages/profile.["MessagesController#profile"]

[Escaped Output] current_user.avatar.url(:thumb)
[Escaped Output] current_user.firstname
[Escaped Output] current_user.nickname
[Escaped Output] current_user.headline
[Escaped Output] get_current_status(current_user.id)
[Escaped Output] link_to(image_tag("cog_edit.png", :border => 0, :mouseover => "cog_edit.png", :title => t(:edit), :size => "16x16"), edit_user_path(current_user))
[Escaped Output] t("about")
[Escaped Output] current_user.firstname
[Escaped Output] current_user.about
[Escaped Output] t("favorite quote")
[Escaped Output] current_user.quote
[Escaped Output] current_user.location
[Escaped Output] current_user.mobile
[Escaped Output] current_user.email
[Escaped Output] current_user.linkedin_url
[Escaped Output] current_user.skype_id
[Escaped Output] current_user.instagram_id
[Escaped Output] current_user.facebook_user
[Escaped Output] current_user.github_id
[Escaped Output] current_user.twitter_user
[Escaped Output] image_tag("online.png")
[Escaped Output] t("online")
[Escaped Output] image_tag("online.png")
[Escaped Output] current_user.last_seen
[Escaped Output] time_ago_in_words(current_user.last_seen)
[Escaped Output] t("ago")
[Escaped Output] t("never")
[Escaped Output] current_user.created_at
[Escaped Output] time_ago_in_words(current_user.created_at)
[Escaped Output] t("ago")

messages/read_message

[Escaped Output] pluralize(@message.errors.count, "error")
[Escaped Output] msg
[Escaped Output] text_field_tag(:remote, params[:query], :class => "typeahead form-control ttt", :placeholder => "Destination Name")
[Escaped Output] f.text_area(:content, :class => "form-control custom-control", :placeholder => "Content", :maxlength => "337", :rows => 3, :style => "resize:none")
[Escaped Output] form_for(@message) do; if @message.errors.any? then; [Escaped Output] pluralize(@message.errors.count, "error"); @message.errors.full_messages.each do; [Escaped Output] msg; end;end;[Escaped Output] text_field_tag(:remote, params[:query], :class => "typeahead form-control ttt", :placeholder => "Destination Name");[Escaped Output] f.text_area(:content, :class => "form-control custom-control", :placeholder => "Content", :maxlength => "337", :rows => 3, :style => "resize:none"); end
[Escaped Output] user_fullname(message.target_id)
[Escaped Output] message.created_at
[Escaped Output] link_to("Reveal & Destroy", ("/read_message?token=" + message.read_token), :class => "btn btn-xs btn-success")
[Escaped Output] button_to("Revoke", message, :method => :delete, :data => ({ :confirm => "Are you sure?" }), :class => "btn btn-xs btn-danger")
[Escaped Output] label_tag("sender")
[Escaped Output] user_fullname(@sender_id)
[Escaped Output] label_tag("destination")
[Escaped Output] user_fullname(@target_id)
[Escaped Output] label_tag("content")
[Escaped Output] @content

messages/read_message.["MessagesController#read_message"]

[Escaped Output] pluralize(Message.find_by_read_token(params[:token]).errors.count, "error")
[Escaped Output] (Unresolved Model).new
[Escaped Output] text_field_tag(:remote, params[:query], :class => "typeahead form-control ttt", :placeholder => "Destination Name")
[Escaped Output] FormBuilder.new.text_area(:content, :class => "form-control custom-control", :placeholder => "Content", :maxlength => "337", :rows => 3, :style => "resize:none")
[Escaped Output] form_for(Message.find_by_read_token(params[:token])) do; if Message.find_by_read_token(params[:token]).errors.any? then; [Escaped Output] pluralize(Message.find_by_read_token(params[:token]).errors.count, "error"); Message.find_by_read_token(params[:token]).errors.full_messages.each do; [Escaped Output] (Unresolved Model).new; end;end;[Escaped Output] text_field_tag(:remote, params[:query], :class => "typeahead form-control ttt", :placeholder => "Destination Name");[Escaped Output] FormBuilder.new.text_area(:content, :class => "form-control custom-control", :placeholder => "Content", :maxlength => "337", :rows => 3, :style => "resize:none"); end
[Escaped Output] user_fullname(message.target_id)
[Escaped Output] message.created_at
[Escaped Output] link_to("Reveal & Destroy", ("/read_message?token=" + message.read_token), :class => "btn btn-xs btn-success")
[Escaped Output] button_to("Revoke", message, :method => :delete, :data => ({ :confirm => "Are you sure?" }), :class => "btn btn-xs btn-danger")
[Escaped Output] label_tag("sender")
[Escaped Output] user_fullname(Message.find_by_read_token(params[:token]).sender_id)
[Escaped Output] label_tag("destination")
[Escaped Output] user_fullname(Message.find_by_read_token(params[:token]).target_id)
[Escaped Output] label_tag("content")
[Escaped Output] Message.find_by_read_token(params[:token]).reveal_message

messages/received

[Escaped Output] message.read_token
[Escaped Output] message.user.avatar.url(:thumb)
[Escaped Output] label_tag(user_fullname(message.sender_id), nil, :class => "xnamea")
[Escaped Output] label_tag(("@" + user_nick(message.sender_id)), nil, :class => "lcd orange")
[Escaped Output] time_ago_in_words_converter(message.created_at)
[Escaped Output] t("ago")
[Escaped Output] image_tag("lock.png")
[Escaped Output] message.read_token

messages/received.["MessagesController#received"]

[Escaped Output] (Unresolved Model).new.read_token
[Escaped Output] (Unresolved Model).new.user.avatar.url(:thumb)
[Escaped Output] label_tag(user_fullname((Unresolved Model).new.sender_id), nil, :class => "xnamea")
[Escaped Output] label_tag(("@" + user_nick((Unresolved Model).new.sender_id)), nil, :class => "lcd orange")
[Escaped Output] time_ago_in_words_converter((Unresolved Model).new.created_at)
[Escaped Output] t("ago")
[Escaped Output] image_tag("lock.png")
[Escaped Output] (Unresolved Model).new.read_token

messages/reveal

[Escaped Output] t("revealing encrypted message")
[Escaped Output] image_tag("lock_open.png")
[Escaped Output] t("the message has been destroyed")
[Escaped Output] @sender.avatar.url(:thumb)
[Escaped Output] @sent_at
[Escaped Output] time_ago_in_words(@sent_at)
[Escaped Output] t("ago")
[Escaped Output] @target.avatar.url(:thumb)
[Escaped Output] @content
[Escaped Output] link_to(image_tag(@efile.original.url, :width => "150px"), @efile.original.url)
[Escaped Output] t("attachment")
[Escaped Output] link_to(@efile.original_file_name, @efile.original.url)
[Escaped Output] t("the message has been destroyed")

messages/reveal.["MessagesController#reveal"]

[Escaped Output] t("revealing encrypted message")
[Escaped Output] image_tag("lock_open.png")
[Escaped Output] t("the message has been destroyed")
[Escaped Output] User.find(Message.find_by_read_token(params[:token]).sender_id).avatar.url(:thumb)
[Escaped Output] Message.find_by_read_token(params[:token]).created_at
[Escaped Output] time_ago_in_words(Message.find_by_read_token(params[:token]).created_at)
[Escaped Output] t("ago")
[Escaped Output] User.find(Message.find_by_read_token(params[:token]).target_id).avatar.url(:thumb)
[Escaped Output] Message.find_by_read_token(params[:token]).reveal_message
[Escaped Output] link_to(image_tag(Message.find_by_read_token(params[:token]).efiles.first.original.url, :width => "150px"), Message.find_by_read_token(params[:token]).efiles.first.original.url)
[Escaped Output] t("attachment")
[Escaped Output] link_to(Message.find_by_read_token(params[:token]).efiles.first.original_file_name, Message.find_by_read_token(params[:token]).efiles.first.original.url)
[Escaped Output] t("the message has been destroyed")

messages/revealed

[Escaped Output] t("revealing encrypted message")
[Escaped Output] @sender.avatar.url(:thumb)
[Escaped Output] user_fullname(@sender_id)
[Escaped Output] user_nick(@sender_id)
[Escaped Output] @sent_at
[Escaped Output] time_ago_in_words(@sent_at)
[Escaped Output] t("ago")
[Escaped Output] raw(@content)
[Escaped Output] link_to(image_tag(@efile.original.url, :width => "150px"), @efile.original.url)
[Escaped Output] t("attachment")
[Escaped Output] link_to(@efile.original_file_name, @efile.original.url)
[Escaped Output] t("the message has been destroyed")

messages/revealed.["MessagesController#revealed"]

[Escaped Output] t("revealing encrypted message")
[Escaped Output] @sender.avatar.url(:thumb)
[Escaped Output] user_fullname(@sender_id)
[Escaped Output] user_nick(@sender_id)
[Escaped Output] @sent_at
[Escaped Output] time_ago_in_words(@sent_at)
[Escaped Output] t("ago")
[Escaped Output] raw(@content)
[Escaped Output] link_to(image_tag(@efile.original.url, :width => "150px"), @efile.original.url)
[Escaped Output] t("attachment")
[Escaped Output] link_to(@efile.original_file_name, @efile.original.url)
[Escaped Output] t("the message has been destroyed")

messages/sent

[Escaped Output] message.read_token
[Escaped Output] @target.avatar.url(:thumb)
[Escaped Output] label_tag(user_fullname(message.target_id), nil, :class => "xname")
[Escaped Output] label_tag(("@" + user_nick(message.target_id)), nil, :class => "orange")
[Escaped Output] label_tag(message.target_name, nil, :class => "xemail")
[Escaped Output] label_tag("Not a Member", nil, :class => "red")
[Escaped Output] time_ago_in_words_converter(message.created_at)
[Escaped Output] t("ago")
[Escaped Output] image_tag("lock.png")
[Escaped Output] message.read_token
[Escaped Output] button_to(message, :method => :delete, :data => ({ :confirm => "Are you sure?" }), :class => "btn btn-sm btn-outline-danger pull-right msgdel") do; ; end

messages/sent.["MessagesController#sent"]

[Escaped Output] (Unresolved Model).new.read_token
[Escaped Output] User.find((Unresolved Model).new.target_id).avatar.url(:thumb)
[Escaped Output] label_tag(user_fullname((Unresolved Model).new.target_id), nil, :class => "xname")
[Escaped Output] label_tag(("@" + user_nick((Unresolved Model).new.target_id)), nil, :class => "orange")
[Escaped Output] label_tag((Unresolved Model).new.target_name, nil, :class => "xemail")
[Escaped Output] label_tag("Not a Member", nil, :class => "red")
[Escaped Output] time_ago_in_words_converter((Unresolved Model).new.created_at)
[Escaped Output] t("ago")
[Escaped Output] image_tag("lock.png")
[Escaped Output] (Unresolved Model).new.read_token
[Escaped Output] button_to((Unresolved Model).new, :method => :delete, :data => ({ :confirm => "Are you sure?" }), :class => "btn btn-sm btn-outline-danger pull-right msgdel") do; ; end

messages/settings

[Escaped Output] t("admin")
[Escaped Output] t("avatar")
[Escaped Output] t("invite a friend")
[Escaped Output] t("close my account")

messages/settings.["MessagesController#settings"]

[Escaped Output] t("admin")
[Escaped Output] t("avatar")
[Escaped Output] t("invite a friend")
[Escaped Output] t("close my account")

messages/show

[Escaped Output] @sender.avatar.url(:thumb)
[Escaped Output] user_fullname(@sender_id)
[Escaped Output] user_nick(@sender_id)
[Escaped Output] @sent_at
[Escaped Output] time_ago_in_words(@sent_at)
[Escaped Output] t("ago")
[Escaped Output] @content

messages/show.["MessagesController#show"]

[Escaped Output] @sender.avatar.url(:thumb)
[Escaped Output] user_fullname(@sender_id)
[Escaped Output] user_nick(@sender_id)
[Escaped Output] @sent_at
[Escaped Output] time_ago_in_words(@sent_at)
[Escaped Output] t("ago")
[Escaped Output] @content

messages/status

[Escaped Output] label_tag(t("status"), nil, :class => "lightlime")
[Escaped Output] current_user.avatar.url(:thumb)
[Escaped Output] current_user.firstname
[Escaped Output] current_user.nickname
[Escaped Output] get_current_status(current_user.id)
[Escaped Output] last_status_set(current_user.id)
[Escaped Output] time_ago_in_words(last_status_set(current_user.id))
[Escaped Output] t("ago")
[Escaped Output] t("never")
[Escaped Output] f.text_field(:status, :class => "form-control message-new", :placeholder => t("status"), :maxlength => "50", :style => "resize:none")
[Escaped Output] f.submit(d4x_sanitizer(t("update")), :id => "signup-submit", :class => "btn btn-outline-success btn-block")
[Escaped Output] form_for(current_user.status.new) do; if current_user.avatar(:thumb).present? then; [Escaped Output] current_user.avatar.url(:thumb);else; [ignored];end;[Escaped Output] current_user.firstname;[Escaped Output] current_user.nickname;[Escaped Output] get_current_status(current_user.id);if has_set_at_status?(current_user.id) then; [Escaped Output] last_status_set(current_user.id); [Escaped Output] time_ago_in_words(last_status_set(current_user.id)); [Escaped Output] t("ago");else; [Escaped Output] t("never");end;[Escaped Output] f.text_field(:status, :class => "form-control message-new", :placeholder => t("status"), :maxlength => "50", :style => "resize:none");[Escaped Output] f.submit(d4x_sanitizer(t("update")), :id => "signup-submit", :class => "btn btn-outline-success btn-block"); end
[Escaped Output] status.id
[Escaped Output] status.status
[Escaped Output] button_to(status, :method => :delete, :data => ({ :confirm => "Are you sure?" }), :class => "btn btn-sm btn-outline-danger", :title => "delete") do; ; end

messages/tell_a_friend

[Escaped Output] f.text_field(:subject, :class => "form-control center", :placeholder => d4x_sanitizer(t("fullname")))
[Escaped Output] f.email_field(:recipient_email, :class => "form-control center", :placeholder => d4x_sanitizer(t("email")))
[Escaped Output] f.submit(d4x_sanitizer(t("send")), :class => "btn btn-dark btn-block")
[Escaped Output] form_for(@invitation) do; [Escaped Output] f.text_field(:subject, :class => "form-control center", :placeholder => d4x_sanitizer(t("fullname")));[Escaped Output] f.email_field(:recipient_email, :class => "form-control center", :placeholder => d4x_sanitizer(t("email")));[Escaped Output] f.submit(d4x_sanitizer(t("send")), :class => "btn btn-dark btn-block"); end
[Escaped Output] label_tag(t("invitations list"), nil, :class => "white")
[Escaped Output] hidden_field_tag(:import, :invitations)
[Escaped Output] f.file_field(:invitations_list, :onchange => "$(this).parent().parent().find('.form-control').html($(this).val().split(/[\\\\|/]/).pop());", :style => "display: none;")
[Escaped Output] f.submit(d4x_sanitizer(t("upload")), :class => "btn btn-dark btn-block")
[Escaped Output] form_for(@user, :html => ({ :multipart => true })) do; [Escaped Output] label_tag(t("invitations list"), nil, :class => "white");[Escaped Output] hidden_field_tag(:import, :invitations);[Escaped Output] f.file_field(:invitations_list, :onchange => "$(this).parent().parent().find('.form-control').html($(this).val().split(/[\\\\|/]/).pop());", :style => "display: none;");[Escaped Output] f.submit(d4x_sanitizer(t("upload")), :class => "btn btn-dark btn-block"); end

messages/tell_a_friend.["MessagesController#tell_a_friend"]

[Escaped Output] FormBuilder.new.text_field(:subject, :class => "form-control center", :placeholder => d4x_sanitizer(t("fullname")))
[Escaped Output] FormBuilder.new.email_field(:recipient_email, :class => "form-control center", :placeholder => d4x_sanitizer(t("email")))
[Escaped Output] FormBuilder.new.submit(d4x_sanitizer(t("send")), :class => "btn btn-dark btn-block")
[Escaped Output] form_for(Invitation.new) do; [Escaped Output] FormBuilder.new.text_field(:subject, :class => "form-control center", :placeholder => d4x_sanitizer(t("fullname")));[Escaped Output] FormBuilder.new.email_field(:recipient_email, :class => "form-control center", :placeholder => d4x_sanitizer(t("email")));[Escaped Output] FormBuilder.new.submit(d4x_sanitizer(t("send")), :class => "btn btn-dark btn-block"); end
[Escaped Output] label_tag(t("invitations list"), nil, :class => "white")
[Escaped Output] hidden_field_tag(:import, :invitations)
[Escaped Output] FormBuilder.new.file_field(:invitations_list, :onchange => "$(this).parent().parent().find('.form-control').html($(this).val().split(/[\\\\|/]/).pop());", :style => "display: none;")
[Escaped Output] FormBuilder.new.submit(d4x_sanitizer(t("upload")), :class => "btn btn-dark btn-block")
[Escaped Output] form_for(User.find(current_user.id), :html => ({ :multipart => true })) do; [Escaped Output] label_tag(t("invitations list"), nil, :class => "white");[Escaped Output] hidden_field_tag(:import, :invitations);[Escaped Output] FormBuilder.new.file_field(:invitations_list, :onchange => "$(this).parent().parent().find('.form-control').html($(this).val().split(/[\\\\|/]/).pop());", :style => "display: none;");[Escaped Output] FormBuilder.new.submit(d4x_sanitizer(t("upload")), :class => "btn btn-dark btn-block"); end

mini_post_comment_likings/_form

[Escaped Output] pluralize(@mini_post_comment_likings.errors.count, t("error"))
[Escaped Output] msg
[Escaped Output] f.label(t(:user))
[Escaped Output] f.text_field(:user_id)
[Escaped Output] f.label(t(:mini_post_comment_id))
[Escaped Output] f.text_field(:mini_post_comment_id)
[Escaped Output] f.label(t(:liking))
[Escaped Output] f.label(t(:liking))
[Escaped Output] f.submit("like", :name => "like", :type => :image, :src => "/images/like.png")
[Escaped Output] f.submit("dislike", :name => "dislike", :type => :image, :src => "/images/dislike.png")
[Escaped Output] f.label(t(:created_at))
[Escaped Output] f.text_field(:created_at)
[Escaped Output] form_for(@mini_post_comment_likings) do; if @mini_post_comment_likings.errors.any? then; [Escaped Output] pluralize(@mini_post_comment_likings.errors.count, t("error")); @mini_post_comment_likings.errors.full_messages.each do; [Escaped Output] msg; end;end;[Escaped Output] f.label(t(:user));current_user.id;[Escaped Output] f.text_field(:user_id);[Escaped Output] f.label(t(:mini_post_comment_id));[Escaped Output] f.text_field(:mini_post_comment_id);[Escaped Output] f.label(t(:liking));[Escaped Output] f.label(t(:liking));[Escaped Output] f.submit("like", :name => "like", :type => :image, :src => "/images/like.png");[Escaped Output] f.submit("dislike", :name => "dislike", :type => :image, :src => "/images/dislike.png");[Escaped Output] f.label(t(:created_at));[Escaped Output] f.text_field(:created_at); end

mini_post_comment_likings/_form.["MiniPostCommentLikingsController#edit", "Template:mini_post_comment_likings/edit"]

[Escaped Output] pluralize(MiniPostCommentLiking.find(params[:id]).errors.count, t("error"))
[Escaped Output] (Unresolved Model).new
[Escaped Output] FormBuilder.new.label(t(:user))
[Escaped Output] FormBuilder.new.text_field(:user_id)
[Escaped Output] FormBuilder.new.label(t(:mini_post_comment_id))
[Escaped Output] FormBuilder.new.text_field(:mini_post_comment_id)
[Escaped Output] FormBuilder.new.label(t(:liking))
[Escaped Output] FormBuilder.new.label(t(:liking))
[Escaped Output] FormBuilder.new.submit("like", :name => "like", :type => :image, :src => "/images/like.png")
[Escaped Output] FormBuilder.new.submit("dislike", :name => "dislike", :type => :image, :src => "/images/dislike.png")
[Escaped Output] FormBuilder.new.label(t(:created_at))
[Escaped Output] FormBuilder.new.text_field(:created_at)
[Escaped Output] form_for(MiniPostCommentLiking.find(params[:id])) do; if MiniPostCommentLiking.find(params[:id]).errors.any? then; [Escaped Output] pluralize(MiniPostCommentLiking.find(params[:id]).errors.count, t("error")); MiniPostCommentLiking.find(params[:id]).errors.full_messages.each do; [Escaped Output] (Unresolved Model).new; end;end;[Escaped Output] FormBuilder.new.label(t(:user));current_user.id;[Escaped Output] FormBuilder.new.text_field(:user_id);[Escaped Output] FormBuilder.new.label(t(:mini_post_comment_id));[Escaped Output] FormBuilder.new.text_field(:mini_post_comment_id);[Escaped Output] FormBuilder.new.label(t(:liking));[Escaped Output] FormBuilder.new.label(t(:liking));[Escaped Output] FormBuilder.new.submit("like", :name => "like", :type => :image, :src => "/images/like.png");[Escaped Output] FormBuilder.new.submit("dislike", :name => "dislike", :type => :image, :src => "/images/dislike.png");[Escaped Output] FormBuilder.new.label(t(:created_at));[Escaped Output] FormBuilder.new.text_field(:created_at); end

mini_post_comment_likings/_form.["MiniPostCommentLikingsController#new", "Template:mini_post_comment_likings/new"]

[Escaped Output] pluralize(MiniPostCommentLiking.new.errors.count, t("error"))
[Escaped Output] msg
[Escaped Output] FormBuilder.new.label(t(:user))
[Escaped Output] FormBuilder.new.text_field(:user_id)
[Escaped Output] FormBuilder.new.label(t(:mini_post_comment_id))
[Escaped Output] FormBuilder.new.text_field(:mini_post_comment_id)
[Escaped Output] FormBuilder.new.label(t(:liking))
[Escaped Output] FormBuilder.new.label(t(:liking))
[Escaped Output] FormBuilder.new.submit("like", :name => "like", :type => :image, :src => "/images/like.png")
[Escaped Output] FormBuilder.new.submit("dislike", :name => "dislike", :type => :image, :src => "/images/dislike.png")
[Escaped Output] FormBuilder.new.label(t(:created_at))
[Escaped Output] FormBuilder.new.text_field(:created_at)
[Escaped Output] form_for(MiniPostCommentLiking.new) do; if MiniPostCommentLiking.new.errors.any? then; [Escaped Output] pluralize(MiniPostCommentLiking.new.errors.count, t("error")); MiniPostCommentLiking.new.errors.full_messages.each do; [Escaped Output] msg; end;end;[Escaped Output] FormBuilder.new.label(t(:user));current_user.id;[Escaped Output] FormBuilder.new.text_field(:user_id);[Escaped Output] FormBuilder.new.label(t(:mini_post_comment_id));[Escaped Output] FormBuilder.new.text_field(:mini_post_comment_id);[Escaped Output] FormBuilder.new.label(t(:liking));[Escaped Output] FormBuilder.new.label(t(:liking));[Escaped Output] FormBuilder.new.submit("like", :name => "like", :type => :image, :src => "/images/like.png");[Escaped Output] FormBuilder.new.submit("dislike", :name => "dislike", :type => :image, :src => "/images/dislike.png");[Escaped Output] FormBuilder.new.label(t(:created_at));[Escaped Output] FormBuilder.new.text_field(:created_at); end

mini_post_comment_likings/_form.["Template:mini_post_comment_likings/edit"]

[Escaped Output] pluralize(@mini_post_comment_likings.errors.count, t("error"))
[Escaped Output] msg
[Escaped Output] FormBuilder.new.label(t(:user))
[Escaped Output] FormBuilder.new.text_field(:user_id)
[Escaped Output] FormBuilder.new.label(t(:mini_post_comment_id))
[Escaped Output] FormBuilder.new.text_field(:mini_post_comment_id)
[Escaped Output] FormBuilder.new.label(t(:liking))
[Escaped Output] FormBuilder.new.label(t(:liking))
[Escaped Output] FormBuilder.new.submit("like", :name => "like", :type => :image, :src => "/images/like.png")
[Escaped Output] FormBuilder.new.submit("dislike", :name => "dislike", :type => :image, :src => "/images/dislike.png")
[Escaped Output] FormBuilder.new.label(t(:created_at))
[Escaped Output] FormBuilder.new.text_field(:created_at)
[Escaped Output] form_for(@mini_post_comment_likings) do; if @mini_post_comment_likings.errors.any? then; [Escaped Output] pluralize(@mini_post_comment_likings.errors.count, t("error")); @mini_post_comment_likings.errors.full_messages.each do; [Escaped Output] msg; end;end;[Escaped Output] FormBuilder.new.label(t(:user));current_user.id;[Escaped Output] FormBuilder.new.text_field(:user_id);[Escaped Output] FormBuilder.new.label(t(:mini_post_comment_id));[Escaped Output] FormBuilder.new.text_field(:mini_post_comment_id);[Escaped Output] FormBuilder.new.label(t(:liking));[Escaped Output] FormBuilder.new.label(t(:liking));[Escaped Output] FormBuilder.new.submit("like", :name => "like", :type => :image, :src => "/images/like.png");[Escaped Output] FormBuilder.new.submit("dislike", :name => "dislike", :type => :image, :src => "/images/dislike.png");[Escaped Output] FormBuilder.new.label(t(:created_at));[Escaped Output] FormBuilder.new.text_field(:created_at); end

mini_post_comment_likings/edit

[Escaped Output] notice
[Escaped Output] t("Update feed")
[Escaped Output] render(partial => "form", {})
[Escaped Output] link_to(t("Show"), @mini_post_comment_liking)
[Escaped Output] link_to(t("Back"), mini_post_comment_likings_path)

mini_post_comment_likings/edit.["MiniPostCommentLikingsController#edit"]

[Escaped Output] notice
[Escaped Output] t("Update feed")
[Escaped Output] render(partial => "form", {})
[Escaped Output] link_to(t("Show"), @mini_post_comment_liking)
[Escaped Output] link_to(t("Back"), mini_post_comment_likings_path)

mini_post_comment_likings/index

[Escaped Output] t("listing mini_post_comment_likings")
[Escaped Output] notice
[Escaped Output] link_to(t("new mini_post_comment_liking"), new_mini_post_comment_liking_path)
[Escaped Output] t(:id)
[Escaped Output] t(:mini_post_id)
[Escaped Output] t(:user_id)
[Escaped Output] t(:created_at)
[Escaped Output] t(:linking)
[Escaped Output] t(:deleted)
[Escaped Output] mini_post_comment_liking.id
[Escaped Output] mini_post_comment_liking.mini_post_comment_id
[Escaped Output] mini_post_comment_liking.user_id
[Escaped Output] mini_post_comment_liking.created_at
[Escaped Output] mini_post_comment_liking.liking
[Escaped Output] mini_post_comment_liking.deleted
[Escaped Output] link_to(image_tag("icon-list-new.gif", :border => 0, :mouseover => "icon-list-new-over.gif", :title => t("icon-show"), :size => "16x16"), mini_post_comment_liking)
[Escaped Output] link_to(image_tag("icon-list-update.gif", :border => 0, :mouseover => "icon-list-update-over.gif", :title => t("icon-edit"), :size => "16x16"), edit_mini_post_comment_liking_path(mini_post_comment_liking))
[Escaped Output] button_to("", mini_post_comment_liking, :confirm => "Are you sure?", :method => :delete, :size => "20x20")

mini_post_comment_likings/index.["MiniPostCommentLikingsController#index"]

[Escaped Output] t("listing mini_post_comment_likings")
[Escaped Output] notice
[Escaped Output] link_to(t("new mini_post_comment_liking"), new_mini_post_comment_liking_path)
[Escaped Output] t(:id)
[Escaped Output] t(:mini_post_id)
[Escaped Output] t(:user_id)
[Escaped Output] t(:created_at)
[Escaped Output] t(:linking)
[Escaped Output] t(:deleted)
[Escaped Output] MiniPostCommentLiking.new.id
[Escaped Output] MiniPostCommentLiking.new.mini_post_comment_id
[Escaped Output] MiniPostCommentLiking.new.user_id
[Escaped Output] MiniPostCommentLiking.new.created_at
[Escaped Output] MiniPostCommentLiking.new.liking
[Escaped Output] MiniPostCommentLiking.new.deleted
[Escaped Output] link_to(image_tag("icon-list-new.gif", :border => 0, :mouseover => "icon-list-new-over.gif", :title => t("icon-show"), :size => "16x16"), MiniPostCommentLiking.new)
[Escaped Output] link_to(image_tag("icon-list-update.gif", :border => 0, :mouseover => "icon-list-update-over.gif", :title => t("icon-edit"), :size => "16x16"), edit_mini_post_comment_liking_path(MiniPostCommentLiking.new))
[Escaped Output] button_to("", MiniPostCommentLiking.new, :confirm => "Are you sure?", :method => :delete, :size => "20x20")

mini_post_comment_likings/new

[Escaped Output] t("New feed - Cool or..Lame")
[Escaped Output] render(partial => "form", {})
[Escaped Output] link_to(t("Back"), mini_post_comment_likings_path)

mini_post_comment_likings/new.["MiniPostCommentLikingsController#new"]

[Escaped Output] t("New feed - Cool or..Lame")
[Escaped Output] render(partial => "form", {})
[Escaped Output] link_to(t("Back"), mini_post_comment_likings_path)

mini_post_comment_likings/show

[Escaped Output] image_tag("card-icon-mini_post_comment_likings.gif", :size => "24x24", :alt => "cool mini_post_comment_liking!")
[Escaped Output] @mini_post_comment_liking.liking
[Escaped Output] link_to(t("edit this entry"), edit_mini_post_comment_liking_path(@mini_post_comment_liking))
[Escaped Output] link_to(t("back to mini_post_comment_likings list"), mini_post_comment_likings_path)
[Escaped Output] @mini_post_comment_liking.user_id
[Escaped Output] @mini_post_comment_liking.mini_post_comment_id
[Escaped Output] @mini_post_comment_liking.created_at

mini_post_comment_likings/show.["MiniPostCommentLikingsController#show"]

[Escaped Output] image_tag("card-icon-mini_post_comment_likings.gif", :size => "24x24", :alt => "cool mini_post_comment_liking!")
[Escaped Output] MiniPostCommentLiking.find(params[:id]).liking
[Escaped Output] link_to(t("edit this entry"), edit_mini_post_comment_liking_path(MiniPostCommentLiking.find(params[:id])))
[Escaped Output] link_to(t("back to mini_post_comment_likings list"), mini_post_comment_likings_path)
[Escaped Output] MiniPostCommentLiking.find(params[:id]).user_id
[Escaped Output] MiniPostCommentLiking.find(params[:id]).mini_post_comment_id
[Escaped Output] MiniPostCommentLiking.find(params[:id]).created_at

mini_post_comments/_form

[Escaped Output] f.label(:author)
[Escaped Output] f.text_field(:author_id)
[Escaped Output] f.label(:content)
[Escaped Output] f.text_area(:content, nil, :cols => 70, :rows => 2)
[Escaped Output] f.submit
[Escaped Output] form_for([@mini_posts, @mini_posts.mini_post_comment.build]) do; [Escaped Output] f.label(:author);[Escaped Output] f.text_field(:author_id);[Escaped Output] f.label(:content);[Escaped Output] f.text_area(:content, nil, :cols => 70, :rows => 2);[Escaped Output] f.submit; end

mini_post_comments/_mini_post_comment

[Escaped Output] mini_post_comment.user.nickname
[Escaped Output] mini_post_comment.content
[Escaped Output] button_to("Destroy Comment", [mini_post_comment.mini_post, mini_post_comment], :confirm => "Are you sure?", :method => :delete)

mini_post_favorites/_destroyer

[Escaped Output] button_to("", mini_post_liking, :confirm => "Are you sure?", :method => :delete, :size => "20x20")

mini_post_favorites/_form

[Escaped Output] pluralize(@mini_post_likings.errors.count, "error")
[Escaped Output] msg
[Escaped Output] f.label(t(:user))
[Escaped Output] f.text_field(:user_id)
[Escaped Output] f.label(t(:mini_post))
[Escaped Output] f.text_field(:mini_post_id)
[Escaped Output] f.label(t(:liking))
[Escaped Output] f.label(t(:liking))
[Escaped Output] f.submit("like", :name => "like", :type => :image, :src => "/images/like.png")
[Escaped Output] f.submit("dislike", :name => "dislike", :type => :image, :src => "/images/dislike.png")
[Escaped Output] f.label(t(:created_at))
[Escaped Output] f.text_field(:created_at)
[Escaped Output] form_for(@mini_post_likings) do; if @mini_post_likings.errors.any? then; [Escaped Output] pluralize(@mini_post_likings.errors.count, "error"); @mini_post_likings.errors.full_messages.each do; [Escaped Output] msg; end;end;[Escaped Output] f.label(t(:user));[Escaped Output] f.text_field(:user_id);[Escaped Output] f.label(t(:mini_post));[Escaped Output] f.text_field(:mini_post_id);[Escaped Output] f.label(t(:liking));[Escaped Output] f.label(t(:liking));[Escaped Output] f.submit("like", :name => "like", :type => :image, :src => "/images/like.png");[Escaped Output] f.submit("dislike", :name => "dislike", :type => :image, :src => "/images/dislike.png");[Escaped Output] f.label(t(:created_at));[Escaped Output] f.text_field(:created_at); end

mini_post_favorites/_form.["Template:mini_post_favorites/edit"]

[Escaped Output] pluralize(@mini_post_likings.errors.count, "error")
[Escaped Output] msg
[Escaped Output] FormBuilder.new.label(t(:user))
[Escaped Output] FormBuilder.new.text_field(:user_id)
[Escaped Output] FormBuilder.new.label(t(:mini_post))
[Escaped Output] FormBuilder.new.text_field(:mini_post_id)
[Escaped Output] FormBuilder.new.label(t(:liking))
[Escaped Output] FormBuilder.new.label(t(:liking))
[Escaped Output] FormBuilder.new.submit("like", :name => "like", :type => :image, :src => "/images/like.png")
[Escaped Output] FormBuilder.new.submit("dislike", :name => "dislike", :type => :image, :src => "/images/dislike.png")
[Escaped Output] FormBuilder.new.label(t(:created_at))
[Escaped Output] FormBuilder.new.text_field(:created_at)
[Escaped Output] form_for(@mini_post_likings) do; if @mini_post_likings.errors.any? then; [Escaped Output] pluralize(@mini_post_likings.errors.count, "error"); @mini_post_likings.errors.full_messages.each do; [Escaped Output] msg; end;end;[Escaped Output] FormBuilder.new.label(t(:user));[Escaped Output] FormBuilder.new.text_field(:user_id);[Escaped Output] FormBuilder.new.label(t(:mini_post));[Escaped Output] FormBuilder.new.text_field(:mini_post_id);[Escaped Output] FormBuilder.new.label(t(:liking));[Escaped Output] FormBuilder.new.label(t(:liking));[Escaped Output] FormBuilder.new.submit("like", :name => "like", :type => :image, :src => "/images/like.png");[Escaped Output] FormBuilder.new.submit("dislike", :name => "dislike", :type => :image, :src => "/images/dislike.png");[Escaped Output] FormBuilder.new.label(t(:created_at));[Escaped Output] FormBuilder.new.text_field(:created_at); end

mini_post_favorites/edit

[Escaped Output] notice
[Escaped Output] t("Update feed")
[Escaped Output] render(partial => "form", {})
[Escaped Output] link_to(t("Show"), @mini_post_liking)
[Escaped Output] link_to(t("Back"), mini_post_likings_path)

mini_post_favorites/edit.["MiniPostFavoritesController#edit"]

[Escaped Output] notice
[Escaped Output] t("Update feed")
[Escaped Output] render(partial => "form", {})
[Escaped Output] link_to(t("Show"), @mini_post_liking)
[Escaped Output] link_to(t("Back"), mini_post_likings_path)

mini_post_favorites/index

[Escaped Output] t("listing mini_post_likings")
[Escaped Output] notice
[Escaped Output] link_to(t("new mini_post_liking"), new_mini_post_liking_path)
[Escaped Output] t(:id)
[Escaped Output] t(:mini_post_id)
[Escaped Output] t(:user_id)
[Escaped Output] t(:created_at)
[Escaped Output] t(:linking)
[Escaped Output] t(:deleted)
[Escaped Output] mini_post_liking.id
[Escaped Output] mini_post_liking.mini_post_id
[Escaped Output] mini_post_liking.user_id
[Escaped Output] mini_post_liking.created_at
[Escaped Output] mini_post_liking.liking
[Escaped Output] mini_post_liking.deleted
[Escaped Output] link_to(image_tag("icon-list-new.gif", :border => 0, :mouseover => "icon-list-new-over.gif", :title => t("icon-show"), :size => "16x16"), mini_post_liking)
[Escaped Output] link_to(image_tag("icon-list-update.gif", :border => 0, :mouseover => "icon-list-update-over.gif", :title => t("icon-edit"), :size => "16x16"), edit_mini_post_liking_path(mini_post_liking))
[Escaped Output] button_to("", mini_post_liking, :confirm => "Are you sure?", :method => :delete, :size => "20x20")

mini_post_favorites/index.["MiniPostFavoritesController#index"]

[Escaped Output] t("listing mini_post_likings")
[Escaped Output] notice
[Escaped Output] link_to(t("new mini_post_liking"), new_mini_post_liking_path)
[Escaped Output] t(:id)
[Escaped Output] t(:mini_post_id)
[Escaped Output] t(:user_id)
[Escaped Output] t(:created_at)
[Escaped Output] t(:linking)
[Escaped Output] t(:deleted)
[Escaped Output] mini_post_liking.id
[Escaped Output] mini_post_liking.mini_post_id
[Escaped Output] mini_post_liking.user_id
[Escaped Output] mini_post_liking.created_at
[Escaped Output] mini_post_liking.liking
[Escaped Output] mini_post_liking.deleted
[Escaped Output] link_to(image_tag("icon-list-new.gif", :border => 0, :mouseover => "icon-list-new-over.gif", :title => t("icon-show"), :size => "16x16"), mini_post_liking)
[Escaped Output] link_to(image_tag("icon-list-update.gif", :border => 0, :mouseover => "icon-list-update-over.gif", :title => t("icon-edit"), :size => "16x16"), edit_mini_post_liking_path(mini_post_liking))
[Escaped Output] button_to("", mini_post_liking, :confirm => "Are you sure?", :method => :delete, :size => "20x20")

mini_post_favorites/new

[Escaped Output] t("New feed - Cool or..Lame")
[Escaped Output] render(partial => "form", {})
[Escaped Output] link_to(t("Back"), mini_post_likings_path)

mini_post_favorites/new.["MiniPostFavoritesController#create"]

[Escaped Output] t("New feed - Cool or..Lame")
[Escaped Output] render(partial => "form", {})
[Escaped Output] link_to(t("Back"), mini_post_likings_path)

mini_post_favorites/show

[Escaped Output] image_tag("card-icon-mini_post_likings.gif", :size => "24x24", :alt => "cool mini_post_liking!")
[Escaped Output] @mini_post_liking.liking
[Escaped Output] link_to(t("edit this entry"), edit_mini_post_liking_path(@mini_post_liking))
[Escaped Output] link_to(t("back to mini_post_likings list"), mini_post_likings_path)
[Escaped Output] @mini_post_liking.user_id
[Escaped Output] @mini_post_liking.mini_post_id
[Escaped Output] @mini_post_liking.created_at

mini_post_favorites/show.["MiniPostFavoritesController#show"]

[Escaped Output] image_tag("card-icon-mini_post_likings.gif", :size => "24x24", :alt => "cool mini_post_liking!")
[Escaped Output] @mini_post_liking.liking
[Escaped Output] link_to(t("edit this entry"), edit_mini_post_liking_path(@mini_post_liking))
[Escaped Output] link_to(t("back to mini_post_likings list"), mini_post_likings_path)
[Escaped Output] @mini_post_liking.user_id
[Escaped Output] @mini_post_liking.mini_post_id
[Escaped Output] @mini_post_liking.created_at

mini_post_likings/_destroyer

[Escaped Output] button_to("", mini_post_liking, :confirm => "Are you sure?", :method => :delete, :size => "20x20")

mini_post_likings/_form

[Escaped Output] pluralize(@mini_post_likings.errors.count, "error")
[Escaped Output] msg
[Escaped Output] f.label(t(:user))
[Escaped Output] f.text_field(:user_id)
[Escaped Output] f.label(t(:mini_post))
[Escaped Output] f.text_field(:mini_post_id)
[Escaped Output] f.label(t(:liking))
[Escaped Output] f.label(t(:liking))
[Escaped Output] f.submit("like", :name => "like", :type => :image, :src => "/images/like.png")
[Escaped Output] f.submit("dislike", :name => "dislike", :type => :image, :src => "/images/dislike.png")
[Escaped Output] f.label(t(:created_at))
[Escaped Output] f.text_field(:created_at)
[Escaped Output] form_for(@mini_post_likings) do; if @mini_post_likings.errors.any? then; [Escaped Output] pluralize(@mini_post_likings.errors.count, "error"); @mini_post_likings.errors.full_messages.each do; [Escaped Output] msg; end;end;[Escaped Output] f.label(t(:user));[Escaped Output] f.text_field(:user_id);[Escaped Output] f.label(t(:mini_post));[Escaped Output] f.text_field(:mini_post_id);[Escaped Output] f.label(t(:liking));[Escaped Output] f.label(t(:liking));[Escaped Output] f.submit("like", :name => "like", :type => :image, :src => "/images/like.png");[Escaped Output] f.submit("dislike", :name => "dislike", :type => :image, :src => "/images/dislike.png");[Escaped Output] f.label(t(:created_at));[Escaped Output] f.text_field(:created_at); end

mini_post_likings/_form.["MiniPostLikingsController#create", "Template:mini_post_likings/new"]

[Escaped Output] pluralize(MiniPostLiking.new(params[:mini_post_liking]).errors.count, "error")
[Escaped Output] msg
[Escaped Output] FormBuilder.new.label(t(:user))
[Escaped Output] FormBuilder.new.text_field(:user_id)
[Escaped Output] FormBuilder.new.label(t(:mini_post))
[Escaped Output] FormBuilder.new.text_field(:mini_post_id)
[Escaped Output] FormBuilder.new.label(t(:liking))
[Escaped Output] FormBuilder.new.label(t(:liking))
[Escaped Output] FormBuilder.new.submit("like", :name => "like", :type => :image, :src => "/images/like.png")
[Escaped Output] FormBuilder.new.submit("dislike", :name => "dislike", :type => :image, :src => "/images/dislike.png")
[Escaped Output] FormBuilder.new.label(t(:created_at))
[Escaped Output] FormBuilder.new.text_field(:created_at)
[Escaped Output] form_for(MiniPostLiking.new(params[:mini_post_liking])) do; if MiniPostLiking.new(params[:mini_post_liking]).errors.any? then; [Escaped Output] pluralize(MiniPostLiking.new(params[:mini_post_liking]).errors.count, "error"); MiniPostLiking.new(params[:mini_post_liking]).errors.full_messages.each do; [Escaped Output] msg; end;end;[Escaped Output] FormBuilder.new.label(t(:user));[Escaped Output] FormBuilder.new.text_field(:user_id);[Escaped Output] FormBuilder.new.label(t(:mini_post));[Escaped Output] FormBuilder.new.text_field(:mini_post_id);[Escaped Output] FormBuilder.new.label(t(:liking));[Escaped Output] FormBuilder.new.label(t(:liking));[Escaped Output] FormBuilder.new.submit("like", :name => "like", :type => :image, :src => "/images/like.png");[Escaped Output] FormBuilder.new.submit("dislike", :name => "dislike", :type => :image, :src => "/images/dislike.png");[Escaped Output] FormBuilder.new.label(t(:created_at));[Escaped Output] FormBuilder.new.text_field(:created_at); end

mini_post_likings/_form.["MiniPostLikingsController#edit", "Template:mini_post_likings/edit"]

[Escaped Output] pluralize(MiniPostLiking.find(params[:id]).errors.count, "error")
[Escaped Output] (Unresolved Model).new
[Escaped Output] FormBuilder.new.label(t(:user))
[Escaped Output] FormBuilder.new.text_field(:user_id)
[Escaped Output] FormBuilder.new.label(t(:mini_post))
[Escaped Output] FormBuilder.new.text_field(:mini_post_id)
[Escaped Output] FormBuilder.new.label(t(:liking))
[Escaped Output] FormBuilder.new.label(t(:liking))
[Escaped Output] FormBuilder.new.submit("like", :name => "like", :type => :image, :src => "/images/like.png")
[Escaped Output] FormBuilder.new.submit("dislike", :name => "dislike", :type => :image, :src => "/images/dislike.png")
[Escaped Output] FormBuilder.new.label(t(:created_at))
[Escaped Output] FormBuilder.new.text_field(:created_at)
[Escaped Output] form_for(MiniPostLiking.find(params[:id])) do; if MiniPostLiking.find(params[:id]).errors.any? then; [Escaped Output] pluralize(MiniPostLiking.find(params[:id]).errors.count, "error"); MiniPostLiking.find(params[:id]).errors.full_messages.each do; [Escaped Output] (Unresolved Model).new; end;end;[Escaped Output] FormBuilder.new.label(t(:user));[Escaped Output] FormBuilder.new.text_field(:user_id);[Escaped Output] FormBuilder.new.label(t(:mini_post));[Escaped Output] FormBuilder.new.text_field(:mini_post_id);[Escaped Output] FormBuilder.new.label(t(:liking));[Escaped Output] FormBuilder.new.label(t(:liking));[Escaped Output] FormBuilder.new.submit("like", :name => "like", :type => :image, :src => "/images/like.png");[Escaped Output] FormBuilder.new.submit("dislike", :name => "dislike", :type => :image, :src => "/images/dislike.png");[Escaped Output] FormBuilder.new.label(t(:created_at));[Escaped Output] FormBuilder.new.text_field(:created_at); end

mini_post_likings/_form.["MiniPostLikingsController#new", "Template:mini_post_likings/new"]

[Escaped Output] pluralize(MiniPostLiking.new.errors.count, "error")
[Escaped Output] msg
[Escaped Output] FormBuilder.new.label(t(:user))
[Escaped Output] FormBuilder.new.text_field(:user_id)
[Escaped Output] FormBuilder.new.label(t(:mini_post))
[Escaped Output] FormBuilder.new.text_field(:mini_post_id)
[Escaped Output] FormBuilder.new.label(t(:liking))
[Escaped Output] FormBuilder.new.label(t(:liking))
[Escaped Output] FormBuilder.new.submit("like", :name => "like", :type => :image, :src => "/images/like.png")
[Escaped Output] FormBuilder.new.submit("dislike", :name => "dislike", :type => :image, :src => "/images/dislike.png")
[Escaped Output] FormBuilder.new.label(t(:created_at))
[Escaped Output] FormBuilder.new.text_field(:created_at)
[Escaped Output] form_for(MiniPostLiking.new) do; if MiniPostLiking.new.errors.any? then; [Escaped Output] pluralize(MiniPostLiking.new.errors.count, "error"); MiniPostLiking.new.errors.full_messages.each do; [Escaped Output] msg; end;end;[Escaped Output] FormBuilder.new.label(t(:user));[Escaped Output] FormBuilder.new.text_field(:user_id);[Escaped Output] FormBuilder.new.label(t(:mini_post));[Escaped Output] FormBuilder.new.text_field(:mini_post_id);[Escaped Output] FormBuilder.new.label(t(:liking));[Escaped Output] FormBuilder.new.label(t(:liking));[Escaped Output] FormBuilder.new.submit("like", :name => "like", :type => :image, :src => "/images/like.png");[Escaped Output] FormBuilder.new.submit("dislike", :name => "dislike", :type => :image, :src => "/images/dislike.png");[Escaped Output] FormBuilder.new.label(t(:created_at));[Escaped Output] FormBuilder.new.text_field(:created_at); end

mini_post_likings/_form.["Template:mini_post_likings/edit"]

[Escaped Output] pluralize(@mini_post_likings.errors.count, "error")
[Escaped Output] msg
[Escaped Output] FormBuilder.new.label(t(:user))
[Escaped Output] FormBuilder.new.text_field(:user_id)
[Escaped Output] FormBuilder.new.label(t(:mini_post))
[Escaped Output] FormBuilder.new.text_field(:mini_post_id)
[Escaped Output] FormBuilder.new.label(t(:liking))
[Escaped Output] FormBuilder.new.label(t(:liking))
[Escaped Output] FormBuilder.new.submit("like", :name => "like", :type => :image, :src => "/images/like.png")
[Escaped Output] FormBuilder.new.submit("dislike", :name => "dislike", :type => :image, :src => "/images/dislike.png")
[Escaped Output] FormBuilder.new.label(t(:created_at))
[Escaped Output] FormBuilder.new.text_field(:created_at)
[Escaped Output] form_for(@mini_post_likings) do; if @mini_post_likings.errors.any? then; [Escaped Output] pluralize(@mini_post_likings.errors.count, "error"); @mini_post_likings.errors.full_messages.each do; [Escaped Output] msg; end;end;[Escaped Output] FormBuilder.new.label(t(:user));[Escaped Output] FormBuilder.new.text_field(:user_id);[Escaped Output] FormBuilder.new.label(t(:mini_post));[Escaped Output] FormBuilder.new.text_field(:mini_post_id);[Escaped Output] FormBuilder.new.label(t(:liking));[Escaped Output] FormBuilder.new.label(t(:liking));[Escaped Output] FormBuilder.new.submit("like", :name => "like", :type => :image, :src => "/images/like.png");[Escaped Output] FormBuilder.new.submit("dislike", :name => "dislike", :type => :image, :src => "/images/dislike.png");[Escaped Output] FormBuilder.new.label(t(:created_at));[Escaped Output] FormBuilder.new.text_field(:created_at); end

mini_post_likings/edit

[Escaped Output] notice
[Escaped Output] t("Update feed")
[Escaped Output] render(partial => "form", {})
[Escaped Output] link_to(t("Show"), @mini_post_liking)
[Escaped Output] link_to(t("Back"), mini_post_likings_path)

mini_post_likings/edit.["MiniPostLikingsController#edit"]

[Escaped Output] notice
[Escaped Output] t("Update feed")
[Escaped Output] render(partial => "form", {})
[Escaped Output] link_to(t("Show"), @mini_post_liking)
[Escaped Output] link_to(t("Back"), mini_post_likings_path)

mini_post_likings/index

[Escaped Output] t("listing mini_post_likings")
[Escaped Output] notice
[Escaped Output] link_to(t("new mini_post_liking"), new_mini_post_liking_path)
[Escaped Output] t(:id)
[Escaped Output] t(:mini_post_id)
[Escaped Output] t(:user_id)
[Escaped Output] t(:created_at)
[Escaped Output] t(:linking)
[Escaped Output] t(:deleted)
[Escaped Output] mini_post_liking.id
[Escaped Output] mini_post_liking.mini_post_id
[Escaped Output] mini_post_liking.user_id
[Escaped Output] mini_post_liking.created_at
[Escaped Output] mini_post_liking.liking
[Escaped Output] mini_post_liking.deleted
[Escaped Output] link_to(image_tag("icon-list-new.gif", :border => 0, :mouseover => "icon-list-new-over.gif", :title => t("icon-show"), :size => "16x16"), mini_post_liking)
[Escaped Output] link_to(image_tag("icon-list-update.gif", :border => 0, :mouseover => "icon-list-update-over.gif", :title => t("icon-edit"), :size => "16x16"), edit_mini_post_liking_path(mini_post_liking))
[Escaped Output] button_to("", mini_post_liking, :confirm => "Are you sure?", :method => :delete, :size => "20x20")

mini_post_likings/index.["MiniPostLikingsController#index"]

[Escaped Output] t("listing mini_post_likings")
[Escaped Output] notice
[Escaped Output] link_to(t("new mini_post_liking"), new_mini_post_liking_path)
[Escaped Output] t(:id)
[Escaped Output] t(:mini_post_id)
[Escaped Output] t(:user_id)
[Escaped Output] t(:created_at)
[Escaped Output] t(:linking)
[Escaped Output] t(:deleted)
[Escaped Output] MiniPostLiking.new.id
[Escaped Output] MiniPostLiking.new.mini_post_id
[Escaped Output] MiniPostLiking.new.user_id
[Escaped Output] MiniPostLiking.new.created_at
[Escaped Output] MiniPostLiking.new.liking
[Escaped Output] MiniPostLiking.new.deleted
[Escaped Output] link_to(image_tag("icon-list-new.gif", :border => 0, :mouseover => "icon-list-new-over.gif", :title => t("icon-show"), :size => "16x16"), MiniPostLiking.new)
[Escaped Output] link_to(image_tag("icon-list-update.gif", :border => 0, :mouseover => "icon-list-update-over.gif", :title => t("icon-edit"), :size => "16x16"), edit_mini_post_liking_path(MiniPostLiking.new))
[Escaped Output] button_to("", MiniPostLiking.new, :confirm => "Are you sure?", :method => :delete, :size => "20x20")

mini_post_likings/new

[Escaped Output] t("New feed - Cool or..Lame")
[Escaped Output] render(partial => "form", {})
[Escaped Output] link_to(t("Back"), mini_post_likings_path)

mini_post_likings/new.["MiniPostLikingsController#create"]

[Escaped Output] t("New feed - Cool or..Lame")
[Escaped Output] render(partial => "form", {})
[Escaped Output] link_to(t("Back"), mini_post_likings_path)

mini_post_likings/show

[Escaped Output] image_tag("card-icon-mini_post_likings.gif", :size => "24x24", :alt => "cool mini_post_liking!")
[Escaped Output] @mini_post_liking.liking
[Escaped Output] link_to(t("edit this entry"), edit_mini_post_liking_path(@mini_post_liking))
[Escaped Output] link_to(t("back to mini_post_likings list"), mini_post_likings_path)
[Escaped Output] @mini_post_liking.user_id
[Escaped Output] @mini_post_liking.mini_post_id
[Escaped Output] @mini_post_liking.created_at

mini_post_likings/show.["MiniPostLikingsController#show"]

[Escaped Output] image_tag("card-icon-mini_post_likings.gif", :size => "24x24", :alt => "cool mini_post_liking!")
[Escaped Output] MiniPostLiking.find(params[:id]).liking
[Escaped Output] link_to(t("edit this entry"), edit_mini_post_liking_path(MiniPostLiking.find(params[:id])))
[Escaped Output] link_to(t("back to mini_post_likings list"), mini_post_likings_path)
[Escaped Output] MiniPostLiking.find(params[:id]).user_id
[Escaped Output] MiniPostLiking.find(params[:id]).mini_post_id
[Escaped Output] MiniPostLiking.find(params[:id]).created_at

mini_posts/Copy of _mini_post

[Escaped Output] image_tag(mini_post.user.avatar.url, :class => "thumbnail")
[Escaped Output] link_to(mini_post.user.nickname, mini_post.user)
[Escaped Output] button_to("", mini_post, :confirm => "Are you sure you want to delete this post?", :title => "delete post", :method => :delete, :size => "16x16", :class => "destroy2013", :id => "mini-post-del")
[Escaped Output] raw(mini_post.content_html)
[Escaped Output] image_tag(mini_post.image, :class => "mini-post-image")
[Escaped Output] user_feed(mini_post.id)
[Escaped Output] f.hidden_field(:mini_post_id, :value => mini_post.id.to_s)
[Escaped Output] button_to(t("unlike"), [mini_post_liking.mini_post, mini_post_liking], :confirm => "Are you sure you want to unlike?", :alt => "unlike", :class => "button-like", :method => :delete, :id => "bt-unlike")
[Escaped Output] form_for(mini_post_liking) do; [Escaped Output] f.hidden_field(:mini_post_id, :value => mini_post.id.to_s);[Escaped Output] button_to(t("unlike"), [mini_post_liking.mini_post, mini_post_liking], :confirm => "Are you sure you want to unlike?", :alt => "unlike", :class => "button-like", :method => :delete, :id => "bt-unlike"); end
[Escaped Output] f.hidden_field(:mini_post_id, :value => mini_post.id.to_s)
[Escaped Output] button_to(t("undislike"), [mini_post_liking.mini_post, mini_post_liking], :confirm => "Are you sure you want to undislike?", :alt => "undislike", :class => "button-like", :method => :delete, :id => "bt-undislike")
[Escaped Output] form_for(mini_post_liking) do; [Escaped Output] f.hidden_field(:mini_post_id, :value => mini_post.id.to_s);[Escaped Output] button_to(t("undislike"), [mini_post_liking.mini_post, mini_post_liking], :confirm => "Are you sure you want to undislike?", :alt => "undislike", :class => "button-like", :method => :delete, :id => "bt-undislike"); end
[Escaped Output] f.hidden_field(:mini_post_id, :value => mini_post.id.to_s)
[Escaped Output] f.hidden_field(:liking, :value => true)
[Escaped Output] submit_tag(t("like"), :name => "feed", :id => "feed-icon-2013", :class => "button-like")
[Escaped Output] form_for(mini_post.mini_post_liking.build) do; [Escaped Output] f.hidden_field(:mini_post_id, :value => mini_post.id.to_s);[Escaped Output] f.hidden_field(:liking, :value => true);[Escaped Output] submit_tag(t("like"), :name => "feed", :id => "feed-icon-2013", :class => "button-like"); end
[Escaped Output] f.hidden_field(:mini_post_id, :value => mini_post.id.to_s)
[Escaped Output] f.hidden_field(:liking, :value => false)
[Escaped Output] submit_tag(t("dislike"), :name => "feed", :id => "feed-icon-2013", :class => "button-like")
[Escaped Output] form_for(mini_post.mini_post_liking.build) do; [Escaped Output] f.hidden_field(:mini_post_id, :value => mini_post.id.to_s);[Escaped Output] f.hidden_field(:liking, :value => false);[Escaped Output] submit_tag(t("dislike"), :name => "feed", :id => "feed-icon-2013", :class => "button-like"); end
[Escaped Output] time_ago_in_words(mini_post.created_at)
[Escaped Output] t("ago")
[Escaped Output] tot_likes_13(mini_post.id)
[Escaped Output] image_tag(mpcomment.user.avatar.url, :class => "thumbnail-comment")
[Escaped Output] link_to(mpcomment.user.nickname, mpcomment.user)
[Escaped Output] raw(cr2br(h(mpcomment.content)))
[Escaped Output] button_to("", [mpcomment.mini_post, mpcomment], :class => "destroy2013", :confirm => "are you sure?", :method => :delete)
[Escaped Output] time_ago_in_words(mpcomment.created_at)
[Escaped Output] t("ago")
[Escaped Output] user_feed_comm(mpcomment.id)
[Escaped Output] f.hidden_field(:mini_post_comment_liking_id, :value => mini_post_comm_liking.id.to_s)
[Escaped Output] button_to(t("unlike"), mini_post_comm_liking, :class => "button-unlike", :confirm => "Are you sure?", :title => "delete_comment", :method => :delete, :id => "del-comment")
[Escaped Output] form_for(mini_post_comm_liking) do; [Escaped Output] f.hidden_field(:mini_post_comment_liking_id, :value => mini_post_comm_liking.id.to_s);[Escaped Output] button_to(t("unlike"), mini_post_comm_liking, :class => "button-unlike", :confirm => "Are you sure?", :title => "delete_comment", :method => :delete, :id => "del-comment"); end
[Escaped Output] f.hidden_field(:mini_post_comment_liking_id, :value => mini_post_comm_liking.id.to_s)
[Escaped Output] button_to(t("undislike"), mini_post_comm_liking, :class => "button-undislike", :confirm => "Are you sure?", :title => "delete_comment", :method => :delete, :id => "del-comment")
[Escaped Output] form_for(mini_post_comm_liking) do; [Escaped Output] f.hidden_field(:mini_post_comment_liking_id, :value => mini_post_comm_liking.id.to_s);[Escaped Output] button_to(t("undislike"), mini_post_comm_liking, :class => "button-undislike", :confirm => "Are you sure?", :title => "delete_comment", :method => :delete, :id => "del-comment"); end
[Escaped Output] f.hidden_field(:liking, :value => true)
[Escaped Output] f.hidden_field(:mini_post_comment_id, :value => mpcomment.id.to_s)
[Escaped Output] submit_tag(t("like"), :name => "feed", :id => "feed-icon-2013", :class => "button-like")
[Escaped Output] form_for(mpcomment.mini_post_comment_liking.build) do; [Escaped Output] f.hidden_field(:liking, :value => true);[Escaped Output] f.hidden_field(:mini_post_comment_id, :value => mpcomment.id.to_s);[Escaped Output] submit_tag(t("like"), :name => "feed", :id => "feed-icon-2013", :class => "button-like"); end
[Escaped Output] f.hidden_field(:liking, :value => false)
[Escaped Output] f.hidden_field(:mini_post_comment_id, :value => mpcomment.id.to_s)
[Escaped Output] submit_tag(t("dislike"), :name => "feed", :id => "feed-icon-2013", :class => "button-like")
[Escaped Output] form_for(mpcomment.mini_post_comment_liking.build) do; [Escaped Output] f.hidden_field(:liking, :value => false);[Escaped Output] f.hidden_field(:mini_post_comment_id, :value => mpcomment.id.to_s);[Escaped Output] submit_tag(t("dislike"), :name => "feed", :id => "feed-icon-2013", :class => "button-like"); end
[Escaped Output] f.text_field(:content, :size => "50x1", :id => "comment-textbox", :placeholder => t("newcomment"), :class => "form-control")
[Escaped Output] f.submit(t("post"), :id => "comment-button", :class => "button-d4x", :title => t("comment"))
[Escaped Output] form_for([mini_post, mini_post.mini_post_comment.build]) do; [Escaped Output] f.text_field(:content, :size => "50x1", :id => "comment-textbox", :placeholder => t("newcomment"), :class => "form-control");[Escaped Output] f.submit(t("post"), :id => "comment-button", :class => "button-d4x", :title => t("comment")); end

mini_posts/_mini_post2

[Escaped Output] mini_post.user.avatar.url(:thumb)
[Escaped Output] image_url("missing_avatar.png")
[Escaped Output] link_to(mini_post.user.firstname, current_user.nickname)
[Escaped Output] mini_post.user.nickname
[Escaped Output] time_ago_in_words_converter(mini_post.created_at)
[Escaped Output] button_to(mini_post, :class => "pdel", :method => :delete, :data => ({ :confirm => "Are you sure you want to delete this post?" }), :title => "remove post") do; [ignored]; end
[Escaped Output] raw(mini_post.content_html)
[Escaped Output] image_tag(mini_post.image, :class => "img-responsive")
[Escaped Output] f.hidden_field(:mini_post_id, :value => mini_post.id.to_s, :class => "mpid")
[Escaped Output] f.hidden_field(:mini_post_liking_id, :value => mini_post_liking.id.to_s, :class => ("mplid_" + mini_post.id.to_s))
[Escaped Output] hidden_field_tag(("act_" + mini_post_liking.mini_post.id.to_s), 0, :class => "act")
[Escaped Output] mini_post.id
[Escaped Output] @likescount
[Escaped Output] form_for(mini_post_liking) do; [Escaped Output] f.hidden_field(:mini_post_id, :value => mini_post.id.to_s, :class => "mpid");[Escaped Output] f.hidden_field(:mini_post_liking_id, :value => mini_post_liking.id.to_s, :class => ("mplid_" + mini_post.id.to_s));[Escaped Output] hidden_field_tag(("act_" + mini_post_liking.mini_post.id.to_s), 0, :class => "act");button_to(t("you like this post"), [mini_post_liking.mini_post, mini_post_liking], :confirm => "are you sure you want to unlike?", :alt => "unlike", :class => "btn btn-xs btn-success", :method => :delete, :id => "feed-icon-2013");[Escaped Output] mini_post.id;[Escaped Output] @likescount; end
[Escaped Output] f.hidden_field(:mini_post_id, :value => mini_post.id.to_s)
[Escaped Output] f.hidden_field(:mini_post_liking_id, :value => mini_post_liking.id.to_s, :class => ("mpdid_" + mini_post.id.to_s))
[Escaped Output] hidden_field_tag(("disact_" + mini_post_liking.mini_post.id.to_s), 0, :class => "disact")
[Escaped Output] mini_post.id
[Escaped Output] @dontlikescount
[Escaped Output] form_for(mini_post_liking) do; [Escaped Output] f.hidden_field(:mini_post_id, :value => mini_post.id.to_s);[Escaped Output] f.hidden_field(:mini_post_liking_id, :value => mini_post_liking.id.to_s, :class => ("mpdid_" + mini_post.id.to_s));[Escaped Output] hidden_field_tag(("disact_" + mini_post_liking.mini_post.id.to_s), 0, :class => "disact");button_to(t("you dont like this post"), [mini_post_liking.mini_post, mini_post_liking], :confirm => "are you sure you want to undislike?", :alt => "undislike", :class => "btn btn-xs btn-danger", :method => :delete, :id => "feed-icon-2013");[Escaped Output] mini_post.id;[Escaped Output] @dontlikescount; end
[Escaped Output] f.hidden_field(:mini_post_id, :value => mini_post.id.to_s, :class => "mpid")
[Escaped Output] f.hidden_field(:mini_post_liking_id, :value => "-337", :class => ("mplid_" + mini_post.id.to_s))
[Escaped Output] hidden_field_tag(("act_" + mini_post.id.to_s), 1, :class => "act")
[Escaped Output] f.hidden_field(:liking, :value => true)
[Escaped Output] mini_post.id
[Escaped Output] @likescount
[Escaped Output] form_for(mini_post.mini_post_liking.build) do; [Escaped Output] f.hidden_field(:mini_post_id, :value => mini_post.id.to_s, :class => "mpid");[Escaped Output] f.hidden_field(:mini_post_liking_id, :value => "-337", :class => ("mplid_" + mini_post.id.to_s));[Escaped Output] hidden_field_tag(("act_" + mini_post.id.to_s), 1, :class => "act");[Escaped Output] f.hidden_field(:liking, :value => true);[Escaped Output] mini_post.id;[Escaped Output] @likescount;submit_tag(t("like"), :name => "feed", :id => "feed-icon-2013", :class => "btn btn-xs btn-success"); end
[Escaped Output] f.hidden_field(:mini_post_id, :value => mini_post.id.to_s, :class => "mpid")
[Escaped Output] f.hidden_field(:mini_post_liking_id, :value => "-337", :class => ("mpdid_" + mini_post.id.to_s))
[Escaped Output] hidden_field_tag(("disact_" + mini_post.id.to_s), 1, :class => "disact")
[Escaped Output] @dontlikescount
[Escaped Output] mini_post.id
[Escaped Output] form_for(mini_post.mini_post_liking.build) do; [Escaped Output] f.hidden_field(:mini_post_id, :value => mini_post.id.to_s, :class => "mpid");[Escaped Output] f.hidden_field(:mini_post_liking_id, :value => "-337", :class => ("mpdid_" + mini_post.id.to_s));[Escaped Output] hidden_field_tag(("disact_" + mini_post.id.to_s), 1, :class => "disact");submit_tag(t("dislike"), :name => "feed", :id => "feed-icon-2013 dislike", :class => "btn btn-xs btn-danger");[Escaped Output] @dontlikescount;[Escaped Output] mini_post.id; end
[Escaped Output] mini_post.id
[Escaped Output] @minipostcomments
[Escaped Output] f.hidden_field(:mini_post_id, :value => mini_post.id.to_s, :class => "mpid")
[Escaped Output] f.hidden_field(:mini_post_favorite_id, :value => mini_post_favorite.id.to_s, :class => ("mpfav_" + mini_post.id.to_s))
[Escaped Output] hidden_field_tag(("favact_" + mini_post_favorite.mini_post.id.to_s), 0, :class => "favact")
[Escaped Output] mini_post.id
[Escaped Output] @favorites
[Escaped Output] form_for(mini_post_favorite) do; [Escaped Output] f.hidden_field(:mini_post_id, :value => mini_post.id.to_s, :class => "mpid");[Escaped Output] f.hidden_field(:mini_post_favorite_id, :value => mini_post_favorite.id.to_s, :class => ("mpfav_" + mini_post.id.to_s));[Escaped Output] hidden_field_tag(("favact_" + mini_post_favorite.mini_post.id.to_s), 0, :class => "favact");[Escaped Output] mini_post.id;[Escaped Output] @favorites; end
[Escaped Output] f.hidden_field(:mini_post_id, :value => mini_post.id.to_s, :class => "mpid")
[Escaped Output] f.hidden_field(:mini_post_favorite_id, :value => "-337", :class => ("mpfav_" + mini_post.id.to_s))
[Escaped Output] hidden_field_tag(("favact_" + mini_post.id.to_s), 1, :class => "favact")
[Escaped Output] f.hidden_field(:favoriting, :value => true)
[Escaped Output] mini_post.id
[Escaped Output] @favorites
[Escaped Output] form_for(mini_post.mini_post_favorite.build) do; [Escaped Output] f.hidden_field(:mini_post_id, :value => mini_post.id.to_s, :class => "mpid");[Escaped Output] f.hidden_field(:mini_post_favorite_id, :value => "-337", :class => ("mpfav_" + mini_post.id.to_s));[Escaped Output] hidden_field_tag(("favact_" + mini_post.id.to_s), 1, :class => "favact");[Escaped Output] f.hidden_field(:favoriting, :value => true);[Escaped Output] mini_post.id;[Escaped Output] @favorites; end
[Escaped Output] h.hidden_field(:feed_id, :value => feed.id.to_s)
[Escaped Output] button_to((((@feed.feedtext + " [") + tot.to_s) + "]"), [feed.mini_post, feed], :confirm => "are you sure you want to remove your sensation?", :alt => "remove-feed", :class => "btn btn-xs btn-warning", :method => :delete, :id => "feed-icon-2013")
[Escaped Output] form_for(feed) do; [Escaped Output] h.hidden_field(:feed_id, :value => feed.id.to_s);[Escaped Output] button_to((((@feed.feedtext + " [") + tot.to_s) + "]"), [feed.mini_post, feed], :confirm => "are you sure you want to remove your sensation?", :alt => "remove-feed", :class => "btn btn-xs btn-warning", :method => :delete, :id => "feed-icon-2013"); end
[Escaped Output] label_tag((((@feed.feedtext + " [") + tot.to_s) + "]"), nil, :class => "feedtext")
[Escaped Output] label_tag((((@feed.feedtext + " [") + tot.to_s) + "]"), nil, :class => "feedtext")
[Escaped Output] mpcomment.user.avatar.url(:thumb)
[Escaped Output] image_url("missing_avatar.png")
[Escaped Output] link_to(mpcomment.user.nickname)
[Escaped Output] time_ago_in_words_converter(mpcomment.created_at).split(",").first
[Escaped Output] mpcomment.user.nickname
[Escaped Output] button_to([mpcomment.mini_post, mpcomment], :class => "btn-alert icon-del-post", :method => :delete, :data => ({ :confirm => "Are you sure you want to delete this comment?" }), :title => "remove comment") do; [ignored]; end
[Escaped Output] raw(cr2br(h(mpcomment.content)))
[Escaped Output] image_tag(mpcomment.user.avatar.url, :class => "thumbnail-comment")
[Escaped Output] f.hidden_field(:mini_post_comment_liking_id, :value => mini_post_comm_liking.id.to_s)
[Escaped Output] button_to(t("you like this post"), mini_post_comm_liking, :class => "btn btn-xs btn-success", :confirm => "Are you sure?", :title => "delete_comment", :method => :delete, :id => "feed-icon-2013")
[Escaped Output] form_for(mini_post_comm_liking) do; [Escaped Output] f.hidden_field(:mini_post_comment_liking_id, :value => mini_post_comm_liking.id.to_s);[Escaped Output] button_to(t("you like this post"), mini_post_comm_liking, :class => "btn btn-xs btn-success", :confirm => "Are you sure?", :title => "delete_comment", :method => :delete, :id => "feed-icon-2013"); end
[Escaped Output] f.hidden_field(:mini_post_comment_liking_id, :value => mini_post_comm_liking.id.to_s)
[Escaped Output] button_to(t("you dont like this post"), mini_post_comm_liking, :class => "btn btn-xs btn-danger", :confirm => "Are you sure?", :title => "delete_comment", :method => :delete, :id => "feed-icon-2013")
[Escaped Output] form_for(mini_post_comm_liking) do; [Escaped Output] f.hidden_field(:mini_post_comment_liking_id, :value => mini_post_comm_liking.id.to_s);[Escaped Output] button_to(t("you dont like this post"), mini_post_comm_liking, :class => "btn btn-xs btn-danger", :confirm => "Are you sure?", :title => "delete_comment", :method => :delete, :id => "feed-icon-2013"); end
[Escaped Output] f.hidden_field(:liking, :value => true)
[Escaped Output] f.hidden_field(:mini_post_comment_id, :value => mpcomment.id.to_s)
[Escaped Output] submit_tag(t("like"), :name => "feed", :id => "feed-icon-2013", :class => "btn btn-xs btn-success")
[Escaped Output] form_for(mpcomment.mini_post_comment_liking.build) do; [Escaped Output] f.hidden_field(:liking, :value => true);[Escaped Output] f.hidden_field(:mini_post_comment_id, :value => mpcomment.id.to_s);[Escaped Output] submit_tag(t("like"), :name => "feed", :id => "feed-icon-2013", :class => "btn btn-xs btn-success"); end
[Escaped Output] f.hidden_field(:liking, :value => false)
[Escaped Output] f.hidden_field(:mini_post_comment_id, :value => mpcomment.id.to_s)
[Escaped Output] submit_tag(t("dislike"), :name => "feed", :id => "feed-icon-2013", :class => "btn btn-xs btn-danger")
[Escaped Output] form_for(mpcomment.mini_post_comment_liking.build) do; [Escaped Output] f.hidden_field(:liking, :value => false);[Escaped Output] f.hidden_field(:mini_post_comment_id, :value => mpcomment.id.to_s);[Escaped Output] submit_tag(t("dislike"), :name => "feed", :id => "feed-icon-2013", :class => "btn btn-xs btn-danger"); end
[Escaped Output] f.text_field(:content, :id => "comment-textbox", :placeholder => t("newcomment"), :class => "form-control input-sm d4xcomment")
[Escaped Output] f.submit(t("comment"), :id => "new-comment-bt", :class => "btn btn-sm btn-success", :title => t("comment"))
[Escaped Output] form_for([mini_post, mini_post.mini_post_comment.build]) do; [Escaped Output] f.text_field(:content, :id => "comment-textbox", :placeholder => t("newcomment"), :class => "form-control input-sm d4xcomment");[Escaped Output] f.submit(t("comment"), :id => "new-comment-bt", :class => "btn btn-sm btn-success", :title => t("comment")); end

mini_posts/index

[Escaped Output] escape_javascript(render(partial => "mini_post", { :collection => (@mini_posts) }))
[Escaped Output] @mini_posts.to_a.last.created_at

mini_posts/index.["MiniPostsController#index"]

[Escaped Output] escape_javascript(render(partial => "mini_post", { :collection => MiniPost.feed(((Time.now + 1.second) or Time.parse(params[:last])), current_user.id) }))
[Escaped Output] MiniPost.feed(((Time.now + 1.second) or Time.parse(params[:last])), current_user.id).to_a.last.created_at

options/_form

[Escaped Output] pluralize(@option.errors.count, "error")
[Escaped Output] msg
[Escaped Output] t("option")
[Escaped Output] f.label(:name)
[Escaped Output] f.text_field(:name, :class => "form-control")
[Escaped Output] f.label(:value)
[Escaped Output] f.text_field(:value, :class => "form-control")
[Escaped Output] link_to(t("cancel"), options_path, :class => "btn btn-warning")
[Escaped Output] f.submit(t("save"), :class => "btn btn-success")
[Escaped Output] form_for(@option) do; if @option.errors.any? then; [Escaped Output] pluralize(@option.errors.count, "error"); @option.errors.full_messages.each do; [Escaped Output] msg; end;end;[Escaped Output] t("option");[Escaped Output] f.label(:name);[Escaped Output] f.text_field(:name, :class => "form-control");[Escaped Output] f.label(:value);[Escaped Output] f.text_field(:value, :class => "form-control");[Escaped Output] link_to(t("cancel"), options_path, :class => "btn btn-warning");[Escaped Output] f.submit(t("save"), :class => "btn btn-success"); end

options/_form.["OptionsController#create", "Template:options/new"]

[Escaped Output] pluralize(Option.new(params[:option]).errors.count, "error")
[Escaped Output] msg
[Escaped Output] t("option")
[Escaped Output] FormBuilder.new.label(:name)
[Escaped Output] FormBuilder.new.text_field(:name, :class => "form-control")
[Escaped Output] FormBuilder.new.label(:value)
[Escaped Output] FormBuilder.new.text_field(:value, :class => "form-control")
[Escaped Output] link_to(t("cancel"), options_path, :class => "btn btn-warning")
[Escaped Output] FormBuilder.new.submit(t("save"), :class => "btn btn-success")
[Escaped Output] form_for(Option.new(params[:option])) do; if Option.new(params[:option]).errors.any? then; [Escaped Output] pluralize(Option.new(params[:option]).errors.count, "error"); Option.new(params[:option]).errors.full_messages.each do; [Escaped Output] msg; end;end;[Escaped Output] t("option");[Escaped Output] FormBuilder.new.label(:name);[Escaped Output] FormBuilder.new.text_field(:name, :class => "form-control");[Escaped Output] FormBuilder.new.label(:value);[Escaped Output] FormBuilder.new.text_field(:value, :class => "form-control");[Escaped Output] link_to(t("cancel"), options_path, :class => "btn btn-warning");[Escaped Output] FormBuilder.new.submit(t("save"), :class => "btn btn-success"); end

options/_form.["OptionsController#edit", "Template:options/edit"]

[Escaped Output] pluralize(Option.find(params[:id]).errors.count, "error")
[Escaped Output] (Unresolved Model).new
[Escaped Output] t("option")
[Escaped Output] FormBuilder.new.label(:name)
[Escaped Output] FormBuilder.new.text_field(:name, :class => "form-control")
[Escaped Output] FormBuilder.new.label(:value)
[Escaped Output] FormBuilder.new.text_field(:value, :class => "form-control")
[Escaped Output] link_to(t("cancel"), options_path, :class => "btn btn-warning")
[Escaped Output] FormBuilder.new.submit(t("save"), :class => "btn btn-success")
[Escaped Output] form_for(Option.find(params[:id])) do; if Option.find(params[:id]).errors.any? then; [Escaped Output] pluralize(Option.find(params[:id]).errors.count, "error"); Option.find(params[:id]).errors.full_messages.each do; [Escaped Output] (Unresolved Model).new; end;end;[Escaped Output] t("option");[Escaped Output] FormBuilder.new.label(:name);[Escaped Output] FormBuilder.new.text_field(:name, :class => "form-control");[Escaped Output] FormBuilder.new.label(:value);[Escaped Output] FormBuilder.new.text_field(:value, :class => "form-control");[Escaped Output] link_to(t("cancel"), options_path, :class => "btn btn-warning");[Escaped Output] FormBuilder.new.submit(t("save"), :class => "btn btn-success"); end

options/_form.["OptionsController#new", "Template:options/new"]

[Escaped Output] pluralize(Option.new.errors.count, "error")
[Escaped Output] msg
[Escaped Output] t("option")
[Escaped Output] FormBuilder.new.label(:name)
[Escaped Output] FormBuilder.new.text_field(:name, :class => "form-control")
[Escaped Output] FormBuilder.new.label(:value)
[Escaped Output] FormBuilder.new.text_field(:value, :class => "form-control")
[Escaped Output] link_to(t("cancel"), options_path, :class => "btn btn-warning")
[Escaped Output] FormBuilder.new.submit(t("save"), :class => "btn btn-success")
[Escaped Output] form_for(Option.new) do; if Option.new.errors.any? then; [Escaped Output] pluralize(Option.new.errors.count, "error"); Option.new.errors.full_messages.each do; [Escaped Output] msg; end;end;[Escaped Output] t("option");[Escaped Output] FormBuilder.new.label(:name);[Escaped Output] FormBuilder.new.text_field(:name, :class => "form-control");[Escaped Output] FormBuilder.new.label(:value);[Escaped Output] FormBuilder.new.text_field(:value, :class => "form-control");[Escaped Output] link_to(t("cancel"), options_path, :class => "btn btn-warning");[Escaped Output] FormBuilder.new.submit(t("save"), :class => "btn btn-success"); end

options/_form.["Template:options/edit"]

[Escaped Output] pluralize(@option.errors.count, "error")
[Escaped Output] msg
[Escaped Output] t("option")
[Escaped Output] FormBuilder.new.label(:name)
[Escaped Output] FormBuilder.new.text_field(:name, :class => "form-control")
[Escaped Output] FormBuilder.new.label(:value)
[Escaped Output] FormBuilder.new.text_field(:value, :class => "form-control")
[Escaped Output] link_to(t("cancel"), options_path, :class => "btn btn-warning")
[Escaped Output] FormBuilder.new.submit(t("save"), :class => "btn btn-success")
[Escaped Output] form_for(@option) do; if @option.errors.any? then; [Escaped Output] pluralize(@option.errors.count, "error"); @option.errors.full_messages.each do; [Escaped Output] msg; end;end;[Escaped Output] t("option");[Escaped Output] FormBuilder.new.label(:name);[Escaped Output] FormBuilder.new.text_field(:name, :class => "form-control");[Escaped Output] FormBuilder.new.label(:value);[Escaped Output] FormBuilder.new.text_field(:value, :class => "form-control");[Escaped Output] link_to(t("cancel"), options_path, :class => "btn btn-warning");[Escaped Output] FormBuilder.new.submit(t("save"), :class => "btn btn-success"); end

options/edit

[Escaped Output] render(partial => "form", {})

options/edit.["OptionsController#edit"]

[Escaped Output] render(partial => "form", {})

options/index

[Escaped Output] t("option")
[Escaped Output] t("value")
[Escaped Output] t("edit")
[Escaped Output] t("delete")
[Escaped Output] option.name
[Escaped Output] option.value
[Escaped Output] link_to(edit_option_path(option)) do; [ignored]; end
[Escaped Output] button_to(option, :method => :delete, :data => ({ :confirm => "Are you sure?" }), :class => "btn btn-sm btn-outline-danger") do; [ignored]; end

options/index.["OptionsController#index"]

[Escaped Output] t("option")
[Escaped Output] t("value")
[Escaped Output] t("edit")
[Escaped Output] t("delete")
[Escaped Output] Option.new.name
[Escaped Output] Option.new.value
[Escaped Output] link_to(edit_option_path(Option.new)) do; [ignored]; end
[Escaped Output] button_to(Option.new, :method => :delete, :data => ({ :confirm => "Are you sure?" }), :class => "btn btn-sm btn-outline-danger") do; [ignored]; end

options/indexOLD

[Escaped Output] option.name
[Escaped Output] option.value
[Escaped Output] link_to(edit_option_path(option)) do; [ignored]; end
[Escaped Output] button_to(option, :method => :delete, :data => ({ :confirm => "Are you sure?" }), :class => "btn btn-xs btn-success") do; [ignored]; end

options/new

[Escaped Output] render(partial => "form", {})

options/new.["OptionsController#new"]

[Escaped Output] render(partial => "form", {})

options/show

[Escaped Output] notice
[Escaped Output] t("option")
[Escaped Output] link_to(options_path) do; [ignored]; end
[Escaped Output] link_to(edit_option_path(@option)) do; [ignored]; end
[Escaped Output] label_tag(:name)
[Escaped Output] @option.name
[Escaped Output] label_tag(:value)
[Escaped Output] @option.value

options/show.["OptionsController#show"]

[Escaped Output] notice
[Escaped Output] t("option")
[Escaped Output] link_to(options_path) do; [ignored]; end
[Escaped Output] link_to(edit_option_path(@option)) do; [ignored]; end
[Escaped Output] label_tag(:name)
[Escaped Output] @option.name
[Escaped Output] label_tag(:value)
[Escaped Output] @option.value

orders/Copy (2) of _form

[Escaped Output] javascript_include_tag("d4x-order.js")
[Escaped Output] msg
[Escaped Output] hidden_field_tag(:cart_id, @order.cart_id)
[Escaped Output] f.hidden_field(:express_token, @order.express_token)
[Escaped Output] f.label(d4x_sanitizer(t("firstname")), nil, :class => "h5 white")
[Escaped Output] f.text_field(:first_name, :class => "center form-control", :placeholder => d4x_sanitizer(t("firstname")))
[Escaped Output] f.label(d4x_sanitizer(t("lastname")), nil, :class => "h5 white")
[Escaped Output] f.text_field(:last_name, :class => "center form-control", :placeholder => d4x_sanitizer(t("lastname")))
[Escaped Output] f.label(d4x_sanitizer(t("address")), nil, :class => "h5 white")
[Escaped Output] f.text_field(:address, :class => "center form-control", :placeholder => d4x_sanitizer(t("address")))
[Escaped Output] f.label(d4x_sanitizer(t("town")), nil, :class => "h5 white")
[Escaped Output] f.text_field(:town, :class => "center form-control", :placeholder => d4x_sanitizer(t("town")))
[Escaped Output] f.label(d4x_sanitizer(t("city")), nil, :class => "h5 white")
[Escaped Output] f.text_field(:city, :class => "center form-control", :placeholder => d4x_sanitizer(t("city")))
[Escaped Output] f.label("ZIP", nil, :class => "h5 white")
[Escaped Output] f.number_field(:zip, :class => "center form-control", :placeholder => d4x_sanitizer(t("ZIP")), :maxlength => 5)
[Escaped Output] f.label(d4x_sanitizer(t("telephone")), nil, :class => "h5 white")
[Escaped Output] f.text_field(:telephone, :class => "center form-control", :maxlength => 50, :placeholder => d4x_sanitizer(t("telephone")))
[Escaped Output] f.label(d4x_sanitizer(t("country")), nil, :class => "h5 white")
[Escaped Output] f.select(:country, options_for_select([["choose", " "], ["Afghanistan", "AF"], ["Albania", "AL"], ["Algeria", "DZ"], ["American Samoa", "AS"], ["Andorra", "AD"], ["Angola", "AO"], ["Anguilla", "AI"], ["Antarctica", "AQ"], ["Antigua & Barbuda", "AG"], ["Argentina", "AR"], ["Armenia", "AM"], ["Aruba", "AW"], ["Australia", "AU"], ["Austria", "AT"], ["Azerbaijan", "AZ"], ["Bahamas", "BS"], ["Bahrain", "BH"], ["Bangladesh", "BD"], ["Barbados", "BB"], ["Belarus", "BY"], ["Belgium", "BE"], ["Belize", "BZ"], ["Benin", "BJ"], ["Bermuda", "BM"], ["Bhutan", "BT"], ["Bolivia", "BO"], ["Bosnia and Herzeg.", "BA"], ["Botswana", "BW"], ["Bouvet Island", "BV"], ["Brazil", "BR"], ["British Ind. Ocean", "IO"], ["Brunei Darussalam", "BN"], ["Bulgaria", "BG"], ["Burkina Faso", "BF"], ["Burundi", "BI"], ["Cambodia", "KH"], ["Cameroon", "CM"], ["Canada", "CA"], ["Cape Verde", "CV"], ["Cayman Islands", "KY"], ["Central Afr.Republic", "CF"], ["Chad", "TD"], ["Chile", "CL"], ["China", "CN"], ["Christmas Island", "CX"], ["Cocos Islands", "CC"], ["Colombia", "CO"], ["Comoros", "KM"], ["Congo", "CG"], ["Congo, Republic of", "CD"], ["Cook Islands", "CK"], ["Costa Rica", "CR"], ["Cote d`Ivoire", "CI"], ["Croatia (Hrvatska)", "HR"], ["Cuba", "CU"], ["Cyprus", "CY"], ["Czech Republic", "CZ"], ["Denmark", "DK"], ["Djibouti", "DJ"], ["Dominica", "DM"], ["Dominican Republic", "DO"], ["East Timor", "TP"], ["Ecuador", "EC"], ["Egypt", "EG"], ["El Salvador", "SV"], ["Equatorial Guinea", "GQ"], ["Eritrea", "ER"], ["Estonia", "EE"], ["Ethiopia", "ET"], ["Falkland Islands", "FK"], ["Faroe Islands", "FO"], ["Fiji", "FJ"], ["Finland", "FI"], ["France", "FR"], ["France, Metropol.", "FX"], ["French Guiana", "GF"], ["French Polynesia", "PF"], ["French Sout Terr.", "TF"], ["Gabon", "GA"], ["Gambia", "GM"], ["Georgia", "GE"], ["Germany", "DE"], ["Ghana", "GH"], ["Gibraltar", "GI"], ["Greece", "GR"], ["Greenland", "GL"], ["Grenada", "GD"], ["Guadeloupe", "GP"], ["Guam", "GU"], ["Guatemala", "GT"], ["Guinea", "GN"], ["Guinea-Bissau", "GW"], ["Guyana", "GY"], ["Haiti", "HT"], ["Heard Mc Donald", "HM"], ["Holy See (Vatican)", "VA"], ["Honduras", "HN"], ["Hong Kong", "HK"], ["Hungary", "HU"], ["Iceland", "IS"], ["India", "IN"], ["Indonesia", "ID"], ["Iran", "IR"], ["Iraq", "IQ"], ["Ireland", "IE"], ["Israel", "IL"], ["Italy", "IT"], ["Jamaica", "JM"], ["Japan", "JP"], ["Jordan", "JO"], ["Kazakhstan", "KZ"], ["Kenya", "KE"], ["Kiribati", "KI"], ["Korea, Democratic", "KP"], ["Korea, Republic of", "KR"], ["Kuwait", "KW"], ["Kyrgyzstan", "KG"], ["Lao Peoples", "LA"], ["Latvia", "LV"], ["Lebanon", "LB"], ["Lesotho", "LS"], ["Liberia", "LR"], ["Libyan", "LY"], ["Liechtenstein", "LI"], ["Lithuania", "LT"], ["Luxembourg", "LU"], ["Macau", "MO"], ["Macedonia", "MK"], ["Madagascar", "MG"], ["Malawi", "MW"], ["Malaysia", "MY"], ["Maldives", "MV"], ["Mali", "ML"], ["Malta", "MT"], ["Marshall Islands", "MH"], ["Martinique", "MQ"], ["Mauritania", "MR"], ["Mauritius", "MU"], ["Mayotte", "YT"], ["Mexico", "MX"], ["Micronesia", "FM"], ["Moldova", "MD"], ["Monaco", "MC"], ["Mongolia", "MN"], ["Montserrat", "MS"], ["Morocco", "MA"], ["Mozambique", "MZ"], ["Myanmar", "MM"], ["Namibia", "NA"], ["Nauru", "NR"], ["Nepal", "NP"], ["Netherlands", "NL"], ["Netherlands Antilles", "AN"], ["New Caledonia", "NC"], ["New Zealand", "NZ"], ["Nicaragua", "NI"], ["Niger", "NE"], ["Nigeria", "NG"], ["Niue", "NU"], ["Norfolk Island", "NF"], ["Northern Mariana Isl", "MP"], ["Norway", "NO"], ["Oman", "OM"], ["Pakistan", "PK"], ["Palau", "PW"], ["Panama", "PA"], ["Papua New Guinea", "PG"], ["Paraguay", "PY"], ["Peru", "PE"], ["Philippines", "PH"], ["Pitcairn", "PN"], ["Poland", "PL"], ["Portugal", "PT"], ["Puerto Rico", "PR"], ["Qatar", "QA"], ["Reunion", "RE"], ["Romania", "RO"], ["Russian Federation", "RU"], ["Rwanda", "RW"], ["Saint Kitts & Nevis", "KN"], ["Saint LUCIA", "LC"], ["Saint Vincent", "VC"], ["Samoa", "WS"], ["San Marino", "SM"], ["Sao Tome & Principe", "ST"], ["Saudi Arabia", "SA"], ["Senegal", "SN"], ["Seychelles", "SC"], ["Sierra Leone", "SL"], ["Singapore", "SG"], ["Slovakia", "SK"], ["Slovenia", "SI"], ["Solomon Islands", "SB"], ["Somalia", "SO"], ["South Africa", "ZA"], ["South Georgia", "GS"], ["Spain", "ES"], ["Sri Lanka", "LK"], ["St. Helena", "SH"], ["St.Pierre & Miquelon", "PM"], ["Sudan", "SD"], ["Suriname", "SR"], ["Svalbard", "SJ"], ["Swaziland", "SZ"], ["Sweden", "SE"], ["Switzerland", "CH"], ["Syrian Arab Republic", "SY"], ["Taiwan", "TW"], ["Tajikistan", "TJ"], ["Tanzania", "TZ"], ["Thailand", "TH"], ["Togo", "TG"], ["Tokelau", "TK"], ["Tonga", "TO"], ["Trinidad and Tobago", "TT"], ["Tunisia", "TN"], ["Turkey", "TR"], ["Turkmenistan", "TM"], ["Turks & Caicos Isl.", "TC"], ["Tuvalu", "TV"], ["Uganda", "UG"], ["Ukraine", "UA"], ["United Arab Emir.", "AE"], ["United Kingdom", "GB"], ["United States", "US"], ["United States Minor", "UM"], ["Uruguay", "UY"], ["Uzbekistan", "UZ"], ["Vanuatu", "VU"], ["Venezuela", "VE"], ["Viet Nam", "VN"], ["Virgin Islands (Brit)", "VG"], ["Virgin Islands (U.S.)", "VI"], ["Wallis & Futuna Isl.", "WF"], ["Western Sahara", "EH"], ["Yemen", "YE"], ["Yugoslavia", "YU"], ["Zambia", "ZM"], ["Zimbabwe", "ZW"]], "0"), :class => "thin-control", :size => "20")
[Escaped Output] check_box_tag(:same_address)
[Escaped Output] d4x_sanitizer(t("shipping address is billing address"))
[Escaped Output] f.label("shipping first name", nil, :class => "h5 white")
[Escaped Output] f.text_field(:shipping_first_name, :class => "center form-control", :maxlength => 50, :placeholder => "Shipping First Name")
[Escaped Output] f.label("shipping last name", nil, :class => "h5 white")
[Escaped Output] f.text_field(:shipping_last_name, :class => "center form-control", :placeholder => d4x_sanitizer(t("lastname")))
[Escaped Output] f.label(d4x_sanitizer(t("shipping address")), nil, :class => "h5 white")
[Escaped Output] f.text_field(:shipping_address, :class => "center form-control", :placeholder => d4x_sanitizer(t("shipping address")))
[Escaped Output] f.label(d4x_sanitizer(t("shipping town")), nil, :class => "h5 white")
[Escaped Output] f.text_field(:shipping_town, :class => "center form-control", :placeholder => d4x_sanitizer(t("shipping town")))
[Escaped Output] f.label(d4x_sanitizer(t("shipping city")), nil, :class => "h5 white")
[Escaped Output] f.text_field(:shipping_city, :class => "center form-control", :placeholder => d4x_sanitizer(t("shipping city")))
[Escaped Output] f.label(d4x_sanitizer(t("shipping zip")), nil, :class => "h5 white")
[Escaped Output] f.number_field(:shipping_zip, :class => "center form-control", :placeholder => d4x_sanitizer(t("shipping zip")), :maxlength => 5)
[Escaped Output] f.label(d4x_sanitizer(t("country")), nil, :class => "h5 white")
[Escaped Output] f.select(:shipping_country, options_for_select([["choose", " "], ["Afghanistan", "AF"], ["Albania", "AL"], ["Algeria", "DZ"], ["American Samoa", "AS"], ["Andorra", "AD"], ["Angola", "AO"], ["Anguilla", "AI"], ["Antarctica", "AQ"], ["Antigua & Barbuda", "AG"], ["Argentina", "AR"], ["Armenia", "AM"], ["Aruba", "AW"], ["Australia", "AU"], ["Austria", "AT"], ["Azerbaijan", "AZ"], ["Bahamas", "BS"], ["Bahrain", "BH"], ["Bangladesh", "BD"], ["Barbados", "BB"], ["Belarus", "BY"], ["Belgium", "BE"], ["Belize", "BZ"], ["Benin", "BJ"], ["Bermuda", "BM"], ["Bhutan", "BT"], ["Bolivia", "BO"], ["Bosnia and Herzeg.", "BA"], ["Botswana", "BW"], ["Bouvet Island", "BV"], ["Brazil", "BR"], ["British Ind. Ocean", "IO"], ["Brunei Darussalam", "BN"], ["Bulgaria", "BG"], ["Burkina Faso", "BF"], ["Burundi", "BI"], ["Cambodia", "KH"], ["Cameroon", "CM"], ["Canada", "CA"], ["Cape Verde", "CV"], ["Cayman Islands", "KY"], ["Central Afr.Republic", "CF"], ["Chad", "TD"], ["Chile", "CL"], ["China", "CN"], ["Christmas Island", "CX"], ["Cocos Islands", "CC"], ["Colombia", "CO"], ["Comoros", "KM"], ["Congo", "CG"], ["Congo, Republic of", "CD"], ["Cook Islands", "CK"], ["Costa Rica", "CR"], ["Cote d`Ivoire", "CI"], ["Croatia (Hrvatska)", "HR"], ["Cuba", "CU"], ["Cyprus", "CY"], ["Czech Republic", "CZ"], ["Denmark", "DK"], ["Djibouti", "DJ"], ["Dominica", "DM"], ["Dominican Republic", "DO"], ["East Timor", "TP"], ["Ecuador", "EC"], ["Egypt", "EG"], ["El Salvador", "SV"], ["Equatorial Guinea", "GQ"], ["Eritrea", "ER"], ["Estonia", "EE"], ["Ethiopia", "ET"], ["Falkland Islands", "FK"], ["Faroe Islands", "FO"], ["Fiji", "FJ"], ["Finland", "FI"], ["France", "FR"], ["France, Metropol.", "FX"], ["French Guiana", "GF"], ["French Polynesia", "PF"], ["French Sout Terr.", "TF"], ["Gabon", "GA"], ["Gambia", "GM"], ["Georgia", "GE"], ["Germany", "DE"], ["Ghana", "GH"], ["Gibraltar", "GI"], ["Greece", "GR"], ["Greenland", "GL"], ["Grenada", "GD"], ["Guadeloupe", "GP"], ["Guam", "GU"], ["Guatemala", "GT"], ["Guinea", "GN"], ["Guinea-Bissau", "GW"], ["Guyana", "GY"], ["Haiti", "HT"], ["Heard Mc Donald", "HM"], ["Holy See (Vatican)", "VA"], ["Honduras", "HN"], ["Hong Kong", "HK"], ["Hungary", "HU"], ["Iceland", "IS"], ["India", "IN"], ["Indonesia", "ID"], ["Iran", "IR"], ["Iraq", "IQ"], ["Ireland", "IE"], ["Israel", "IL"], ["Italy", "IT"], ["Jamaica", "JM"], ["Japan", "JP"], ["Jordan", "JO"], ["Kazakhstan", "KZ"], ["Kenya", "KE"], ["Kiribati", "KI"], ["Korea, Democratic", "KP"], ["Korea, Republic of", "KR"], ["Kuwait", "KW"], ["Kyrgyzstan", "KG"], ["Lao Peoples", "LA"], ["Latvia", "LV"], ["Lebanon", "LB"], ["Lesotho", "LS"], ["Liberia", "LR"], ["Libyan", "LY"], ["Liechtenstein", "LI"], ["Lithuania", "LT"], ["Luxembourg", "LU"], ["Macau", "MO"], ["Macedonia", "MK"], ["Madagascar", "MG"], ["Malawi", "MW"], ["Malaysia", "MY"], ["Maldives", "MV"], ["Mali", "ML"], ["Malta", "MT"], ["Marshall Islands", "MH"], ["Martinique", "MQ"], ["Mauritania", "MR"], ["Mauritius", "MU"], ["Mayotte", "YT"], ["Mexico", "MX"], ["Micronesia", "FM"], ["Moldova", "MD"], ["Monaco", "MC"], ["Mongolia", "MN"], ["Montserrat", "MS"], ["Morocco", "MA"], ["Mozambique", "MZ"], ["Myanmar", "MM"], ["Namibia", "NA"], ["Nauru", "NR"], ["Nepal", "NP"], ["Netherlands", "NL"], ["Netherlands Antilles", "AN"], ["New Caledonia", "NC"], ["New Zealand", "NZ"], ["Nicaragua", "NI"], ["Niger", "NE"], ["Nigeria", "NG"], ["Niue", "NU"], ["Norfolk Island", "NF"], ["Northern Mariana Isl", "MP"], ["Norway", "NO"], ["Oman", "OM"], ["Pakistan", "PK"], ["Palau", "PW"], ["Panama", "PA"], ["Papua New Guinea", "PG"], ["Paraguay", "PY"], ["Peru", "PE"], ["Philippines", "PH"], ["Pitcairn", "PN"], ["Poland", "PL"], ["Portugal", "PT"], ["Puerto Rico", "PR"], ["Qatar", "QA"], ["Reunion", "RE"], ["Romania", "RO"], ["Russian Federation", "RU"], ["Rwanda", "RW"], ["Saint Kitts & Nevis", "KN"], ["Saint LUCIA", "LC"], ["Saint Vincent", "VC"], ["Samoa", "WS"], ["San Marino", "SM"], ["Sao Tome & Principe", "ST"], ["Saudi Arabia", "SA"], ["Senegal", "SN"], ["Seychelles", "SC"], ["Sierra Leone", "SL"], ["Singapore", "SG"], ["Slovakia", "SK"], ["Slovenia", "SI"], ["Solomon Islands", "SB"], ["Somalia", "SO"], ["South Africa", "ZA"], ["South Georgia", "GS"], ["Spain", "ES"], ["Sri Lanka", "LK"], ["St. Helena", "SH"], ["St.Pierre & Miquelon", "PM"], ["Sudan", "SD"], ["Suriname", "SR"], ["Svalbard", "SJ"], ["Swaziland", "SZ"], ["Sweden", "SE"], ["Switzerland", "CH"], ["Syrian Arab Republic", "SY"], ["Taiwan", "TW"], ["Tajikistan", "TJ"], ["Tanzania", "TZ"], ["Thailand", "TH"], ["Togo", "TG"], ["Tokelau", "TK"], ["Tonga", "TO"], ["Trinidad and Tobago", "TT"], ["Tunisia", "TN"], ["Turkey", "TR"], ["Turkmenistan", "TM"], ["Turks & Caicos Isl.", "TC"], ["Tuvalu", "TV"], ["Uganda", "UG"], ["Ukraine", "UA"], ["United Arab Emir.", "AE"], ["United Kingdom", "GB"], ["United States", "US"], ["United States Minor", "UM"], ["Uruguay", "UY"], ["Uzbekistan", "UZ"], ["Vanuatu", "VU"], ["Venezuela", "VE"], ["Viet Nam", "VN"], ["Virgin Islands (Brit)", "VG"], ["Virgin Islands (U.S.)", "VI"], ["Wallis & Futuna Isl.", "WF"], ["Western Sahara", "EH"], ["Yemen", "YE"], ["Yugoslavia", "YU"], ["Zambia", "ZM"], ["Zimbabwe", "ZW"]], "0"), :class => "center thin-control", :size => "20")
[Escaped Output] f.label(d4x_sanitizer(t("shipping telephone")), nil, :class => "h5 white")
[Escaped Output] f.text_field(:shipping_telephone, :class => "center form-control", :maxlength => 50, :placeholder => d4x_sanitizer(t("shipping telephone")))
[Escaped Output] f.label(d4x_sanitizer(t("notes for delivery")), nil, :class => "h5 white")
[Escaped Output] f.text_area(:customer_notes, :class => "form-control", :size => "100x5", :placeholder => d4x_sanitizer(t("notes for delivery")))
[Escaped Output] image_tag("registering-spinner.gif")
[Escaped Output] check_box_tag(:agreement, nil, false)
[Escaped Output] d4x_sanitizer(t("i agree with terms and conditions"))
[Escaped Output] f.submit(d4x_sanitizer(t("place order")), :class => "button-d4x", :id => "place-order")
[Escaped Output] form_for(@order) do; if @order.errors.any? then; @order.errors.full_messages.each do; [Escaped Output] msg; end;end;[Escaped Output] hidden_field_tag(:cart_id, @order.cart_id);unless @order.express_token.blank? then; [Escaped Output] f.hidden_field(:express_token, @order.express_token);end;[Escaped Output] f.label(d4x_sanitizer(t("firstname")), nil, :class => "h5 white");[Escaped Output] f.text_field(:first_name, :class => "center form-control", :placeholder => d4x_sanitizer(t("firstname")));[Escaped Output] f.label(d4x_sanitizer(t("lastname")), nil, :class => "h5 white");[Escaped Output] f.text_field(:last_name, :class => "center form-control", :placeholder => d4x_sanitizer(t("lastname")));[Escaped Output] f.label(d4x_sanitizer(t("address")), nil, :class => "h5 white");[Escaped Output] f.text_field(:address, :class => "center form-control", :placeholder => d4x_sanitizer(t("address")));[Escaped Output] f.label(d4x_sanitizer(t("town")), nil, :class => "h5 white");[Escaped Output] f.text_field(:town, :class => "center form-control", :placeholder => d4x_sanitizer(t("town")));[Escaped Output] f.label(d4x_sanitizer(t("city")), nil, :class => "h5 white");[Escaped Output] f.text_field(:city, :class => "center form-control", :placeholder => d4x_sanitizer(t("city")));[Escaped Output] f.label("ZIP", nil, :class => "h5 white");[Escaped Output] f.number_field(:zip, :class => "center form-control", :placeholder => d4x_sanitizer(t("ZIP")), :maxlength => 5);[Escaped Output] f.label(d4x_sanitizer(t("telephone")), nil, :class => "h5 white");[Escaped Output] f.text_field(:telephone, :class => "center form-control", :maxlength => 50, :placeholder => d4x_sanitizer(t("telephone")));[Escaped Output] f.label(d4x_sanitizer(t("country")), nil, :class => "h5 white");[Escaped Output] f.select(:country, options_for_select([["choose", " "], ["Afghanistan", "AF"], ["Albania", "AL"], ["Algeria", "DZ"], ["American Samoa", "AS"], ["Andorra", "AD"], ["Angola", "AO"], ["Anguilla", "AI"], ["Antarctica", "AQ"], ["Antigua & Barbuda", "AG"], ["Argentina", "AR"], ["Armenia", "AM"], ["Aruba", "AW"], ["Australia", "AU"], ["Austria", "AT"], ["Azerbaijan", "AZ"], ["Bahamas", "BS"], ["Bahrain", "BH"], ["Bangladesh", "BD"], ["Barbados", "BB"], ["Belarus", "BY"], ["Belgium", "BE"], ["Belize", "BZ"], ["Benin", "BJ"], ["Bermuda", "BM"], ["Bhutan", "BT"], ["Bolivia", "BO"], ["Bosnia and Herzeg.", "BA"], ["Botswana", "BW"], ["Bouvet Island", "BV"], ["Brazil", "BR"], ["British Ind. Ocean", "IO"], ["Brunei Darussalam", "BN"], ["Bulgaria", "BG"], ["Burkina Faso", "BF"], ["Burundi", "BI"], ["Cambodia", "KH"], ["Cameroon", "CM"], ["Canada", "CA"], ["Cape Verde", "CV"], ["Cayman Islands", "KY"], ["Central Afr.Republic", "CF"], ["Chad", "TD"], ["Chile", "CL"], ["China", "CN"], ["Christmas Island", "CX"], ["Cocos Islands", "CC"], ["Colombia", "CO"], ["Comoros", "KM"], ["Congo", "CG"], ["Congo, Republic of", "CD"], ["Cook Islands", "CK"], ["Costa Rica", "CR"], ["Cote d`Ivoire", "CI"], ["Croatia (Hrvatska)", "HR"], ["Cuba", "CU"], ["Cyprus", "CY"], ["Czech Republic", "CZ"], ["Denmark", "DK"], ["Djibouti", "DJ"], ["Dominica", "DM"], ["Dominican Republic", "DO"], ["East Timor", "TP"], ["Ecuador", "EC"], ["Egypt", "EG"], ["El Salvador", "SV"], ["Equatorial Guinea", "GQ"], ["Eritrea", "ER"], ["Estonia", "EE"], ["Ethiopia", "ET"], ["Falkland Islands", "FK"], ["Faroe Islands", "FO"], ["Fiji", "FJ"], ["Finland", "FI"], ["France", "FR"], ["France, Metropol.", "FX"], ["French Guiana", "GF"], ["French Polynesia", "PF"], ["French Sout Terr.", "TF"], ["Gabon", "GA"], ["Gambia", "GM"], ["Georgia", "GE"], ["Germany", "DE"], ["Ghana", "GH"], ["Gibraltar", "GI"], ["Greece", "GR"], ["Greenland", "GL"], ["Grenada", "GD"], ["Guadeloupe", "GP"], ["Guam", "GU"], ["Guatemala", "GT"], ["Guinea", "GN"], ["Guinea-Bissau", "GW"], ["Guyana", "GY"], ["Haiti", "HT"], ["Heard Mc Donald", "HM"], ["Holy See (Vatican)", "VA"], ["Honduras", "HN"], ["Hong Kong", "HK"], ["Hungary", "HU"], ["Iceland", "IS"], ["India", "IN"], ["Indonesia", "ID"], ["Iran", "IR"], ["Iraq", "IQ"], ["Ireland", "IE"], ["Israel", "IL"], ["Italy", "IT"], ["Jamaica", "JM"], ["Japan", "JP"], ["Jordan", "JO"], ["Kazakhstan", "KZ"], ["Kenya", "KE"], ["Kiribati", "KI"], ["Korea, Democratic", "KP"], ["Korea, Republic of", "KR"], ["Kuwait", "KW"], ["Kyrgyzstan", "KG"], ["Lao Peoples", "LA"], ["Latvia", "LV"], ["Lebanon", "LB"], ["Lesotho", "LS"], ["Liberia", "LR"], ["Libyan", "LY"], ["Liechtenstein", "LI"], ["Lithuania", "LT"], ["Luxembourg", "LU"], ["Macau", "MO"], ["Macedonia", "MK"], ["Madagascar", "MG"], ["Malawi", "MW"], ["Malaysia", "MY"], ["Maldives", "MV"], ["Mali", "ML"], ["Malta", "MT"], ["Marshall Islands", "MH"], ["Martinique", "MQ"], ["Mauritania", "MR"], ["Mauritius", "MU"], ["Mayotte", "YT"], ["Mexico", "MX"], ["Micronesia", "FM"], ["Moldova", "MD"], ["Monaco", "MC"], ["Mongolia", "MN"], ["Montserrat", "MS"], ["Morocco", "MA"], ["Mozambique", "MZ"], ["Myanmar", "MM"], ["Namibia", "NA"], ["Nauru", "NR"], ["Nepal", "NP"], ["Netherlands", "NL"], ["Netherlands Antilles", "AN"], ["New Caledonia", "NC"], ["New Zealand", "NZ"], ["Nicaragua", "NI"], ["Niger", "NE"], ["Nigeria", "NG"], ["Niue", "NU"], ["Norfolk Island", "NF"], ["Northern Mariana Isl", "MP"], ["Norway", "NO"], ["Oman", "OM"], ["Pakistan", "PK"], ["Palau", "PW"], ["Panama", "PA"], ["Papua New Guinea", "PG"], ["Paraguay", "PY"], ["Peru", "PE"], ["Philippines", "PH"], ["Pitcairn", "PN"], ["Poland", "PL"], ["Portugal", "PT"], ["Puerto Rico", "PR"], ["Qatar", "QA"], ["Reunion", "RE"], ["Romania", "RO"], ["Russian Federation", "RU"], ["Rwanda", "RW"], ["Saint Kitts & Nevis", "KN"], ["Saint LUCIA", "LC"], ["Saint Vincent", "VC"], ["Samoa", "WS"], ["San Marino", "SM"], ["Sao Tome & Principe", "ST"], ["Saudi Arabia", "SA"], ["Senegal", "SN"], ["Seychelles", "SC"], ["Sierra Leone", "SL"], ["Singapore", "SG"], ["Slovakia", "SK"], ["Slovenia", "SI"], ["Solomon Islands", "SB"], ["Somalia", "SO"], ["South Africa", "ZA"], ["South Georgia", "GS"], ["Spain", "ES"], ["Sri Lanka", "LK"], ["St. Helena", "SH"], ["St.Pierre & Miquelon", "PM"], ["Sudan", "SD"], ["Suriname", "SR"], ["Svalbard", "SJ"], ["Swaziland", "SZ"], ["Sweden", "SE"], ["Switzerland", "CH"], ["Syrian Arab Republic", "SY"], ["Taiwan", "TW"], ["Tajikistan", "TJ"], ["Tanzania", "TZ"], ["Thailand", "TH"], ["Togo", "TG"], ["Tokelau", "TK"], ["Tonga", "TO"], ["Trinidad and Tobago", "TT"], ["Tunisia", "TN"], ["Turkey", "TR"], ["Turkmenistan", "TM"], ["Turks & Caicos Isl.", "TC"], ["Tuvalu", "TV"], ["Uganda", "UG"], ["Ukraine", "UA"], ["United Arab Emir.", "AE"], ["United Kingdom", "GB"], ["United States", "US"], ["United States Minor", "UM"], ["Uruguay", "UY"], ["Uzbekistan", "UZ"], ["Vanuatu", "VU"], ["Venezuela", "VE"], ["Viet Nam", "VN"], ["Virgin Islands (Brit)", "VG"], ["Virgin Islands (U.S.)", "VI"], ["Wallis & Futuna Isl.", "WF"], ["Western Sahara", "EH"], ["Yemen", "YE"], ["Yugoslavia", "YU"], ["Zambia", "ZM"], ["Zimbabwe", "ZW"]], "0"), :class => "thin-control", :size => "20");if all_services(@cart.id) then; [Escaped Output] check_box_tag(:same_address); [Escaped Output] d4x_sanitizer(t("shipping address is billing address")); [Escaped Output] f.label("shipping first name", nil, :class => "h5 white"); [Escaped Output] f.text_field(:shipping_first_name, :class => "center form-control", :maxlength => 50, :placeholder => "Shipping First Name"); [Escaped Output] f.label("shipping last name", nil, :class => "h5 white"); [Escaped Output] f.text_field(:shipping_last_name, :class => "center form-control", :placeholder => d4x_sanitizer(t("lastname"))); [Escaped Output] f.label(d4x_sanitizer(t("shipping address")), nil, :class => "h5 white"); [Escaped Output] f.text_field(:shipping_address, :class => "center form-control", :placeholder => d4x_sanitizer(t("shipping address"))); [Escaped Output] f.label(d4x_sanitizer(t("shipping town")), nil, :class => "h5 white"); [Escaped Output] f.text_field(:shipping_town, :class => "center form-control", :placeholder => d4x_sanitizer(t("shipping town"))); [Escaped Output] f.label(d4x_sanitizer(t("shipping city")), nil, :class => "h5 white"); [Escaped Output] f.text_field(:shipping_city, :class => "center form-control", :placeholder => d4x_sanitizer(t("shipping city"))); [Escaped Output] f.label(d4x_sanitizer(t("shipping zip")), nil, :class => "h5 white"); [Escaped Output] f.number_field(:shipping_zip, :class => "center form-control", :placeholder => d4x_sanitizer(t("shipping zip")), :maxlength => 5); [Escaped Output] f.label(d4x_sanitizer(t("country")), nil, :class => "h5 white"); [Escaped Output] f.select(:shipping_country, options_for_select([["choose", " "], ["Afghanistan", "AF"], ["Albania", "AL"], ["Algeria", "DZ"], ["American Samoa", "AS"], ["Andorra", "AD"], ["Angola", "AO"], ["Anguilla", "AI"], ["Antarctica", "AQ"], ["Antigua & Barbuda", "AG"], ["Argentina", "AR"], ["Armenia", "AM"], ["Aruba", "AW"], ["Australia", "AU"], ["Austria", "AT"], ["Azerbaijan", "AZ"], ["Bahamas", "BS"], ["Bahrain", "BH"], ["Bangladesh", "BD"], ["Barbados", "BB"], ["Belarus", "BY"], ["Belgium", "BE"], ["Belize", "BZ"], ["Benin", "BJ"], ["Bermuda", "BM"], ["Bhutan", "BT"], ["Bolivia", "BO"], ["Bosnia and Herzeg.", "BA"], ["Botswana", "BW"], ["Bouvet Island", "BV"], ["Brazil", "BR"], ["British Ind. Ocean", "IO"], ["Brunei Darussalam", "BN"], ["Bulgaria", "BG"], ["Burkina Faso", "BF"], ["Burundi", "BI"], ["Cambodia", "KH"], ["Cameroon", "CM"], ["Canada", "CA"], ["Cape Verde", "CV"], ["Cayman Islands", "KY"], ["Central Afr.Republic", "CF"], ["Chad", "TD"], ["Chile", "CL"], ["China", "CN"], ["Christmas Island", "CX"], ["Cocos Islands", "CC"], ["Colombia", "CO"], ["Comoros", "KM"], ["Congo", "CG"], ["Congo, Republic of", "CD"], ["Cook Islands", "CK"], ["Costa Rica", "CR"], ["Cote d`Ivoire", "CI"], ["Croatia (Hrvatska)", "HR"], ["Cuba", "CU"], ["Cyprus", "CY"], ["Czech Republic", "CZ"], ["Denmark", "DK"], ["Djibouti", "DJ"], ["Dominica", "DM"], ["Dominican Republic", "DO"], ["East Timor", "TP"], ["Ecuador", "EC"], ["Egypt", "EG"], ["El Salvador", "SV"], ["Equatorial Guinea", "GQ"], ["Eritrea", "ER"], ["Estonia", "EE"], ["Ethiopia", "ET"], ["Falkland Islands", "FK"], ["Faroe Islands", "FO"], ["Fiji", "FJ"], ["Finland", "FI"], ["France", "FR"], ["France, Metropol.", "FX"], ["French Guiana", "GF"], ["French Polynesia", "PF"], ["French Sout Terr.", "TF"], ["Gabon", "GA"], ["Gambia", "GM"], ["Georgia", "GE"], ["Germany", "DE"], ["Ghana", "GH"], ["Gibraltar", "GI"], ["Greece", "GR"], ["Greenland", "GL"], ["Grenada", "GD"], ["Guadeloupe", "GP"], ["Guam", "GU"], ["Guatemala", "GT"], ["Guinea", "GN"], ["Guinea-Bissau", "GW"], ["Guyana", "GY"], ["Haiti", "HT"], ["Heard Mc Donald", "HM"], ["Holy See (Vatican)", "VA"], ["Honduras", "HN"], ["Hong Kong", "HK"], ["Hungary", "HU"], ["Iceland", "IS"], ["India", "IN"], ["Indonesia", "ID"], ["Iran", "IR"], ["Iraq", "IQ"], ["Ireland", "IE"], ["Israel", "IL"], ["Italy", "IT"], ["Jamaica", "JM"], ["Japan", "JP"], ["Jordan", "JO"], ["Kazakhstan", "KZ"], ["Kenya", "KE"], ["Kiribati", "KI"], ["Korea, Democratic", "KP"], ["Korea, Republic of", "KR"], ["Kuwait", "KW"], ["Kyrgyzstan", "KG"], ["Lao Peoples", "LA"], ["Latvia", "LV"], ["Lebanon", "LB"], ["Lesotho", "LS"], ["Liberia", "LR"], ["Libyan", "LY"], ["Liechtenstein", "LI"], ["Lithuania", "LT"], ["Luxembourg", "LU"], ["Macau", "MO"], ["Macedonia", "MK"], ["Madagascar", "MG"], ["Malawi", "MW"], ["Malaysia", "MY"], ["Maldives", "MV"], ["Mali", "ML"], ["Malta", "MT"], ["Marshall Islands", "MH"], ["Martinique", "MQ"], ["Mauritania", "MR"], ["Mauritius", "MU"], ["Mayotte", "YT"], ["Mexico", "MX"], ["Micronesia", "FM"], ["Moldova", "MD"], ["Monaco", "MC"], ["Mongolia", "MN"], ["Montserrat", "MS"], ["Morocco", "MA"], ["Mozambique", "MZ"], ["Myanmar", "MM"], ["Namibia", "NA"], ["Nauru", "NR"], ["Nepal", "NP"], ["Netherlands", "NL"], ["Netherlands Antilles", "AN"], ["New Caledonia", "NC"], ["New Zealand", "NZ"], ["Nicaragua", "NI"], ["Niger", "NE"], ["Nigeria", "NG"], ["Niue", "NU"], ["Norfolk Island", "NF"], ["Northern Mariana Isl", "MP"], ["Norway", "NO"], ["Oman", "OM"], ["Pakistan", "PK"], ["Palau", "PW"], ["Panama", "PA"], ["Papua New Guinea", "PG"], ["Paraguay", "PY"], ["Peru", "PE"], ["Philippines", "PH"], ["Pitcairn", "PN"], ["Poland", "PL"], ["Portugal", "PT"], ["Puerto Rico", "PR"], ["Qatar", "QA"], ["Reunion", "RE"], ["Romania", "RO"], ["Russian Federation", "RU"], ["Rwanda", "RW"], ["Saint Kitts & Nevis", "KN"], ["Saint LUCIA", "LC"], ["Saint Vincent", "VC"], ["Samoa", "WS"], ["San Marino", "SM"], ["Sao Tome & Principe", "ST"], ["Saudi Arabia", "SA"], ["Senegal", "SN"], ["Seychelles", "SC"], ["Sierra Leone", "SL"], ["Singapore", "SG"], ["Slovakia", "SK"], ["Slovenia", "SI"], ["Solomon Islands", "SB"], ["Somalia", "SO"], ["South Africa", "ZA"], ["South Georgia", "GS"], ["Spain", "ES"], ["Sri Lanka", "LK"], ["St. Helena", "SH"], ["St.Pierre & Miquelon", "PM"], ["Sudan", "SD"], ["Suriname", "SR"], ["Svalbard", "SJ"], ["Swaziland", "SZ"], ["Sweden", "SE"], ["Switzerland", "CH"], ["Syrian Arab Republic", "SY"], ["Taiwan", "TW"], ["Tajikistan", "TJ"], ["Tanzania", "TZ"], ["Thailand", "TH"], ["Togo", "TG"], ["Tokelau", "TK"], ["Tonga", "TO"], ["Trinidad and Tobago", "TT"], ["Tunisia", "TN"], ["Turkey", "TR"], ["Turkmenistan", "TM"], ["Turks & Caicos Isl.", "TC"], ["Tuvalu", "TV"], ["Uganda", "UG"], ["Ukraine", "UA"], ["United Arab Emir.", "AE"], ["United Kingdom", "GB"], ["United States", "US"], ["United States Minor", "UM"], ["Uruguay", "UY"], ["Uzbekistan", "UZ"], ["Vanuatu", "VU"], ["Venezuela", "VE"], ["Viet Nam", "VN"], ["Virgin Islands (Brit)", "VG"], ["Virgin Islands (U.S.)", "VI"], ["Wallis & Futuna Isl.", "WF"], ["Western Sahara", "EH"], ["Yemen", "YE"], ["Yugoslavia", "YU"], ["Zambia", "ZM"], ["Zimbabwe", "ZW"]], "0"), :class => "center thin-control", :size => "20"); [Escaped Output] f.label(d4x_sanitizer(t("shipping telephone")), nil, :class => "h5 white"); [Escaped Output] f.text_field(:shipping_telephone, :class => "center form-control", :maxlength => 50, :placeholder => d4x_sanitizer(t("shipping telephone"))); [Escaped Output] f.label(d4x_sanitizer(t("notes for delivery")), nil, :class => "h5 white"); [Escaped Output] f.text_area(:customer_notes, :class => "form-control", :size => "100x5", :placeholder => d4x_sanitizer(t("notes for delivery")));end;[Escaped Output] image_tag("registering-spinner.gif");[Escaped Output] check_box_tag(:agreement, nil, false);[Escaped Output] d4x_sanitizer(t("i agree with terms and conditions"));[Escaped Output] f.submit(d4x_sanitizer(t("place order")), :class => "button-d4x", :id => "place-order"); end
[Escaped Output] image_tag("paypal_verified.png")

orders/Copy of _form

[Escaped Output] javascript_include_tag("d4x-order.js")
[Escaped Output] msg
[Escaped Output] hidden_field_tag(:cart_id, @order.cart_id)
[Escaped Output] hidden_field_tag(:nick, @cart.nick)
[Escaped Output] hidden_field_tag(:domain, @cart.domain)
[Escaped Output] hidden_field_tag(:prod_id, @cart.prod_id)
[Escaped Output] f.hidden_field(:express_token, @order.express_token)
[Escaped Output] f.label(d4x_sanitizer(t("firstname")), nil, :class => "h5 white")
[Escaped Output] f.text_field(:first_name, :class => "center form-control", :size => "21", :placeholder => d4x_sanitizer(t("firstname")))
[Escaped Output] f.label(d4x_sanitizer(t("lastname")), nil, :class => "h5 white")
[Escaped Output] f.text_field(:last_name, :class => "center form-control", :size => "21", :placeholder => d4x_sanitizer(t("lastname")))
[Escaped Output] f.label(d4x_sanitizer(t("address")), nil, :class => "h5 white")
[Escaped Output] f.text_field(:address, :class => "center form-control", :size => "21", :placeholder => d4x_sanitizer(t("address")))
[Escaped Output] f.label(d4x_sanitizer(t("city")), nil, :class => "h5 white")
[Escaped Output] f.text_field(:city, :class => "center form-control", :size => "21", :placeholder => d4x_sanitizer(t("city")))
[Escaped Output] f.label(d4x_sanitizer(t("town")), nil, :class => "h5 white")
[Escaped Output] f.text_field(:town, :class => "center form-control", :size => "21", :placeholder => d4x_sanitizer(t("town")))
[Escaped Output] f.label("ZIP", nil, :class => "h5 white")
[Escaped Output] f.number_field(:zip, :class => "center form-control", :placeholder => d4x_sanitizer(t("ZIP")), :maxlength => 5)
[Escaped Output] f.label(d4x_sanitizer(t("telephone")), nil, :class => "h5 white")
[Escaped Output] f.text_field(:telephone, :class => "center form-control", :maxlength => 50, :placeholder => d4x_sanitizer(t("telephone")))
[Escaped Output] f.label(d4x_sanitizer(t("country")), nil, :class => "h5 white")
[Escaped Output] f.select(:country, options_for_select([["choose", " "], ["Afghanistan", "AF"], ["Albania", "AL"], ["Algeria", "DZ"], ["American Samoa", "AS"], ["Andorra", "AD"], ["Angola", "AO"], ["Anguilla", "AI"], ["Antarctica", "AQ"], ["Antigua & Barbuda", "AG"], ["Argentina", "AR"], ["Armenia", "AM"], ["Aruba", "AW"], ["Australia", "AU"], ["Austria", "AT"], ["Azerbaijan", "AZ"], ["Bahamas", "BS"], ["Bahrain", "BH"], ["Bangladesh", "BD"], ["Barbados", "BB"], ["Belarus", "BY"], ["Belgium", "BE"], ["Belize", "BZ"], ["Benin", "BJ"], ["Bermuda", "BM"], ["Bhutan", "BT"], ["Bolivia", "BO"], ["Bosnia and Herzeg.", "BA"], ["Botswana", "BW"], ["Bouvet Island", "BV"], ["Brazil", "BR"], ["British Ind. Ocean", "IO"], ["Brunei Darussalam", "BN"], ["Bulgaria", "BG"], ["Burkina Faso", "BF"], ["Burundi", "BI"], ["Cambodia", "KH"], ["Cameroon", "CM"], ["Canada", "CA"], ["Cape Verde", "CV"], ["Cayman Islands", "KY"], ["Central Afr.Republic", "CF"], ["Chad", "TD"], ["Chile", "CL"], ["China", "CN"], ["Christmas Island", "CX"], ["Cocos Islands", "CC"], ["Colombia", "CO"], ["Comoros", "KM"], ["Congo", "CG"], ["Congo, Republic of", "CD"], ["Cook Islands", "CK"], ["Costa Rica", "CR"], ["Cote d`Ivoire", "CI"], ["Croatia (Hrvatska)", "HR"], ["Cuba", "CU"], ["Cyprus", "CY"], ["Czech Republic", "CZ"], ["Denmark", "DK"], ["Djibouti", "DJ"], ["Dominica", "DM"], ["Dominican Republic", "DO"], ["East Timor", "TP"], ["Ecuador", "EC"], ["Egypt", "EG"], ["El Salvador", "SV"], ["Equatorial Guinea", "GQ"], ["Eritrea", "ER"], ["Estonia", "EE"], ["Ethiopia", "ET"], ["Falkland Islands", "FK"], ["Faroe Islands", "FO"], ["Fiji", "FJ"], ["Finland", "FI"], ["France", "FR"], ["France, Metropol.", "FX"], ["French Guiana", "GF"], ["French Polynesia", "PF"], ["French Sout Terr.", "TF"], ["Gabon", "GA"], ["Gambia", "GM"], ["Georgia", "GE"], ["Germany", "DE"], ["Ghana", "GH"], ["Gibraltar", "GI"], ["Greece", "GR"], ["Greenland", "GL"], ["Grenada", "GD"], ["Guadeloupe", "GP"], ["Guam", "GU"], ["Guatemala", "GT"], ["Guinea", "GN"], ["Guinea-Bissau", "GW"], ["Guyana", "GY"], ["Haiti", "HT"], ["Heard Mc Donald", "HM"], ["Holy See (Vatican)", "VA"], ["Honduras", "HN"], ["Hong Kong", "HK"], ["Hungary", "HU"], ["Iceland", "IS"], ["India", "IN"], ["Indonesia", "ID"], ["Iran", "IR"], ["Iraq", "IQ"], ["Ireland", "IE"], ["Israel", "IL"], ["Italy", "IT"], ["Jamaica", "JM"], ["Japan", "JP"], ["Jordan", "JO"], ["Kazakhstan", "KZ"], ["Kenya", "KE"], ["Kiribati", "KI"], ["Korea, Democratic", "KP"], ["Korea, Republic of", "KR"], ["Kuwait", "KW"], ["Kyrgyzstan", "KG"], ["Lao Peoples", "LA"], ["Latvia", "LV"], ["Lebanon", "LB"], ["Lesotho", "LS"], ["Liberia", "LR"], ["Libyan", "LY"], ["Liechtenstein", "LI"], ["Lithuania", "LT"], ["Luxembourg", "LU"], ["Macau", "MO"], ["Macedonia", "MK"], ["Madagascar", "MG"], ["Malawi", "MW"], ["Malaysia", "MY"], ["Maldives", "MV"], ["Mali", "ML"], ["Malta", "MT"], ["Marshall Islands", "MH"], ["Martinique", "MQ"], ["Mauritania", "MR"], ["Mauritius", "MU"], ["Mayotte", "YT"], ["Mexico", "MX"], ["Micronesia", "FM"], ["Moldova", "MD"], ["Monaco", "MC"], ["Mongolia", "MN"], ["Montserrat", "MS"], ["Morocco", "MA"], ["Mozambique", "MZ"], ["Myanmar", "MM"], ["Namibia", "NA"], ["Nauru", "NR"], ["Nepal", "NP"], ["Netherlands", "NL"], ["Netherlands Antilles", "AN"], ["New Caledonia", "NC"], ["New Zealand", "NZ"], ["Nicaragua", "NI"], ["Niger", "NE"], ["Nigeria", "NG"], ["Niue", "NU"], ["Norfolk Island", "NF"], ["Northern Mariana Isl", "MP"], ["Norway", "NO"], ["Oman", "OM"], ["Pakistan", "PK"], ["Palau", "PW"], ["Panama", "PA"], ["Papua New Guinea", "PG"], ["Paraguay", "PY"], ["Peru", "PE"], ["Philippines", "PH"], ["Pitcairn", "PN"], ["Poland", "PL"], ["Portugal", "PT"], ["Puerto Rico", "PR"], ["Qatar", "QA"], ["Reunion", "RE"], ["Romania", "RO"], ["Russian Federation", "RU"], ["Rwanda", "RW"], ["Saint Kitts & Nevis", "KN"], ["Saint LUCIA", "LC"], ["Saint Vincent", "VC"], ["Samoa", "WS"], ["San Marino", "SM"], ["Sao Tome & Principe", "ST"], ["Saudi Arabia", "SA"], ["Senegal", "SN"], ["Seychelles", "SC"], ["Sierra Leone", "SL"], ["Singapore", "SG"], ["Slovakia", "SK"], ["Slovenia", "SI"], ["Solomon Islands", "SB"], ["Somalia", "SO"], ["South Africa", "ZA"], ["South Georgia", "GS"], ["Spain", "ES"], ["Sri Lanka", "LK"], ["St. Helena", "SH"], ["St.Pierre & Miquelon", "PM"], ["Sudan", "SD"], ["Suriname", "SR"], ["Svalbard", "SJ"], ["Swaziland", "SZ"], ["Sweden", "SE"], ["Switzerland", "CH"], ["Syrian Arab Republic", "SY"], ["Taiwan", "TW"], ["Tajikistan", "TJ"], ["Tanzania", "TZ"], ["Thailand", "TH"], ["Togo", "TG"], ["Tokelau", "TK"], ["Tonga", "TO"], ["Trinidad and Tobago", "TT"], ["Tunisia", "TN"], ["Turkey", "TR"], ["Turkmenistan", "TM"], ["Turks & Caicos Isl.", "TC"], ["Tuvalu", "TV"], ["Uganda", "UG"], ["Ukraine", "UA"], ["United Arab Emir.", "AE"], ["United Kingdom", "GB"], ["United States", "US"], ["United States Minor", "UM"], ["Uruguay", "UY"], ["Uzbekistan", "UZ"], ["Vanuatu", "VU"], ["Venezuela", "VE"], ["Viet Nam", "VN"], ["Virgin Islands (Brit)", "VG"], ["Virgin Islands (U.S.)", "VI"], ["Wallis & Futuna Isl.", "WF"], ["Western Sahara", "EH"], ["Yemen", "YE"], ["Yugoslavia", "YU"], ["Zambia", "ZM"], ["Zimbabwe", "ZW"]], "0"), :class => "thin-control", :size => "20")
[Escaped Output] check_box_tag(:same_address)
[Escaped Output] d4x_sanitizer(t("shipping address is billing address"))
[Escaped Output] f.label("shipping first name", nil, :class => "h5 white")
[Escaped Output] f.text_field(:shipping_first_name, :class => "center form-control", :maxlength => 50, :placeholder => "Shipping First Name")
[Escaped Output] f.label("shipping last name", nil, :class => "h5 white")
[Escaped Output] f.text_field(:shipping_last_name, :class => "center form-control", :size => "21", :placeholder => d4x_sanitizer(t("lastname")))
[Escaped Output] f.label(d4x_sanitizer(t("shipping address")), nil, :class => "h5 white")
[Escaped Output] f.text_field(:shipping_address, :class => "center form-control", :size => "21", :placeholder => d4x_sanitizer(t("shipping address")))
[Escaped Output] f.label(d4x_sanitizer(t("shipping city")), nil, :class => "h5 white")
[Escaped Output] f.text_field(:shipping_city, :class => "center form-control", :size => "21", :placeholder => d4x_sanitizer(t("shipping city")))
[Escaped Output] f.label(d4x_sanitizer(t("shipping town")), nil, :class => "h5 white")
[Escaped Output] f.text_field(:shipping_town, :class => "center form-control", :size => "21", :placeholder => d4x_sanitizer(t("shipping town")))
[Escaped Output] f.label(d4x_sanitizer(t("shipping zip")), nil, :class => "h5 white")
[Escaped Output] f.number_field(:shipping_zip, :class => "center form-control", :placeholder => d4x_sanitizer(t("shipping zip")), :maxlength => 5)
[Escaped Output] f.label(d4x_sanitizer(t("country")), nil, :class => "h5 white")
[Escaped Output] f.select(:shipping_country, options_for_select([["choose", " "], ["Afghanistan", "AF"], ["Albania", "AL"], ["Algeria", "DZ"], ["American Samoa", "AS"], ["Andorra", "AD"], ["Angola", "AO"], ["Anguilla", "AI"], ["Antarctica", "AQ"], ["Antigua & Barbuda", "AG"], ["Argentina", "AR"], ["Armenia", "AM"], ["Aruba", "AW"], ["Australia", "AU"], ["Austria", "AT"], ["Azerbaijan", "AZ"], ["Bahamas", "BS"], ["Bahrain", "BH"], ["Bangladesh", "BD"], ["Barbados", "BB"], ["Belarus", "BY"], ["Belgium", "BE"], ["Belize", "BZ"], ["Benin", "BJ"], ["Bermuda", "BM"], ["Bhutan", "BT"], ["Bolivia", "BO"], ["Bosnia and Herzeg.", "BA"], ["Botswana", "BW"], ["Bouvet Island", "BV"], ["Brazil", "BR"], ["British Ind. Ocean", "IO"], ["Brunei Darussalam", "BN"], ["Bulgaria", "BG"], ["Burkina Faso", "BF"], ["Burundi", "BI"], ["Cambodia", "KH"], ["Cameroon", "CM"], ["Canada", "CA"], ["Cape Verde", "CV"], ["Cayman Islands", "KY"], ["Central Afr.Republic", "CF"], ["Chad", "TD"], ["Chile", "CL"], ["China", "CN"], ["Christmas Island", "CX"], ["Cocos Islands", "CC"], ["Colombia", "CO"], ["Comoros", "KM"], ["Congo", "CG"], ["Congo, Republic of", "CD"], ["Cook Islands", "CK"], ["Costa Rica", "CR"], ["Cote d`Ivoire", "CI"], ["Croatia (Hrvatska)", "HR"], ["Cuba", "CU"], ["Cyprus", "CY"], ["Czech Republic", "CZ"], ["Denmark", "DK"], ["Djibouti", "DJ"], ["Dominica", "DM"], ["Dominican Republic", "DO"], ["East Timor", "TP"], ["Ecuador", "EC"], ["Egypt", "EG"], ["El Salvador", "SV"], ["Equatorial Guinea", "GQ"], ["Eritrea", "ER"], ["Estonia", "EE"], ["Ethiopia", "ET"], ["Falkland Islands", "FK"], ["Faroe Islands", "FO"], ["Fiji", "FJ"], ["Finland", "FI"], ["France", "FR"], ["France, Metropol.", "FX"], ["French Guiana", "GF"], ["French Polynesia", "PF"], ["French Sout Terr.", "TF"], ["Gabon", "GA"], ["Gambia", "GM"], ["Georgia", "GE"], ["Germany", "DE"], ["Ghana", "GH"], ["Gibraltar", "GI"], ["Greece", "GR"], ["Greenland", "GL"], ["Grenada", "GD"], ["Guadeloupe", "GP"], ["Guam", "GU"], ["Guatemala", "GT"], ["Guinea", "GN"], ["Guinea-Bissau", "GW"], ["Guyana", "GY"], ["Haiti", "HT"], ["Heard Mc Donald", "HM"], ["Holy See (Vatican)", "VA"], ["Honduras", "HN"], ["Hong Kong", "HK"], ["Hungary", "HU"], ["Iceland", "IS"], ["India", "IN"], ["Indonesia", "ID"], ["Iran", "IR"], ["Iraq", "IQ"], ["Ireland", "IE"], ["Israel", "IL"], ["Italy", "IT"], ["Jamaica", "JM"], ["Japan", "JP"], ["Jordan", "JO"], ["Kazakhstan", "KZ"], ["Kenya", "KE"], ["Kiribati", "KI"], ["Korea, Democratic", "KP"], ["Korea, Republic of", "KR"], ["Kuwait", "KW"], ["Kyrgyzstan", "KG"], ["Lao Peoples", "LA"], ["Latvia", "LV"], ["Lebanon", "LB"], ["Lesotho", "LS"], ["Liberia", "LR"], ["Libyan", "LY"], ["Liechtenstein", "LI"], ["Lithuania", "LT"], ["Luxembourg", "LU"], ["Macau", "MO"], ["Macedonia", "MK"], ["Madagascar", "MG"], ["Malawi", "MW"], ["Malaysia", "MY"], ["Maldives", "MV"], ["Mali", "ML"], ["Malta", "MT"], ["Marshall Islands", "MH"], ["Martinique", "MQ"], ["Mauritania", "MR"], ["Mauritius", "MU"], ["Mayotte", "YT"], ["Mexico", "MX"], ["Micronesia", "FM"], ["Moldova", "MD"], ["Monaco", "MC"], ["Mongolia", "MN"], ["Montserrat", "MS"], ["Morocco", "MA"], ["Mozambique", "MZ"], ["Myanmar", "MM"], ["Namibia", "NA"], ["Nauru", "NR"], ["Nepal", "NP"], ["Netherlands", "NL"], ["Netherlands Antilles", "AN"], ["New Caledonia", "NC"], ["New Zealand", "NZ"], ["Nicaragua", "NI"], ["Niger", "NE"], ["Nigeria", "NG"], ["Niue", "NU"], ["Norfolk Island", "NF"], ["Northern Mariana Isl", "MP"], ["Norway", "NO"], ["Oman", "OM"], ["Pakistan", "PK"], ["Palau", "PW"], ["Panama", "PA"], ["Papua New Guinea", "PG"], ["Paraguay", "PY"], ["Peru", "PE"], ["Philippines", "PH"], ["Pitcairn", "PN"], ["Poland", "PL"], ["Portugal", "PT"], ["Puerto Rico", "PR"], ["Qatar", "QA"], ["Reunion", "RE"], ["Romania", "RO"], ["Russian Federation", "RU"], ["Rwanda", "RW"], ["Saint Kitts & Nevis", "KN"], ["Saint LUCIA", "LC"], ["Saint Vincent", "VC"], ["Samoa", "WS"], ["San Marino", "SM"], ["Sao Tome & Principe", "ST"], ["Saudi Arabia", "SA"], ["Senegal", "SN"], ["Seychelles", "SC"], ["Sierra Leone", "SL"], ["Singapore", "SG"], ["Slovakia", "SK"], ["Slovenia", "SI"], ["Solomon Islands", "SB"], ["Somalia", "SO"], ["South Africa", "ZA"], ["South Georgia", "GS"], ["Spain", "ES"], ["Sri Lanka", "LK"], ["St. Helena", "SH"], ["St.Pierre & Miquelon", "PM"], ["Sudan", "SD"], ["Suriname", "SR"], ["Svalbard", "SJ"], ["Swaziland", "SZ"], ["Sweden", "SE"], ["Switzerland", "CH"], ["Syrian Arab Republic", "SY"], ["Taiwan", "TW"], ["Tajikistan", "TJ"], ["Tanzania", "TZ"], ["Thailand", "TH"], ["Togo", "TG"], ["Tokelau", "TK"], ["Tonga", "TO"], ["Trinidad and Tobago", "TT"], ["Tunisia", "TN"], ["Turkey", "TR"], ["Turkmenistan", "TM"], ["Turks & Caicos Isl.", "TC"], ["Tuvalu", "TV"], ["Uganda", "UG"], ["Ukraine", "UA"], ["United Arab Emir.", "AE"], ["United Kingdom", "GB"], ["United States", "US"], ["United States Minor", "UM"], ["Uruguay", "UY"], ["Uzbekistan", "UZ"], ["Vanuatu", "VU"], ["Venezuela", "VE"], ["Viet Nam", "VN"], ["Virgin Islands (Brit)", "VG"], ["Virgin Islands (U.S.)", "VI"], ["Wallis & Futuna Isl.", "WF"], ["Western Sahara", "EH"], ["Yemen", "YE"], ["Yugoslavia", "YU"], ["Zambia", "ZM"], ["Zimbabwe", "ZW"]], "0"), :class => "center thin-control", :size => "20")
[Escaped Output] f.label(d4x_sanitizer(t("shipping telephone")), nil, :class => "h5 white")
[Escaped Output] f.text_field(:shipping_telephone, :class => "center form-control", :maxlength => 50, :placeholder => d4x_sanitizer(t("shipping telephone")))
[Escaped Output] f.label(d4x_sanitizer(t("notes for delivery")), nil, :class => "h5 white")
[Escaped Output] f.text_area(:customer_notes, :class => "form-control", :size => "100x5", :placeholder => d4x_sanitizer(t("notes for delivery")))
[Escaped Output] image_tag("/images/agaloader2.gif")
[Escaped Output] check_box_tag(:agreement, nil, false)
[Escaped Output] d4x_sanitizer(t("i agree with terms and conditions"))
[Escaped Output] f.submit(d4x_sanitizer(t("place order")), :class => "button-d4x", :id => "place-order")
[Escaped Output] form_for(@order) do; if @order.errors.any? then; @order.errors.full_messages.each do; [Escaped Output] msg; end;end;[Escaped Output] hidden_field_tag(:cart_id, @order.cart_id);[Escaped Output] hidden_field_tag(:nick, @cart.nick);[Escaped Output] hidden_field_tag(:domain, @cart.domain);[Escaped Output] hidden_field_tag(:prod_id, @cart.prod_id);unless @order.express_token.blank? then; [Escaped Output] f.hidden_field(:express_token, @order.express_token);end;[Escaped Output] f.label(d4x_sanitizer(t("firstname")), nil, :class => "h5 white");[Escaped Output] f.text_field(:first_name, :class => "center form-control", :size => "21", :placeholder => d4x_sanitizer(t("firstname")));[Escaped Output] f.label(d4x_sanitizer(t("lastname")), nil, :class => "h5 white");[Escaped Output] f.text_field(:last_name, :class => "center form-control", :size => "21", :placeholder => d4x_sanitizer(t("lastname")));[Escaped Output] f.label(d4x_sanitizer(t("address")), nil, :class => "h5 white");[Escaped Output] f.text_field(:address, :class => "center form-control", :size => "21", :placeholder => d4x_sanitizer(t("address")));[Escaped Output] f.label(d4x_sanitizer(t("city")), nil, :class => "h5 white");[Escaped Output] f.text_field(:city, :class => "center form-control", :size => "21", :placeholder => d4x_sanitizer(t("city")));[Escaped Output] f.label(d4x_sanitizer(t("town")), nil, :class => "h5 white");[Escaped Output] f.text_field(:town, :class => "center form-control", :size => "21", :placeholder => d4x_sanitizer(t("town")));[Escaped Output] f.label("ZIP", nil, :class => "h5 white");[Escaped Output] f.number_field(:zip, :class => "center form-control", :placeholder => d4x_sanitizer(t("ZIP")), :maxlength => 5);[Escaped Output] f.label(d4x_sanitizer(t("telephone")), nil, :class => "h5 white");[Escaped Output] f.text_field(:telephone, :class => "center form-control", :maxlength => 50, :placeholder => d4x_sanitizer(t("telephone")));[Escaped Output] f.label(d4x_sanitizer(t("country")), nil, :class => "h5 white");[Escaped Output] f.select(:country, options_for_select([["choose", " "], ["Afghanistan", "AF"], ["Albania", "AL"], ["Algeria", "DZ"], ["American Samoa", "AS"], ["Andorra", "AD"], ["Angola", "AO"], ["Anguilla", "AI"], ["Antarctica", "AQ"], ["Antigua & Barbuda", "AG"], ["Argentina", "AR"], ["Armenia", "AM"], ["Aruba", "AW"], ["Australia", "AU"], ["Austria", "AT"], ["Azerbaijan", "AZ"], ["Bahamas", "BS"], ["Bahrain", "BH"], ["Bangladesh", "BD"], ["Barbados", "BB"], ["Belarus", "BY"], ["Belgium", "BE"], ["Belize", "BZ"], ["Benin", "BJ"], ["Bermuda", "BM"], ["Bhutan", "BT"], ["Bolivia", "BO"], ["Bosnia and Herzeg.", "BA"], ["Botswana", "BW"], ["Bouvet Island", "BV"], ["Brazil", "BR"], ["British Ind. Ocean", "IO"], ["Brunei Darussalam", "BN"], ["Bulgaria", "BG"], ["Burkina Faso", "BF"], ["Burundi", "BI"], ["Cambodia", "KH"], ["Cameroon", "CM"], ["Canada", "CA"], ["Cape Verde", "CV"], ["Cayman Islands", "KY"], ["Central Afr.Republic", "CF"], ["Chad", "TD"], ["Chile", "CL"], ["China", "CN"], ["Christmas Island", "CX"], ["Cocos Islands", "CC"], ["Colombia", "CO"], ["Comoros", "KM"], ["Congo", "CG"], ["Congo, Republic of", "CD"], ["Cook Islands", "CK"], ["Costa Rica", "CR"], ["Cote d`Ivoire", "CI"], ["Croatia (Hrvatska)", "HR"], ["Cuba", "CU"], ["Cyprus", "CY"], ["Czech Republic", "CZ"], ["Denmark", "DK"], ["Djibouti", "DJ"], ["Dominica", "DM"], ["Dominican Republic", "DO"], ["East Timor", "TP"], ["Ecuador", "EC"], ["Egypt", "EG"], ["El Salvador", "SV"], ["Equatorial Guinea", "GQ"], ["Eritrea", "ER"], ["Estonia", "EE"], ["Ethiopia", "ET"], ["Falkland Islands", "FK"], ["Faroe Islands", "FO"], ["Fiji", "FJ"], ["Finland", "FI"], ["France", "FR"], ["France, Metropol.", "FX"], ["French Guiana", "GF"], ["French Polynesia", "PF"], ["French Sout Terr.", "TF"], ["Gabon", "GA"], ["Gambia", "GM"], ["Georgia", "GE"], ["Germany", "DE"], ["Ghana", "GH"], ["Gibraltar", "GI"], ["Greece", "GR"], ["Greenland", "GL"], ["Grenada", "GD"], ["Guadeloupe", "GP"], ["Guam", "GU"], ["Guatemala", "GT"], ["Guinea", "GN"], ["Guinea-Bissau", "GW"], ["Guyana", "GY"], ["Haiti", "HT"], ["Heard Mc Donald", "HM"], ["Holy See (Vatican)", "VA"], ["Honduras", "HN"], ["Hong Kong", "HK"], ["Hungary", "HU"], ["Iceland", "IS"], ["India", "IN"], ["Indonesia", "ID"], ["Iran", "IR"], ["Iraq", "IQ"], ["Ireland", "IE"], ["Israel", "IL"], ["Italy", "IT"], ["Jamaica", "JM"], ["Japan", "JP"], ["Jordan", "JO"], ["Kazakhstan", "KZ"], ["Kenya", "KE"], ["Kiribati", "KI"], ["Korea, Democratic", "KP"], ["Korea, Republic of", "KR"], ["Kuwait", "KW"], ["Kyrgyzstan", "KG"], ["Lao Peoples", "LA"], ["Latvia", "LV"], ["Lebanon", "LB"], ["Lesotho", "LS"], ["Liberia", "LR"], ["Libyan", "LY"], ["Liechtenstein", "LI"], ["Lithuania", "LT"], ["Luxembourg", "LU"], ["Macau", "MO"], ["Macedonia", "MK"], ["Madagascar", "MG"], ["Malawi", "MW"], ["Malaysia", "MY"], ["Maldives", "MV"], ["Mali", "ML"], ["Malta", "MT"], ["Marshall Islands", "MH"], ["Martinique", "MQ"], ["Mauritania", "MR"], ["Mauritius", "MU"], ["Mayotte", "YT"], ["Mexico", "MX"], ["Micronesia", "FM"], ["Moldova", "MD"], ["Monaco", "MC"], ["Mongolia", "MN"], ["Montserrat", "MS"], ["Morocco", "MA"], ["Mozambique", "MZ"], ["Myanmar", "MM"], ["Namibia", "NA"], ["Nauru", "NR"], ["Nepal", "NP"], ["Netherlands", "NL"], ["Netherlands Antilles", "AN"], ["New Caledonia", "NC"], ["New Zealand", "NZ"], ["Nicaragua", "NI"], ["Niger", "NE"], ["Nigeria", "NG"], ["Niue", "NU"], ["Norfolk Island", "NF"], ["Northern Mariana Isl", "MP"], ["Norway", "NO"], ["Oman", "OM"], ["Pakistan", "PK"], ["Palau", "PW"], ["Panama", "PA"], ["Papua New Guinea", "PG"], ["Paraguay", "PY"], ["Peru", "PE"], ["Philippines", "PH"], ["Pitcairn", "PN"], ["Poland", "PL"], ["Portugal", "PT"], ["Puerto Rico", "PR"], ["Qatar", "QA"], ["Reunion", "RE"], ["Romania", "RO"], ["Russian Federation", "RU"], ["Rwanda", "RW"], ["Saint Kitts & Nevis", "KN"], ["Saint LUCIA", "LC"], ["Saint Vincent", "VC"], ["Samoa", "WS"], ["San Marino", "SM"], ["Sao Tome & Principe", "ST"], ["Saudi Arabia", "SA"], ["Senegal", "SN"], ["Seychelles", "SC"], ["Sierra Leone", "SL"], ["Singapore", "SG"], ["Slovakia", "SK"], ["Slovenia", "SI"], ["Solomon Islands", "SB"], ["Somalia", "SO"], ["South Africa", "ZA"], ["South Georgia", "GS"], ["Spain", "ES"], ["Sri Lanka", "LK"], ["St. Helena", "SH"], ["St.Pierre & Miquelon", "PM"], ["Sudan", "SD"], ["Suriname", "SR"], ["Svalbard", "SJ"], ["Swaziland", "SZ"], ["Sweden", "SE"], ["Switzerland", "CH"], ["Syrian Arab Republic", "SY"], ["Taiwan", "TW"], ["Tajikistan", "TJ"], ["Tanzania", "TZ"], ["Thailand", "TH"], ["Togo", "TG"], ["Tokelau", "TK"], ["Tonga", "TO"], ["Trinidad and Tobago", "TT"], ["Tunisia", "TN"], ["Turkey", "TR"], ["Turkmenistan", "TM"], ["Turks & Caicos Isl.", "TC"], ["Tuvalu", "TV"], ["Uganda", "UG"], ["Ukraine", "UA"], ["United Arab Emir.", "AE"], ["United Kingdom", "GB"], ["United States", "US"], ["United States Minor", "UM"], ["Uruguay", "UY"], ["Uzbekistan", "UZ"], ["Vanuatu", "VU"], ["Venezuela", "VE"], ["Viet Nam", "VN"], ["Virgin Islands (Brit)", "VG"], ["Virgin Islands (U.S.)", "VI"], ["Wallis & Futuna Isl.", "WF"], ["Western Sahara", "EH"], ["Yemen", "YE"], ["Yugoslavia", "YU"], ["Zambia", "ZM"], ["Zimbabwe", "ZW"]], "0"), :class => "thin-control", :size => "20");if all_services(@cart.id) then; [Escaped Output] check_box_tag(:same_address); [Escaped Output] d4x_sanitizer(t("shipping address is billing address")); [Escaped Output] f.label("shipping first name", nil, :class => "h5 white"); [Escaped Output] f.text_field(:shipping_first_name, :class => "center form-control", :maxlength => 50, :placeholder => "Shipping First Name"); [Escaped Output] f.label("shipping last name", nil, :class => "h5 white"); [Escaped Output] f.text_field(:shipping_last_name, :class => "center form-control", :size => "21", :placeholder => d4x_sanitizer(t("lastname"))); [Escaped Output] f.label(d4x_sanitizer(t("shipping address")), nil, :class => "h5 white"); [Escaped Output] f.text_field(:shipping_address, :class => "center form-control", :size => "21", :placeholder => d4x_sanitizer(t("shipping address"))); [Escaped Output] f.label(d4x_sanitizer(t("shipping city")), nil, :class => "h5 white"); [Escaped Output] f.text_field(:shipping_city, :class => "center form-control", :size => "21", :placeholder => d4x_sanitizer(t("shipping city"))); [Escaped Output] f.label(d4x_sanitizer(t("shipping town")), nil, :class => "h5 white"); [Escaped Output] f.text_field(:shipping_town, :class => "center form-control", :size => "21", :placeholder => d4x_sanitizer(t("shipping town"))); [Escaped Output] f.label(d4x_sanitizer(t("shipping zip")), nil, :class => "h5 white"); [Escaped Output] f.number_field(:shipping_zip, :class => "center form-control", :placeholder => d4x_sanitizer(t("shipping zip")), :maxlength => 5); [Escaped Output] f.label(d4x_sanitizer(t("country")), nil, :class => "h5 white"); [Escaped Output] f.select(:shipping_country, options_for_select([["choose", " "], ["Afghanistan", "AF"], ["Albania", "AL"], ["Algeria", "DZ"], ["American Samoa", "AS"], ["Andorra", "AD"], ["Angola", "AO"], ["Anguilla", "AI"], ["Antarctica", "AQ"], ["Antigua & Barbuda", "AG"], ["Argentina", "AR"], ["Armenia", "AM"], ["Aruba", "AW"], ["Australia", "AU"], ["Austria", "AT"], ["Azerbaijan", "AZ"], ["Bahamas", "BS"], ["Bahrain", "BH"], ["Bangladesh", "BD"], ["Barbados", "BB"], ["Belarus", "BY"], ["Belgium", "BE"], ["Belize", "BZ"], ["Benin", "BJ"], ["Bermuda", "BM"], ["Bhutan", "BT"], ["Bolivia", "BO"], ["Bosnia and Herzeg.", "BA"], ["Botswana", "BW"], ["Bouvet Island", "BV"], ["Brazil", "BR"], ["British Ind. Ocean", "IO"], ["Brunei Darussalam", "BN"], ["Bulgaria", "BG"], ["Burkina Faso", "BF"], ["Burundi", "BI"], ["Cambodia", "KH"], ["Cameroon", "CM"], ["Canada", "CA"], ["Cape Verde", "CV"], ["Cayman Islands", "KY"], ["Central Afr.Republic", "CF"], ["Chad", "TD"], ["Chile", "CL"], ["China", "CN"], ["Christmas Island", "CX"], ["Cocos Islands", "CC"], ["Colombia", "CO"], ["Comoros", "KM"], ["Congo", "CG"], ["Congo, Republic of", "CD"], ["Cook Islands", "CK"], ["Costa Rica", "CR"], ["Cote d`Ivoire", "CI"], ["Croatia (Hrvatska)", "HR"], ["Cuba", "CU"], ["Cyprus", "CY"], ["Czech Republic", "CZ"], ["Denmark", "DK"], ["Djibouti", "DJ"], ["Dominica", "DM"], ["Dominican Republic", "DO"], ["East Timor", "TP"], ["Ecuador", "EC"], ["Egypt", "EG"], ["El Salvador", "SV"], ["Equatorial Guinea", "GQ"], ["Eritrea", "ER"], ["Estonia", "EE"], ["Ethiopia", "ET"], ["Falkland Islands", "FK"], ["Faroe Islands", "FO"], ["Fiji", "FJ"], ["Finland", "FI"], ["France", "FR"], ["France, Metropol.", "FX"], ["French Guiana", "GF"], ["French Polynesia", "PF"], ["French Sout Terr.", "TF"], ["Gabon", "GA"], ["Gambia", "GM"], ["Georgia", "GE"], ["Germany", "DE"], ["Ghana", "GH"], ["Gibraltar", "GI"], ["Greece", "GR"], ["Greenland", "GL"], ["Grenada", "GD"], ["Guadeloupe", "GP"], ["Guam", "GU"], ["Guatemala", "GT"], ["Guinea", "GN"], ["Guinea-Bissau", "GW"], ["Guyana", "GY"], ["Haiti", "HT"], ["Heard Mc Donald", "HM"], ["Holy See (Vatican)", "VA"], ["Honduras", "HN"], ["Hong Kong", "HK"], ["Hungary", "HU"], ["Iceland", "IS"], ["India", "IN"], ["Indonesia", "ID"], ["Iran", "IR"], ["Iraq", "IQ"], ["Ireland", "IE"], ["Israel", "IL"], ["Italy", "IT"], ["Jamaica", "JM"], ["Japan", "JP"], ["Jordan", "JO"], ["Kazakhstan", "KZ"], ["Kenya", "KE"], ["Kiribati", "KI"], ["Korea, Democratic", "KP"], ["Korea, Republic of", "KR"], ["Kuwait", "KW"], ["Kyrgyzstan", "KG"], ["Lao Peoples", "LA"], ["Latvia", "LV"], ["Lebanon", "LB"], ["Lesotho", "LS"], ["Liberia", "LR"], ["Libyan", "LY"], ["Liechtenstein", "LI"], ["Lithuania", "LT"], ["Luxembourg", "LU"], ["Macau", "MO"], ["Macedonia", "MK"], ["Madagascar", "MG"], ["Malawi", "MW"], ["Malaysia", "MY"], ["Maldives", "MV"], ["Mali", "ML"], ["Malta", "MT"], ["Marshall Islands", "MH"], ["Martinique", "MQ"], ["Mauritania", "MR"], ["Mauritius", "MU"], ["Mayotte", "YT"], ["Mexico", "MX"], ["Micronesia", "FM"], ["Moldova", "MD"], ["Monaco", "MC"], ["Mongolia", "MN"], ["Montserrat", "MS"], ["Morocco", "MA"], ["Mozambique", "MZ"], ["Myanmar", "MM"], ["Namibia", "NA"], ["Nauru", "NR"], ["Nepal", "NP"], ["Netherlands", "NL"], ["Netherlands Antilles", "AN"], ["New Caledonia", "NC"], ["New Zealand", "NZ"], ["Nicaragua", "NI"], ["Niger", "NE"], ["Nigeria", "NG"], ["Niue", "NU"], ["Norfolk Island", "NF"], ["Northern Mariana Isl", "MP"], ["Norway", "NO"], ["Oman", "OM"], ["Pakistan", "PK"], ["Palau", "PW"], ["Panama", "PA"], ["Papua New Guinea", "PG"], ["Paraguay", "PY"], ["Peru", "PE"], ["Philippines", "PH"], ["Pitcairn", "PN"], ["Poland", "PL"], ["Portugal", "PT"], ["Puerto Rico", "PR"], ["Qatar", "QA"], ["Reunion", "RE"], ["Romania", "RO"], ["Russian Federation", "RU"], ["Rwanda", "RW"], ["Saint Kitts & Nevis", "KN"], ["Saint LUCIA", "LC"], ["Saint Vincent", "VC"], ["Samoa", "WS"], ["San Marino", "SM"], ["Sao Tome & Principe", "ST"], ["Saudi Arabia", "SA"], ["Senegal", "SN"], ["Seychelles", "SC"], ["Sierra Leone", "SL"], ["Singapore", "SG"], ["Slovakia", "SK"], ["Slovenia", "SI"], ["Solomon Islands", "SB"], ["Somalia", "SO"], ["South Africa", "ZA"], ["South Georgia", "GS"], ["Spain", "ES"], ["Sri Lanka", "LK"], ["St. Helena", "SH"], ["St.Pierre & Miquelon", "PM"], ["Sudan", "SD"], ["Suriname", "SR"], ["Svalbard", "SJ"], ["Swaziland", "SZ"], ["Sweden", "SE"], ["Switzerland", "CH"], ["Syrian Arab Republic", "SY"], ["Taiwan", "TW"], ["Tajikistan", "TJ"], ["Tanzania", "TZ"], ["Thailand", "TH"], ["Togo", "TG"], ["Tokelau", "TK"], ["Tonga", "TO"], ["Trinidad and Tobago", "TT"], ["Tunisia", "TN"], ["Turkey", "TR"], ["Turkmenistan", "TM"], ["Turks & Caicos Isl.", "TC"], ["Tuvalu", "TV"], ["Uganda", "UG"], ["Ukraine", "UA"], ["United Arab Emir.", "AE"], ["United Kingdom", "GB"], ["United States", "US"], ["United States Minor", "UM"], ["Uruguay", "UY"], ["Uzbekistan", "UZ"], ["Vanuatu", "VU"], ["Venezuela", "VE"], ["Viet Nam", "VN"], ["Virgin Islands (Brit)", "VG"], ["Virgin Islands (U.S.)", "VI"], ["Wallis & Futuna Isl.", "WF"], ["Western Sahara", "EH"], ["Yemen", "YE"], ["Yugoslavia", "YU"], ["Zambia", "ZM"], ["Zimbabwe", "ZW"]], "0"), :class => "center thin-control", :size => "20"); [Escaped Output] f.label(d4x_sanitizer(t("shipping telephone")), nil, :class => "h5 white"); [Escaped Output] f.text_field(:shipping_telephone, :class => "center form-control", :maxlength => 50, :placeholder => d4x_sanitizer(t("shipping telephone"))); [Escaped Output] f.label(d4x_sanitizer(t("notes for delivery")), nil, :class => "h5 white"); [Escaped Output] f.text_area(:customer_notes, :class => "form-control", :size => "100x5", :placeholder => d4x_sanitizer(t("notes for delivery")));end;[Escaped Output] image_tag("/images/agaloader2.gif");[Escaped Output] check_box_tag(:agreement, nil, false);[Escaped Output] d4x_sanitizer(t("i agree with terms and conditions"));[Escaped Output] f.submit(d4x_sanitizer(t("place order")), :class => "button-d4x", :id => "place-order"); end
[Escaped Output] image_tag("paypal_verified.png")

orders/Copy of show

[Escaped Output] render(partial => "/orders/summary", {})
[Escaped Output] link_to(image_submit_tag("btn_xpressCheckout.gif"), @cart.test_paypal_url(orders_url, payment_notifications_url(:secret => "1395049619")))
[Escaped Output] hidden_field_tag(:cmd, "_s-xclick")
[Escaped Output] hidden_field_tag(:encrypted, @cart.test_paypal_encrypted(orders_url, payment_notifications_url(:secret => "1395049619")))
[Escaped Output] image_submit_tag("btn_xpressCheckout.gif")
[Escaped Output] form_tag("https://www.sandbox.paypal.com/cgi-bin/webscr") do; [Escaped Output] hidden_field_tag(:cmd, "_s-xclick");[Escaped Output] hidden_field_tag(:encrypted, @cart.test_paypal_encrypted(orders_url, payment_notifications_url(:secret => "1395049619")));[Escaped Output] image_submit_tag("btn_xpressCheckout.gif"); end
[Escaped Output] hidden_field_tag(:cmd, "_s-xclick")
[Escaped Output] hidden_field_tag(:encrypted, @cart.paypal_encrypted(orders_url, payment_notifications_url(:secret => "1394807388")))
[Escaped Output] image_submit_tag("btn_xpressCheckout.gif")
[Escaped Output] form_tag("https://www.paypal.com/cgi-bin/webscr") do; [Escaped Output] hidden_field_tag(:cmd, "_s-xclick");[Escaped Output] hidden_field_tag(:encrypted, @cart.paypal_encrypted(orders_url, payment_notifications_url(:secret => "1394807388")));[Escaped Output] image_submit_tag("btn_xpressCheckout.gif"); end

orders/Copy of success

[Escaped Output] javascript_include_tag("d4x-signup.js")
[Escaped Output] javascript_include_tag("d4x-check-nick")
[Escaped Output] d4x_sanitizer(t("congratulations"))
[Escaped Output] d4x_sanitizer(t("purchase completed"))
[Escaped Output] f.hidden_field(:order_id, :value => @order.id)
[Escaped Output] f.text_field(:firstname, :class => "form-control center", :placeholder => d4x_sanitizer(t("firstname")), :value => @order.first_name)
[Escaped Output] f.text_field(:lastname, :class => "form-control center", :placeholder => d4x_sanitizer(t("lastname")), :value => @order.last_name)
[Escaped Output] f.text_field(:nickname, :class => "form-control center", :placeholder => d4x_sanitizer(t("nickname")))
[Escaped Output] f.email_field(:email, :class => "form-control email center", :placeholder => d4x_sanitizer(t("email")))
[Escaped Output] f.password_field(:password, :class => "form-control password center", :placeholder => d4x_sanitizer(t("password")))
[Escaped Output] f.password_field(:password_confirmation, :class => "form-control password center", :placeholder => d4x_sanitizer(t("confirm")))
[Escaped Output] f.select(:gender, options_for_select([[d4x_sanitizer(t("male")), "M"], [d4x_sanitizer(t("female")), "F"], [d4x_sanitizer(t("gender")), "0"]], "0"), :class => "agadanga-selects gender center", :size => "20")
[Escaped Output] f.select(:country, options_for_select([[d4x_sanitizer(t("country")), " "], ["Afghanistan", "AF"], ["Albania", "AL"], ["Algeria", "DZ"], ["American Samoa", "AS"], ["Andorra", "AD"], ["Angola", "AO"], ["Anguilla", "AI"], ["Antarctica", "AQ"], ["Antigua & Barbuda", "AG"], ["Argentina", "AR"], ["Armenia", "AM"], ["Aruba", "AW"], ["Australia", "AU"], ["Austria", "AT"], ["Azerbaijan", "AZ"], ["Bahamas", "BS"], ["Bahrain", "BH"], ["Bangladesh", "BD"], ["Barbados", "BB"], ["Belarus", "BY"], ["Belgium", "BE"], ["Belize", "BZ"], ["Benin", "BJ"], ["Bermuda", "BM"], ["Bhutan", "BT"], ["Bolivia", "BO"], ["Bosnia and Herzeg.", "BA"], ["Botswana", "BW"], ["Bouvet Island", "BV"], ["Brazil", "BR"], ["British Ind. Ocean", "IO"], ["Brunei Darussalam", "BN"], ["Bulgaria", "BG"], ["Burkina Faso", "BF"], ["Burundi", "BI"], ["Cambodia", "KH"], ["Cameroon", "CM"], ["Canada", "CA"], ["Cape Verde", "CV"], ["Cayman Islands", "KY"], ["Central Afr.Republic", "CF"], ["Chad", "TD"], ["Chile", "CL"], ["China", "CN"], ["Christmas Island", "CX"], ["Cocos Islands", "CC"], ["Colombia", "CO"], ["Comoros", "KM"], ["Congo", "CG"], ["Congo, Republic of", "CD"], ["Cook Islands", "CK"], ["Costa Rica", "CR"], ["Cote d`Ivoire", "CI"], ["Croatia (Hrvatska)", "HR"], ["Cuba", "CU"], ["Cyprus", "CY"], ["Czech Republic", "CZ"], ["Denmark", "DK"], ["Djibouti", "DJ"], ["Dominica", "DM"], ["Dominican Republic", "DO"], ["East Timor", "TP"], ["Ecuador", "EC"], ["Egypt", "EG"], ["El Salvador", "SV"], ["Equatorial Guinea", "GQ"], ["Eritrea", "ER"], ["Estonia", "EE"], ["Ethiopia", "ET"], ["Falkland Islands", "FK"], ["Faroe Islands", "FO"], ["Fiji", "FJ"], ["Finland", "FI"], ["France", "FR"], ["France, Metropol.", "FX"], ["French Guiana", "GF"], ["French Polynesia", "PF"], ["French Sout Terr.", "TF"], ["Gabon", "GA"], ["Gambia", "GM"], ["Georgia", "GE"], ["Germany", "DE"], ["Ghana", "GH"], ["Gibraltar", "GI"], ["Greece", "GR"], ["Greenland", "GL"], ["Grenada", "GD"], ["Guadeloupe", "GP"], ["Guam", "GU"], ["Guatemala", "GT"], ["Guinea", "GN"], ["Guinea-Bissau", "GW"], ["Guyana", "GY"], ["Haiti", "HT"], ["Heard Mc Donald", "HM"], ["Holy See (Vatican)", "VA"], ["Honduras", "HN"], ["Hong Kong", "HK"], ["Hungary", "HU"], ["Iceland", "IS"], ["India", "IN"], ["Indonesia", "ID"], ["Iran", "IR"], ["Iraq", "IQ"], ["Ireland", "IE"], ["Israel", "IL"], ["Italy", "IT"], ["Jamaica", "JM"], ["Japan", "JP"], ["Jordan", "JO"], ["Kazakhstan", "KZ"], ["Kenya", "KE"], ["Kiribati", "KI"], ["Korea, Democratic", "KP"], ["Korea, Republic of", "KR"], ["Kuwait", "KW"], ["Kyrgyzstan", "KG"], ["Lao Peoples", "LA"], ["Latvia", "LV"], ["Lebanon", "LB"], ["Lesotho", "LS"], ["Liberia", "LR"], ["Libyan", "LY"], ["Liechtenstein", "LI"], ["Lithuania", "LT"], ["Luxembourg", "LU"], ["Macau", "MO"], ["Macedonia", "MK"], ["Madagascar", "MG"], ["Malawi", "MW"], ["Malaysia", "MY"], ["Maldives", "MV"], ["Mali", "ML"], ["Malta", "MT"], ["Marshall Islands", "MH"], ["Martinique", "MQ"], ["Mauritania", "MR"], ["Mauritius", "MU"], ["Mayotte", "YT"], ["Mexico", "MX"], ["Micronesia", "FM"], ["Moldova", "MD"], ["Monaco", "MC"], ["Mongolia", "MN"], ["Montserrat", "MS"], ["Morocco", "MA"], ["Mozambique", "MZ"], ["Myanmar", "MM"], ["Namibia", "NA"], ["Nauru", "NR"], ["Nepal", "NP"], ["Netherlands", "NL"], ["Netherlands Antilles", "AN"], ["New Caledonia", "NC"], ["New Zealand", "NZ"], ["Nicaragua", "NI"], ["Niger", "NE"], ["Nigeria", "NG"], ["Niue", "NU"], ["Norfolk Island", "NF"], ["Northern Mariana Isl", "MP"], ["Norway", "NO"], ["Oman", "OM"], ["Pakistan", "PK"], ["Palau", "PW"], ["Panama", "PA"], ["Papua New Guinea", "PG"], ["Paraguay", "PY"], ["Peru", "PE"], ["Philippines", "PH"], ["Pitcairn", "PN"], ["Poland", "PL"], ["Portugal", "PT"], ["Puerto Rico", "PR"], ["Qatar", "QA"], ["Reunion", "RE"], ["Romania", "RO"], ["Russian Federation", "RU"], ["Rwanda", "RW"], ["Saint Kitts & Nevis", "KN"], ["Saint LUCIA", "LC"], ["Saint Vincent", "VC"], ["Samoa", "WS"], ["San Marino", "SM"], ["Sao Tome & Principe", "ST"], ["Saudi Arabia", "SA"], ["Senegal", "SN"], ["Seychelles", "SC"], ["Sierra Leone", "SL"], ["Singapore", "SG"], ["Slovakia", "SK"], ["Slovenia", "SI"], ["Solomon Islands", "SB"], ["Somalia", "SO"], ["South Africa", "ZA"], ["South Georgia", "GS"], ["Spain", "ES"], ["Sri Lanka", "LK"], ["St. Helena", "SH"], ["St.Pierre & Miquelon", "PM"], ["Sudan", "SD"], ["Suriname", "SR"], ["Svalbard", "SJ"], ["Swaziland", "SZ"], ["Sweden", "SE"], ["Switzerland", "CH"], ["Syrian Arab Republic", "SY"], ["Taiwan", "TW"], ["Tajikistan", "TJ"], ["Tanzania", "TZ"], ["Thailand", "TH"], ["Togo", "TG"], ["Tokelau", "TK"], ["Tonga", "TO"], ["Trinidad & Tobago", "TT"], ["Tunisia", "TN"], ["Turkey", "TR"], ["Turkmenistan", "TM"], ["Turks & Caicos Isl.", "TC"], ["Tuvalu", "TV"], ["Uganda", "UG"], ["Ukraine", "UA"], ["United Arab Emir.", "AE"], ["United Kingdom", "GB"], ["United States", "US"], ["United States Minor", "UM"], ["Uruguay", "UY"], ["Uzbekistan", "UZ"], ["Vanuatu", "VU"], ["Venezuela", "VE"], ["Viet Nam", "VN"], ["Virgin Islands (Brit)", "VG"], ["Virgin Islands (U.S.)", "VI"], ["Wallis & Futuna Isl.", "WF"], ["Western Sahara", "EH"], ["Yemen", "YE"], ["Yugoslavia", "YU"], ["Zambia", "ZM"], ["Zimbabwe", "ZW"]], "0"), :class => "control-nick country center", :size => "20", :value => "EH")
[Escaped Output] d4x_sanitizer(t("birthday"))
[Escaped Output] f.date_select(:birthday, :order => ([:day, :month, :year]), :start_year => 1930, :end_year => 1998, :use_short_month => true, :include_blank => true, :class => "agadanga-selects center")
[Escaped Output] check_box_tag(:agreement)
[Escaped Output] d4x_sanitizer(t("i agree with terms and conditions"))
[Escaped Output] image_tag("registering-spinner.gif", :class => "none", :id => "reg-spinner")
[Escaped Output] f.submit(d4x_sanitizer(t("sign up")), :id => "signup-submit", :class => "button-d4x")
[Escaped Output] d4x_sanitizer(notice)
[Escaped Output] d4x_sanitizer(alert)
[Escaped Output] form_for("user", :url => user_registration_path) do; [Escaped Output] f.hidden_field(:order_id, :value => @order.id);[Escaped Output] f.text_field(:firstname, :class => "form-control center", :placeholder => d4x_sanitizer(t("firstname")), :value => @order.first_name);[Escaped Output] f.text_field(:lastname, :class => "form-control center", :placeholder => d4x_sanitizer(t("lastname")), :value => @order.last_name);[Escaped Output] f.text_field(:nickname, :class => "form-control center", :placeholder => d4x_sanitizer(t("nickname")));[Escaped Output] f.email_field(:email, :class => "form-control email center", :placeholder => d4x_sanitizer(t("email")));[Escaped Output] f.password_field(:password, :class => "form-control password center", :placeholder => d4x_sanitizer(t("password")));[Escaped Output] f.password_field(:password_confirmation, :class => "form-control password center", :placeholder => d4x_sanitizer(t("confirm")));[Escaped Output] f.select(:gender, options_for_select([[d4x_sanitizer(t("male")), "M"], [d4x_sanitizer(t("female")), "F"], [d4x_sanitizer(t("gender")), "0"]], "0"), :class => "agadanga-selects gender center", :size => "20");[Escaped Output] f.select(:country, options_for_select([[d4x_sanitizer(t("country")), " "], ["Afghanistan", "AF"], ["Albania", "AL"], ["Algeria", "DZ"], ["American Samoa", "AS"], ["Andorra", "AD"], ["Angola", "AO"], ["Anguilla", "AI"], ["Antarctica", "AQ"], ["Antigua & Barbuda", "AG"], ["Argentina", "AR"], ["Armenia", "AM"], ["Aruba", "AW"], ["Australia", "AU"], ["Austria", "AT"], ["Azerbaijan", "AZ"], ["Bahamas", "BS"], ["Bahrain", "BH"], ["Bangladesh", "BD"], ["Barbados", "BB"], ["Belarus", "BY"], ["Belgium", "BE"], ["Belize", "BZ"], ["Benin", "BJ"], ["Bermuda", "BM"], ["Bhutan", "BT"], ["Bolivia", "BO"], ["Bosnia and Herzeg.", "BA"], ["Botswana", "BW"], ["Bouvet Island", "BV"], ["Brazil", "BR"], ["British Ind. Ocean", "IO"], ["Brunei Darussalam", "BN"], ["Bulgaria", "BG"], ["Burkina Faso", "BF"], ["Burundi", "BI"], ["Cambodia", "KH"], ["Cameroon", "CM"], ["Canada", "CA"], ["Cape Verde", "CV"], ["Cayman Islands", "KY"], ["Central Afr.Republic", "CF"], ["Chad", "TD"], ["Chile", "CL"], ["China", "CN"], ["Christmas Island", "CX"], ["Cocos Islands", "CC"], ["Colombia", "CO"], ["Comoros", "KM"], ["Congo", "CG"], ["Congo, Republic of", "CD"], ["Cook Islands", "CK"], ["Costa Rica", "CR"], ["Cote d`Ivoire", "CI"], ["Croatia (Hrvatska)", "HR"], ["Cuba", "CU"], ["Cyprus", "CY"], ["Czech Republic", "CZ"], ["Denmark", "DK"], ["Djibouti", "DJ"], ["Dominica", "DM"], ["Dominican Republic", "DO"], ["East Timor", "TP"], ["Ecuador", "EC"], ["Egypt", "EG"], ["El Salvador", "SV"], ["Equatorial Guinea", "GQ"], ["Eritrea", "ER"], ["Estonia", "EE"], ["Ethiopia", "ET"], ["Falkland Islands", "FK"], ["Faroe Islands", "FO"], ["Fiji", "FJ"], ["Finland", "FI"], ["France", "FR"], ["France, Metropol.", "FX"], ["French Guiana", "GF"], ["French Polynesia", "PF"], ["French Sout Terr.", "TF"], ["Gabon", "GA"], ["Gambia", "GM"], ["Georgia", "GE"], ["Germany", "DE"], ["Ghana", "GH"], ["Gibraltar", "GI"], ["Greece", "GR"], ["Greenland", "GL"], ["Grenada", "GD"], ["Guadeloupe", "GP"], ["Guam", "GU"], ["Guatemala", "GT"], ["Guinea", "GN"], ["Guinea-Bissau", "GW"], ["Guyana", "GY"], ["Haiti", "HT"], ["Heard Mc Donald", "HM"], ["Holy See (Vatican)", "VA"], ["Honduras", "HN"], ["Hong Kong", "HK"], ["Hungary", "HU"], ["Iceland", "IS"], ["India", "IN"], ["Indonesia", "ID"], ["Iran", "IR"], ["Iraq", "IQ"], ["Ireland", "IE"], ["Israel", "IL"], ["Italy", "IT"], ["Jamaica", "JM"], ["Japan", "JP"], ["Jordan", "JO"], ["Kazakhstan", "KZ"], ["Kenya", "KE"], ["Kiribati", "KI"], ["Korea, Democratic", "KP"], ["Korea, Republic of", "KR"], ["Kuwait", "KW"], ["Kyrgyzstan", "KG"], ["Lao Peoples", "LA"], ["Latvia", "LV"], ["Lebanon", "LB"], ["Lesotho", "LS"], ["Liberia", "LR"], ["Libyan", "LY"], ["Liechtenstein", "LI"], ["Lithuania", "LT"], ["Luxembourg", "LU"], ["Macau", "MO"], ["Macedonia", "MK"], ["Madagascar", "MG"], ["Malawi", "MW"], ["Malaysia", "MY"], ["Maldives", "MV"], ["Mali", "ML"], ["Malta", "MT"], ["Marshall Islands", "MH"], ["Martinique", "MQ"], ["Mauritania", "MR"], ["Mauritius", "MU"], ["Mayotte", "YT"], ["Mexico", "MX"], ["Micronesia", "FM"], ["Moldova", "MD"], ["Monaco", "MC"], ["Mongolia", "MN"], ["Montserrat", "MS"], ["Morocco", "MA"], ["Mozambique", "MZ"], ["Myanmar", "MM"], ["Namibia", "NA"], ["Nauru", "NR"], ["Nepal", "NP"], ["Netherlands", "NL"], ["Netherlands Antilles", "AN"], ["New Caledonia", "NC"], ["New Zealand", "NZ"], ["Nicaragua", "NI"], ["Niger", "NE"], ["Nigeria", "NG"], ["Niue", "NU"], ["Norfolk Island", "NF"], ["Northern Mariana Isl", "MP"], ["Norway", "NO"], ["Oman", "OM"], ["Pakistan", "PK"], ["Palau", "PW"], ["Panama", "PA"], ["Papua New Guinea", "PG"], ["Paraguay", "PY"], ["Peru", "PE"], ["Philippines", "PH"], ["Pitcairn", "PN"], ["Poland", "PL"], ["Portugal", "PT"], ["Puerto Rico", "PR"], ["Qatar", "QA"], ["Reunion", "RE"], ["Romania", "RO"], ["Russian Federation", "RU"], ["Rwanda", "RW"], ["Saint Kitts & Nevis", "KN"], ["Saint LUCIA", "LC"], ["Saint Vincent", "VC"], ["Samoa", "WS"], ["San Marino", "SM"], ["Sao Tome & Principe", "ST"], ["Saudi Arabia", "SA"], ["Senegal", "SN"], ["Seychelles", "SC"], ["Sierra Leone", "SL"], ["Singapore", "SG"], ["Slovakia", "SK"], ["Slovenia", "SI"], ["Solomon Islands", "SB"], ["Somalia", "SO"], ["South Africa", "ZA"], ["South Georgia", "GS"], ["Spain", "ES"], ["Sri Lanka", "LK"], ["St. Helena", "SH"], ["St.Pierre & Miquelon", "PM"], ["Sudan", "SD"], ["Suriname", "SR"], ["Svalbard", "SJ"], ["Swaziland", "SZ"], ["Sweden", "SE"], ["Switzerland", "CH"], ["Syrian Arab Republic", "SY"], ["Taiwan", "TW"], ["Tajikistan", "TJ"], ["Tanzania", "TZ"], ["Thailand", "TH"], ["Togo", "TG"], ["Tokelau", "TK"], ["Tonga", "TO"], ["Trinidad & Tobago", "TT"], ["Tunisia", "TN"], ["Turkey", "TR"], ["Turkmenistan", "TM"], ["Turks & Caicos Isl.", "TC"], ["Tuvalu", "TV"], ["Uganda", "UG"], ["Ukraine", "UA"], ["United Arab Emir.", "AE"], ["United Kingdom", "GB"], ["United States", "US"], ["United States Minor", "UM"], ["Uruguay", "UY"], ["Uzbekistan", "UZ"], ["Vanuatu", "VU"], ["Venezuela", "VE"], ["Viet Nam", "VN"], ["Virgin Islands (Brit)", "VG"], ["Virgin Islands (U.S.)", "VI"], ["Wallis & Futuna Isl.", "WF"], ["Western Sahara", "EH"], ["Yemen", "YE"], ["Yugoslavia", "YU"], ["Zambia", "ZM"], ["Zimbabwe", "ZW"]], "0"), :class => "control-nick country center", :size => "20", :value => "EH");[Escaped Output] d4x_sanitizer(t("birthday"));[Escaped Output] f.date_select(:birthday, :order => ([:day, :month, :year]), :start_year => 1930, :end_year => 1998, :use_short_month => true, :include_blank => true, :class => "agadanga-selects center");[Escaped Output] check_box_tag(:agreement);[Escaped Output] d4x_sanitizer(t("i agree with terms and conditions"));[Escaped Output] image_tag("registering-spinner.gif", :class => "none", :id => "reg-spinner");[Escaped Output] f.submit(d4x_sanitizer(t("sign up")), :id => "signup-submit", :class => "button-d4x");[Escaped Output] d4x_sanitizer(notice) unless notice.blank?;[Escaped Output] d4x_sanitizer(alert) unless alert.blank?; end

orders/_form

[Escaped Output] javascript_include_tag("d4x-order.js")
[Escaped Output] hidden_field_tag(:cart_id, @order.cart_id)
[Escaped Output] d4x_sanitizer(t("place order"))
[Escaped Output] f.text_field(:first_name, :class => " form-control", :placeholder => d4x_sanitizer(t("firstname")))
[Escaped Output] f.text_field(:last_name, :class => " form-control", :placeholder => d4x_sanitizer(t("lastname")))
[Escaped Output] f.text_field(:address, :class => " form-control", :placeholder => d4x_sanitizer(t("address")))
[Escaped Output] f.text_field(:town, :class => " form-control", :placeholder => d4x_sanitizer(t("town")))
[Escaped Output] f.text_field(:city, :class => " form-control", :placeholder => d4x_sanitizer(t("city")))
[Escaped Output] f.text_field(:zip, :class => " form-control", :placeholder => d4x_sanitizer(t("ZIP")), :maxlength => 5)
[Escaped Output] f.text_field(:telephone, :class => " form-control", :maxlength => 50, :placeholder => d4x_sanitizer(t("telephone")))
[Escaped Output] f.select(:country, options_for_select([["United States", "United States"], ["United Kingdom", "United Kingdom"], ["Afghanistan", "Afghanistan"], ["Albania", "Albania"], ["Algeria", "Algeria"], ["American Samoa", "American Samoa"], ["Andorra", "Andorra"], ["Angola", "Angola"], ["Anguilla", "Anguilla"], ["Antarctica", "Antarctica"], ["Antigua and Barbuda", "Antigua and Barbuda"], ["Argentina", "Argentina"], ["Armenia", "Armenia"], ["Aruba", "Aruba"], ["Australia", "Australia"], ["Austria", "Austria"], ["Azerbaijan", "Azerbaijan"], ["Bahamas", "Bahamas"], ["Bahrain", "Bahrain"], ["Bangladesh", "Bangladesh"], ["Barbados", "Barbadados"], ["Belarus", "Belarus"], ["Belgium", "Belgium"], ["Belize", "Belize"], ["Benin", "Benin"], ["Bermuda", "Bermuda"], ["Bhutan", "Bhutan"], ["Bolivia", "Bolivia"], ["Bosnia and Heimage_tagrzegovina", "Bosnia and Herzegovina"], ["Botswana", "Botswana"], ["Bouvet Island", "Bouvet Island"], ["Brazil", "Brazil"], ["British Indian Ocean Territory", "British Indian Ocean Territory"], ["Brunei Darussalam", "Brunei Darussalam"], ["Bulgaria", "Bulgaria"], ["Burkina Faso", "Burkina Faso"], ["Burundi", "Burundi"], ["Cambodia", "Cambodia"], ["Cameroon", "Cameroon"], ["Canada", "Canada"], ["Cape Verde", "Cape Verde,"], ["Cayman Islands", "Cayman Islands"], ["Central African Republic", "Central African Republic"], ["Chad", "Chad"], ["Chile", "Chile"], ["China", "China"], ["Christmas Island", "Christmas Island"], ["Cocos (Keeling) Islands", "Cocos (Keeling) Islands"], ["Colombia", "Colombia"], ["Comoros", "Comoros"], ["Congo", "Congo"], ["Congo, The Democratic Republic of The", "Congo, The Democratic Republic of The"], ["Cook Islands", "Cook Islands"], ["Costa Rica", "Costa Rica"], ["Cote Ivoire", "Cote D Ivoire"], ["Croatia", "Croatia"], ["Cuba", "Cuba"], ["Cyprus", "Cyprus"], ["Czech Republic", "Czech Republic"], ["Denmark", "Denmark"], ["Djibouti", "Djibouti"], ["Dominica", "Dominica"], ["Dominican Republic", "Dominican Republic"], ["Ecuador", "Ecuador"], ["Egypt", "Egypt"], ["El Salvador", "El Salvador"], ["Equatorial Guinea", "Equatorial Guinea"], ["Eritrea", "Eritrea"], ["Estonia", "Estonia"], ["Ethiopia", "Ethiopia"], ["Falkland Islands (Malvinas)", "Falkland Islands (Malvinas)"], ["Faroe Islands", "Faroe Islands"], ["Fiji", "Fiji"], ["Finland", "Finland"], ["France", "France"], ["French Guiana", "French Guiana"], ["French Polynesia", "French Polynesia"], ["French Southern Territories", "French Southern Territories"], ["Gabon", "Gabon"], ["Gambia", "Gambia"], ["Georgia", "Georgia"], ["Germany", "Germany"], ["Ghana", "Ghana"], ["Gibraltar", "Gibraltar"], ["Greece", "Greece"], ["Greenland", "Greenland"], ["Grenada", "Grenada"], ["Guadeloupe", "Guadeloupe"], ["Guam", "Guam"], ["Guatemala", "Guatemala"], ["Guinea", "Guinea"], ["Guinea-bissau", "Guinea-bissau"], ["Guyana", "Guyana"], ["Haiti", "Haiti"], ["Heard Island and Mcdonald Islands", "Heard Island and Mcdonald Islands"], ["Holy See (Vatican City State)", "Holy See (Vatican City State)"], ["Honduras", "Honduras"], ["Hong Kong", "Hon g Kong"], ["Hungary", "Hungary"], ["Iceland", "Iceland"], ["India", "India"], ["Indonesia", "Indonesia"], ["Iran, Islamic Republic of", "Iran, Islamic Republic of"], ["Iraq", "Iraq"], ["Ireland", "Ireland"], ["Israel", "Israel"], ["Italy", "Italy"], ["Jamaica", "Jamaica"], ["Japan", "Japan"], ["Jordan", "Jordan"], ["Kazakhstan", "Kazakhstan"], ["Kenya", "Kenya"], ["Kiribati", "Kiribati"], ["Korea, Democratic People Republic of", "Korea, Democratic People Republic of"], ["Korea, Republic of", "Korea, Republic of"], ["Kuwait", "Kuwait"], ["Kyrgyzstan", "Kyrgyzstan"], ["Lao People Democratic Republic", "Lao People Democratic Republic"], ["Latvia", "Latvia"], ["Lebanon", "Lebanon"], ["Lesotho", "Lesotho"], ["Liberia", "Liberia"], ["Libyan Arab Jamahiriya", "Libyan Arab Jamahiriya"], ["Liechtenstein", "Liechtenstein"], ["Lithuania", "Lithuania"], ["Luxembourg", "Luxembourg"], ["Macao", "Macao"], ["Macedonia, The Former Yugoslav Republic of", "Macedonia, The Former Yugoslav Republic of"], ["Madagascar", "Madagascar"], ["Malawi", "Malawi"], ["Malaysia", "Malaysia"], ["Maldives", "Maldives"], ["Mali", "Mali"], ["Malta", "Malta"], ["Marshall Islands", "Marshall Islands"], ["Martinique", "Martinique"], ["Mauritania", "Mauritania"], ["Mauritius", "Mauritius"], ["Mayotte", "Mayotte"], ["Mexico", "Mexico"], ["Micronesia, Federated States of", "Micronesia, Federated States of"], ["Moldova, Republic of", "Moldova, Republic of"], ["Monaco", "Monaco"], ["Mongolia", "Mongolia"], ["Montserrat", "Montserrat"], ["Morocco", "Morocco"], ["Mozambique", "Mozambique"], ["Myanmar", "Myanmar"], ["Namibia", "Namibia"], ["Nauru", "Nauru"], ["Nepal", "Nepal"], ["Netherlands", "Netherlands"], ["Netherlands Antilles", "Netherlands Antilles"], ["New Caledonia", "New Caledonia"], ["New Zealand", "New Zealand"], ["Nicaragua", "Nicaragua"], ["Niger", "Niger"], ["Nigeria", "Nigeria"], ["Niue", "Niue"], ["Norfolk Island", "Norfolk Island"], ["Northern Mariana Islands", "Northern Mariana Islands"], ["Norway", "Norway"], ["Oman", "Oman"], ["Pakistan", "Pakistan"], ["Palau", "Palau"], ["Palestinian Territory, Occupied", "Palestinian Territory, Occupied"], ["Panama", "Panama"], ["Papua New Guinea", "Papua New Guinea"], ["Paraguay", "Paraguay"], ["Peru", "Peru"], ["Philippines", "Philippines"], ["Pitcairn", "Pitcairn"], ["Poland", "Poland"], ["Portugal", "Portugal"], ["Puerto Rico", "Puerto Rico"], ["Qatar", "Qatar"], ["Reunion", "Reunion"], ["Romania", "Romania"], ["Russian Federation", "Russian Federation"], ["Rwanda", "Rwanda"], ["Saint Helena", "Saint Helena"], ["Saint Kitts and Nevis", "Saint Kitts and Nevis"], ["Saint Lucia", "Saint Lucia"], ["Saint Pierre and Miquelon", "Saint Pierre and Miquelon"], ["Saint Vincent and The Grenadines", "Saint Vincent and The Grenadines"], ["Samoa", "Samoa"], ["San Marino", "San Marino"], ["Sao Tome and Principe", "Sao Tome and Principe"], ["Saudi Arabia", "Saudi Arabia"], ["Senegal", "Senegal"], ["Serbia and Montenegro", "Serbia and Montenegro"], ["Seychelles", "Seychelles"], ["Sierra Leone", "Sierra Leone"], ["Singapore", "Singapore"], ["Slovakia", "Slovakia"], ["Slovenia", "Slovenia"], ["Solomon Islands", "Solomon Islands"], ["Somalia", "Somalia"], ["South Africa", "South Africa"], ["South Georgia and The South Sandwich Islands", "South Georgia and The South Sandwich Islands"], ["Spain", "Spain"], ["Sri Lanka", "Sri Lanka"], ["Sudan", "Sudan"], ["Suriname", "Suriname"], ["Svalbard and Jan Mayen", "Svalbard and Jan Mayen"], ["Swaziland", "Swaziland"], ["Sweden", "Sweden"], ["Switzerland", "Switzerland"], ["Syrian Arab Republic", "Syrian Arab Republic"], ["Taiwan, Province of China", "Taiwan, Province of China"], ["Tajikistan", "Tajikistan"], ["Tanzania, United Republic of", "Tanzania, United Republic of"], ["Thailand", "Thailand"], ["Timor-leste", "Timor-leste"], ["Togo", "Togo"], ["Tokelau", "Tokelau"], ["Tonga", "Tonga"], ["Trinidad and Tobago", "Trinidad and Tobago"], ["Tunisia", "Tunisia"], ["Turkey", "Turkey"], ["Turkmenistan", "Turkmenistan"], ["Turks and Caicos Islands", "Turks and Caicos Islands"], ["Tuvalu", "Tuvalu"], ["Uganda", "Uganda"], ["Ukraine", "Ukraine"], ["United Arab Emirates", "United Arab Emirates"], ["United Kingdom", "United Kingdom"], ["United States", "United States"], ["United States Minor Outlying Islands", "US Minor Islands"], ["Uruguay", "Uruguay"], ["Uzbekistan", "Uzbekistan"], ["Vanuatu", "Vanuatu"], ["Venezuela", "Venezuela"], ["Viet Nam", "Viet Nam"], ["Virgin Islands, British", "Virgin Islands, British"], ["Virgin Islands, U.S.", "Virgin Islands, U.S."], ["Wallis and Futuna", "Wallis and Futuna"], ["Western Sahara", "Western Sahara"], ["Yemen", "Yemen"], ["Zambia", "Zambia"], ["Zimbabwe", "Zimbabwe"]], @order.country), {}, :class => "select2 form-control input-transparent")
[Escaped Output] check_box_tag(:same_address)
[Escaped Output] d4x_sanitizer(t("shipping address is billing address"))
[Escaped Output] d4x_sanitizer(t("shipping details"))
[Escaped Output] f.text_field(:shipping_first_name, :class => " form-control", :maxlength => 50, :placeholder => "Shipping First Name")
[Escaped Output] f.text_field(:shipping_last_name, :class => " form-control", :placeholder => d4x_sanitizer(t("lastname")))
[Escaped Output] f.text_field(:shipping_address, :class => " form-control", :placeholder => d4x_sanitizer(t("shipping address")))
[Escaped Output] f.text_field(:shipping_town, :class => " form-control", :placeholder => d4x_sanitizer(t("shipping town")))
[Escaped Output] f.text_field(:shipping_city, :class => " form-control", :placeholder => d4x_sanitizer(t("shipping city")))
[Escaped Output] f.text_field(:shipping_zip, :class => " form-control", :placeholder => d4x_sanitizer(t("shipping zip")), :maxlength => 5)
[Escaped Output] f.select(:shipping_country, options_for_select([["United States", "United States"], ["United Kingdom", "United Kingdom"], ["Afghanistan", "Afghanistan"], ["Albania", "Albania"], ["Algeria", "Algeria"], ["American Samoa", "American Samoa"], ["Andorra", "Andorra"], ["Angola", "Angola"], ["Anguilla", "Anguilla"], ["Antarctica", "Antarctica"], ["Antigua and Barbuda", "Antigua and Barbuda"], ["Argentina", "Argentina"], ["Armenia", "Armenia"], ["Aruba", "Aruba"], ["Australia", "Australia"], ["Austria", "Austria"], ["Azerbaijan", "Azerbaijan"], ["Bahamas", "Bahamas"], ["Bahrain", "Bahrain"], ["Bangladesh", "Bangladesh"], ["Barbados", "Barbadados"], ["Belarus", "Belarus"], ["Belgium", "Belgium"], ["Belize", "Belize"], ["Benin", "Benin"], ["Bermuda", "Bermuda"], ["Bhutan", "Bhutan"], ["Bolivia", "Bolivia"], ["Bosnia and Heimage_tagrzegovina", "Bosnia and Herzegovina"], ["Botswana", "Botswana"], ["Bouvet Island", "Bouvet Island"], ["Brazil", "Brazil"], ["British Indian Ocean Territory", "British Indian Ocean Territory"], ["Brunei Darussalam", "Brunei Darussalam"], ["Bulgaria", "Bulgaria"], ["Burkina Faso", "Burkina Faso"], ["Burundi", "Burundi"], ["Cambodia", "Cambodia"], ["Cameroon", "Cameroon"], ["Canada", "Canada"], ["Cape Verde", "Cape Verde,"], ["Cayman Islands", "Cayman Islands"], ["Central African Republic", "Central African Republic"], ["Chad", "Chad"], ["Chile", "Chile"], ["China", "China"], ["Christmas Island", "Christmas Island"], ["Cocos (Keeling) Islands", "Cocos (Keeling) Islands"], ["Colombia", "Colombia"], ["Comoros", "Comoros"], ["Congo", "Congo"], ["Congo, The Democratic Republic of The", "Congo, The Democratic Republic of The"], ["Cook Islands", "Cook Islands"], ["Costa Rica", "Costa Rica"], ["Cote Ivoire", "Cote D Ivoire"], ["Croatia", "Croatia"], ["Cuba", "Cuba"], ["Cyprus", "Cyprus"], ["Czech Republic", "Czech Republic"], ["Denmark", "Denmark"], ["Djibouti", "Djibouti"], ["Dominica", "Dominica"], ["Dominican Republic", "Dominican Republic"], ["Ecuador", "Ecuador"], ["Egypt", "Egypt"], ["El Salvador", "El Salvador"], ["Equatorial Guinea", "Equatorial Guinea"], ["Eritrea", "Eritrea"], ["Estonia", "Estonia"], ["Ethiopia", "Ethiopia"], ["Falkland Islands (Malvinas)", "Falkland Islands (Malvinas)"], ["Faroe Islands", "Faroe Islands"], ["Fiji", "Fiji"], ["Finland", "Finland"], ["France", "France"], ["French Guiana", "French Guiana"], ["French Polynesia", "French Polynesia"], ["French Southern Territories", "French Southern Territories"], ["Gabon", "Gabon"], ["Gambia", "Gambia"], ["Georgia", "Georgia"], ["Germany", "Germany"], ["Ghana", "Ghana"], ["Gibraltar", "Gibraltar"], ["Greece", "Greece"], ["Greenland", "Greenland"], ["Grenada", "Grenada"], ["Guadeloupe", "Guadeloupe"], ["Guam", "Guam"], ["Guatemala", "Guatemala"], ["Guinea", "Guinea"], ["Guinea-bissau", "Guinea-bissau"], ["Guyana", "Guyana"], ["Haiti", "Haiti"], ["Heard Island and Mcdonald Islands", "Heard Island and Mcdonald Islands"], ["Holy See (Vatican City State)", "Holy See (Vatican City State)"], ["Honduras", "Honduras"], ["Hong Kong", "Hon g Kong"], ["Hungary", "Hungary"], ["Iceland", "Iceland"], ["India", "India"], ["Indonesia", "Indonesia"], ["Iran, Islamic Republic of", "Iran, Islamic Republic of"], ["Iraq", "Iraq"], ["Ireland", "Ireland"], ["Israel", "Israel"], ["Italy", "Italy"], ["Jamaica", "Jamaica"], ["Japan", "Japan"], ["Jordan", "Jordan"], ["Kazakhstan", "Kazakhstan"], ["Kenya", "Kenya"], ["Kiribati", "Kiribati"], ["Korea, Democratic People Republic of", "Korea, Democratic People Republic of"], ["Korea, Republic of", "Korea, Republic of"], ["Kuwait", "Kuwait"], ["Kyrgyzstan", "Kyrgyzstan"], ["Lao People Democratic Republic", "Lao People Democratic Republic"], ["Latvia", "Latvia"], ["Lebanon", "Lebanon"], ["Lesotho", "Lesotho"], ["Liberia", "Liberia"], ["Libyan Arab Jamahiriya", "Libyan Arab Jamahiriya"], ["Liechtenstein", "Liechtenstein"], ["Lithuania", "Lithuania"], ["Luxembourg", "Luxembourg"], ["Macao", "Macao"], ["Macedonia, The Former Yugoslav Republic of", "Macedonia, The Former Yugoslav Republic of"], ["Madagascar", "Madagascar"], ["Malawi", "Malawi"], ["Malaysia", "Malaysia"], ["Maldives", "Maldives"], ["Mali", "Mali"], ["Malta", "Malta"], ["Marshall Islands", "Marshall Islands"], ["Martinique", "Martinique"], ["Mauritania", "Mauritania"], ["Mauritius", "Mauritius"], ["Mayotte", "Mayotte"], ["Mexico", "Mexico"], ["Micronesia, Federated States of", "Micronesia, Federated States of"], ["Moldova, Republic of", "Moldova, Republic of"], ["Monaco", "Monaco"], ["Mongolia", "Mongolia"], ["Montserrat", "Montserrat"], ["Morocco", "Morocco"], ["Mozambique", "Mozambique"], ["Myanmar", "Myanmar"], ["Namibia", "Namibia"], ["Nauru", "Nauru"], ["Nepal", "Nepal"], ["Netherlands", "Netherlands"], ["Netherlands Antilles", "Netherlands Antilles"], ["New Caledonia", "New Caledonia"], ["New Zealand", "New Zealand"], ["Nicaragua", "Nicaragua"], ["Niger", "Niger"], ["Nigeria", "Nigeria"], ["Niue", "Niue"], ["Norfolk Island", "Norfolk Island"], ["Northern Mariana Islands", "Northern Mariana Islands"], ["Norway", "Norway"], ["Oman", "Oman"], ["Pakistan", "Pakistan"], ["Palau", "Palau"], ["Palestinian Territory, Occupied", "Palestinian Territory, Occupied"], ["Panama", "Panama"], ["Papua New Guinea", "Papua New Guinea"], ["Paraguay", "Paraguay"], ["Peru", "Peru"], ["Philippines", "Philippines"], ["Pitcairn", "Pitcairn"], ["Poland", "Poland"], ["Portugal", "Portugal"], ["Puerto Rico", "Puerto Rico"], ["Qatar", "Qatar"], ["Reunion", "Reunion"], ["Romania", "Romania"], ["Russian Federation", "Russian Federation"], ["Rwanda", "Rwanda"], ["Saint Helena", "Saint Helena"], ["Saint Kitts and Nevis", "Saint Kitts and Nevis"], ["Saint Lucia", "Saint Lucia"], ["Saint Pierre and Miquelon", "Saint Pierre and Miquelon"], ["Saint Vincent and The Grenadines", "Saint Vincent and The Grenadines"], ["Samoa", "Samoa"], ["San Marino", "San Marino"], ["Sao Tome and Principe", "Sao Tome and Principe"], ["Saudi Arabia", "Saudi Arabia"], ["Senegal", "Senegal"], ["Serbia and Montenegro", "Serbia and Montenegro"], ["Seychelles", "Seychelles"], ["Sierra Leone", "Sierra Leone"], ["Singapore", "Singapore"], ["Slovakia", "Slovakia"], ["Slovenia", "Slovenia"], ["Solomon Islands", "Solomon Islands"], ["Somalia", "Somalia"], ["South Africa", "South Africa"], ["South Georgia and The South Sandwich Islands", "South Georgia and The South Sandwich Islands"], ["Spain", "Spain"], ["Sri Lanka", "Sri Lanka"], ["Sudan", "Sudan"], ["Suriname", "Suriname"], ["Svalbard and Jan Mayen", "Svalbard and Jan Mayen"], ["Swaziland", "Swaziland"], ["Sweden", "Sweden"], ["Switzerland", "Switzerland"], ["Syrian Arab Republic", "Syrian Arab Republic"], ["Taiwan, Province of China", "Taiwan, Province of China"], ["Tajikistan", "Tajikistan"], ["Tanzania, United Republic of", "Tanzania, United Republic of"], ["Thailand", "Thailand"], ["Timor-leste", "Timor-leste"], ["Togo", "Togo"], ["Tokelau", "Tokelau"], ["Tonga", "Tonga"], ["Trinidad and Tobago", "Trinidad and Tobago"], ["Tunisia", "Tunisia"], ["Turkey", "Turkey"], ["Turkmenistan", "Turkmenistan"], ["Turks and Caicos Islands", "Turks and Caicos Islands"], ["Tuvalu", "Tuvalu"], ["Uganda", "Uganda"], ["Ukraine", "Ukraine"], ["United Arab Emirates", "United Arab Emirates"], ["United Kingdom", "United Kingdom"], ["United States", "United States"], ["United States Minor Outlying Islands", "US Minor Islands"], ["Uruguay", "Uruguay"], ["Uzbekistan", "Uzbekistan"], ["Vanuatu", "Vanuatu"], ["Venezuela", "Venezuela"], ["Viet Nam", "Viet Nam"], ["Virgin Islands, British", "Virgin Islands, British"], ["Virgin Islands, U.S.", "Virgin Islands, U.S."], ["Wallis and Futuna", "Wallis and Futuna"], ["Western Sahara", "Western Sahara"], ["Yemen", "Yemen"], ["Zambia", "Zambia"], ["Zimbabwe", "Zimbabwe"]], @order.shipping_country), {}, :class => "select2 form-control input-transparent")
[Escaped Output] f.text_field(:shipping_telephone, :class => " form-control", :maxlength => 50, :placeholder => d4x_sanitizer(t("shipping telephone")))
[Escaped Output] f.text_area(:customer_notes, :class => "form-control", :size => "100x5", :placeholder => d4x_sanitizer(t("notes for delivery")))
[Escaped Output] check_box_tag(:agreement, nil, false)
[Escaped Output] link_to(d4x_sanitizer(t("i agree with terms and conditions")), "/terms")
[Escaped Output] f.submit(d4x_sanitizer(t("place order")), :class => "btn btn-outline-primary", :id => "place-order")
[Escaped Output] form_for(@order) do; [Escaped Output] hidden_field_tag(:cart_id, @order.cart_id);[Escaped Output] d4x_sanitizer(t("place order"));[Escaped Output] f.text_field(:first_name, :class => " form-control", :placeholder => d4x_sanitizer(t("firstname")));[Escaped Output] f.text_field(:last_name, :class => " form-control", :placeholder => d4x_sanitizer(t("lastname")));[Escaped Output] f.text_field(:address, :class => " form-control", :placeholder => d4x_sanitizer(t("address")));[Escaped Output] f.text_field(:town, :class => " form-control", :placeholder => d4x_sanitizer(t("town")));[Escaped Output] f.text_field(:city, :class => " form-control", :placeholder => d4x_sanitizer(t("city")));[Escaped Output] f.text_field(:zip, :class => " form-control", :placeholder => d4x_sanitizer(t("ZIP")), :maxlength => 5);[Escaped Output] f.text_field(:telephone, :class => " form-control", :maxlength => 50, :placeholder => d4x_sanitizer(t("telephone")));[Escaped Output] f.select(:country, options_for_select([["United States", "United States"], ["United Kingdom", "United Kingdom"], ["Afghanistan", "Afghanistan"], ["Albania", "Albania"], ["Algeria", "Algeria"], ["American Samoa", "American Samoa"], ["Andorra", "Andorra"], ["Angola", "Angola"], ["Anguilla", "Anguilla"], ["Antarctica", "Antarctica"], ["Antigua and Barbuda", "Antigua and Barbuda"], ["Argentina", "Argentina"], ["Armenia", "Armenia"], ["Aruba", "Aruba"], ["Australia", "Australia"], ["Austria", "Austria"], ["Azerbaijan", "Azerbaijan"], ["Bahamas", "Bahamas"], ["Bahrain", "Bahrain"], ["Bangladesh", "Bangladesh"], ["Barbados", "Barbadados"], ["Belarus", "Belarus"], ["Belgium", "Belgium"], ["Belize", "Belize"], ["Benin", "Benin"], ["Bermuda", "Bermuda"], ["Bhutan", "Bhutan"], ["Bolivia", "Bolivia"], ["Bosnia and Heimage_tagrzegovina", "Bosnia and Herzegovina"], ["Botswana", "Botswana"], ["Bouvet Island", "Bouvet Island"], ["Brazil", "Brazil"], ["British Indian Ocean Territory", "British Indian Ocean Territory"], ["Brunei Darussalam", "Brunei Darussalam"], ["Bulgaria", "Bulgaria"], ["Burkina Faso", "Burkina Faso"], ["Burundi", "Burundi"], ["Cambodia", "Cambodia"], ["Cameroon", "Cameroon"], ["Canada", "Canada"], ["Cape Verde", "Cape Verde,"], ["Cayman Islands", "Cayman Islands"], ["Central African Republic", "Central African Republic"], ["Chad", "Chad"], ["Chile", "Chile"], ["China", "China"], ["Christmas Island", "Christmas Island"], ["Cocos (Keeling) Islands", "Cocos (Keeling) Islands"], ["Colombia", "Colombia"], ["Comoros", "Comoros"], ["Congo", "Congo"], ["Congo, The Democratic Republic of The", "Congo, The Democratic Republic of The"], ["Cook Islands", "Cook Islands"], ["Costa Rica", "Costa Rica"], ["Cote Ivoire", "Cote D Ivoire"], ["Croatia", "Croatia"], ["Cuba", "Cuba"], ["Cyprus", "Cyprus"], ["Czech Republic", "Czech Republic"], ["Denmark", "Denmark"], ["Djibouti", "Djibouti"], ["Dominica", "Dominica"], ["Dominican Republic", "Dominican Republic"], ["Ecuador", "Ecuador"], ["Egypt", "Egypt"], ["El Salvador", "El Salvador"], ["Equatorial Guinea", "Equatorial Guinea"], ["Eritrea", "Eritrea"], ["Estonia", "Estonia"], ["Ethiopia", "Ethiopia"], ["Falkland Islands (Malvinas)", "Falkland Islands (Malvinas)"], ["Faroe Islands", "Faroe Islands"], ["Fiji", "Fiji"], ["Finland", "Finland"], ["France", "France"], ["French Guiana", "French Guiana"], ["French Polynesia", "French Polynesia"], ["French Southern Territories", "French Southern Territories"], ["Gabon", "Gabon"], ["Gambia", "Gambia"], ["Georgia", "Georgia"], ["Germany", "Germany"], ["Ghana", "Ghana"], ["Gibraltar", "Gibraltar"], ["Greece", "Greece"], ["Greenland", "Greenland"], ["Grenada", "Grenada"], ["Guadeloupe", "Guadeloupe"], ["Guam", "Guam"], ["Guatemala", "Guatemala"], ["Guinea", "Guinea"], ["Guinea-bissau", "Guinea-bissau"], ["Guyana", "Guyana"], ["Haiti", "Haiti"], ["Heard Island and Mcdonald Islands", "Heard Island and Mcdonald Islands"], ["Holy See (Vatican City State)", "Holy See (Vatican City State)"], ["Honduras", "Honduras"], ["Hong Kong", "Hon g Kong"], ["Hungary", "Hungary"], ["Iceland", "Iceland"], ["India", "India"], ["Indonesia", "Indonesia"], ["Iran, Islamic Republic of", "Iran, Islamic Republic of"], ["Iraq", "Iraq"], ["Ireland", "Ireland"], ["Israel", "Israel"], ["Italy", "Italy"], ["Jamaica", "Jamaica"], ["Japan", "Japan"], ["Jordan", "Jordan"], ["Kazakhstan", "Kazakhstan"], ["Kenya", "Kenya"], ["Kiribati", "Kiribati"], ["Korea, Democratic People Republic of", "Korea, Democratic People Republic of"], ["Korea, Republic of", "Korea, Republic of"], ["Kuwait", "Kuwait"], ["Kyrgyzstan", "Kyrgyzstan"], ["Lao People Democratic Republic", "Lao People Democratic Republic"], ["Latvia", "Latvia"], ["Lebanon", "Lebanon"], ["Lesotho", "Lesotho"], ["Liberia", "Liberia"], ["Libyan Arab Jamahiriya", "Libyan Arab Jamahiriya"], ["Liechtenstein", "Liechtenstein"], ["Lithuania", "Lithuania"], ["Luxembourg", "Luxembourg"], ["Macao", "Macao"], ["Macedonia, The Former Yugoslav Republic of", "Macedonia, The Former Yugoslav Republic of"], ["Madagascar", "Madagascar"], ["Malawi", "Malawi"], ["Malaysia", "Malaysia"], ["Maldives", "Maldives"], ["Mali", "Mali"], ["Malta", "Malta"], ["Marshall Islands", "Marshall Islands"], ["Martinique", "Martinique"], ["Mauritania", "Mauritania"], ["Mauritius", "Mauritius"], ["Mayotte", "Mayotte"], ["Mexico", "Mexico"], ["Micronesia, Federated States of", "Micronesia, Federated States of"], ["Moldova, Republic of", "Moldova, Republic of"], ["Monaco", "Monaco"], ["Mongolia", "Mongolia"], ["Montserrat", "Montserrat"], ["Morocco", "Morocco"], ["Mozambique", "Mozambique"], ["Myanmar", "Myanmar"], ["Namibia", "Namibia"], ["Nauru", "Nauru"], ["Nepal", "Nepal"], ["Netherlands", "Netherlands"], ["Netherlands Antilles", "Netherlands Antilles"], ["New Caledonia", "New Caledonia"], ["New Zealand", "New Zealand"], ["Nicaragua", "Nicaragua"], ["Niger", "Niger"], ["Nigeria", "Nigeria"], ["Niue", "Niue"], ["Norfolk Island", "Norfolk Island"], ["Northern Mariana Islands", "Northern Mariana Islands"], ["Norway", "Norway"], ["Oman", "Oman"], ["Pakistan", "Pakistan"], ["Palau", "Palau"], ["Palestinian Territory, Occupied", "Palestinian Territory, Occupied"], ["Panama", "Panama"], ["Papua New Guinea", "Papua New Guinea"], ["Paraguay", "Paraguay"], ["Peru", "Peru"], ["Philippines", "Philippines"], ["Pitcairn", "Pitcairn"], ["Poland", "Poland"], ["Portugal", "Portugal"], ["Puerto Rico", "Puerto Rico"], ["Qatar", "Qatar"], ["Reunion", "Reunion"], ["Romania", "Romania"], ["Russian Federation", "Russian Federation"], ["Rwanda", "Rwanda"], ["Saint Helena", "Saint Helena"], ["Saint Kitts and Nevis", "Saint Kitts and Nevis"], ["Saint Lucia", "Saint Lucia"], ["Saint Pierre and Miquelon", "Saint Pierre and Miquelon"], ["Saint Vincent and The Grenadines", "Saint Vincent and The Grenadines"], ["Samoa", "Samoa"], ["San Marino", "San Marino"], ["Sao Tome and Principe", "Sao Tome and Principe"], ["Saudi Arabia", "Saudi Arabia"], ["Senegal", "Senegal"], ["Serbia and Montenegro", "Serbia and Montenegro"], ["Seychelles", "Seychelles"], ["Sierra Leone", "Sierra Leone"], ["Singapore", "Singapore"], ["Slovakia", "Slovakia"], ["Slovenia", "Slovenia"], ["Solomon Islands", "Solomon Islands"], ["Somalia", "Somalia"], ["South Africa", "South Africa"], ["South Georgia and The South Sandwich Islands", "South Georgia and The South Sandwich Islands"], ["Spain", "Spain"], ["Sri Lanka", "Sri Lanka"], ["Sudan", "Sudan"], ["Suriname", "Suriname"], ["Svalbard and Jan Mayen", "Svalbard and Jan Mayen"], ["Swaziland", "Swaziland"], ["Sweden", "Sweden"], ["Switzerland", "Switzerland"], ["Syrian Arab Republic", "Syrian Arab Republic"], ["Taiwan, Province of China", "Taiwan, Province of China"], ["Tajikistan", "Tajikistan"], ["Tanzania, United Republic of", "Tanzania, United Republic of"], ["Thailand", "Thailand"], ["Timor-leste", "Timor-leste"], ["Togo", "Togo"], ["Tokelau", "Tokelau"], ["Tonga", "Tonga"], ["Trinidad and Tobago", "Trinidad and Tobago"], ["Tunisia", "Tunisia"], ["Turkey", "Turkey"], ["Turkmenistan", "Turkmenistan"], ["Turks and Caicos Islands", "Turks and Caicos Islands"], ["Tuvalu", "Tuvalu"], ["Uganda", "Uganda"], ["Ukraine", "Ukraine"], ["United Arab Emirates", "United Arab Emirates"], ["United Kingdom", "United Kingdom"], ["United States", "United States"], ["United States Minor Outlying Islands", "US Minor Islands"], ["Uruguay", "Uruguay"], ["Uzbekistan", "Uzbekistan"], ["Vanuatu", "Vanuatu"], ["Venezuela", "Venezuela"], ["Viet Nam", "Viet Nam"], ["Virgin Islands, British", "Virgin Islands, British"], ["Virgin Islands, U.S.", "Virgin Islands, U.S."], ["Wallis and Futuna", "Wallis and Futuna"], ["Western Sahara", "Western Sahara"], ["Yemen", "Yemen"], ["Zambia", "Zambia"], ["Zimbabwe", "Zimbabwe"]], @order.country), {}, :class => "select2 form-control input-transparent");if all_services(@cart.id) then; [Escaped Output] check_box_tag(:same_address); [Escaped Output] d4x_sanitizer(t("shipping address is billing address")); [Escaped Output] d4x_sanitizer(t("shipping details")); [Escaped Output] f.text_field(:shipping_first_name, :class => " form-control", :maxlength => 50, :placeholder => "Shipping First Name"); [Escaped Output] f.text_field(:shipping_last_name, :class => " form-control", :placeholder => d4x_sanitizer(t("lastname"))); [Escaped Output] f.text_field(:shipping_address, :class => " form-control", :placeholder => d4x_sanitizer(t("shipping address"))); [Escaped Output] f.text_field(:shipping_town, :class => " form-control", :placeholder => d4x_sanitizer(t("shipping town"))); [Escaped Output] f.text_field(:shipping_city, :class => " form-control", :placeholder => d4x_sanitizer(t("shipping city"))); [Escaped Output] f.text_field(:shipping_zip, :class => " form-control", :placeholder => d4x_sanitizer(t("shipping zip")), :maxlength => 5); [Escaped Output] f.select(:shipping_country, options_for_select([["United States", "United States"], ["United Kingdom", "United Kingdom"], ["Afghanistan", "Afghanistan"], ["Albania", "Albania"], ["Algeria", "Algeria"], ["American Samoa", "American Samoa"], ["Andorra", "Andorra"], ["Angola", "Angola"], ["Anguilla", "Anguilla"], ["Antarctica", "Antarctica"], ["Antigua and Barbuda", "Antigua and Barbuda"], ["Argentina", "Argentina"], ["Armenia", "Armenia"], ["Aruba", "Aruba"], ["Australia", "Australia"], ["Austria", "Austria"], ["Azerbaijan", "Azerbaijan"], ["Bahamas", "Bahamas"], ["Bahrain", "Bahrain"], ["Bangladesh", "Bangladesh"], ["Barbados", "Barbadados"], ["Belarus", "Belarus"], ["Belgium", "Belgium"], ["Belize", "Belize"], ["Benin", "Benin"], ["Bermuda", "Bermuda"], ["Bhutan", "Bhutan"], ["Bolivia", "Bolivia"], ["Bosnia and Heimage_tagrzegovina", "Bosnia and Herzegovina"], ["Botswana", "Botswana"], ["Bouvet Island", "Bouvet Island"], ["Brazil", "Brazil"], ["British Indian Ocean Territory", "British Indian Ocean Territory"], ["Brunei Darussalam", "Brunei Darussalam"], ["Bulgaria", "Bulgaria"], ["Burkina Faso", "Burkina Faso"], ["Burundi", "Burundi"], ["Cambodia", "Cambodia"], ["Cameroon", "Cameroon"], ["Canada", "Canada"], ["Cape Verde", "Cape Verde,"], ["Cayman Islands", "Cayman Islands"], ["Central African Republic", "Central African Republic"], ["Chad", "Chad"], ["Chile", "Chile"], ["China", "China"], ["Christmas Island", "Christmas Island"], ["Cocos (Keeling) Islands", "Cocos (Keeling) Islands"], ["Colombia", "Colombia"], ["Comoros", "Comoros"], ["Congo", "Congo"], ["Congo, The Democratic Republic of The", "Congo, The Democratic Republic of The"], ["Cook Islands", "Cook Islands"], ["Costa Rica", "Costa Rica"], ["Cote Ivoire", "Cote D Ivoire"], ["Croatia", "Croatia"], ["Cuba", "Cuba"], ["Cyprus", "Cyprus"], ["Czech Republic", "Czech Republic"], ["Denmark", "Denmark"], ["Djibouti", "Djibouti"], ["Dominica", "Dominica"], ["Dominican Republic", "Dominican Republic"], ["Ecuador", "Ecuador"], ["Egypt", "Egypt"], ["El Salvador", "El Salvador"], ["Equatorial Guinea", "Equatorial Guinea"], ["Eritrea", "Eritrea"], ["Estonia", "Estonia"], ["Ethiopia", "Ethiopia"], ["Falkland Islands (Malvinas)", "Falkland Islands (Malvinas)"], ["Faroe Islands", "Faroe Islands"], ["Fiji", "Fiji"], ["Finland", "Finland"], ["France", "France"], ["French Guiana", "French Guiana"], ["French Polynesia", "French Polynesia"], ["French Southern Territories", "French Southern Territories"], ["Gabon", "Gabon"], ["Gambia", "Gambia"], ["Georgia", "Georgia"], ["Germany", "Germany"], ["Ghana", "Ghana"], ["Gibraltar", "Gibraltar"], ["Greece", "Greece"], ["Greenland", "Greenland"], ["Grenada", "Grenada"], ["Guadeloupe", "Guadeloupe"], ["Guam", "Guam"], ["Guatemala", "Guatemala"], ["Guinea", "Guinea"], ["Guinea-bissau", "Guinea-bissau"], ["Guyana", "Guyana"], ["Haiti", "Haiti"], ["Heard Island and Mcdonald Islands", "Heard Island and Mcdonald Islands"], ["Holy See (Vatican City State)", "Holy See (Vatican City State)"], ["Honduras", "Honduras"], ["Hong Kong", "Hon g Kong"], ["Hungary", "Hungary"], ["Iceland", "Iceland"], ["India", "India"], ["Indonesia", "Indonesia"], ["Iran, Islamic Republic of", "Iran, Islamic Republic of"], ["Iraq", "Iraq"], ["Ireland", "Ireland"], ["Israel", "Israel"], ["Italy", "Italy"], ["Jamaica", "Jamaica"], ["Japan", "Japan"], ["Jordan", "Jordan"], ["Kazakhstan", "Kazakhstan"], ["Kenya", "Kenya"], ["Kiribati", "Kiribati"], ["Korea, Democratic People Republic of", "Korea, Democratic People Republic of"], ["Korea, Republic of", "Korea, Republic of"], ["Kuwait", "Kuwait"], ["Kyrgyzstan", "Kyrgyzstan"], ["Lao People Democratic Republic", "Lao People Democratic Republic"], ["Latvia", "Latvia"], ["Lebanon", "Lebanon"], ["Lesotho", "Lesotho"], ["Liberia", "Liberia"], ["Libyan Arab Jamahiriya", "Libyan Arab Jamahiriya"], ["Liechtenstein", "Liechtenstein"], ["Lithuania", "Lithuania"], ["Luxembourg", "Luxembourg"], ["Macao", "Macao"], ["Macedonia, The Former Yugoslav Republic of", "Macedonia, The Former Yugoslav Republic of"], ["Madagascar", "Madagascar"], ["Malawi", "Malawi"], ["Malaysia", "Malaysia"], ["Maldives", "Maldives"], ["Mali", "Mali"], ["Malta", "Malta"], ["Marshall Islands", "Marshall Islands"], ["Martinique", "Martinique"], ["Mauritania", "Mauritania"], ["Mauritius", "Mauritius"], ["Mayotte", "Mayotte"], ["Mexico", "Mexico"], ["Micronesia, Federated States of", "Micronesia, Federated States of"], ["Moldova, Republic of", "Moldova, Republic of"], ["Monaco", "Monaco"], ["Mongolia", "Mongolia"], ["Montserrat", "Montserrat"], ["Morocco", "Morocco"], ["Mozambique", "Mozambique"], ["Myanmar", "Myanmar"], ["Namibia", "Namibia"], ["Nauru", "Nauru"], ["Nepal", "Nepal"], ["Netherlands", "Netherlands"], ["Netherlands Antilles", "Netherlands Antilles"], ["New Caledonia", "New Caledonia"], ["New Zealand", "New Zealand"], ["Nicaragua", "Nicaragua"], ["Niger", "Niger"], ["Nigeria", "Nigeria"], ["Niue", "Niue"], ["Norfolk Island", "Norfolk Island"], ["Northern Mariana Islands", "Northern Mariana Islands"], ["Norway", "Norway"], ["Oman", "Oman"], ["Pakistan", "Pakistan"], ["Palau", "Palau"], ["Palestinian Territory, Occupied", "Palestinian Territory, Occupied"], ["Panama", "Panama"], ["Papua New Guinea", "Papua New Guinea"], ["Paraguay", "Paraguay"], ["Peru", "Peru"], ["Philippines", "Philippines"], ["Pitcairn", "Pitcairn"], ["Poland", "Poland"], ["Portugal", "Portugal"], ["Puerto Rico", "Puerto Rico"], ["Qatar", "Qatar"], ["Reunion", "Reunion"], ["Romania", "Romania"], ["Russian Federation", "Russian Federation"], ["Rwanda", "Rwanda"], ["Saint Helena", "Saint Helena"], ["Saint Kitts and Nevis", "Saint Kitts and Nevis"], ["Saint Lucia", "Saint Lucia"], ["Saint Pierre and Miquelon", "Saint Pierre and Miquelon"], ["Saint Vincent and The Grenadines", "Saint Vincent and The Grenadines"], ["Samoa", "Samoa"], ["San Marino", "San Marino"], ["Sao Tome and Principe", "Sao Tome and Principe"], ["Saudi Arabia", "Saudi Arabia"], ["Senegal", "Senegal"], ["Serbia and Montenegro", "Serbia and Montenegro"], ["Seychelles", "Seychelles"], ["Sierra Leone", "Sierra Leone"], ["Singapore", "Singapore"], ["Slovakia", "Slovakia"], ["Slovenia", "Slovenia"], ["Solomon Islands", "Solomon Islands"], ["Somalia", "Somalia"], ["South Africa", "South Africa"], ["South Georgia and The South Sandwich Islands", "South Georgia and The South Sandwich Islands"], ["Spain", "Spain"], ["Sri Lanka", "Sri Lanka"], ["Sudan", "Sudan"], ["Suriname", "Suriname"], ["Svalbard and Jan Mayen", "Svalbard and Jan Mayen"], ["Swaziland", "Swaziland"], ["Sweden", "Sweden"], ["Switzerland", "Switzerland"], ["Syrian Arab Republic", "Syrian Arab Republic"], ["Taiwan, Province of China", "Taiwan, Province of China"], ["Tajikistan", "Tajikistan"], ["Tanzania, United Republic of", "Tanzania, United Republic of"], ["Thailand", "Thailand"], ["Timor-leste", "Timor-leste"], ["Togo", "Togo"], ["Tokelau", "Tokelau"], ["Tonga", "Tonga"], ["Trinidad and Tobago", "Trinidad and Tobago"], ["Tunisia", "Tunisia"], ["Turkey", "Turkey"], ["Turkmenistan", "Turkmenistan"], ["Turks and Caicos Islands", "Turks and Caicos Islands"], ["Tuvalu", "Tuvalu"], ["Uganda", "Uganda"], ["Ukraine", "Ukraine"], ["United Arab Emirates", "United Arab Emirates"], ["United Kingdom", "United Kingdom"], ["United States", "United States"], ["United States Minor Outlying Islands", "US Minor Islands"], ["Uruguay", "Uruguay"], ["Uzbekistan", "Uzbekistan"], ["Vanuatu", "Vanuatu"], ["Venezuela", "Venezuela"], ["Viet Nam", "Viet Nam"], ["Virgin Islands, British", "Virgin Islands, British"], ["Virgin Islands, U.S.", "Virgin Islands, U.S."], ["Wallis and Futuna", "Wallis and Futuna"], ["Western Sahara", "Western Sahara"], ["Yemen", "Yemen"], ["Zambia", "Zambia"], ["Zimbabwe", "Zimbabwe"]], @order.shipping_country), {}, :class => "select2 form-control input-transparent"); [Escaped Output] f.text_field(:shipping_telephone, :class => " form-control", :maxlength => 50, :placeholder => d4x_sanitizer(t("shipping telephone"))); [Escaped Output] f.text_area(:customer_notes, :class => "form-control", :size => "100x5", :placeholder => d4x_sanitizer(t("notes for delivery")));end;[Escaped Output] check_box_tag(:agreement, nil, false);[Escaped Output] link_to(d4x_sanitizer(t("i agree with terms and conditions")), "/terms");[Escaped Output] f.submit(d4x_sanitizer(t("place order")), :class => "btn btn-outline-primary", :id => "place-order"); end

orders/_form.["OrdersController#edit", "Template:orders/edit"]

[Escaped Output] javascript_include_tag("d4x-order.js")
[Escaped Output] hidden_field_tag(:cart_id, Order.find(params[:id]).cart_id)
[Escaped Output] d4x_sanitizer(t("place order"))
[Escaped Output] FormBuilder.new.text_field(:first_name, :class => " form-control", :placeholder => d4x_sanitizer(t("firstname")))
[Escaped Output] FormBuilder.new.text_field(:last_name, :class => " form-control", :placeholder => d4x_sanitizer(t("lastname")))
[Escaped Output] FormBuilder.new.text_field(:address, :class => " form-control", :placeholder => d4x_sanitizer(t("address")))
[Escaped Output] FormBuilder.new.text_field(:town, :class => " form-control", :placeholder => d4x_sanitizer(t("town")))
[Escaped Output] FormBuilder.new.text_field(:city, :class => " form-control", :placeholder => d4x_sanitizer(t("city")))
[Escaped Output] FormBuilder.new.text_field(:zip, :class => " form-control", :placeholder => d4x_sanitizer(t("ZIP")), :maxlength => 5)
[Escaped Output] FormBuilder.new.text_field(:telephone, :class => " form-control", :maxlength => 50, :placeholder => d4x_sanitizer(t("telephone")))
[Escaped Output] FormBuilder.new.select(:country, options_for_select([["United States", "United States"], ["United Kingdom", "United Kingdom"], ["Afghanistan", "Afghanistan"], ["Albania", "Albania"], ["Algeria", "Algeria"], ["American Samoa", "American Samoa"], ["Andorra", "Andorra"], ["Angola", "Angola"], ["Anguilla", "Anguilla"], ["Antarctica", "Antarctica"], ["Antigua and Barbuda", "Antigua and Barbuda"], ["Argentina", "Argentina"], ["Armenia", "Armenia"], ["Aruba", "Aruba"], ["Australia", "Australia"], ["Austria", "Austria"], ["Azerbaijan", "Azerbaijan"], ["Bahamas", "Bahamas"], ["Bahrain", "Bahrain"], ["Bangladesh", "Bangladesh"], ["Barbados", "Barbadados"], ["Belarus", "Belarus"], ["Belgium", "Belgium"], ["Belize", "Belize"], ["Benin", "Benin"], ["Bermuda", "Bermuda"], ["Bhutan", "Bhutan"], ["Bolivia", "Bolivia"], ["Bosnia and Heimage_tagrzegovina", "Bosnia and Herzegovina"], ["Botswana", "Botswana"], ["Bouvet Island", "Bouvet Island"], ["Brazil", "Brazil"], ["British Indian Ocean Territory", "British Indian Ocean Territory"], ["Brunei Darussalam", "Brunei Darussalam"], ["Bulgaria", "Bulgaria"], ["Burkina Faso", "Burkina Faso"], ["Burundi", "Burundi"], ["Cambodia", "Cambodia"], ["Cameroon", "Cameroon"], ["Canada", "Canada"], ["Cape Verde", "Cape Verde,"], ["Cayman Islands", "Cayman Islands"], ["Central African Republic", "Central African Republic"], ["Chad", "Chad"], ["Chile", "Chile"], ["China", "China"], ["Christmas Island", "Christmas Island"], ["Cocos (Keeling) Islands", "Cocos (Keeling) Islands"], ["Colombia", "Colombia"], ["Comoros", "Comoros"], ["Congo", "Congo"], ["Congo, The Democratic Republic of The", "Congo, The Democratic Republic of The"], ["Cook Islands", "Cook Islands"], ["Costa Rica", "Costa Rica"], ["Cote Ivoire", "Cote D Ivoire"], ["Croatia", "Croatia"], ["Cuba", "Cuba"], ["Cyprus", "Cyprus"], ["Czech Republic", "Czech Republic"], ["Denmark", "Denmark"], ["Djibouti", "Djibouti"], ["Dominica", "Dominica"], ["Dominican Republic", "Dominican Republic"], ["Ecuador", "Ecuador"], ["Egypt", "Egypt"], ["El Salvador", "El Salvador"], ["Equatorial Guinea", "Equatorial Guinea"], ["Eritrea", "Eritrea"], ["Estonia", "Estonia"], ["Ethiopia", "Ethiopia"], ["Falkland Islands (Malvinas)", "Falkland Islands (Malvinas)"], ["Faroe Islands", "Faroe Islands"], ["Fiji", "Fiji"], ["Finland", "Finland"], ["France", "France"], ["French Guiana", "French Guiana"], ["French Polynesia", "French Polynesia"], ["French Southern Territories", "French Southern Territories"], ["Gabon", "Gabon"], ["Gambia", "Gambia"], ["Georgia", "Georgia"], ["Germany", "Germany"], ["Ghana", "Ghana"], ["Gibraltar", "Gibraltar"], ["Greece", "Greece"], ["Greenland", "Greenland"], ["Grenada", "Grenada"], ["Guadeloupe", "Guadeloupe"], ["Guam", "Guam"], ["Guatemala", "Guatemala"], ["Guinea", "Guinea"], ["Guinea-bissau", "Guinea-bissau"], ["Guyana", "Guyana"], ["Haiti", "Haiti"], ["Heard Island and Mcdonald Islands", "Heard Island and Mcdonald Islands"], ["Holy See (Vatican City State)", "Holy See (Vatican City State)"], ["Honduras", "Honduras"], ["Hong Kong", "Hon g Kong"], ["Hungary", "Hungary"], ["Iceland", "Iceland"], ["India", "India"], ["Indonesia", "Indonesia"], ["Iran, Islamic Republic of", "Iran, Islamic Republic of"], ["Iraq", "Iraq"], ["Ireland", "Ireland"], ["Israel", "Israel"], ["Italy", "Italy"], ["Jamaica", "Jamaica"], ["Japan", "Japan"], ["Jordan", "Jordan"], ["Kazakhstan", "Kazakhstan"], ["Kenya", "Kenya"], ["Kiribati", "Kiribati"], ["Korea, Democratic People Republic of", "Korea, Democratic People Republic of"], ["Korea, Republic of", "Korea, Republic of"], ["Kuwait", "Kuwait"], ["Kyrgyzstan", "Kyrgyzstan"], ["Lao People Democratic Republic", "Lao People Democratic Republic"], ["Latvia", "Latvia"], ["Lebanon", "Lebanon"], ["Lesotho", "Lesotho"], ["Liberia", "Liberia"], ["Libyan Arab Jamahiriya", "Libyan Arab Jamahiriya"], ["Liechtenstein", "Liechtenstein"], ["Lithuania", "Lithuania"], ["Luxembourg", "Luxembourg"], ["Macao", "Macao"], ["Macedonia, The Former Yugoslav Republic of", "Macedonia, The Former Yugoslav Republic of"], ["Madagascar", "Madagascar"], ["Malawi", "Malawi"], ["Malaysia", "Malaysia"], ["Maldives", "Maldives"], ["Mali", "Mali"], ["Malta", "Malta"], ["Marshall Islands", "Marshall Islands"], ["Martinique", "Martinique"], ["Mauritania", "Mauritania"], ["Mauritius", "Mauritius"], ["Mayotte", "Mayotte"], ["Mexico", "Mexico"], ["Micronesia, Federated States of", "Micronesia, Federated States of"], ["Moldova, Republic of", "Moldova, Republic of"], ["Monaco", "Monaco"], ["Mongolia", "Mongolia"], ["Montserrat", "Montserrat"], ["Morocco", "Morocco"], ["Mozambique", "Mozambique"], ["Myanmar", "Myanmar"], ["Namibia", "Namibia"], ["Nauru", "Nauru"], ["Nepal", "Nepal"], ["Netherlands", "Netherlands"], ["Netherlands Antilles", "Netherlands Antilles"], ["New Caledonia", "New Caledonia"], ["New Zealand", "New Zealand"], ["Nicaragua", "Nicaragua"], ["Niger", "Niger"], ["Nigeria", "Nigeria"], ["Niue", "Niue"], ["Norfolk Island", "Norfolk Island"], ["Northern Mariana Islands", "Northern Mariana Islands"], ["Norway", "Norway"], ["Oman", "Oman"], ["Pakistan", "Pakistan"], ["Palau", "Palau"], ["Palestinian Territory, Occupied", "Palestinian Territory, Occupied"], ["Panama", "Panama"], ["Papua New Guinea", "Papua New Guinea"], ["Paraguay", "Paraguay"], ["Peru", "Peru"], ["Philippines", "Philippines"], ["Pitcairn", "Pitcairn"], ["Poland", "Poland"], ["Portugal", "Portugal"], ["Puerto Rico", "Puerto Rico"], ["Qatar", "Qatar"], ["Reunion", "Reunion"], ["Romania", "Romania"], ["Russian Federation", "Russian Federation"], ["Rwanda", "Rwanda"], ["Saint Helena", "Saint Helena"], ["Saint Kitts and Nevis", "Saint Kitts and Nevis"], ["Saint Lucia", "Saint Lucia"], ["Saint Pierre and Miquelon", "Saint Pierre and Miquelon"], ["Saint Vincent and The Grenadines", "Saint Vincent and The Grenadines"], ["Samoa", "Samoa"], ["San Marino", "San Marino"], ["Sao Tome and Principe", "Sao Tome and Principe"], ["Saudi Arabia", "Saudi Arabia"], ["Senegal", "Senegal"], ["Serbia and Montenegro", "Serbia and Montenegro"], ["Seychelles", "Seychelles"], ["Sierra Leone", "Sierra Leone"], ["Singapore", "Singapore"], ["Slovakia", "Slovakia"], ["Slovenia", "Slovenia"], ["Solomon Islands", "Solomon Islands"], ["Somalia", "Somalia"], ["South Africa", "South Africa"], ["South Georgia and The South Sandwich Islands", "South Georgia and The South Sandwich Islands"], ["Spain", "Spain"], ["Sri Lanka", "Sri Lanka"], ["Sudan", "Sudan"], ["Suriname", "Suriname"], ["Svalbard and Jan Mayen", "Svalbard and Jan Mayen"], ["Swaziland", "Swaziland"], ["Sweden", "Sweden"], ["Switzerland", "Switzerland"], ["Syrian Arab Republic", "Syrian Arab Republic"], ["Taiwan, Province of China", "Taiwan, Province of China"], ["Tajikistan", "Tajikistan"], ["Tanzania, United Republic of", "Tanzania, United Republic of"], ["Thailand", "Thailand"], ["Timor-leste", "Timor-leste"], ["Togo", "Togo"], ["Tokelau", "Tokelau"], ["Tonga", "Tonga"], ["Trinidad and Tobago", "Trinidad and Tobago"], ["Tunisia", "Tunisia"], ["Turkey", "Turkey"], ["Turkmenistan", "Turkmenistan"], ["Turks and Caicos Islands", "Turks and Caicos Islands"], ["Tuvalu", "Tuvalu"], ["Uganda", "Uganda"], ["Ukraine", "Ukraine"], ["United Arab Emirates", "United Arab Emirates"], ["United Kingdom", "United Kingdom"], ["United States", "United States"], ["United States Minor Outlying Islands", "US Minor Islands"], ["Uruguay", "Uruguay"], ["Uzbekistan", "Uzbekistan"], ["Vanuatu", "Vanuatu"], ["Venezuela", "Venezuela"], ["Viet Nam", "Viet Nam"], ["Virgin Islands, British", "Virgin Islands, British"], ["Virgin Islands, U.S.", "Virgin Islands, U.S."], ["Wallis and Futuna", "Wallis and Futuna"], ["Western Sahara", "Western Sahara"], ["Yemen", "Yemen"], ["Zambia", "Zambia"], ["Zimbabwe", "Zimbabwe"]], Order.find(params[:id]).country), {}, :class => "select2 form-control input-transparent")
[Escaped Output] check_box_tag(:same_address)
[Escaped Output] d4x_sanitizer(t("shipping address is billing address"))
[Escaped Output] d4x_sanitizer(t("shipping details"))
[Escaped Output] FormBuilder.new.text_field(:shipping_first_name, :class => " form-control", :maxlength => 50, :placeholder => "Shipping First Name")
[Escaped Output] FormBuilder.new.text_field(:shipping_last_name, :class => " form-control", :placeholder => d4x_sanitizer(t("lastname")))
[Escaped Output] FormBuilder.new.text_field(:shipping_address, :class => " form-control", :placeholder => d4x_sanitizer(t("shipping address")))
[Escaped Output] FormBuilder.new.text_field(:shipping_town, :class => " form-control", :placeholder => d4x_sanitizer(t("shipping town")))
[Escaped Output] FormBuilder.new.text_field(:shipping_city, :class => " form-control", :placeholder => d4x_sanitizer(t("shipping city")))
[Escaped Output] FormBuilder.new.text_field(:shipping_zip, :class => " form-control", :placeholder => d4x_sanitizer(t("shipping zip")), :maxlength => 5)
[Escaped Output] FormBuilder.new.select(:shipping_country, options_for_select([["United States", "United States"], ["United Kingdom", "United Kingdom"], ["Afghanistan", "Afghanistan"], ["Albania", "Albania"], ["Algeria", "Algeria"], ["American Samoa", "American Samoa"], ["Andorra", "Andorra"], ["Angola", "Angola"], ["Anguilla", "Anguilla"], ["Antarctica", "Antarctica"], ["Antigua and Barbuda", "Antigua and Barbuda"], ["Argentina", "Argentina"], ["Armenia", "Armenia"], ["Aruba", "Aruba"], ["Australia", "Australia"], ["Austria", "Austria"], ["Azerbaijan", "Azerbaijan"], ["Bahamas", "Bahamas"], ["Bahrain", "Bahrain"], ["Bangladesh", "Bangladesh"], ["Barbados", "Barbadados"], ["Belarus", "Belarus"], ["Belgium", "Belgium"], ["Belize", "Belize"], ["Benin", "Benin"], ["Bermuda", "Bermuda"], ["Bhutan", "Bhutan"], ["Bolivia", "Bolivia"], ["Bosnia and Heimage_tagrzegovina", "Bosnia and Herzegovina"], ["Botswana", "Botswana"], ["Bouvet Island", "Bouvet Island"], ["Brazil", "Brazil"], ["British Indian Ocean Territory", "British Indian Ocean Territory"], ["Brunei Darussalam", "Brunei Darussalam"], ["Bulgaria", "Bulgaria"], ["Burkina Faso", "Burkina Faso"], ["Burundi", "Burundi"], ["Cambodia", "Cambodia"], ["Cameroon", "Cameroon"], ["Canada", "Canada"], ["Cape Verde", "Cape Verde,"], ["Cayman Islands", "Cayman Islands"], ["Central African Republic", "Central African Republic"], ["Chad", "Chad"], ["Chile", "Chile"], ["China", "China"], ["Christmas Island", "Christmas Island"], ["Cocos (Keeling) Islands", "Cocos (Keeling) Islands"], ["Colombia", "Colombia"], ["Comoros", "Comoros"], ["Congo", "Congo"], ["Congo, The Democratic Republic of The", "Congo, The Democratic Republic of The"], ["Cook Islands", "Cook Islands"], ["Costa Rica", "Costa Rica"], ["Cote Ivoire", "Cote D Ivoire"], ["Croatia", "Croatia"], ["Cuba", "Cuba"], ["Cyprus", "Cyprus"], ["Czech Republic", "Czech Republic"], ["Denmark", "Denmark"], ["Djibouti", "Djibouti"], ["Dominica", "Dominica"], ["Dominican Republic", "Dominican Republic"], ["Ecuador", "Ecuador"], ["Egypt", "Egypt"], ["El Salvador", "El Salvador"], ["Equatorial Guinea", "Equatorial Guinea"], ["Eritrea", "Eritrea"], ["Estonia", "Estonia"], ["Ethiopia", "Ethiopia"], ["Falkland Islands (Malvinas)", "Falkland Islands (Malvinas)"], ["Faroe Islands", "Faroe Islands"], ["Fiji", "Fiji"], ["Finland", "Finland"], ["France", "France"], ["French Guiana", "French Guiana"], ["French Polynesia", "French Polynesia"], ["French Southern Territories", "French Southern Territories"], ["Gabon", "Gabon"], ["Gambia", "Gambia"], ["Georgia", "Georgia"], ["Germany", "Germany"], ["Ghana", "Ghana"], ["Gibraltar", "Gibraltar"], ["Greece", "Greece"], ["Greenland", "Greenland"], ["Grenada", "Grenada"], ["Guadeloupe", "Guadeloupe"], ["Guam", "Guam"], ["Guatemala", "Guatemala"], ["Guinea", "Guinea"], ["Guinea-bissau", "Guinea-bissau"], ["Guyana", "Guyana"], ["Haiti", "Haiti"], ["Heard Island and Mcdonald Islands", "Heard Island and Mcdonald Islands"], ["Holy See (Vatican City State)", "Holy See (Vatican City State)"], ["Honduras", "Honduras"], ["Hong Kong", "Hon g Kong"], ["Hungary", "Hungary"], ["Iceland", "Iceland"], ["India", "India"], ["Indonesia", "Indonesia"], ["Iran, Islamic Republic of", "Iran, Islamic Republic of"], ["Iraq", "Iraq"], ["Ireland", "Ireland"], ["Israel", "Israel"], ["Italy", "Italy"], ["Jamaica", "Jamaica"], ["Japan", "Japan"], ["Jordan", "Jordan"], ["Kazakhstan", "Kazakhstan"], ["Kenya", "Kenya"], ["Kiribati", "Kiribati"], ["Korea, Democratic People Republic of", "Korea, Democratic People Republic of"], ["Korea, Republic of", "Korea, Republic of"], ["Kuwait", "Kuwait"], ["Kyrgyzstan", "Kyrgyzstan"], ["Lao People Democratic Republic", "Lao People Democratic Republic"], ["Latvia", "Latvia"], ["Lebanon", "Lebanon"], ["Lesotho", "Lesotho"], ["Liberia", "Liberia"], ["Libyan Arab Jamahiriya", "Libyan Arab Jamahiriya"], ["Liechtenstein", "Liechtenstein"], ["Lithuania", "Lithuania"], ["Luxembourg", "Luxembourg"], ["Macao", "Macao"], ["Macedonia, The Former Yugoslav Republic of", "Macedonia, The Former Yugoslav Republic of"], ["Madagascar", "Madagascar"], ["Malawi", "Malawi"], ["Malaysia", "Malaysia"], ["Maldives", "Maldives"], ["Mali", "Mali"], ["Malta", "Malta"], ["Marshall Islands", "Marshall Islands"], ["Martinique", "Martinique"], ["Mauritania", "Mauritania"], ["Mauritius", "Mauritius"], ["Mayotte", "Mayotte"], ["Mexico", "Mexico"], ["Micronesia, Federated States of", "Micronesia, Federated States of"], ["Moldova, Republic of", "Moldova, Republic of"], ["Monaco", "Monaco"], ["Mongolia", "Mongolia"], ["Montserrat", "Montserrat"], ["Morocco", "Morocco"], ["Mozambique", "Mozambique"], ["Myanmar", "Myanmar"], ["Namibia", "Namibia"], ["Nauru", "Nauru"], ["Nepal", "Nepal"], ["Netherlands", "Netherlands"], ["Netherlands Antilles", "Netherlands Antilles"], ["New Caledonia", "New Caledonia"], ["New Zealand", "New Zealand"], ["Nicaragua", "Nicaragua"], ["Niger", "Niger"], ["Nigeria", "Nigeria"], ["Niue", "Niue"], ["Norfolk Island", "Norfolk Island"], ["Northern Mariana Islands", "Northern Mariana Islands"], ["Norway", "Norway"], ["Oman", "Oman"], ["Pakistan", "Pakistan"], ["Palau", "Palau"], ["Palestinian Territory, Occupied", "Palestinian Territory, Occupied"], ["Panama", "Panama"], ["Papua New Guinea", "Papua New Guinea"], ["Paraguay", "Paraguay"], ["Peru", "Peru"], ["Philippines", "Philippines"], ["Pitcairn", "Pitcairn"], ["Poland", "Poland"], ["Portugal", "Portugal"], ["Puerto Rico", "Puerto Rico"], ["Qatar", "Qatar"], ["Reunion", "Reunion"], ["Romania", "Romania"], ["Russian Federation", "Russian Federation"], ["Rwanda", "Rwanda"], ["Saint Helena", "Saint Helena"], ["Saint Kitts and Nevis", "Saint Kitts and Nevis"], ["Saint Lucia", "Saint Lucia"], ["Saint Pierre and Miquelon", "Saint Pierre and Miquelon"], ["Saint Vincent and The Grenadines", "Saint Vincent and The Grenadines"], ["Samoa", "Samoa"], ["San Marino", "San Marino"], ["Sao Tome and Principe", "Sao Tome and Principe"], ["Saudi Arabia", "Saudi Arabia"], ["Senegal", "Senegal"], ["Serbia and Montenegro", "Serbia and Montenegro"], ["Seychelles", "Seychelles"], ["Sierra Leone", "Sierra Leone"], ["Singapore", "Singapore"], ["Slovakia", "Slovakia"], ["Slovenia", "Slovenia"], ["Solomon Islands", "Solomon Islands"], ["Somalia", "Somalia"], ["South Africa", "South Africa"], ["South Georgia and The South Sandwich Islands", "South Georgia and The South Sandwich Islands"], ["Spain", "Spain"], ["Sri Lanka", "Sri Lanka"], ["Sudan", "Sudan"], ["Suriname", "Suriname"], ["Svalbard and Jan Mayen", "Svalbard and Jan Mayen"], ["Swaziland", "Swaziland"], ["Sweden", "Sweden"], ["Switzerland", "Switzerland"], ["Syrian Arab Republic", "Syrian Arab Republic"], ["Taiwan, Province of China", "Taiwan, Province of China"], ["Tajikistan", "Tajikistan"], ["Tanzania, United Republic of", "Tanzania, United Republic of"], ["Thailand", "Thailand"], ["Timor-leste", "Timor-leste"], ["Togo", "Togo"], ["Tokelau", "Tokelau"], ["Tonga", "Tonga"], ["Trinidad and Tobago", "Trinidad and Tobago"], ["Tunisia", "Tunisia"], ["Turkey", "Turkey"], ["Turkmenistan", "Turkmenistan"], ["Turks and Caicos Islands", "Turks and Caicos Islands"], ["Tuvalu", "Tuvalu"], ["Uganda", "Uganda"], ["Ukraine", "Ukraine"], ["United Arab Emirates", "United Arab Emirates"], ["United Kingdom", "United Kingdom"], ["United States", "United States"], ["United States Minor Outlying Islands", "US Minor Islands"], ["Uruguay", "Uruguay"], ["Uzbekistan", "Uzbekistan"], ["Vanuatu", "Vanuatu"], ["Venezuela", "Venezuela"], ["Viet Nam", "Viet Nam"], ["Virgin Islands, British", "Virgin Islands, British"], ["Virgin Islands, U.S.", "Virgin Islands, U.S."], ["Wallis and Futuna", "Wallis and Futuna"], ["Western Sahara", "Western Sahara"], ["Yemen", "Yemen"], ["Zambia", "Zambia"], ["Zimbabwe", "Zimbabwe"]], Order.find(params[:id]).shipping_country), {}, :class => "select2 form-control input-transparent")
[Escaped Output] FormBuilder.new.text_field(:shipping_telephone, :class => " form-control", :maxlength => 50, :placeholder => d4x_sanitizer(t("shipping telephone")))
[Escaped Output] FormBuilder.new.text_area(:customer_notes, :class => "form-control", :size => "100x5", :placeholder => d4x_sanitizer(t("notes for delivery")))
[Escaped Output] check_box_tag(:agreement, nil, false)
[Escaped Output] link_to(d4x_sanitizer(t("i agree with terms and conditions")), "/terms")
[Escaped Output] FormBuilder.new.submit(d4x_sanitizer(t("place order")), :class => "btn btn-outline-primary", :id => "place-order")
[Escaped Output] form_for(Order.find(params[:id])) do; [Escaped Output] hidden_field_tag(:cart_id, Order.find(params[:id]).cart_id);[Escaped Output] d4x_sanitizer(t("place order"));[Escaped Output] FormBuilder.new.text_field(:first_name, :class => " form-control", :placeholder => d4x_sanitizer(t("firstname")));[Escaped Output] FormBuilder.new.text_field(:last_name, :class => " form-control", :placeholder => d4x_sanitizer(t("lastname")));[Escaped Output] FormBuilder.new.text_field(:address, :class => " form-control", :placeholder => d4x_sanitizer(t("address")));[Escaped Output] FormBuilder.new.text_field(:town, :class => " form-control", :placeholder => d4x_sanitizer(t("town")));[Escaped Output] FormBuilder.new.text_field(:city, :class => " form-control", :placeholder => d4x_sanitizer(t("city")));[Escaped Output] FormBuilder.new.text_field(:zip, :class => " form-control", :placeholder => d4x_sanitizer(t("ZIP")), :maxlength => 5);[Escaped Output] FormBuilder.new.text_field(:telephone, :class => " form-control", :maxlength => 50, :placeholder => d4x_sanitizer(t("telephone")));[Escaped Output] FormBuilder.new.select(:country, options_for_select([["United States", "United States"], ["United Kingdom", "United Kingdom"], ["Afghanistan", "Afghanistan"], ["Albania", "Albania"], ["Algeria", "Algeria"], ["American Samoa", "American Samoa"], ["Andorra", "Andorra"], ["Angola", "Angola"], ["Anguilla", "Anguilla"], ["Antarctica", "Antarctica"], ["Antigua and Barbuda", "Antigua and Barbuda"], ["Argentina", "Argentina"], ["Armenia", "Armenia"], ["Aruba", "Aruba"], ["Australia", "Australia"], ["Austria", "Austria"], ["Azerbaijan", "Azerbaijan"], ["Bahamas", "Bahamas"], ["Bahrain", "Bahrain"], ["Bangladesh", "Bangladesh"], ["Barbados", "Barbadados"], ["Belarus", "Belarus"], ["Belgium", "Belgium"], ["Belize", "Belize"], ["Benin", "Benin"], ["Bermuda", "Bermuda"], ["Bhutan", "Bhutan"], ["Bolivia", "Bolivia"], ["Bosnia and Heimage_tagrzegovina", "Bosnia and Herzegovina"], ["Botswana", "Botswana"], ["Bouvet Island", "Bouvet Island"], ["Brazil", "Brazil"], ["British Indian Ocean Territory", "British Indian Ocean Territory"], ["Brunei Darussalam", "Brunei Darussalam"], ["Bulgaria", "Bulgaria"], ["Burkina Faso", "Burkina Faso"], ["Burundi", "Burundi"], ["Cambodia", "Cambodia"], ["Cameroon", "Cameroon"], ["Canada", "Canada"], ["Cape Verde", "Cape Verde,"], ["Cayman Islands", "Cayman Islands"], ["Central African Republic", "Central African Republic"], ["Chad", "Chad"], ["Chile", "Chile"], ["China", "China"], ["Christmas Island", "Christmas Island"], ["Cocos (Keeling) Islands", "Cocos (Keeling) Islands"], ["Colombia", "Colombia"], ["Comoros", "Comoros"], ["Congo", "Congo"], ["Congo, The Democratic Republic of The", "Congo, The Democratic Republic of The"], ["Cook Islands", "Cook Islands"], ["Costa Rica", "Costa Rica"], ["Cote Ivoire", "Cote D Ivoire"], ["Croatia", "Croatia"], ["Cuba", "Cuba"], ["Cyprus", "Cyprus"], ["Czech Republic", "Czech Republic"], ["Denmark", "Denmark"], ["Djibouti", "Djibouti"], ["Dominica", "Dominica"], ["Dominican Republic", "Dominican Republic"], ["Ecuador", "Ecuador"], ["Egypt", "Egypt"], ["El Salvador", "El Salvador"], ["Equatorial Guinea", "Equatorial Guinea"], ["Eritrea", "Eritrea"], ["Estonia", "Estonia"], ["Ethiopia", "Ethiopia"], ["Falkland Islands (Malvinas)", "Falkland Islands (Malvinas)"], ["Faroe Islands", "Faroe Islands"], ["Fiji", "Fiji"], ["Finland", "Finland"], ["France", "France"], ["French Guiana", "French Guiana"], ["French Polynesia", "French Polynesia"], ["French Southern Territories", "French Southern Territories"], ["Gabon", "Gabon"], ["Gambia", "Gambia"], ["Georgia", "Georgia"], ["Germany", "Germany"], ["Ghana", "Ghana"], ["Gibraltar", "Gibraltar"], ["Greece", "Greece"], ["Greenland", "Greenland"], ["Grenada", "Grenada"], ["Guadeloupe", "Guadeloupe"], ["Guam", "Guam"], ["Guatemala", "Guatemala"], ["Guinea", "Guinea"], ["Guinea-bissau", "Guinea-bissau"], ["Guyana", "Guyana"], ["Haiti", "Haiti"], ["Heard Island and Mcdonald Islands", "Heard Island and Mcdonald Islands"], ["Holy See (Vatican City State)", "Holy See (Vatican City State)"], ["Honduras", "Honduras"], ["Hong Kong", "Hon g Kong"], ["Hungary", "Hungary"], ["Iceland", "Iceland"], ["India", "India"], ["Indonesia", "Indonesia"], ["Iran, Islamic Republic of", "Iran, Islamic Republic of"], ["Iraq", "Iraq"], ["Ireland", "Ireland"], ["Israel", "Israel"], ["Italy", "Italy"], ["Jamaica", "Jamaica"], ["Japan", "Japan"], ["Jordan", "Jordan"], ["Kazakhstan", "Kazakhstan"], ["Kenya", "Kenya"], ["Kiribati", "Kiribati"], ["Korea, Democratic People Republic of", "Korea, Democratic People Republic of"], ["Korea, Republic of", "Korea, Republic of"], ["Kuwait", "Kuwait"], ["Kyrgyzstan", "Kyrgyzstan"], ["Lao People Democratic Republic", "Lao People Democratic Republic"], ["Latvia", "Latvia"], ["Lebanon", "Lebanon"], ["Lesotho", "Lesotho"], ["Liberia", "Liberia"], ["Libyan Arab Jamahiriya", "Libyan Arab Jamahiriya"], ["Liechtenstein", "Liechtenstein"], ["Lithuania", "Lithuania"], ["Luxembourg", "Luxembourg"], ["Macao", "Macao"], ["Macedonia, The Former Yugoslav Republic of", "Macedonia, The Former Yugoslav Republic of"], ["Madagascar", "Madagascar"], ["Malawi", "Malawi"], ["Malaysia", "Malaysia"], ["Maldives", "Maldives"], ["Mali", "Mali"], ["Malta", "Malta"], ["Marshall Islands", "Marshall Islands"], ["Martinique", "Martinique"], ["Mauritania", "Mauritania"], ["Mauritius", "Mauritius"], ["Mayotte", "Mayotte"], ["Mexico", "Mexico"], ["Micronesia, Federated States of", "Micronesia, Federated States of"], ["Moldova, Republic of", "Moldova, Republic of"], ["Monaco", "Monaco"], ["Mongolia", "Mongolia"], ["Montserrat", "Montserrat"], ["Morocco", "Morocco"], ["Mozambique", "Mozambique"], ["Myanmar", "Myanmar"], ["Namibia", "Namibia"], ["Nauru", "Nauru"], ["Nepal", "Nepal"], ["Netherlands", "Netherlands"], ["Netherlands Antilles", "Netherlands Antilles"], ["New Caledonia", "New Caledonia"], ["New Zealand", "New Zealand"], ["Nicaragua", "Nicaragua"], ["Niger", "Niger"], ["Nigeria", "Nigeria"], ["Niue", "Niue"], ["Norfolk Island", "Norfolk Island"], ["Northern Mariana Islands", "Northern Mariana Islands"], ["Norway", "Norway"], ["Oman", "Oman"], ["Pakistan", "Pakistan"], ["Palau", "Palau"], ["Palestinian Territory, Occupied", "Palestinian Territory, Occupied"], ["Panama", "Panama"], ["Papua New Guinea", "Papua New Guinea"], ["Paraguay", "Paraguay"], ["Peru", "Peru"], ["Philippines", "Philippines"], ["Pitcairn", "Pitcairn"], ["Poland", "Poland"], ["Portugal", "Portugal"], ["Puerto Rico", "Puerto Rico"], ["Qatar", "Qatar"], ["Reunion", "Reunion"], ["Romania", "Romania"], ["Russian Federation", "Russian Federation"], ["Rwanda", "Rwanda"], ["Saint Helena", "Saint Helena"], ["Saint Kitts and Nevis", "Saint Kitts and Nevis"], ["Saint Lucia", "Saint Lucia"], ["Saint Pierre and Miquelon", "Saint Pierre and Miquelon"], ["Saint Vincent and The Grenadines", "Saint Vincent and The Grenadines"], ["Samoa", "Samoa"], ["San Marino", "San Marino"], ["Sao Tome and Principe", "Sao Tome and Principe"], ["Saudi Arabia", "Saudi Arabia"], ["Senegal", "Senegal"], ["Serbia and Montenegro", "Serbia and Montenegro"], ["Seychelles", "Seychelles"], ["Sierra Leone", "Sierra Leone"], ["Singapore", "Singapore"], ["Slovakia", "Slovakia"], ["Slovenia", "Slovenia"], ["Solomon Islands", "Solomon Islands"], ["Somalia", "Somalia"], ["South Africa", "South Africa"], ["South Georgia and The South Sandwich Islands", "South Georgia and The South Sandwich Islands"], ["Spain", "Spain"], ["Sri Lanka", "Sri Lanka"], ["Sudan", "Sudan"], ["Suriname", "Suriname"], ["Svalbard and Jan Mayen", "Svalbard and Jan Mayen"], ["Swaziland", "Swaziland"], ["Sweden", "Sweden"], ["Switzerland", "Switzerland"], ["Syrian Arab Republic", "Syrian Arab Republic"], ["Taiwan, Province of China", "Taiwan, Province of China"], ["Tajikistan", "Tajikistan"], ["Tanzania, United Republic of", "Tanzania, United Republic of"], ["Thailand", "Thailand"], ["Timor-leste", "Timor-leste"], ["Togo", "Togo"], ["Tokelau", "Tokelau"], ["Tonga", "Tonga"], ["Trinidad and Tobago", "Trinidad and Tobago"], ["Tunisia", "Tunisia"], ["Turkey", "Turkey"], ["Turkmenistan", "Turkmenistan"], ["Turks and Caicos Islands", "Turks and Caicos Islands"], ["Tuvalu", "Tuvalu"], ["Uganda", "Uganda"], ["Ukraine", "Ukraine"], ["United Arab Emirates", "United Arab Emirates"], ["United Kingdom", "United Kingdom"], ["United States", "United States"], ["United States Minor Outlying Islands", "US Minor Islands"], ["Uruguay", "Uruguay"], ["Uzbekistan", "Uzbekistan"], ["Vanuatu", "Vanuatu"], ["Venezuela", "Venezuela"], ["Viet Nam", "Viet Nam"], ["Virgin Islands, British", "Virgin Islands, British"], ["Virgin Islands, U.S.", "Virgin Islands, U.S."], ["Wallis and Futuna", "Wallis and Futuna"], ["Western Sahara", "Western Sahara"], ["Yemen", "Yemen"], ["Zambia", "Zambia"], ["Zimbabwe", "Zimbabwe"]], Order.find(params[:id]).country), {}, :class => "select2 form-control input-transparent");if all_services(@cart.id) then; [Escaped Output] check_box_tag(:same_address); [Escaped Output] d4x_sanitizer(t("shipping address is billing address")); [Escaped Output] d4x_sanitizer(t("shipping details")); [Escaped Output] FormBuilder.new.text_field(:shipping_first_name, :class => " form-control", :maxlength => 50, :placeholder => "Shipping First Name"); [Escaped Output] FormBuilder.new.text_field(:shipping_last_name, :class => " form-control", :placeholder => d4x_sanitizer(t("lastname"))); [Escaped Output] FormBuilder.new.text_field(:shipping_address, :class => " form-control", :placeholder => d4x_sanitizer(t("shipping address"))); [Escaped Output] FormBuilder.new.text_field(:shipping_town, :class => " form-control", :placeholder => d4x_sanitizer(t("shipping town"))); [Escaped Output] FormBuilder.new.text_field(:shipping_city, :class => " form-control", :placeholder => d4x_sanitizer(t("shipping city"))); [Escaped Output] FormBuilder.new.text_field(:shipping_zip, :class => " form-control", :placeholder => d4x_sanitizer(t("shipping zip")), :maxlength => 5); [Escaped Output] FormBuilder.new.select(:shipping_country, options_for_select([["United States", "United States"], ["United Kingdom", "United Kingdom"], ["Afghanistan", "Afghanistan"], ["Albania", "Albania"], ["Algeria", "Algeria"], ["American Samoa", "American Samoa"], ["Andorra", "Andorra"], ["Angola", "Angola"], ["Anguilla", "Anguilla"], ["Antarctica", "Antarctica"], ["Antigua and Barbuda", "Antigua and Barbuda"], ["Argentina", "Argentina"], ["Armenia", "Armenia"], ["Aruba", "Aruba"], ["Australia", "Australia"], ["Austria", "Austria"], ["Azerbaijan", "Azerbaijan"], ["Bahamas", "Bahamas"], ["Bahrain", "Bahrain"], ["Bangladesh", "Bangladesh"], ["Barbados", "Barbadados"], ["Belarus", "Belarus"], ["Belgium", "Belgium"], ["Belize", "Belize"], ["Benin", "Benin"], ["Bermuda", "Bermuda"], ["Bhutan", "Bhutan"], ["Bolivia", "Bolivia"], ["Bosnia and Heimage_tagrzegovina", "Bosnia and Herzegovina"], ["Botswana", "Botswana"], ["Bouvet Island", "Bouvet Island"], ["Brazil", "Brazil"], ["British Indian Ocean Territory", "British Indian Ocean Territory"], ["Brunei Darussalam", "Brunei Darussalam"], ["Bulgaria", "Bulgaria"], ["Burkina Faso", "Burkina Faso"], ["Burundi", "Burundi"], ["Cambodia", "Cambodia"], ["Cameroon", "Cameroon"], ["Canada", "Canada"], ["Cape Verde", "Cape Verde,"], ["Cayman Islands", "Cayman Islands"], ["Central African Republic", "Central African Republic"], ["Chad", "Chad"], ["Chile", "Chile"], ["China", "China"], ["Christmas Island", "Christmas Island"], ["Cocos (Keeling) Islands", "Cocos (Keeling) Islands"], ["Colombia", "Colombia"], ["Comoros", "Comoros"], ["Congo", "Congo"], ["Congo, The Democratic Republic of The", "Congo, The Democratic Republic of The"], ["Cook Islands", "Cook Islands"], ["Costa Rica", "Costa Rica"], ["Cote Ivoire", "Cote D Ivoire"], ["Croatia", "Croatia"], ["Cuba", "Cuba"], ["Cyprus", "Cyprus"], ["Czech Republic", "Czech Republic"], ["Denmark", "Denmark"], ["Djibouti", "Djibouti"], ["Dominica", "Dominica"], ["Dominican Republic", "Dominican Republic"], ["Ecuador", "Ecuador"], ["Egypt", "Egypt"], ["El Salvador", "El Salvador"], ["Equatorial Guinea", "Equatorial Guinea"], ["Eritrea", "Eritrea"], ["Estonia", "Estonia"], ["Ethiopia", "Ethiopia"], ["Falkland Islands (Malvinas)", "Falkland Islands (Malvinas)"], ["Faroe Islands", "Faroe Islands"], ["Fiji", "Fiji"], ["Finland", "Finland"], ["France", "France"], ["French Guiana", "French Guiana"], ["French Polynesia", "French Polynesia"], ["French Southern Territories", "French Southern Territories"], ["Gabon", "Gabon"], ["Gambia", "Gambia"], ["Georgia", "Georgia"], ["Germany", "Germany"], ["Ghana", "Ghana"], ["Gibraltar", "Gibraltar"], ["Greece", "Greece"], ["Greenland", "Greenland"], ["Grenada", "Grenada"], ["Guadeloupe", "Guadeloupe"], ["Guam", "Guam"], ["Guatemala", "Guatemala"], ["Guinea", "Guinea"], ["Guinea-bissau", "Guinea-bissau"], ["Guyana", "Guyana"], ["Haiti", "Haiti"], ["Heard Island and Mcdonald Islands", "Heard Island and Mcdonald Islands"], ["Holy See (Vatican City State)", "Holy See (Vatican City State)"], ["Honduras", "Honduras"], ["Hong Kong", "Hon g Kong"], ["Hungary", "Hungary"], ["Iceland", "Iceland"], ["India", "India"], ["Indonesia", "Indonesia"], ["Iran, Islamic Republic of", "Iran, Islamic Republic of"], ["Iraq", "Iraq"], ["Ireland", "Ireland"], ["Israel", "Israel"], ["Italy", "Italy"], ["Jamaica", "Jamaica"], ["Japan", "Japan"], ["Jordan", "Jordan"], ["Kazakhstan", "Kazakhstan"], ["Kenya", "Kenya"], ["Kiribati", "Kiribati"], ["Korea, Democratic People Republic of", "Korea, Democratic People Republic of"], ["Korea, Republic of", "Korea, Republic of"], ["Kuwait", "Kuwait"], ["Kyrgyzstan", "Kyrgyzstan"], ["Lao People Democratic Republic", "Lao People Democratic Republic"], ["Latvia", "Latvia"], ["Lebanon", "Lebanon"], ["Lesotho", "Lesotho"], ["Liberia", "Liberia"], ["Libyan Arab Jamahiriya", "Libyan Arab Jamahiriya"], ["Liechtenstein", "Liechtenstein"], ["Lithuania", "Lithuania"], ["Luxembourg", "Luxembourg"], ["Macao", "Macao"], ["Macedonia, The Former Yugoslav Republic of", "Macedonia, The Former Yugoslav Republic of"], ["Madagascar", "Madagascar"], ["Malawi", "Malawi"], ["Malaysia", "Malaysia"], ["Maldives", "Maldives"], ["Mali", "Mali"], ["Malta", "Malta"], ["Marshall Islands", "Marshall Islands"], ["Martinique", "Martinique"], ["Mauritania", "Mauritania"], ["Mauritius", "Mauritius"], ["Mayotte", "Mayotte"], ["Mexico", "Mexico"], ["Micronesia, Federated States of", "Micronesia, Federated States of"], ["Moldova, Republic of", "Moldova, Republic of"], ["Monaco", "Monaco"], ["Mongolia", "Mongolia"], ["Montserrat", "Montserrat"], ["Morocco", "Morocco"], ["Mozambique", "Mozambique"], ["Myanmar", "Myanmar"], ["Namibia", "Namibia"], ["Nauru", "Nauru"], ["Nepal", "Nepal"], ["Netherlands", "Netherlands"], ["Netherlands Antilles", "Netherlands Antilles"], ["New Caledonia", "New Caledonia"], ["New Zealand", "New Zealand"], ["Nicaragua", "Nicaragua"], ["Niger", "Niger"], ["Nigeria", "Nigeria"], ["Niue", "Niue"], ["Norfolk Island", "Norfolk Island"], ["Northern Mariana Islands", "Northern Mariana Islands"], ["Norway", "Norway"], ["Oman", "Oman"], ["Pakistan", "Pakistan"], ["Palau", "Palau"], ["Palestinian Territory, Occupied", "Palestinian Territory, Occupied"], ["Panama", "Panama"], ["Papua New Guinea", "Papua New Guinea"], ["Paraguay", "Paraguay"], ["Peru", "Peru"], ["Philippines", "Philippines"], ["Pitcairn", "Pitcairn"], ["Poland", "Poland"], ["Portugal", "Portugal"], ["Puerto Rico", "Puerto Rico"], ["Qatar", "Qatar"], ["Reunion", "Reunion"], ["Romania", "Romania"], ["Russian Federation", "Russian Federation"], ["Rwanda", "Rwanda"], ["Saint Helena", "Saint Helena"], ["Saint Kitts and Nevis", "Saint Kitts and Nevis"], ["Saint Lucia", "Saint Lucia"], ["Saint Pierre and Miquelon", "Saint Pierre and Miquelon"], ["Saint Vincent and The Grenadines", "Saint Vincent and The Grenadines"], ["Samoa", "Samoa"], ["San Marino", "San Marino"], ["Sao Tome and Principe", "Sao Tome and Principe"], ["Saudi Arabia", "Saudi Arabia"], ["Senegal", "Senegal"], ["Serbia and Montenegro", "Serbia and Montenegro"], ["Seychelles", "Seychelles"], ["Sierra Leone", "Sierra Leone"], ["Singapore", "Singapore"], ["Slovakia", "Slovakia"], ["Slovenia", "Slovenia"], ["Solomon Islands", "Solomon Islands"], ["Somalia", "Somalia"], ["South Africa", "South Africa"], ["South Georgia and The South Sandwich Islands", "South Georgia and The South Sandwich Islands"], ["Spain", "Spain"], ["Sri Lanka", "Sri Lanka"], ["Sudan", "Sudan"], ["Suriname", "Suriname"], ["Svalbard and Jan Mayen", "Svalbard and Jan Mayen"], ["Swaziland", "Swaziland"], ["Sweden", "Sweden"], ["Switzerland", "Switzerland"], ["Syrian Arab Republic", "Syrian Arab Republic"], ["Taiwan, Province of China", "Taiwan, Province of China"], ["Tajikistan", "Tajikistan"], ["Tanzania, United Republic of", "Tanzania, United Republic of"], ["Thailand", "Thailand"], ["Timor-leste", "Timor-leste"], ["Togo", "Togo"], ["Tokelau", "Tokelau"], ["Tonga", "Tonga"], ["Trinidad and Tobago", "Trinidad and Tobago"], ["Tunisia", "Tunisia"], ["Turkey", "Turkey"], ["Turkmenistan", "Turkmenistan"], ["Turks and Caicos Islands", "Turks and Caicos Islands"], ["Tuvalu", "Tuvalu"], ["Uganda", "Uganda"], ["Ukraine", "Ukraine"], ["United Arab Emirates", "United Arab Emirates"], ["United Kingdom", "United Kingdom"], ["United States", "United States"], ["United States Minor Outlying Islands", "US Minor Islands"], ["Uruguay", "Uruguay"], ["Uzbekistan", "Uzbekistan"], ["Vanuatu", "Vanuatu"], ["Venezuela", "Venezuela"], ["Viet Nam", "Viet Nam"], ["Virgin Islands, British", "Virgin Islands, British"], ["Virgin Islands, U.S.", "Virgin Islands, U.S."], ["Wallis and Futuna", "Wallis and Futuna"], ["Western Sahara", "Western Sahara"], ["Yemen", "Yemen"], ["Zambia", "Zambia"], ["Zimbabwe", "Zimbabwe"]], Order.find(params[:id]).shipping_country), {}, :class => "select2 form-control input-transparent"); [Escaped Output] FormBuilder.new.text_field(:shipping_telephone, :class => " form-control", :maxlength => 50, :placeholder => d4x_sanitizer(t("shipping telephone"))); [Escaped Output] FormBuilder.new.text_area(:customer_notes, :class => "form-control", :size => "100x5", :placeholder => d4x_sanitizer(t("notes for delivery")));end;[Escaped Output] check_box_tag(:agreement, nil, false);[Escaped Output] link_to(d4x_sanitizer(t("i agree with terms and conditions")), "/terms");[Escaped Output] FormBuilder.new.submit(d4x_sanitizer(t("place order")), :class => "btn btn-outline-primary", :id => "place-order"); end

orders/_form.["OrdersController#new", "Template:orders/new"]

[Escaped Output] javascript_include_tag("d4x-order.js")
[Escaped Output] hidden_field_tag(:cart_id, Order.new.cart_id)
[Escaped Output] d4x_sanitizer(t("place order"))
[Escaped Output] FormBuilder.new.text_field(:first_name, :class => " form-control", :placeholder => d4x_sanitizer(t("firstname")))
[Escaped Output] FormBuilder.new.text_field(:last_name, :class => " form-control", :placeholder => d4x_sanitizer(t("lastname")))
[Escaped Output] FormBuilder.new.text_field(:address, :class => " form-control", :placeholder => d4x_sanitizer(t("address")))
[Escaped Output] FormBuilder.new.text_field(:town, :class => " form-control", :placeholder => d4x_sanitizer(t("town")))
[Escaped Output] FormBuilder.new.text_field(:city, :class => " form-control", :placeholder => d4x_sanitizer(t("city")))
[Escaped Output] FormBuilder.new.text_field(:zip, :class => " form-control", :placeholder => d4x_sanitizer(t("ZIP")), :maxlength => 5)
[Escaped Output] FormBuilder.new.text_field(:telephone, :class => " form-control", :maxlength => 50, :placeholder => d4x_sanitizer(t("telephone")))
[Escaped Output] FormBuilder.new.select(:country, options_for_select([["United States", "United States"], ["United Kingdom", "United Kingdom"], ["Afghanistan", "Afghanistan"], ["Albania", "Albania"], ["Algeria", "Algeria"], ["American Samoa", "American Samoa"], ["Andorra", "Andorra"], ["Angola", "Angola"], ["Anguilla", "Anguilla"], ["Antarctica", "Antarctica"], ["Antigua and Barbuda", "Antigua and Barbuda"], ["Argentina", "Argentina"], ["Armenia", "Armenia"], ["Aruba", "Aruba"], ["Australia", "Australia"], ["Austria", "Austria"], ["Azerbaijan", "Azerbaijan"], ["Bahamas", "Bahamas"], ["Bahrain", "Bahrain"], ["Bangladesh", "Bangladesh"], ["Barbados", "Barbadados"], ["Belarus", "Belarus"], ["Belgium", "Belgium"], ["Belize", "Belize"], ["Benin", "Benin"], ["Bermuda", "Bermuda"], ["Bhutan", "Bhutan"], ["Bolivia", "Bolivia"], ["Bosnia and Heimage_tagrzegovina", "Bosnia and Herzegovina"], ["Botswana", "Botswana"], ["Bouvet Island", "Bouvet Island"], ["Brazil", "Brazil"], ["British Indian Ocean Territory", "British Indian Ocean Territory"], ["Brunei Darussalam", "Brunei Darussalam"], ["Bulgaria", "Bulgaria"], ["Burkina Faso", "Burkina Faso"], ["Burundi", "Burundi"], ["Cambodia", "Cambodia"], ["Cameroon", "Cameroon"], ["Canada", "Canada"], ["Cape Verde", "Cape Verde,"], ["Cayman Islands", "Cayman Islands"], ["Central African Republic", "Central African Republic"], ["Chad", "Chad"], ["Chile", "Chile"], ["China", "China"], ["Christmas Island", "Christmas Island"], ["Cocos (Keeling) Islands", "Cocos (Keeling) Islands"], ["Colombia", "Colombia"], ["Comoros", "Comoros"], ["Congo", "Congo"], ["Congo, The Democratic Republic of The", "Congo, The Democratic Republic of The"], ["Cook Islands", "Cook Islands"], ["Costa Rica", "Costa Rica"], ["Cote Ivoire", "Cote D Ivoire"], ["Croatia", "Croatia"], ["Cuba", "Cuba"], ["Cyprus", "Cyprus"], ["Czech Republic", "Czech Republic"], ["Denmark", "Denmark"], ["Djibouti", "Djibouti"], ["Dominica", "Dominica"], ["Dominican Republic", "Dominican Republic"], ["Ecuador", "Ecuador"], ["Egypt", "Egypt"], ["El Salvador", "El Salvador"], ["Equatorial Guinea", "Equatorial Guinea"], ["Eritrea", "Eritrea"], ["Estonia", "Estonia"], ["Ethiopia", "Ethiopia"], ["Falkland Islands (Malvinas)", "Falkland Islands (Malvinas)"], ["Faroe Islands", "Faroe Islands"], ["Fiji", "Fiji"], ["Finland", "Finland"], ["France", "France"], ["French Guiana", "French Guiana"], ["French Polynesia", "French Polynesia"], ["French Southern Territories", "French Southern Territories"], ["Gabon", "Gabon"], ["Gambia", "Gambia"], ["Georgia", "Georgia"], ["Germany", "Germany"], ["Ghana", "Ghana"], ["Gibraltar", "Gibraltar"], ["Greece", "Greece"], ["Greenland", "Greenland"], ["Grenada", "Grenada"], ["Guadeloupe", "Guadeloupe"], ["Guam", "Guam"], ["Guatemala", "Guatemala"], ["Guinea", "Guinea"], ["Guinea-bissau", "Guinea-bissau"], ["Guyana", "Guyana"], ["Haiti", "Haiti"], ["Heard Island and Mcdonald Islands", "Heard Island and Mcdonald Islands"], ["Holy See (Vatican City State)", "Holy See (Vatican City State)"], ["Honduras", "Honduras"], ["Hong Kong", "Hon g Kong"], ["Hungary", "Hungary"], ["Iceland", "Iceland"], ["India", "India"], ["Indonesia", "Indonesia"], ["Iran, Islamic Republic of", "Iran, Islamic Republic of"], ["Iraq", "Iraq"], ["Ireland", "Ireland"], ["Israel", "Israel"], ["Italy", "Italy"], ["Jamaica", "Jamaica"], ["Japan", "Japan"], ["Jordan", "Jordan"], ["Kazakhstan", "Kazakhstan"], ["Kenya", "Kenya"], ["Kiribati", "Kiribati"], ["Korea, Democratic People Republic of", "Korea, Democratic People Republic of"], ["Korea, Republic of", "Korea, Republic of"], ["Kuwait", "Kuwait"], ["Kyrgyzstan", "Kyrgyzstan"], ["Lao People Democratic Republic", "Lao People Democratic Republic"], ["Latvia", "Latvia"], ["Lebanon", "Lebanon"], ["Lesotho", "Lesotho"], ["Liberia", "Liberia"], ["Libyan Arab Jamahiriya", "Libyan Arab Jamahiriya"], ["Liechtenstein", "Liechtenstein"], ["Lithuania", "Lithuania"], ["Luxembourg", "Luxembourg"], ["Macao", "Macao"], ["Macedonia, The Former Yugoslav Republic of", "Macedonia, The Former Yugoslav Republic of"], ["Madagascar", "Madagascar"], ["Malawi", "Malawi"], ["Malaysia", "Malaysia"], ["Maldives", "Maldives"], ["Mali", "Mali"], ["Malta", "Malta"], ["Marshall Islands", "Marshall Islands"], ["Martinique", "Martinique"], ["Mauritania", "Mauritania"], ["Mauritius", "Mauritius"], ["Mayotte", "Mayotte"], ["Mexico", "Mexico"], ["Micronesia, Federated States of", "Micronesia, Federated States of"], ["Moldova, Republic of", "Moldova, Republic of"], ["Monaco", "Monaco"], ["Mongolia", "Mongolia"], ["Montserrat", "Montserrat"], ["Morocco", "Morocco"], ["Mozambique", "Mozambique"], ["Myanmar", "Myanmar"], ["Namibia", "Namibia"], ["Nauru", "Nauru"], ["Nepal", "Nepal"], ["Netherlands", "Netherlands"], ["Netherlands Antilles", "Netherlands Antilles"], ["New Caledonia", "New Caledonia"], ["New Zealand", "New Zealand"], ["Nicaragua", "Nicaragua"], ["Niger", "Niger"], ["Nigeria", "Nigeria"], ["Niue", "Niue"], ["Norfolk Island", "Norfolk Island"], ["Northern Mariana Islands", "Northern Mariana Islands"], ["Norway", "Norway"], ["Oman", "Oman"], ["Pakistan", "Pakistan"], ["Palau", "Palau"], ["Palestinian Territory, Occupied", "Palestinian Territory, Occupied"], ["Panama", "Panama"], ["Papua New Guinea", "Papua New Guinea"], ["Paraguay", "Paraguay"], ["Peru", "Peru"], ["Philippines", "Philippines"], ["Pitcairn", "Pitcairn"], ["Poland", "Poland"], ["Portugal", "Portugal"], ["Puerto Rico", "Puerto Rico"], ["Qatar", "Qatar"], ["Reunion", "Reunion"], ["Romania", "Romania"], ["Russian Federation", "Russian Federation"], ["Rwanda", "Rwanda"], ["Saint Helena", "Saint Helena"], ["Saint Kitts and Nevis", "Saint Kitts and Nevis"], ["Saint Lucia", "Saint Lucia"], ["Saint Pierre and Miquelon", "Saint Pierre and Miquelon"], ["Saint Vincent and The Grenadines", "Saint Vincent and The Grenadines"], ["Samoa", "Samoa"], ["San Marino", "San Marino"], ["Sao Tome and Principe", "Sao Tome and Principe"], ["Saudi Arabia", "Saudi Arabia"], ["Senegal", "Senegal"], ["Serbia and Montenegro", "Serbia and Montenegro"], ["Seychelles", "Seychelles"], ["Sierra Leone", "Sierra Leone"], ["Singapore", "Singapore"], ["Slovakia", "Slovakia"], ["Slovenia", "Slovenia"], ["Solomon Islands", "Solomon Islands"], ["Somalia", "Somalia"], ["South Africa", "South Africa"], ["South Georgia and The South Sandwich Islands", "South Georgia and The South Sandwich Islands"], ["Spain", "Spain"], ["Sri Lanka", "Sri Lanka"], ["Sudan", "Sudan"], ["Suriname", "Suriname"], ["Svalbard and Jan Mayen", "Svalbard and Jan Mayen"], ["Swaziland", "Swaziland"], ["Sweden", "Sweden"], ["Switzerland", "Switzerland"], ["Syrian Arab Republic", "Syrian Arab Republic"], ["Taiwan, Province of China", "Taiwan, Province of China"], ["Tajikistan", "Tajikistan"], ["Tanzania, United Republic of", "Tanzania, United Republic of"], ["Thailand", "Thailand"], ["Timor-leste", "Timor-leste"], ["Togo", "Togo"], ["Tokelau", "Tokelau"], ["Tonga", "Tonga"], ["Trinidad and Tobago", "Trinidad and Tobago"], ["Tunisia", "Tunisia"], ["Turkey", "Turkey"], ["Turkmenistan", "Turkmenistan"], ["Turks and Caicos Islands", "Turks and Caicos Islands"], ["Tuvalu", "Tuvalu"], ["Uganda", "Uganda"], ["Ukraine", "Ukraine"], ["United Arab Emirates", "United Arab Emirates"], ["United Kingdom", "United Kingdom"], ["United States", "United States"], ["United States Minor Outlying Islands", "US Minor Islands"], ["Uruguay", "Uruguay"], ["Uzbekistan", "Uzbekistan"], ["Vanuatu", "Vanuatu"], ["Venezuela", "Venezuela"], ["Viet Nam", "Viet Nam"], ["Virgin Islands, British", "Virgin Islands, British"], ["Virgin Islands, U.S.", "Virgin Islands, U.S."], ["Wallis and Futuna", "Wallis and Futuna"], ["Western Sahara", "Western Sahara"], ["Yemen", "Yemen"], ["Zambia", "Zambia"], ["Zimbabwe", "Zimbabwe"]], Order.new.country), {}, :class => "select2 form-control input-transparent")
[Escaped Output] check_box_tag(:same_address)
[Escaped Output] d4x_sanitizer(t("shipping address is billing address"))
[Escaped Output] d4x_sanitizer(t("shipping details"))
[Escaped Output] FormBuilder.new.text_field(:shipping_first_name, :class => " form-control", :maxlength => 50, :placeholder => "Shipping First Name")
[Escaped Output] FormBuilder.new.text_field(:shipping_last_name, :class => " form-control", :placeholder => d4x_sanitizer(t("lastname")))
[Escaped Output] FormBuilder.new.text_field(:shipping_address, :class => " form-control", :placeholder => d4x_sanitizer(t("shipping address")))
[Escaped Output] FormBuilder.new.text_field(:shipping_town, :class => " form-control", :placeholder => d4x_sanitizer(t("shipping town")))
[Escaped Output] FormBuilder.new.text_field(:shipping_city, :class => " form-control", :placeholder => d4x_sanitizer(t("shipping city")))
[Escaped Output] FormBuilder.new.text_field(:shipping_zip, :class => " form-control", :placeholder => d4x_sanitizer(t("shipping zip")), :maxlength => 5)
[Escaped Output] FormBuilder.new.select(:shipping_country, options_for_select([["United States", "United States"], ["United Kingdom", "United Kingdom"], ["Afghanistan", "Afghanistan"], ["Albania", "Albania"], ["Algeria", "Algeria"], ["American Samoa", "American Samoa"], ["Andorra", "Andorra"], ["Angola", "Angola"], ["Anguilla", "Anguilla"], ["Antarctica", "Antarctica"], ["Antigua and Barbuda", "Antigua and Barbuda"], ["Argentina", "Argentina"], ["Armenia", "Armenia"], ["Aruba", "Aruba"], ["Australia", "Australia"], ["Austria", "Austria"], ["Azerbaijan", "Azerbaijan"], ["Bahamas", "Bahamas"], ["Bahrain", "Bahrain"], ["Bangladesh", "Bangladesh"], ["Barbados", "Barbadados"], ["Belarus", "Belarus"], ["Belgium", "Belgium"], ["Belize", "Belize"], ["Benin", "Benin"], ["Bermuda", "Bermuda"], ["Bhutan", "Bhutan"], ["Bolivia", "Bolivia"], ["Bosnia and Heimage_tagrzegovina", "Bosnia and Herzegovina"], ["Botswana", "Botswana"], ["Bouvet Island", "Bouvet Island"], ["Brazil", "Brazil"], ["British Indian Ocean Territory", "British Indian Ocean Territory"], ["Brunei Darussalam", "Brunei Darussalam"], ["Bulgaria", "Bulgaria"], ["Burkina Faso", "Burkina Faso"], ["Burundi", "Burundi"], ["Cambodia", "Cambodia"], ["Cameroon", "Cameroon"], ["Canada", "Canada"], ["Cape Verde", "Cape Verde,"], ["Cayman Islands", "Cayman Islands"], ["Central African Republic", "Central African Republic"], ["Chad", "Chad"], ["Chile", "Chile"], ["China", "China"], ["Christmas Island", "Christmas Island"], ["Cocos (Keeling) Islands", "Cocos (Keeling) Islands"], ["Colombia", "Colombia"], ["Comoros", "Comoros"], ["Congo", "Congo"], ["Congo, The Democratic Republic of The", "Congo, The Democratic Republic of The"], ["Cook Islands", "Cook Islands"], ["Costa Rica", "Costa Rica"], ["Cote Ivoire", "Cote D Ivoire"], ["Croatia", "Croatia"], ["Cuba", "Cuba"], ["Cyprus", "Cyprus"], ["Czech Republic", "Czech Republic"], ["Denmark", "Denmark"], ["Djibouti", "Djibouti"], ["Dominica", "Dominica"], ["Dominican Republic", "Dominican Republic"], ["Ecuador", "Ecuador"], ["Egypt", "Egypt"], ["El Salvador", "El Salvador"], ["Equatorial Guinea", "Equatorial Guinea"], ["Eritrea", "Eritrea"], ["Estonia", "Estonia"], ["Ethiopia", "Ethiopia"], ["Falkland Islands (Malvinas)", "Falkland Islands (Malvinas)"], ["Faroe Islands", "Faroe Islands"], ["Fiji", "Fiji"], ["Finland", "Finland"], ["France", "France"], ["French Guiana", "French Guiana"], ["French Polynesia", "French Polynesia"], ["French Southern Territories", "French Southern Territories"], ["Gabon", "Gabon"], ["Gambia", "Gambia"], ["Georgia", "Georgia"], ["Germany", "Germany"], ["Ghana", "Ghana"], ["Gibraltar", "Gibraltar"], ["Greece", "Greece"], ["Greenland", "Greenland"], ["Grenada", "Grenada"], ["Guadeloupe", "Guadeloupe"], ["Guam", "Guam"], ["Guatemala", "Guatemala"], ["Guinea", "Guinea"], ["Guinea-bissau", "Guinea-bissau"], ["Guyana", "Guyana"], ["Haiti", "Haiti"], ["Heard Island and Mcdonald Islands", "Heard Island and Mcdonald Islands"], ["Holy See (Vatican City State)", "Holy See (Vatican City State)"], ["Honduras", "Honduras"], ["Hong Kong", "Hon g Kong"], ["Hungary", "Hungary"], ["Iceland", "Iceland"], ["India", "India"], ["Indonesia", "Indonesia"], ["Iran, Islamic Republic of", "Iran, Islamic Republic of"], ["Iraq", "Iraq"], ["Ireland", "Ireland"], ["Israel", "Israel"], ["Italy", "Italy"], ["Jamaica", "Jamaica"], ["Japan", "Japan"], ["Jordan", "Jordan"], ["Kazakhstan", "Kazakhstan"], ["Kenya", "Kenya"], ["Kiribati", "Kiribati"], ["Korea, Democratic People Republic of", "Korea, Democratic People Republic of"], ["Korea, Republic of", "Korea, Republic of"], ["Kuwait", "Kuwait"], ["Kyrgyzstan", "Kyrgyzstan"], ["Lao People Democratic Republic", "Lao People Democratic Republic"], ["Latvia", "Latvia"], ["Lebanon", "Lebanon"], ["Lesotho", "Lesotho"], ["Liberia", "Liberia"], ["Libyan Arab Jamahiriya", "Libyan Arab Jamahiriya"], ["Liechtenstein", "Liechtenstein"], ["Lithuania", "Lithuania"], ["Luxembourg", "Luxembourg"], ["Macao", "Macao"], ["Macedonia, The Former Yugoslav Republic of", "Macedonia, The Former Yugoslav Republic of"], ["Madagascar", "Madagascar"], ["Malawi", "Malawi"], ["Malaysia", "Malaysia"], ["Maldives", "Maldives"], ["Mali", "Mali"], ["Malta", "Malta"], ["Marshall Islands", "Marshall Islands"], ["Martinique", "Martinique"], ["Mauritania", "Mauritania"], ["Mauritius", "Mauritius"], ["Mayotte", "Mayotte"], ["Mexico", "Mexico"], ["Micronesia, Federated States of", "Micronesia, Federated States of"], ["Moldova, Republic of", "Moldova, Republic of"], ["Monaco", "Monaco"], ["Mongolia", "Mongolia"], ["Montserrat", "Montserrat"], ["Morocco", "Morocco"], ["Mozambique", "Mozambique"], ["Myanmar", "Myanmar"], ["Namibia", "Namibia"], ["Nauru", "Nauru"], ["Nepal", "Nepal"], ["Netherlands", "Netherlands"], ["Netherlands Antilles", "Netherlands Antilles"], ["New Caledonia", "New Caledonia"], ["New Zealand", "New Zealand"], ["Nicaragua", "Nicaragua"], ["Niger", "Niger"], ["Nigeria", "Nigeria"], ["Niue", "Niue"], ["Norfolk Island", "Norfolk Island"], ["Northern Mariana Islands", "Northern Mariana Islands"], ["Norway", "Norway"], ["Oman", "Oman"], ["Pakistan", "Pakistan"], ["Palau", "Palau"], ["Palestinian Territory, Occupied", "Palestinian Territory, Occupied"], ["Panama", "Panama"], ["Papua New Guinea", "Papua New Guinea"], ["Paraguay", "Paraguay"], ["Peru", "Peru"], ["Philippines", "Philippines"], ["Pitcairn", "Pitcairn"], ["Poland", "Poland"], ["Portugal", "Portugal"], ["Puerto Rico", "Puerto Rico"], ["Qatar", "Qatar"], ["Reunion", "Reunion"], ["Romania", "Romania"], ["Russian Federation", "Russian Federation"], ["Rwanda", "Rwanda"], ["Saint Helena", "Saint Helena"], ["Saint Kitts and Nevis", "Saint Kitts and Nevis"], ["Saint Lucia", "Saint Lucia"], ["Saint Pierre and Miquelon", "Saint Pierre and Miquelon"], ["Saint Vincent and The Grenadines", "Saint Vincent and The Grenadines"], ["Samoa", "Samoa"], ["San Marino", "San Marino"], ["Sao Tome and Principe", "Sao Tome and Principe"], ["Saudi Arabia", "Saudi Arabia"], ["Senegal", "Senegal"], ["Serbia and Montenegro", "Serbia and Montenegro"], ["Seychelles", "Seychelles"], ["Sierra Leone", "Sierra Leone"], ["Singapore", "Singapore"], ["Slovakia", "Slovakia"], ["Slovenia", "Slovenia"], ["Solomon Islands", "Solomon Islands"], ["Somalia", "Somalia"], ["South Africa", "South Africa"], ["South Georgia and The South Sandwich Islands", "South Georgia and The South Sandwich Islands"], ["Spain", "Spain"], ["Sri Lanka", "Sri Lanka"], ["Sudan", "Sudan"], ["Suriname", "Suriname"], ["Svalbard and Jan Mayen", "Svalbard and Jan Mayen"], ["Swaziland", "Swaziland"], ["Sweden", "Sweden"], ["Switzerland", "Switzerland"], ["Syrian Arab Republic", "Syrian Arab Republic"], ["Taiwan, Province of China", "Taiwan, Province of China"], ["Tajikistan", "Tajikistan"], ["Tanzania, United Republic of", "Tanzania, United Republic of"], ["Thailand", "Thailand"], ["Timor-leste", "Timor-leste"], ["Togo", "Togo"], ["Tokelau", "Tokelau"], ["Tonga", "Tonga"], ["Trinidad and Tobago", "Trinidad and Tobago"], ["Tunisia", "Tunisia"], ["Turkey", "Turkey"], ["Turkmenistan", "Turkmenistan"], ["Turks and Caicos Islands", "Turks and Caicos Islands"], ["Tuvalu", "Tuvalu"], ["Uganda", "Uganda"], ["Ukraine", "Ukraine"], ["United Arab Emirates", "United Arab Emirates"], ["United Kingdom", "United Kingdom"], ["United States", "United States"], ["United States Minor Outlying Islands", "US Minor Islands"], ["Uruguay", "Uruguay"], ["Uzbekistan", "Uzbekistan"], ["Vanuatu", "Vanuatu"], ["Venezuela", "Venezuela"], ["Viet Nam", "Viet Nam"], ["Virgin Islands, British", "Virgin Islands, British"], ["Virgin Islands, U.S.", "Virgin Islands, U.S."], ["Wallis and Futuna", "Wallis and Futuna"], ["Western Sahara", "Western Sahara"], ["Yemen", "Yemen"], ["Zambia", "Zambia"], ["Zimbabwe", "Zimbabwe"]], Order.new.shipping_country), {}, :class => "select2 form-control input-transparent")
[Escaped Output] FormBuilder.new.text_field(:shipping_telephone, :class => " form-control", :maxlength => 50, :placeholder => d4x_sanitizer(t("shipping telephone")))
[Escaped Output] FormBuilder.new.text_area(:customer_notes, :class => "form-control", :size => "100x5", :placeholder => d4x_sanitizer(t("notes for delivery")))
[Escaped Output] check_box_tag(:agreement, nil, false)
[Escaped Output] link_to(d4x_sanitizer(t("i agree with terms and conditions")), "/terms")
[Escaped Output] FormBuilder.new.submit(d4x_sanitizer(t("place order")), :class => "btn btn-outline-primary", :id => "place-order")
[Escaped Output] form_for(Order.new) do; [Escaped Output] hidden_field_tag(:cart_id, Order.new.cart_id);[Escaped Output] d4x_sanitizer(t("place order"));[Escaped Output] FormBuilder.new.text_field(:first_name, :class => " form-control", :placeholder => d4x_sanitizer(t("firstname")));[Escaped Output] FormBuilder.new.text_field(:last_name, :class => " form-control", :placeholder => d4x_sanitizer(t("lastname")));[Escaped Output] FormBuilder.new.text_field(:address, :class => " form-control", :placeholder => d4x_sanitizer(t("address")));[Escaped Output] FormBuilder.new.text_field(:town, :class => " form-control", :placeholder => d4x_sanitizer(t("town")));[Escaped Output] FormBuilder.new.text_field(:city, :class => " form-control", :placeholder => d4x_sanitizer(t("city")));[Escaped Output] FormBuilder.new.text_field(:zip, :class => " form-control", :placeholder => d4x_sanitizer(t("ZIP")), :maxlength => 5);[Escaped Output] FormBuilder.new.text_field(:telephone, :class => " form-control", :maxlength => 50, :placeholder => d4x_sanitizer(t("telephone")));[Escaped Output] FormBuilder.new.select(:country, options_for_select([["United States", "United States"], ["United Kingdom", "United Kingdom"], ["Afghanistan", "Afghanistan"], ["Albania", "Albania"], ["Algeria", "Algeria"], ["American Samoa", "American Samoa"], ["Andorra", "Andorra"], ["Angola", "Angola"], ["Anguilla", "Anguilla"], ["Antarctica", "Antarctica"], ["Antigua and Barbuda", "Antigua and Barbuda"], ["Argentina", "Argentina"], ["Armenia", "Armenia"], ["Aruba", "Aruba"], ["Australia", "Australia"], ["Austria", "Austria"], ["Azerbaijan", "Azerbaijan"], ["Bahamas", "Bahamas"], ["Bahrain", "Bahrain"], ["Bangladesh", "Bangladesh"], ["Barbados", "Barbadados"], ["Belarus", "Belarus"], ["Belgium", "Belgium"], ["Belize", "Belize"], ["Benin", "Benin"], ["Bermuda", "Bermuda"], ["Bhutan", "Bhutan"], ["Bolivia", "Bolivia"], ["Bosnia and Heimage_tagrzegovina", "Bosnia and Herzegovina"], ["Botswana", "Botswana"], ["Bouvet Island", "Bouvet Island"], ["Brazil", "Brazil"], ["British Indian Ocean Territory", "British Indian Ocean Territory"], ["Brunei Darussalam", "Brunei Darussalam"], ["Bulgaria", "Bulgaria"], ["Burkina Faso", "Burkina Faso"], ["Burundi", "Burundi"], ["Cambodia", "Cambodia"], ["Cameroon", "Cameroon"], ["Canada", "Canada"], ["Cape Verde", "Cape Verde,"], ["Cayman Islands", "Cayman Islands"], ["Central African Republic", "Central African Republic"], ["Chad", "Chad"], ["Chile", "Chile"], ["China", "China"], ["Christmas Island", "Christmas Island"], ["Cocos (Keeling) Islands", "Cocos (Keeling) Islands"], ["Colombia", "Colombia"], ["Comoros", "Comoros"], ["Congo", "Congo"], ["Congo, The Democratic Republic of The", "Congo, The Democratic Republic of The"], ["Cook Islands", "Cook Islands"], ["Costa Rica", "Costa Rica"], ["Cote Ivoire", "Cote D Ivoire"], ["Croatia", "Croatia"], ["Cuba", "Cuba"], ["Cyprus", "Cyprus"], ["Czech Republic", "Czech Republic"], ["Denmark", "Denmark"], ["Djibouti", "Djibouti"], ["Dominica", "Dominica"], ["Dominican Republic", "Dominican Republic"], ["Ecuador", "Ecuador"], ["Egypt", "Egypt"], ["El Salvador", "El Salvador"], ["Equatorial Guinea", "Equatorial Guinea"], ["Eritrea", "Eritrea"], ["Estonia", "Estonia"], ["Ethiopia", "Ethiopia"], ["Falkland Islands (Malvinas)", "Falkland Islands (Malvinas)"], ["Faroe Islands", "Faroe Islands"], ["Fiji", "Fiji"], ["Finland", "Finland"], ["France", "France"], ["French Guiana", "French Guiana"], ["French Polynesia", "French Polynesia"], ["French Southern Territories", "French Southern Territories"], ["Gabon", "Gabon"], ["Gambia", "Gambia"], ["Georgia", "Georgia"], ["Germany", "Germany"], ["Ghana", "Ghana"], ["Gibraltar", "Gibraltar"], ["Greece", "Greece"], ["Greenland", "Greenland"], ["Grenada", "Grenada"], ["Guadeloupe", "Guadeloupe"], ["Guam", "Guam"], ["Guatemala", "Guatemala"], ["Guinea", "Guinea"], ["Guinea-bissau", "Guinea-bissau"], ["Guyana", "Guyana"], ["Haiti", "Haiti"], ["Heard Island and Mcdonald Islands", "Heard Island and Mcdonald Islands"], ["Holy See (Vatican City State)", "Holy See (Vatican City State)"], ["Honduras", "Honduras"], ["Hong Kong", "Hon g Kong"], ["Hungary", "Hungary"], ["Iceland", "Iceland"], ["India", "India"], ["Indonesia", "Indonesia"], ["Iran, Islamic Republic of", "Iran, Islamic Republic of"], ["Iraq", "Iraq"], ["Ireland", "Ireland"], ["Israel", "Israel"], ["Italy", "Italy"], ["Jamaica", "Jamaica"], ["Japan", "Japan"], ["Jordan", "Jordan"], ["Kazakhstan", "Kazakhstan"], ["Kenya", "Kenya"], ["Kiribati", "Kiribati"], ["Korea, Democratic People Republic of", "Korea, Democratic People Republic of"], ["Korea, Republic of", "Korea, Republic of"], ["Kuwait", "Kuwait"], ["Kyrgyzstan", "Kyrgyzstan"], ["Lao People Democratic Republic", "Lao People Democratic Republic"], ["Latvia", "Latvia"], ["Lebanon", "Lebanon"], ["Lesotho", "Lesotho"], ["Liberia", "Liberia"], ["Libyan Arab Jamahiriya", "Libyan Arab Jamahiriya"], ["Liechtenstein", "Liechtenstein"], ["Lithuania", "Lithuania"], ["Luxembourg", "Luxembourg"], ["Macao", "Macao"], ["Macedonia, The Former Yugoslav Republic of", "Macedonia, The Former Yugoslav Republic of"], ["Madagascar", "Madagascar"], ["Malawi", "Malawi"], ["Malaysia", "Malaysia"], ["Maldives", "Maldives"], ["Mali", "Mali"], ["Malta", "Malta"], ["Marshall Islands", "Marshall Islands"], ["Martinique", "Martinique"], ["Mauritania", "Mauritania"], ["Mauritius", "Mauritius"], ["Mayotte", "Mayotte"], ["Mexico", "Mexico"], ["Micronesia, Federated States of", "Micronesia, Federated States of"], ["Moldova, Republic of", "Moldova, Republic of"], ["Monaco", "Monaco"], ["Mongolia", "Mongolia"], ["Montserrat", "Montserrat"], ["Morocco", "Morocco"], ["Mozambique", "Mozambique"], ["Myanmar", "Myanmar"], ["Namibia", "Namibia"], ["Nauru", "Nauru"], ["Nepal", "Nepal"], ["Netherlands", "Netherlands"], ["Netherlands Antilles", "Netherlands Antilles"], ["New Caledonia", "New Caledonia"], ["New Zealand", "New Zealand"], ["Nicaragua", "Nicaragua"], ["Niger", "Niger"], ["Nigeria", "Nigeria"], ["Niue", "Niue"], ["Norfolk Island", "Norfolk Island"], ["Northern Mariana Islands", "Northern Mariana Islands"], ["Norway", "Norway"], ["Oman", "Oman"], ["Pakistan", "Pakistan"], ["Palau", "Palau"], ["Palestinian Territory, Occupied", "Palestinian Territory, Occupied"], ["Panama", "Panama"], ["Papua New Guinea", "Papua New Guinea"], ["Paraguay", "Paraguay"], ["Peru", "Peru"], ["Philippines", "Philippines"], ["Pitcairn", "Pitcairn"], ["Poland", "Poland"], ["Portugal", "Portugal"], ["Puerto Rico", "Puerto Rico"], ["Qatar", "Qatar"], ["Reunion", "Reunion"], ["Romania", "Romania"], ["Russian Federation", "Russian Federation"], ["Rwanda", "Rwanda"], ["Saint Helena", "Saint Helena"], ["Saint Kitts and Nevis", "Saint Kitts and Nevis"], ["Saint Lucia", "Saint Lucia"], ["Saint Pierre and Miquelon", "Saint Pierre and Miquelon"], ["Saint Vincent and The Grenadines", "Saint Vincent and The Grenadines"], ["Samoa", "Samoa"], ["San Marino", "San Marino"], ["Sao Tome and Principe", "Sao Tome and Principe"], ["Saudi Arabia", "Saudi Arabia"], ["Senegal", "Senegal"], ["Serbia and Montenegro", "Serbia and Montenegro"], ["Seychelles", "Seychelles"], ["Sierra Leone", "Sierra Leone"], ["Singapore", "Singapore"], ["Slovakia", "Slovakia"], ["Slovenia", "Slovenia"], ["Solomon Islands", "Solomon Islands"], ["Somalia", "Somalia"], ["South Africa", "South Africa"], ["South Georgia and The South Sandwich Islands", "South Georgia and The South Sandwich Islands"], ["Spain", "Spain"], ["Sri Lanka", "Sri Lanka"], ["Sudan", "Sudan"], ["Suriname", "Suriname"], ["Svalbard and Jan Mayen", "Svalbard and Jan Mayen"], ["Swaziland", "Swaziland"], ["Sweden", "Sweden"], ["Switzerland", "Switzerland"], ["Syrian Arab Republic", "Syrian Arab Republic"], ["Taiwan, Province of China", "Taiwan, Province of China"], ["Tajikistan", "Tajikistan"], ["Tanzania, United Republic of", "Tanzania, United Republic of"], ["Thailand", "Thailand"], ["Timor-leste", "Timor-leste"], ["Togo", "Togo"], ["Tokelau", "Tokelau"], ["Tonga", "Tonga"], ["Trinidad and Tobago", "Trinidad and Tobago"], ["Tunisia", "Tunisia"], ["Turkey", "Turkey"], ["Turkmenistan", "Turkmenistan"], ["Turks and Caicos Islands", "Turks and Caicos Islands"], ["Tuvalu", "Tuvalu"], ["Uganda", "Uganda"], ["Ukraine", "Ukraine"], ["United Arab Emirates", "United Arab Emirates"], ["United Kingdom", "United Kingdom"], ["United States", "United States"], ["United States Minor Outlying Islands", "US Minor Islands"], ["Uruguay", "Uruguay"], ["Uzbekistan", "Uzbekistan"], ["Vanuatu", "Vanuatu"], ["Venezuela", "Venezuela"], ["Viet Nam", "Viet Nam"], ["Virgin Islands, British", "Virgin Islands, British"], ["Virgin Islands, U.S.", "Virgin Islands, U.S."], ["Wallis and Futuna", "Wallis and Futuna"], ["Western Sahara", "Western Sahara"], ["Yemen", "Yemen"], ["Zambia", "Zambia"], ["Zimbabwe", "Zimbabwe"]], Order.new.country), {}, :class => "select2 form-control input-transparent");if all_services((Cart.find(session[:cart_id]) or Cart.find(params[:cart_id])).id) then; [Escaped Output] check_box_tag(:same_address); [Escaped Output] d4x_sanitizer(t("shipping address is billing address")); [Escaped Output] d4x_sanitizer(t("shipping details")); [Escaped Output] FormBuilder.new.text_field(:shipping_first_name, :class => " form-control", :maxlength => 50, :placeholder => "Shipping First Name"); [Escaped Output] FormBuilder.new.text_field(:shipping_last_name, :class => " form-control", :placeholder => d4x_sanitizer(t("lastname"))); [Escaped Output] FormBuilder.new.text_field(:shipping_address, :class => " form-control", :placeholder => d4x_sanitizer(t("shipping address"))); [Escaped Output] FormBuilder.new.text_field(:shipping_town, :class => " form-control", :placeholder => d4x_sanitizer(t("shipping town"))); [Escaped Output] FormBuilder.new.text_field(:shipping_city, :class => " form-control", :placeholder => d4x_sanitizer(t("shipping city"))); [Escaped Output] FormBuilder.new.text_field(:shipping_zip, :class => " form-control", :placeholder => d4x_sanitizer(t("shipping zip")), :maxlength => 5); [Escaped Output] FormBuilder.new.select(:shipping_country, options_for_select([["United States", "United States"], ["United Kingdom", "United Kingdom"], ["Afghanistan", "Afghanistan"], ["Albania", "Albania"], ["Algeria", "Algeria"], ["American Samoa", "American Samoa"], ["Andorra", "Andorra"], ["Angola", "Angola"], ["Anguilla", "Anguilla"], ["Antarctica", "Antarctica"], ["Antigua and Barbuda", "Antigua and Barbuda"], ["Argentina", "Argentina"], ["Armenia", "Armenia"], ["Aruba", "Aruba"], ["Australia", "Australia"], ["Austria", "Austria"], ["Azerbaijan", "Azerbaijan"], ["Bahamas", "Bahamas"], ["Bahrain", "Bahrain"], ["Bangladesh", "Bangladesh"], ["Barbados", "Barbadados"], ["Belarus", "Belarus"], ["Belgium", "Belgium"], ["Belize", "Belize"], ["Benin", "Benin"], ["Bermuda", "Bermuda"], ["Bhutan", "Bhutan"], ["Bolivia", "Bolivia"], ["Bosnia and Heimage_tagrzegovina", "Bosnia and Herzegovina"], ["Botswana", "Botswana"], ["Bouvet Island", "Bouvet Island"], ["Brazil", "Brazil"], ["British Indian Ocean Territory", "British Indian Ocean Territory"], ["Brunei Darussalam", "Brunei Darussalam"], ["Bulgaria", "Bulgaria"], ["Burkina Faso", "Burkina Faso"], ["Burundi", "Burundi"], ["Cambodia", "Cambodia"], ["Cameroon", "Cameroon"], ["Canada", "Canada"], ["Cape Verde", "Cape Verde,"], ["Cayman Islands", "Cayman Islands"], ["Central African Republic", "Central African Republic"], ["Chad", "Chad"], ["Chile", "Chile"], ["China", "China"], ["Christmas Island", "Christmas Island"], ["Cocos (Keeling) Islands", "Cocos (Keeling) Islands"], ["Colombia", "Colombia"], ["Comoros", "Comoros"], ["Congo", "Congo"], ["Congo, The Democratic Republic of The", "Congo, The Democratic Republic of The"], ["Cook Islands", "Cook Islands"], ["Costa Rica", "Costa Rica"], ["Cote Ivoire", "Cote D Ivoire"], ["Croatia", "Croatia"], ["Cuba", "Cuba"], ["Cyprus", "Cyprus"], ["Czech Republic", "Czech Republic"], ["Denmark", "Denmark"], ["Djibouti", "Djibouti"], ["Dominica", "Dominica"], ["Dominican Republic", "Dominican Republic"], ["Ecuador", "Ecuador"], ["Egypt", "Egypt"], ["El Salvador", "El Salvador"], ["Equatorial Guinea", "Equatorial Guinea"], ["Eritrea", "Eritrea"], ["Estonia", "Estonia"], ["Ethiopia", "Ethiopia"], ["Falkland Islands (Malvinas)", "Falkland Islands (Malvinas)"], ["Faroe Islands", "Faroe Islands"], ["Fiji", "Fiji"], ["Finland", "Finland"], ["France", "France"], ["French Guiana", "French Guiana"], ["French Polynesia", "French Polynesia"], ["French Southern Territories", "French Southern Territories"], ["Gabon", "Gabon"], ["Gambia", "Gambia"], ["Georgia", "Georgia"], ["Germany", "Germany"], ["Ghana", "Ghana"], ["Gibraltar", "Gibraltar"], ["Greece", "Greece"], ["Greenland", "Greenland"], ["Grenada", "Grenada"], ["Guadeloupe", "Guadeloupe"], ["Guam", "Guam"], ["Guatemala", "Guatemala"], ["Guinea", "Guinea"], ["Guinea-bissau", "Guinea-bissau"], ["Guyana", "Guyana"], ["Haiti", "Haiti"], ["Heard Island and Mcdonald Islands", "Heard Island and Mcdonald Islands"], ["Holy See (Vatican City State)", "Holy See (Vatican City State)"], ["Honduras", "Honduras"], ["Hong Kong", "Hon g Kong"], ["Hungary", "Hungary"], ["Iceland", "Iceland"], ["India", "India"], ["Indonesia", "Indonesia"], ["Iran, Islamic Republic of", "Iran, Islamic Republic of"], ["Iraq", "Iraq"], ["Ireland", "Ireland"], ["Israel", "Israel"], ["Italy", "Italy"], ["Jamaica", "Jamaica"], ["Japan", "Japan"], ["Jordan", "Jordan"], ["Kazakhstan", "Kazakhstan"], ["Kenya", "Kenya"], ["Kiribati", "Kiribati"], ["Korea, Democratic People Republic of", "Korea, Democratic People Republic of"], ["Korea, Republic of", "Korea, Republic of"], ["Kuwait", "Kuwait"], ["Kyrgyzstan", "Kyrgyzstan"], ["Lao People Democratic Republic", "Lao People Democratic Republic"], ["Latvia", "Latvia"], ["Lebanon", "Lebanon"], ["Lesotho", "Lesotho"], ["Liberia", "Liberia"], ["Libyan Arab Jamahiriya", "Libyan Arab Jamahiriya"], ["Liechtenstein", "Liechtenstein"], ["Lithuania", "Lithuania"], ["Luxembourg", "Luxembourg"], ["Macao", "Macao"], ["Macedonia, The Former Yugoslav Republic of", "Macedonia, The Former Yugoslav Republic of"], ["Madagascar", "Madagascar"], ["Malawi", "Malawi"], ["Malaysia", "Malaysia"], ["Maldives", "Maldives"], ["Mali", "Mali"], ["Malta", "Malta"], ["Marshall Islands", "Marshall Islands"], ["Martinique", "Martinique"], ["Mauritania", "Mauritania"], ["Mauritius", "Mauritius"], ["Mayotte", "Mayotte"], ["Mexico", "Mexico"], ["Micronesia, Federated States of", "Micronesia, Federated States of"], ["Moldova, Republic of", "Moldova, Republic of"], ["Monaco", "Monaco"], ["Mongolia", "Mongolia"], ["Montserrat", "Montserrat"], ["Morocco", "Morocco"], ["Mozambique", "Mozambique"], ["Myanmar", "Myanmar"], ["Namibia", "Namibia"], ["Nauru", "Nauru"], ["Nepal", "Nepal"], ["Netherlands", "Netherlands"], ["Netherlands Antilles", "Netherlands Antilles"], ["New Caledonia", "New Caledonia"], ["New Zealand", "New Zealand"], ["Nicaragua", "Nicaragua"], ["Niger", "Niger"], ["Nigeria", "Nigeria"], ["Niue", "Niue"], ["Norfolk Island", "Norfolk Island"], ["Northern Mariana Islands", "Northern Mariana Islands"], ["Norway", "Norway"], ["Oman", "Oman"], ["Pakistan", "Pakistan"], ["Palau", "Palau"], ["Palestinian Territory, Occupied", "Palestinian Territory, Occupied"], ["Panama", "Panama"], ["Papua New Guinea", "Papua New Guinea"], ["Paraguay", "Paraguay"], ["Peru", "Peru"], ["Philippines", "Philippines"], ["Pitcairn", "Pitcairn"], ["Poland", "Poland"], ["Portugal", "Portugal"], ["Puerto Rico", "Puerto Rico"], ["Qatar", "Qatar"], ["Reunion", "Reunion"], ["Romania", "Romania"], ["Russian Federation", "Russian Federation"], ["Rwanda", "Rwanda"], ["Saint Helena", "Saint Helena"], ["Saint Kitts and Nevis", "Saint Kitts and Nevis"], ["Saint Lucia", "Saint Lucia"], ["Saint Pierre and Miquelon", "Saint Pierre and Miquelon"], ["Saint Vincent and The Grenadines", "Saint Vincent and The Grenadines"], ["Samoa", "Samoa"], ["San Marino", "San Marino"], ["Sao Tome and Principe", "Sao Tome and Principe"], ["Saudi Arabia", "Saudi Arabia"], ["Senegal", "Senegal"], ["Serbia and Montenegro", "Serbia and Montenegro"], ["Seychelles", "Seychelles"], ["Sierra Leone", "Sierra Leone"], ["Singapore", "Singapore"], ["Slovakia", "Slovakia"], ["Slovenia", "Slovenia"], ["Solomon Islands", "Solomon Islands"], ["Somalia", "Somalia"], ["South Africa", "South Africa"], ["South Georgia and The South Sandwich Islands", "South Georgia and The South Sandwich Islands"], ["Spain", "Spain"], ["Sri Lanka", "Sri Lanka"], ["Sudan", "Sudan"], ["Suriname", "Suriname"], ["Svalbard and Jan Mayen", "Svalbard and Jan Mayen"], ["Swaziland", "Swaziland"], ["Sweden", "Sweden"], ["Switzerland", "Switzerland"], ["Syrian Arab Republic", "Syrian Arab Republic"], ["Taiwan, Province of China", "Taiwan, Province of China"], ["Tajikistan", "Tajikistan"], ["Tanzania, United Republic of", "Tanzania, United Republic of"], ["Thailand", "Thailand"], ["Timor-leste", "Timor-leste"], ["Togo", "Togo"], ["Tokelau", "Tokelau"], ["Tonga", "Tonga"], ["Trinidad and Tobago", "Trinidad and Tobago"], ["Tunisia", "Tunisia"], ["Turkey", "Turkey"], ["Turkmenistan", "Turkmenistan"], ["Turks and Caicos Islands", "Turks and Caicos Islands"], ["Tuvalu", "Tuvalu"], ["Uganda", "Uganda"], ["Ukraine", "Ukraine"], ["United Arab Emirates", "United Arab Emirates"], ["United Kingdom", "United Kingdom"], ["United States", "United States"], ["United States Minor Outlying Islands", "US Minor Islands"], ["Uruguay", "Uruguay"], ["Uzbekistan", "Uzbekistan"], ["Vanuatu", "Vanuatu"], ["Venezuela", "Venezuela"], ["Viet Nam", "Viet Nam"], ["Virgin Islands, British", "Virgin Islands, British"], ["Virgin Islands, U.S.", "Virgin Islands, U.S."], ["Wallis and Futuna", "Wallis and Futuna"], ["Western Sahara", "Western Sahara"], ["Yemen", "Yemen"], ["Zambia", "Zambia"], ["Zimbabwe", "Zimbabwe"]], Order.new.shipping_country), {}, :class => "select2 form-control input-transparent"); [Escaped Output] FormBuilder.new.text_field(:shipping_telephone, :class => " form-control", :maxlength => 50, :placeholder => d4x_sanitizer(t("shipping telephone"))); [Escaped Output] FormBuilder.new.text_area(:customer_notes, :class => "form-control", :size => "100x5", :placeholder => d4x_sanitizer(t("notes for delivery")));end;[Escaped Output] check_box_tag(:agreement, nil, false);[Escaped Output] link_to(d4x_sanitizer(t("i agree with terms and conditions")), "/terms");[Escaped Output] FormBuilder.new.submit(d4x_sanitizer(t("place order")), :class => "btn btn-outline-primary", :id => "place-order"); end

orders/_form.["Template:orders/edit"]

[Escaped Output] javascript_include_tag("d4x-order.js")
[Escaped Output] hidden_field_tag(:cart_id, @order.cart_id)
[Escaped Output] d4x_sanitizer(t("place order"))
[Escaped Output] FormBuilder.new.text_field(:first_name, :class => " form-control", :placeholder => d4x_sanitizer(t("firstname")))
[Escaped Output] FormBuilder.new.text_field(:last_name, :class => " form-control", :placeholder => d4x_sanitizer(t("lastname")))
[Escaped Output] FormBuilder.new.text_field(:address, :class => " form-control", :placeholder => d4x_sanitizer(t("address")))
[Escaped Output] FormBuilder.new.text_field(:town, :class => " form-control", :placeholder => d4x_sanitizer(t("town")))
[Escaped Output] FormBuilder.new.text_field(:city, :class => " form-control", :placeholder => d4x_sanitizer(t("city")))
[Escaped Output] FormBuilder.new.text_field(:zip, :class => " form-control", :placeholder => d4x_sanitizer(t("ZIP")), :maxlength => 5)
[Escaped Output] FormBuilder.new.text_field(:telephone, :class => " form-control", :maxlength => 50, :placeholder => d4x_sanitizer(t("telephone")))
[Escaped Output] FormBuilder.new.select(:country, options_for_select([["United States", "United States"], ["United Kingdom", "United Kingdom"], ["Afghanistan", "Afghanistan"], ["Albania", "Albania"], ["Algeria", "Algeria"], ["American Samoa", "American Samoa"], ["Andorra", "Andorra"], ["Angola", "Angola"], ["Anguilla", "Anguilla"], ["Antarctica", "Antarctica"], ["Antigua and Barbuda", "Antigua and Barbuda"], ["Argentina", "Argentina"], ["Armenia", "Armenia"], ["Aruba", "Aruba"], ["Australia", "Australia"], ["Austria", "Austria"], ["Azerbaijan", "Azerbaijan"], ["Bahamas", "Bahamas"], ["Bahrain", "Bahrain"], ["Bangladesh", "Bangladesh"], ["Barbados", "Barbadados"], ["Belarus", "Belarus"], ["Belgium", "Belgium"], ["Belize", "Belize"], ["Benin", "Benin"], ["Bermuda", "Bermuda"], ["Bhutan", "Bhutan"], ["Bolivia", "Bolivia"], ["Bosnia and Heimage_tagrzegovina", "Bosnia and Herzegovina"], ["Botswana", "Botswana"], ["Bouvet Island", "Bouvet Island"], ["Brazil", "Brazil"], ["British Indian Ocean Territory", "British Indian Ocean Territory"], ["Brunei Darussalam", "Brunei Darussalam"], ["Bulgaria", "Bulgaria"], ["Burkina Faso", "Burkina Faso"], ["Burundi", "Burundi"], ["Cambodia", "Cambodia"], ["Cameroon", "Cameroon"], ["Canada", "Canada"], ["Cape Verde", "Cape Verde,"], ["Cayman Islands", "Cayman Islands"], ["Central African Republic", "Central African Republic"], ["Chad", "Chad"], ["Chile", "Chile"], ["China", "China"], ["Christmas Island", "Christmas Island"], ["Cocos (Keeling) Islands", "Cocos (Keeling) Islands"], ["Colombia", "Colombia"], ["Comoros", "Comoros"], ["Congo", "Congo"], ["Congo, The Democratic Republic of The", "Congo, The Democratic Republic of The"], ["Cook Islands", "Cook Islands"], ["Costa Rica", "Costa Rica"], ["Cote Ivoire", "Cote D Ivoire"], ["Croatia", "Croatia"], ["Cuba", "Cuba"], ["Cyprus", "Cyprus"], ["Czech Republic", "Czech Republic"], ["Denmark", "Denmark"], ["Djibouti", "Djibouti"], ["Dominica", "Dominica"], ["Dominican Republic", "Dominican Republic"], ["Ecuador", "Ecuador"], ["Egypt", "Egypt"], ["El Salvador", "El Salvador"], ["Equatorial Guinea", "Equatorial Guinea"], ["Eritrea", "Eritrea"], ["Estonia", "Estonia"], ["Ethiopia", "Ethiopia"], ["Falkland Islands (Malvinas)", "Falkland Islands (Malvinas)"], ["Faroe Islands", "Faroe Islands"], ["Fiji", "Fiji"], ["Finland", "Finland"], ["France", "France"], ["French Guiana", "French Guiana"], ["French Polynesia", "French Polynesia"], ["French Southern Territories", "French Southern Territories"], ["Gabon", "Gabon"], ["Gambia", "Gambia"], ["Georgia", "Georgia"], ["Germany", "Germany"], ["Ghana", "Ghana"], ["Gibraltar", "Gibraltar"], ["Greece", "Greece"], ["Greenland", "Greenland"], ["Grenada", "Grenada"], ["Guadeloupe", "Guadeloupe"], ["Guam", "Guam"], ["Guatemala", "Guatemala"], ["Guinea", "Guinea"], ["Guinea-bissau", "Guinea-bissau"], ["Guyana", "Guyana"], ["Haiti", "Haiti"], ["Heard Island and Mcdonald Islands", "Heard Island and Mcdonald Islands"], ["Holy See (Vatican City State)", "Holy See (Vatican City State)"], ["Honduras", "Honduras"], ["Hong Kong", "Hon g Kong"], ["Hungary", "Hungary"], ["Iceland", "Iceland"], ["India", "India"], ["Indonesia", "Indonesia"], ["Iran, Islamic Republic of", "Iran, Islamic Republic of"], ["Iraq", "Iraq"], ["Ireland", "Ireland"], ["Israel", "Israel"], ["Italy", "Italy"], ["Jamaica", "Jamaica"], ["Japan", "Japan"], ["Jordan", "Jordan"], ["Kazakhstan", "Kazakhstan"], ["Kenya", "Kenya"], ["Kiribati", "Kiribati"], ["Korea, Democratic People Republic of", "Korea, Democratic People Republic of"], ["Korea, Republic of", "Korea, Republic of"], ["Kuwait", "Kuwait"], ["Kyrgyzstan", "Kyrgyzstan"], ["Lao People Democratic Republic", "Lao People Democratic Republic"], ["Latvia", "Latvia"], ["Lebanon", "Lebanon"], ["Lesotho", "Lesotho"], ["Liberia", "Liberia"], ["Libyan Arab Jamahiriya", "Libyan Arab Jamahiriya"], ["Liechtenstein", "Liechtenstein"], ["Lithuania", "Lithuania"], ["Luxembourg", "Luxembourg"], ["Macao", "Macao"], ["Macedonia, The Former Yugoslav Republic of", "Macedonia, The Former Yugoslav Republic of"], ["Madagascar", "Madagascar"], ["Malawi", "Malawi"], ["Malaysia", "Malaysia"], ["Maldives", "Maldives"], ["Mali", "Mali"], ["Malta", "Malta"], ["Marshall Islands", "Marshall Islands"], ["Martinique", "Martinique"], ["Mauritania", "Mauritania"], ["Mauritius", "Mauritius"], ["Mayotte", "Mayotte"], ["Mexico", "Mexico"], ["Micronesia, Federated States of", "Micronesia, Federated States of"], ["Moldova, Republic of", "Moldova, Republic of"], ["Monaco", "Monaco"], ["Mongolia", "Mongolia"], ["Montserrat", "Montserrat"], ["Morocco", "Morocco"], ["Mozambique", "Mozambique"], ["Myanmar", "Myanmar"], ["Namibia", "Namibia"], ["Nauru", "Nauru"], ["Nepal", "Nepal"], ["Netherlands", "Netherlands"], ["Netherlands Antilles", "Netherlands Antilles"], ["New Caledonia", "New Caledonia"], ["New Zealand", "New Zealand"], ["Nicaragua", "Nicaragua"], ["Niger", "Niger"], ["Nigeria", "Nigeria"], ["Niue", "Niue"], ["Norfolk Island", "Norfolk Island"], ["Northern Mariana Islands", "Northern Mariana Islands"], ["Norway", "Norway"], ["Oman", "Oman"], ["Pakistan", "Pakistan"], ["Palau", "Palau"], ["Palestinian Territory, Occupied", "Palestinian Territory, Occupied"], ["Panama", "Panama"], ["Papua New Guinea", "Papua New Guinea"], ["Paraguay", "Paraguay"], ["Peru", "Peru"], ["Philippines", "Philippines"], ["Pitcairn", "Pitcairn"], ["Poland", "Poland"], ["Portugal", "Portugal"], ["Puerto Rico", "Puerto Rico"], ["Qatar", "Qatar"], ["Reunion", "Reunion"], ["Romania", "Romania"], ["Russian Federation", "Russian Federation"], ["Rwanda", "Rwanda"], ["Saint Helena", "Saint Helena"], ["Saint Kitts and Nevis", "Saint Kitts and Nevis"], ["Saint Lucia", "Saint Lucia"], ["Saint Pierre and Miquelon", "Saint Pierre and Miquelon"], ["Saint Vincent and The Grenadines", "Saint Vincent and The Grenadines"], ["Samoa", "Samoa"], ["San Marino", "San Marino"], ["Sao Tome and Principe", "Sao Tome and Principe"], ["Saudi Arabia", "Saudi Arabia"], ["Senegal", "Senegal"], ["Serbia and Montenegro", "Serbia and Montenegro"], ["Seychelles", "Seychelles"], ["Sierra Leone", "Sierra Leone"], ["Singapore", "Singapore"], ["Slovakia", "Slovakia"], ["Slovenia", "Slovenia"], ["Solomon Islands", "Solomon Islands"], ["Somalia", "Somalia"], ["South Africa", "South Africa"], ["South Georgia and The South Sandwich Islands", "South Georgia and The South Sandwich Islands"], ["Spain", "Spain"], ["Sri Lanka", "Sri Lanka"], ["Sudan", "Sudan"], ["Suriname", "Suriname"], ["Svalbard and Jan Mayen", "Svalbard and Jan Mayen"], ["Swaziland", "Swaziland"], ["Sweden", "Sweden"], ["Switzerland", "Switzerland"], ["Syrian Arab Republic", "Syrian Arab Republic"], ["Taiwan, Province of China", "Taiwan, Province of China"], ["Tajikistan", "Tajikistan"], ["Tanzania, United Republic of", "Tanzania, United Republic of"], ["Thailand", "Thailand"], ["Timor-leste", "Timor-leste"], ["Togo", "Togo"], ["Tokelau", "Tokelau"], ["Tonga", "Tonga"], ["Trinidad and Tobago", "Trinidad and Tobago"], ["Tunisia", "Tunisia"], ["Turkey", "Turkey"], ["Turkmenistan", "Turkmenistan"], ["Turks and Caicos Islands", "Turks and Caicos Islands"], ["Tuvalu", "Tuvalu"], ["Uganda", "Uganda"], ["Ukraine", "Ukraine"], ["United Arab Emirates", "United Arab Emirates"], ["United Kingdom", "United Kingdom"], ["United States", "United States"], ["United States Minor Outlying Islands", "US Minor Islands"], ["Uruguay", "Uruguay"], ["Uzbekistan", "Uzbekistan"], ["Vanuatu", "Vanuatu"], ["Venezuela", "Venezuela"], ["Viet Nam", "Viet Nam"], ["Virgin Islands, British", "Virgin Islands, British"], ["Virgin Islands, U.S.", "Virgin Islands, U.S."], ["Wallis and Futuna", "Wallis and Futuna"], ["Western Sahara", "Western Sahara"], ["Yemen", "Yemen"], ["Zambia", "Zambia"], ["Zimbabwe", "Zimbabwe"]], @order.country), {}, :class => "select2 form-control input-transparent")
[Escaped Output] check_box_tag(:same_address)
[Escaped Output] d4x_sanitizer(t("shipping address is billing address"))
[Escaped Output] d4x_sanitizer(t("shipping details"))
[Escaped Output] FormBuilder.new.text_field(:shipping_first_name, :class => " form-control", :maxlength => 50, :placeholder => "Shipping First Name")
[Escaped Output] FormBuilder.new.text_field(:shipping_last_name, :class => " form-control", :placeholder => d4x_sanitizer(t("lastname")))
[Escaped Output] FormBuilder.new.text_field(:shipping_address, :class => " form-control", :placeholder => d4x_sanitizer(t("shipping address")))
[Escaped Output] FormBuilder.new.text_field(:shipping_town, :class => " form-control", :placeholder => d4x_sanitizer(t("shipping town")))
[Escaped Output] FormBuilder.new.text_field(:shipping_city, :class => " form-control", :placeholder => d4x_sanitizer(t("shipping city")))
[Escaped Output] FormBuilder.new.text_field(:shipping_zip, :class => " form-control", :placeholder => d4x_sanitizer(t("shipping zip")), :maxlength => 5)
[Escaped Output] FormBuilder.new.select(:shipping_country, options_for_select([["United States", "United States"], ["United Kingdom", "United Kingdom"], ["Afghanistan", "Afghanistan"], ["Albania", "Albania"], ["Algeria", "Algeria"], ["American Samoa", "American Samoa"], ["Andorra", "Andorra"], ["Angola", "Angola"], ["Anguilla", "Anguilla"], ["Antarctica", "Antarctica"], ["Antigua and Barbuda", "Antigua and Barbuda"], ["Argentina", "Argentina"], ["Armenia", "Armenia"], ["Aruba", "Aruba"], ["Australia", "Australia"], ["Austria", "Austria"], ["Azerbaijan", "Azerbaijan"], ["Bahamas", "Bahamas"], ["Bahrain", "Bahrain"], ["Bangladesh", "Bangladesh"], ["Barbados", "Barbadados"], ["Belarus", "Belarus"], ["Belgium", "Belgium"], ["Belize", "Belize"], ["Benin", "Benin"], ["Bermuda", "Bermuda"], ["Bhutan", "Bhutan"], ["Bolivia", "Bolivia"], ["Bosnia and Heimage_tagrzegovina", "Bosnia and Herzegovina"], ["Botswana", "Botswana"], ["Bouvet Island", "Bouvet Island"], ["Brazil", "Brazil"], ["British Indian Ocean Territory", "British Indian Ocean Territory"], ["Brunei Darussalam", "Brunei Darussalam"], ["Bulgaria", "Bulgaria"], ["Burkina Faso", "Burkina Faso"], ["Burundi", "Burundi"], ["Cambodia", "Cambodia"], ["Cameroon", "Cameroon"], ["Canada", "Canada"], ["Cape Verde", "Cape Verde,"], ["Cayman Islands", "Cayman Islands"], ["Central African Republic", "Central African Republic"], ["Chad", "Chad"], ["Chile", "Chile"], ["China", "China"], ["Christmas Island", "Christmas Island"], ["Cocos (Keeling) Islands", "Cocos (Keeling) Islands"], ["Colombia", "Colombia"], ["Comoros", "Comoros"], ["Congo", "Congo"], ["Congo, The Democratic Republic of The", "Congo, The Democratic Republic of The"], ["Cook Islands", "Cook Islands"], ["Costa Rica", "Costa Rica"], ["Cote Ivoire", "Cote D Ivoire"], ["Croatia", "Croatia"], ["Cuba", "Cuba"], ["Cyprus", "Cyprus"], ["Czech Republic", "Czech Republic"], ["Denmark", "Denmark"], ["Djibouti", "Djibouti"], ["Dominica", "Dominica"], ["Dominican Republic", "Dominican Republic"], ["Ecuador", "Ecuador"], ["Egypt", "Egypt"], ["El Salvador", "El Salvador"], ["Equatorial Guinea", "Equatorial Guinea"], ["Eritrea", "Eritrea"], ["Estonia", "Estonia"], ["Ethiopia", "Ethiopia"], ["Falkland Islands (Malvinas)", "Falkland Islands (Malvinas)"], ["Faroe Islands", "Faroe Islands"], ["Fiji", "Fiji"], ["Finland", "Finland"], ["France", "France"], ["French Guiana", "French Guiana"], ["French Polynesia", "French Polynesia"], ["French Southern Territories", "French Southern Territories"], ["Gabon", "Gabon"], ["Gambia", "Gambia"], ["Georgia", "Georgia"], ["Germany", "Germany"], ["Ghana", "Ghana"], ["Gibraltar", "Gibraltar"], ["Greece", "Greece"], ["Greenland", "Greenland"], ["Grenada", "Grenada"], ["Guadeloupe", "Guadeloupe"], ["Guam", "Guam"], ["Guatemala", "Guatemala"], ["Guinea", "Guinea"], ["Guinea-bissau", "Guinea-bissau"], ["Guyana", "Guyana"], ["Haiti", "Haiti"], ["Heard Island and Mcdonald Islands", "Heard Island and Mcdonald Islands"], ["Holy See (Vatican City State)", "Holy See (Vatican City State)"], ["Honduras", "Honduras"], ["Hong Kong", "Hon g Kong"], ["Hungary", "Hungary"], ["Iceland", "Iceland"], ["India", "India"], ["Indonesia", "Indonesia"], ["Iran, Islamic Republic of", "Iran, Islamic Republic of"], ["Iraq", "Iraq"], ["Ireland", "Ireland"], ["Israel", "Israel"], ["Italy", "Italy"], ["Jamaica", "Jamaica"], ["Japan", "Japan"], ["Jordan", "Jordan"], ["Kazakhstan", "Kazakhstan"], ["Kenya", "Kenya"], ["Kiribati", "Kiribati"], ["Korea, Democratic People Republic of", "Korea, Democratic People Republic of"], ["Korea, Republic of", "Korea, Republic of"], ["Kuwait", "Kuwait"], ["Kyrgyzstan", "Kyrgyzstan"], ["Lao People Democratic Republic", "Lao People Democratic Republic"], ["Latvia", "Latvia"], ["Lebanon", "Lebanon"], ["Lesotho", "Lesotho"], ["Liberia", "Liberia"], ["Libyan Arab Jamahiriya", "Libyan Arab Jamahiriya"], ["Liechtenstein", "Liechtenstein"], ["Lithuania", "Lithuania"], ["Luxembourg", "Luxembourg"], ["Macao", "Macao"], ["Macedonia, The Former Yugoslav Republic of", "Macedonia, The Former Yugoslav Republic of"], ["Madagascar", "Madagascar"], ["Malawi", "Malawi"], ["Malaysia", "Malaysia"], ["Maldives", "Maldives"], ["Mali", "Mali"], ["Malta", "Malta"], ["Marshall Islands", "Marshall Islands"], ["Martinique", "Martinique"], ["Mauritania", "Mauritania"], ["Mauritius", "Mauritius"], ["Mayotte", "Mayotte"], ["Mexico", "Mexico"], ["Micronesia, Federated States of", "Micronesia, Federated States of"], ["Moldova, Republic of", "Moldova, Republic of"], ["Monaco", "Monaco"], ["Mongolia", "Mongolia"], ["Montserrat", "Montserrat"], ["Morocco", "Morocco"], ["Mozambique", "Mozambique"], ["Myanmar", "Myanmar"], ["Namibia", "Namibia"], ["Nauru", "Nauru"], ["Nepal", "Nepal"], ["Netherlands", "Netherlands"], ["Netherlands Antilles", "Netherlands Antilles"], ["New Caledonia", "New Caledonia"], ["New Zealand", "New Zealand"], ["Nicaragua", "Nicaragua"], ["Niger", "Niger"], ["Nigeria", "Nigeria"], ["Niue", "Niue"], ["Norfolk Island", "Norfolk Island"], ["Northern Mariana Islands", "Northern Mariana Islands"], ["Norway", "Norway"], ["Oman", "Oman"], ["Pakistan", "Pakistan"], ["Palau", "Palau"], ["Palestinian Territory, Occupied", "Palestinian Territory, Occupied"], ["Panama", "Panama"], ["Papua New Guinea", "Papua New Guinea"], ["Paraguay", "Paraguay"], ["Peru", "Peru"], ["Philippines", "Philippines"], ["Pitcairn", "Pitcairn"], ["Poland", "Poland"], ["Portugal", "Portugal"], ["Puerto Rico", "Puerto Rico"], ["Qatar", "Qatar"], ["Reunion", "Reunion"], ["Romania", "Romania"], ["Russian Federation", "Russian Federation"], ["Rwanda", "Rwanda"], ["Saint Helena", "Saint Helena"], ["Saint Kitts and Nevis", "Saint Kitts and Nevis"], ["Saint Lucia", "Saint Lucia"], ["Saint Pierre and Miquelon", "Saint Pierre and Miquelon"], ["Saint Vincent and The Grenadines", "Saint Vincent and The Grenadines"], ["Samoa", "Samoa"], ["San Marino", "San Marino"], ["Sao Tome and Principe", "Sao Tome and Principe"], ["Saudi Arabia", "Saudi Arabia"], ["Senegal", "Senegal"], ["Serbia and Montenegro", "Serbia and Montenegro"], ["Seychelles", "Seychelles"], ["Sierra Leone", "Sierra Leone"], ["Singapore", "Singapore"], ["Slovakia", "Slovakia"], ["Slovenia", "Slovenia"], ["Solomon Islands", "Solomon Islands"], ["Somalia", "Somalia"], ["South Africa", "South Africa"], ["South Georgia and The South Sandwich Islands", "South Georgia and The South Sandwich Islands"], ["Spain", "Spain"], ["Sri Lanka", "Sri Lanka"], ["Sudan", "Sudan"], ["Suriname", "Suriname"], ["Svalbard and Jan Mayen", "Svalbard and Jan Mayen"], ["Swaziland", "Swaziland"], ["Sweden", "Sweden"], ["Switzerland", "Switzerland"], ["Syrian Arab Republic", "Syrian Arab Republic"], ["Taiwan, Province of China", "Taiwan, Province of China"], ["Tajikistan", "Tajikistan"], ["Tanzania, United Republic of", "Tanzania, United Republic of"], ["Thailand", "Thailand"], ["Timor-leste", "Timor-leste"], ["Togo", "Togo"], ["Tokelau", "Tokelau"], ["Tonga", "Tonga"], ["Trinidad and Tobago", "Trinidad and Tobago"], ["Tunisia", "Tunisia"], ["Turkey", "Turkey"], ["Turkmenistan", "Turkmenistan"], ["Turks and Caicos Islands", "Turks and Caicos Islands"], ["Tuvalu", "Tuvalu"], ["Uganda", "Uganda"], ["Ukraine", "Ukraine"], ["United Arab Emirates", "United Arab Emirates"], ["United Kingdom", "United Kingdom"], ["United States", "United States"], ["United States Minor Outlying Islands", "US Minor Islands"], ["Uruguay", "Uruguay"], ["Uzbekistan", "Uzbekistan"], ["Vanuatu", "Vanuatu"], ["Venezuela", "Venezuela"], ["Viet Nam", "Viet Nam"], ["Virgin Islands, British", "Virgin Islands, British"], ["Virgin Islands, U.S.", "Virgin Islands, U.S."], ["Wallis and Futuna", "Wallis and Futuna"], ["Western Sahara", "Western Sahara"], ["Yemen", "Yemen"], ["Zambia", "Zambia"], ["Zimbabwe", "Zimbabwe"]], @order.shipping_country), {}, :class => "select2 form-control input-transparent")
[Escaped Output] FormBuilder.new.text_field(:shipping_telephone, :class => " form-control", :maxlength => 50, :placeholder => d4x_sanitizer(t("shipping telephone")))
[Escaped Output] FormBuilder.new.text_area(:customer_notes, :class => "form-control", :size => "100x5", :placeholder => d4x_sanitizer(t("notes for delivery")))
[Escaped Output] check_box_tag(:agreement, nil, false)
[Escaped Output] link_to(d4x_sanitizer(t("i agree with terms and conditions")), "/terms")
[Escaped Output] FormBuilder.new.submit(d4x_sanitizer(t("place order")), :class => "btn btn-outline-primary", :id => "place-order")
[Escaped Output] form_for(@order) do; [Escaped Output] hidden_field_tag(:cart_id, @order.cart_id);[Escaped Output] d4x_sanitizer(t("place order"));[Escaped Output] FormBuilder.new.text_field(:first_name, :class => " form-control", :placeholder => d4x_sanitizer(t("firstname")));[Escaped Output] FormBuilder.new.text_field(:last_name, :class => " form-control", :placeholder => d4x_sanitizer(t("lastname")));[Escaped Output] FormBuilder.new.text_field(:address, :class => " form-control", :placeholder => d4x_sanitizer(t("address")));[Escaped Output] FormBuilder.new.text_field(:town, :class => " form-control", :placeholder => d4x_sanitizer(t("town")));[Escaped Output] FormBuilder.new.text_field(:city, :class => " form-control", :placeholder => d4x_sanitizer(t("city")));[Escaped Output] FormBuilder.new.text_field(:zip, :class => " form-control", :placeholder => d4x_sanitizer(t("ZIP")), :maxlength => 5);[Escaped Output] FormBuilder.new.text_field(:telephone, :class => " form-control", :maxlength => 50, :placeholder => d4x_sanitizer(t("telephone")));[Escaped Output] FormBuilder.new.select(:country, options_for_select([["United States", "United States"], ["United Kingdom", "United Kingdom"], ["Afghanistan", "Afghanistan"], ["Albania", "Albania"], ["Algeria", "Algeria"], ["American Samoa", "American Samoa"], ["Andorra", "Andorra"], ["Angola", "Angola"], ["Anguilla", "Anguilla"], ["Antarctica", "Antarctica"], ["Antigua and Barbuda", "Antigua and Barbuda"], ["Argentina", "Argentina"], ["Armenia", "Armenia"], ["Aruba", "Aruba"], ["Australia", "Australia"], ["Austria", "Austria"], ["Azerbaijan", "Azerbaijan"], ["Bahamas", "Bahamas"], ["Bahrain", "Bahrain"], ["Bangladesh", "Bangladesh"], ["Barbados", "Barbadados"], ["Belarus", "Belarus"], ["Belgium", "Belgium"], ["Belize", "Belize"], ["Benin", "Benin"], ["Bermuda", "Bermuda"], ["Bhutan", "Bhutan"], ["Bolivia", "Bolivia"], ["Bosnia and Heimage_tagrzegovina", "Bosnia and Herzegovina"], ["Botswana", "Botswana"], ["Bouvet Island", "Bouvet Island"], ["Brazil", "Brazil"], ["British Indian Ocean Territory", "British Indian Ocean Territory"], ["Brunei Darussalam", "Brunei Darussalam"], ["Bulgaria", "Bulgaria"], ["Burkina Faso", "Burkina Faso"], ["Burundi", "Burundi"], ["Cambodia", "Cambodia"], ["Cameroon", "Cameroon"], ["Canada", "Canada"], ["Cape Verde", "Cape Verde,"], ["Cayman Islands", "Cayman Islands"], ["Central African Republic", "Central African Republic"], ["Chad", "Chad"], ["Chile", "Chile"], ["China", "China"], ["Christmas Island", "Christmas Island"], ["Cocos (Keeling) Islands", "Cocos (Keeling) Islands"], ["Colombia", "Colombia"], ["Comoros", "Comoros"], ["Congo", "Congo"], ["Congo, The Democratic Republic of The", "Congo, The Democratic Republic of The"], ["Cook Islands", "Cook Islands"], ["Costa Rica", "Costa Rica"], ["Cote Ivoire", "Cote D Ivoire"], ["Croatia", "Croatia"], ["Cuba", "Cuba"], ["Cyprus", "Cyprus"], ["Czech Republic", "Czech Republic"], ["Denmark", "Denmark"], ["Djibouti", "Djibouti"], ["Dominica", "Dominica"], ["Dominican Republic", "Dominican Republic"], ["Ecuador", "Ecuador"], ["Egypt", "Egypt"], ["El Salvador", "El Salvador"], ["Equatorial Guinea", "Equatorial Guinea"], ["Eritrea", "Eritrea"], ["Estonia", "Estonia"], ["Ethiopia", "Ethiopia"], ["Falkland Islands (Malvinas)", "Falkland Islands (Malvinas)"], ["Faroe Islands", "Faroe Islands"], ["Fiji", "Fiji"], ["Finland", "Finland"], ["France", "France"], ["French Guiana", "French Guiana"], ["French Polynesia", "French Polynesia"], ["French Southern Territories", "French Southern Territories"], ["Gabon", "Gabon"], ["Gambia", "Gambia"], ["Georgia", "Georgia"], ["Germany", "Germany"], ["Ghana", "Ghana"], ["Gibraltar", "Gibraltar"], ["Greece", "Greece"], ["Greenland", "Greenland"], ["Grenada", "Grenada"], ["Guadeloupe", "Guadeloupe"], ["Guam", "Guam"], ["Guatemala", "Guatemala"], ["Guinea", "Guinea"], ["Guinea-bissau", "Guinea-bissau"], ["Guyana", "Guyana"], ["Haiti", "Haiti"], ["Heard Island and Mcdonald Islands", "Heard Island and Mcdonald Islands"], ["Holy See (Vatican City State)", "Holy See (Vatican City State)"], ["Honduras", "Honduras"], ["Hong Kong", "Hon g Kong"], ["Hungary", "Hungary"], ["Iceland", "Iceland"], ["India", "India"], ["Indonesia", "Indonesia"], ["Iran, Islamic Republic of", "Iran, Islamic Republic of"], ["Iraq", "Iraq"], ["Ireland", "Ireland"], ["Israel", "Israel"], ["Italy", "Italy"], ["Jamaica", "Jamaica"], ["Japan", "Japan"], ["Jordan", "Jordan"], ["Kazakhstan", "Kazakhstan"], ["Kenya", "Kenya"], ["Kiribati", "Kiribati"], ["Korea, Democratic People Republic of", "Korea, Democratic People Republic of"], ["Korea, Republic of", "Korea, Republic of"], ["Kuwait", "Kuwait"], ["Kyrgyzstan", "Kyrgyzstan"], ["Lao People Democratic Republic", "Lao People Democratic Republic"], ["Latvia", "Latvia"], ["Lebanon", "Lebanon"], ["Lesotho", "Lesotho"], ["Liberia", "Liberia"], ["Libyan Arab Jamahiriya", "Libyan Arab Jamahiriya"], ["Liechtenstein", "Liechtenstein"], ["Lithuania", "Lithuania"], ["Luxembourg", "Luxembourg"], ["Macao", "Macao"], ["Macedonia, The Former Yugoslav Republic of", "Macedonia, The Former Yugoslav Republic of"], ["Madagascar", "Madagascar"], ["Malawi", "Malawi"], ["Malaysia", "Malaysia"], ["Maldives", "Maldives"], ["Mali", "Mali"], ["Malta", "Malta"], ["Marshall Islands", "Marshall Islands"], ["Martinique", "Martinique"], ["Mauritania", "Mauritania"], ["Mauritius", "Mauritius"], ["Mayotte", "Mayotte"], ["Mexico", "Mexico"], ["Micronesia, Federated States of", "Micronesia, Federated States of"], ["Moldova, Republic of", "Moldova, Republic of"], ["Monaco", "Monaco"], ["Mongolia", "Mongolia"], ["Montserrat", "Montserrat"], ["Morocco", "Morocco"], ["Mozambique", "Mozambique"], ["Myanmar", "Myanmar"], ["Namibia", "Namibia"], ["Nauru", "Nauru"], ["Nepal", "Nepal"], ["Netherlands", "Netherlands"], ["Netherlands Antilles", "Netherlands Antilles"], ["New Caledonia", "New Caledonia"], ["New Zealand", "New Zealand"], ["Nicaragua", "Nicaragua"], ["Niger", "Niger"], ["Nigeria", "Nigeria"], ["Niue", "Niue"], ["Norfolk Island", "Norfolk Island"], ["Northern Mariana Islands", "Northern Mariana Islands"], ["Norway", "Norway"], ["Oman", "Oman"], ["Pakistan", "Pakistan"], ["Palau", "Palau"], ["Palestinian Territory, Occupied", "Palestinian Territory, Occupied"], ["Panama", "Panama"], ["Papua New Guinea", "Papua New Guinea"], ["Paraguay", "Paraguay"], ["Peru", "Peru"], ["Philippines", "Philippines"], ["Pitcairn", "Pitcairn"], ["Poland", "Poland"], ["Portugal", "Portugal"], ["Puerto Rico", "Puerto Rico"], ["Qatar", "Qatar"], ["Reunion", "Reunion"], ["Romania", "Romania"], ["Russian Federation", "Russian Federation"], ["Rwanda", "Rwanda"], ["Saint Helena", "Saint Helena"], ["Saint Kitts and Nevis", "Saint Kitts and Nevis"], ["Saint Lucia", "Saint Lucia"], ["Saint Pierre and Miquelon", "Saint Pierre and Miquelon"], ["Saint Vincent and The Grenadines", "Saint Vincent and The Grenadines"], ["Samoa", "Samoa"], ["San Marino", "San Marino"], ["Sao Tome and Principe", "Sao Tome and Principe"], ["Saudi Arabia", "Saudi Arabia"], ["Senegal", "Senegal"], ["Serbia and Montenegro", "Serbia and Montenegro"], ["Seychelles", "Seychelles"], ["Sierra Leone", "Sierra Leone"], ["Singapore", "Singapore"], ["Slovakia", "Slovakia"], ["Slovenia", "Slovenia"], ["Solomon Islands", "Solomon Islands"], ["Somalia", "Somalia"], ["South Africa", "South Africa"], ["South Georgia and The South Sandwich Islands", "South Georgia and The South Sandwich Islands"], ["Spain", "Spain"], ["Sri Lanka", "Sri Lanka"], ["Sudan", "Sudan"], ["Suriname", "Suriname"], ["Svalbard and Jan Mayen", "Svalbard and Jan Mayen"], ["Swaziland", "Swaziland"], ["Sweden", "Sweden"], ["Switzerland", "Switzerland"], ["Syrian Arab Republic", "Syrian Arab Republic"], ["Taiwan, Province of China", "Taiwan, Province of China"], ["Tajikistan", "Tajikistan"], ["Tanzania, United Republic of", "Tanzania, United Republic of"], ["Thailand", "Thailand"], ["Timor-leste", "Timor-leste"], ["Togo", "Togo"], ["Tokelau", "Tokelau"], ["Tonga", "Tonga"], ["Trinidad and Tobago", "Trinidad and Tobago"], ["Tunisia", "Tunisia"], ["Turkey", "Turkey"], ["Turkmenistan", "Turkmenistan"], ["Turks and Caicos Islands", "Turks and Caicos Islands"], ["Tuvalu", "Tuvalu"], ["Uganda", "Uganda"], ["Ukraine", "Ukraine"], ["United Arab Emirates", "United Arab Emirates"], ["United Kingdom", "United Kingdom"], ["United States", "United States"], ["United States Minor Outlying Islands", "US Minor Islands"], ["Uruguay", "Uruguay"], ["Uzbekistan", "Uzbekistan"], ["Vanuatu", "Vanuatu"], ["Venezuela", "Venezuela"], ["Viet Nam", "Viet Nam"], ["Virgin Islands, British", "Virgin Islands, British"], ["Virgin Islands, U.S.", "Virgin Islands, U.S."], ["Wallis and Futuna", "Wallis and Futuna"], ["Western Sahara", "Western Sahara"], ["Yemen", "Yemen"], ["Zambia", "Zambia"], ["Zimbabwe", "Zimbabwe"]], @order.country), {}, :class => "select2 form-control input-transparent");if all_services(@cart.id) then; [Escaped Output] check_box_tag(:same_address); [Escaped Output] d4x_sanitizer(t("shipping address is billing address")); [Escaped Output] d4x_sanitizer(t("shipping details")); [Escaped Output] FormBuilder.new.text_field(:shipping_first_name, :class => " form-control", :maxlength => 50, :placeholder => "Shipping First Name"); [Escaped Output] FormBuilder.new.text_field(:shipping_last_name, :class => " form-control", :placeholder => d4x_sanitizer(t("lastname"))); [Escaped Output] FormBuilder.new.text_field(:shipping_address, :class => " form-control", :placeholder => d4x_sanitizer(t("shipping address"))); [Escaped Output] FormBuilder.new.text_field(:shipping_town, :class => " form-control", :placeholder => d4x_sanitizer(t("shipping town"))); [Escaped Output] FormBuilder.new.text_field(:shipping_city, :class => " form-control", :placeholder => d4x_sanitizer(t("shipping city"))); [Escaped Output] FormBuilder.new.text_field(:shipping_zip, :class => " form-control", :placeholder => d4x_sanitizer(t("shipping zip")), :maxlength => 5); [Escaped Output] FormBuilder.new.select(:shipping_country, options_for_select([["United States", "United States"], ["United Kingdom", "United Kingdom"], ["Afghanistan", "Afghanistan"], ["Albania", "Albania"], ["Algeria", "Algeria"], ["American Samoa", "American Samoa"], ["Andorra", "Andorra"], ["Angola", "Angola"], ["Anguilla", "Anguilla"], ["Antarctica", "Antarctica"], ["Antigua and Barbuda", "Antigua and Barbuda"], ["Argentina", "Argentina"], ["Armenia", "Armenia"], ["Aruba", "Aruba"], ["Australia", "Australia"], ["Austria", "Austria"], ["Azerbaijan", "Azerbaijan"], ["Bahamas", "Bahamas"], ["Bahrain", "Bahrain"], ["Bangladesh", "Bangladesh"], ["Barbados", "Barbadados"], ["Belarus", "Belarus"], ["Belgium", "Belgium"], ["Belize", "Belize"], ["Benin", "Benin"], ["Bermuda", "Bermuda"], ["Bhutan", "Bhutan"], ["Bolivia", "Bolivia"], ["Bosnia and Heimage_tagrzegovina", "Bosnia and Herzegovina"], ["Botswana", "Botswana"], ["Bouvet Island", "Bouvet Island"], ["Brazil", "Brazil"], ["British Indian Ocean Territory", "British Indian Ocean Territory"], ["Brunei Darussalam", "Brunei Darussalam"], ["Bulgaria", "Bulgaria"], ["Burkina Faso", "Burkina Faso"], ["Burundi", "Burundi"], ["Cambodia", "Cambodia"], ["Cameroon", "Cameroon"], ["Canada", "Canada"], ["Cape Verde", "Cape Verde,"], ["Cayman Islands", "Cayman Islands"], ["Central African Republic", "Central African Republic"], ["Chad", "Chad"], ["Chile", "Chile"], ["China", "China"], ["Christmas Island", "Christmas Island"], ["Cocos (Keeling) Islands", "Cocos (Keeling) Islands"], ["Colombia", "Colombia"], ["Comoros", "Comoros"], ["Congo", "Congo"], ["Congo, The Democratic Republic of The", "Congo, The Democratic Republic of The"], ["Cook Islands", "Cook Islands"], ["Costa Rica", "Costa Rica"], ["Cote Ivoire", "Cote D Ivoire"], ["Croatia", "Croatia"], ["Cuba", "Cuba"], ["Cyprus", "Cyprus"], ["Czech Republic", "Czech Republic"], ["Denmark", "Denmark"], ["Djibouti", "Djibouti"], ["Dominica", "Dominica"], ["Dominican Republic", "Dominican Republic"], ["Ecuador", "Ecuador"], ["Egypt", "Egypt"], ["El Salvador", "El Salvador"], ["Equatorial Guinea", "Equatorial Guinea"], ["Eritrea", "Eritrea"], ["Estonia", "Estonia"], ["Ethiopia", "Ethiopia"], ["Falkland Islands (Malvinas)", "Falkland Islands (Malvinas)"], ["Faroe Islands", "Faroe Islands"], ["Fiji", "Fiji"], ["Finland", "Finland"], ["France", "France"], ["French Guiana", "French Guiana"], ["French Polynesia", "French Polynesia"], ["French Southern Territories", "French Southern Territories"], ["Gabon", "Gabon"], ["Gambia", "Gambia"], ["Georgia", "Georgia"], ["Germany", "Germany"], ["Ghana", "Ghana"], ["Gibraltar", "Gibraltar"], ["Greece", "Greece"], ["Greenland", "Greenland"], ["Grenada", "Grenada"], ["Guadeloupe", "Guadeloupe"], ["Guam", "Guam"], ["Guatemala", "Guatemala"], ["Guinea", "Guinea"], ["Guinea-bissau", "Guinea-bissau"], ["Guyana", "Guyana"], ["Haiti", "Haiti"], ["Heard Island and Mcdonald Islands", "Heard Island and Mcdonald Islands"], ["Holy See (Vatican City State)", "Holy See (Vatican City State)"], ["Honduras", "Honduras"], ["Hong Kong", "Hon g Kong"], ["Hungary", "Hungary"], ["Iceland", "Iceland"], ["India", "India"], ["Indonesia", "Indonesia"], ["Iran, Islamic Republic of", "Iran, Islamic Republic of"], ["Iraq", "Iraq"], ["Ireland", "Ireland"], ["Israel", "Israel"], ["Italy", "Italy"], ["Jamaica", "Jamaica"], ["Japan", "Japan"], ["Jordan", "Jordan"], ["Kazakhstan", "Kazakhstan"], ["Kenya", "Kenya"], ["Kiribati", "Kiribati"], ["Korea, Democratic People Republic of", "Korea, Democratic People Republic of"], ["Korea, Republic of", "Korea, Republic of"], ["Kuwait", "Kuwait"], ["Kyrgyzstan", "Kyrgyzstan"], ["Lao People Democratic Republic", "Lao People Democratic Republic"], ["Latvia", "Latvia"], ["Lebanon", "Lebanon"], ["Lesotho", "Lesotho"], ["Liberia", "Liberia"], ["Libyan Arab Jamahiriya", "Libyan Arab Jamahiriya"], ["Liechtenstein", "Liechtenstein"], ["Lithuania", "Lithuania"], ["Luxembourg", "Luxembourg"], ["Macao", "Macao"], ["Macedonia, The Former Yugoslav Republic of", "Macedonia, The Former Yugoslav Republic of"], ["Madagascar", "Madagascar"], ["Malawi", "Malawi"], ["Malaysia", "Malaysia"], ["Maldives", "Maldives"], ["Mali", "Mali"], ["Malta", "Malta"], ["Marshall Islands", "Marshall Islands"], ["Martinique", "Martinique"], ["Mauritania", "Mauritania"], ["Mauritius", "Mauritius"], ["Mayotte", "Mayotte"], ["Mexico", "Mexico"], ["Micronesia, Federated States of", "Micronesia, Federated States of"], ["Moldova, Republic of", "Moldova, Republic of"], ["Monaco", "Monaco"], ["Mongolia", "Mongolia"], ["Montserrat", "Montserrat"], ["Morocco", "Morocco"], ["Mozambique", "Mozambique"], ["Myanmar", "Myanmar"], ["Namibia", "Namibia"], ["Nauru", "Nauru"], ["Nepal", "Nepal"], ["Netherlands", "Netherlands"], ["Netherlands Antilles", "Netherlands Antilles"], ["New Caledonia", "New Caledonia"], ["New Zealand", "New Zealand"], ["Nicaragua", "Nicaragua"], ["Niger", "Niger"], ["Nigeria", "Nigeria"], ["Niue", "Niue"], ["Norfolk Island", "Norfolk Island"], ["Northern Mariana Islands", "Northern Mariana Islands"], ["Norway", "Norway"], ["Oman", "Oman"], ["Pakistan", "Pakistan"], ["Palau", "Palau"], ["Palestinian Territory, Occupied", "Palestinian Territory, Occupied"], ["Panama", "Panama"], ["Papua New Guinea", "Papua New Guinea"], ["Paraguay", "Paraguay"], ["Peru", "Peru"], ["Philippines", "Philippines"], ["Pitcairn", "Pitcairn"], ["Poland", "Poland"], ["Portugal", "Portugal"], ["Puerto Rico", "Puerto Rico"], ["Qatar", "Qatar"], ["Reunion", "Reunion"], ["Romania", "Romania"], ["Russian Federation", "Russian Federation"], ["Rwanda", "Rwanda"], ["Saint Helena", "Saint Helena"], ["Saint Kitts and Nevis", "Saint Kitts and Nevis"], ["Saint Lucia", "Saint Lucia"], ["Saint Pierre and Miquelon", "Saint Pierre and Miquelon"], ["Saint Vincent and The Grenadines", "Saint Vincent and The Grenadines"], ["Samoa", "Samoa"], ["San Marino", "San Marino"], ["Sao Tome and Principe", "Sao Tome and Principe"], ["Saudi Arabia", "Saudi Arabia"], ["Senegal", "Senegal"], ["Serbia and Montenegro", "Serbia and Montenegro"], ["Seychelles", "Seychelles"], ["Sierra Leone", "Sierra Leone"], ["Singapore", "Singapore"], ["Slovakia", "Slovakia"], ["Slovenia", "Slovenia"], ["Solomon Islands", "Solomon Islands"], ["Somalia", "Somalia"], ["South Africa", "South Africa"], ["South Georgia and The South Sandwich Islands", "South Georgia and The South Sandwich Islands"], ["Spain", "Spain"], ["Sri Lanka", "Sri Lanka"], ["Sudan", "Sudan"], ["Suriname", "Suriname"], ["Svalbard and Jan Mayen", "Svalbard and Jan Mayen"], ["Swaziland", "Swaziland"], ["Sweden", "Sweden"], ["Switzerland", "Switzerland"], ["Syrian Arab Republic", "Syrian Arab Republic"], ["Taiwan, Province of China", "Taiwan, Province of China"], ["Tajikistan", "Tajikistan"], ["Tanzania, United Republic of", "Tanzania, United Republic of"], ["Thailand", "Thailand"], ["Timor-leste", "Timor-leste"], ["Togo", "Togo"], ["Tokelau", "Tokelau"], ["Tonga", "Tonga"], ["Trinidad and Tobago", "Trinidad and Tobago"], ["Tunisia", "Tunisia"], ["Turkey", "Turkey"], ["Turkmenistan", "Turkmenistan"], ["Turks and Caicos Islands", "Turks and Caicos Islands"], ["Tuvalu", "Tuvalu"], ["Uganda", "Uganda"], ["Ukraine", "Ukraine"], ["United Arab Emirates", "United Arab Emirates"], ["United Kingdom", "United Kingdom"], ["United States", "United States"], ["United States Minor Outlying Islands", "US Minor Islands"], ["Uruguay", "Uruguay"], ["Uzbekistan", "Uzbekistan"], ["Vanuatu", "Vanuatu"], ["Venezuela", "Venezuela"], ["Viet Nam", "Viet Nam"], ["Virgin Islands, British", "Virgin Islands, British"], ["Virgin Islands, U.S.", "Virgin Islands, U.S."], ["Wallis and Futuna", "Wallis and Futuna"], ["Western Sahara", "Western Sahara"], ["Yemen", "Yemen"], ["Zambia", "Zambia"], ["Zimbabwe", "Zimbabwe"]], @order.shipping_country), {}, :class => "select2 form-control input-transparent"); [Escaped Output] FormBuilder.new.text_field(:shipping_telephone, :class => " form-control", :maxlength => 50, :placeholder => d4x_sanitizer(t("shipping telephone"))); [Escaped Output] FormBuilder.new.text_area(:customer_notes, :class => "form-control", :size => "100x5", :placeholder => d4x_sanitizer(t("notes for delivery")));end;[Escaped Output] check_box_tag(:agreement, nil, false);[Escaped Output] link_to(d4x_sanitizer(t("i agree with terms and conditions")), "/terms");[Escaped Output] FormBuilder.new.submit(d4x_sanitizer(t("place order")), :class => "btn btn-outline-primary", :id => "place-order"); end

orders/_summary

[Escaped Output] d4x_sanitizer(t("order summary"))
[Escaped Output] label_tag(prod_name_by_code(row.product_id), nil, :class => "d4x-label")
[Escaped Output] label_tag(number_to_currency(row.single, :unit => "\u{20ac}"), nil, :class => "d4x-label")
[Escaped Output] label_tag(row.quantity, nil, :class => "")
[Escaped Output] label_tag(number_to_currency(row.total, :unit => "\u{20ac}"), nil, :class => "")
[Escaped Output] label_tag(d4x_sanitizer(t("total order")), nil, :class => "d4x-label")
[Escaped Output] label_tag(number_to_currency(@order.total, :unit => "\u{20ac}"), nil, :class => "yellow")
[Escaped Output] label_tag(d4x_sanitizer(t("billing to")), nil, :class => "d4x-label")
[Escaped Output] d4x_sanitizer(t("firstname"))
[Escaped Output] label_tag(@order.first_name, nil, :class => "")
[Escaped Output] d4x_sanitizer(t("lastname"))
[Escaped Output] label_tag(@order.last_name, nil, :class => "")
[Escaped Output] d4x_sanitizer(t("address"))
[Escaped Output] label_tag(@order.address, nil, :class => "")
[Escaped Output] d4x_sanitizer(t("zip"))
[Escaped Output] label_tag(@order.zip, nil, :class => "")
[Escaped Output] d4x_sanitizer(t("city"))
[Escaped Output] label_tag(@order.city, nil, :class => "")
[Escaped Output] d4x_sanitizer(t("town"))
[Escaped Output] label_tag(@order.town, nil, :class => "")
[Escaped Output] d4x_sanitizer(t("country"))
[Escaped Output] label_tag(@order.country, nil, :class => "micro")
[Escaped Output] d4x_sanitizer(t("telephone"))
[Escaped Output] label_tag(@order.telephone, nil, :class => "")
[Escaped Output] d4x_sanitizer(t("shipping details"))
[Escaped Output] d4x_sanitizer(t("firstname"))
[Escaped Output] label_tag(@order.shipping_first_name, nil, :class => "")
[Escaped Output] d4x_sanitizer(t("lastname"))
[Escaped Output] label_tag(@order.shipping_last_name, nil, :class => "")
[Escaped Output] d4x_sanitizer(t("address"))
[Escaped Output] label_tag(@order.shipping_address, nil, :class => "")
[Escaped Output] d4x_sanitizer(t("zip"))
[Escaped Output] label_tag(@order.shipping_zip, nil, :class => "")
[Escaped Output] d4x_sanitizer(t("city"))
[Escaped Output] label_tag(@order.shipping_city, nil, :class => "")
[Escaped Output] d4x_sanitizer(t("town"))
[Escaped Output] label_tag(@order.shipping_town, nil, :class => "")
[Escaped Output] d4x_sanitizer(t("country"))
[Escaped Output] label_tag(@order.shipping_country, nil, :class => "")
[Escaped Output] d4x_sanitizer(t("telephone"))
[Escaped Output] label_tag(@order.shipping_telephone, nil, :class => "")
[Escaped Output] label_tag(d4x_sanitizer(t("notes")), nil, :class => "")
[Escaped Output] @order.customer_notes

orders/_summary.["OrdersController#show", "Template:orders/show"]

[Escaped Output] d4x_sanitizer(t("order summary"))
[Escaped Output] label_tag(prod_name_by_code((Unresolved Model).new.product_id), nil, :class => "d4x-label")
[Escaped Output] label_tag(number_to_currency((Unresolved Model).new.single, :unit => "\u{20ac}"), nil, :class => "d4x-label")
[Escaped Output] label_tag((Unresolved Model).new.quantity, nil, :class => "")
[Escaped Output] label_tag(number_to_currency((Unresolved Model).new.total, :unit => "\u{20ac}"), nil, :class => "")
[Escaped Output] label_tag(d4x_sanitizer(t("total order")), nil, :class => "d4x-label")
[Escaped Output] label_tag(number_to_currency(Order.find(params[:id]).total, :unit => "\u{20ac}"), nil, :class => "yellow")
[Escaped Output] label_tag(d4x_sanitizer(t("billing to")), nil, :class => "d4x-label")
[Escaped Output] d4x_sanitizer(t("firstname"))
[Escaped Output] label_tag(Order.find(params[:id]).first_name, nil, :class => "")
[Escaped Output] d4x_sanitizer(t("lastname"))
[Escaped Output] label_tag(Order.find(params[:id]).last_name, nil, :class => "")
[Escaped Output] d4x_sanitizer(t("address"))
[Escaped Output] label_tag(Order.find(params[:id]).address, nil, :class => "")
[Escaped Output] d4x_sanitizer(t("zip"))
[Escaped Output] label_tag(Order.find(params[:id]).zip, nil, :class => "")
[Escaped Output] d4x_sanitizer(t("city"))
[Escaped Output] label_tag(Order.find(params[:id]).city, nil, :class => "")
[Escaped Output] d4x_sanitizer(t("town"))
[Escaped Output] label_tag(Order.find(params[:id]).town, nil, :class => "")
[Escaped Output] d4x_sanitizer(t("country"))
[Escaped Output] label_tag(Order.find(params[:id]).country, nil, :class => "micro")
[Escaped Output] d4x_sanitizer(t("telephone"))
[Escaped Output] label_tag(Order.find(params[:id]).telephone, nil, :class => "")
[Escaped Output] d4x_sanitizer(t("shipping details"))
[Escaped Output] d4x_sanitizer(t("firstname"))
[Escaped Output] label_tag(Order.find(params[:id]).shipping_first_name, nil, :class => "")
[Escaped Output] d4x_sanitizer(t("lastname"))
[Escaped Output] label_tag(Order.find(params[:id]).shipping_last_name, nil, :class => "")
[Escaped Output] d4x_sanitizer(t("address"))
[Escaped Output] label_tag(Order.find(params[:id]).shipping_address, nil, :class => "")
[Escaped Output] d4x_sanitizer(t("zip"))
[Escaped Output] label_tag(Order.find(params[:id]).shipping_zip, nil, :class => "")
[Escaped Output] d4x_sanitizer(t("city"))
[Escaped Output] label_tag(Order.find(params[:id]).shipping_city, nil, :class => "")
[Escaped Output] d4x_sanitizer(t("town"))
[Escaped Output] label_tag(Order.find(params[:id]).shipping_town, nil, :class => "")
[Escaped Output] d4x_sanitizer(t("country"))
[Escaped Output] label_tag(Order.find(params[:id]).shipping_country, nil, :class => "")
[Escaped Output] d4x_sanitizer(t("telephone"))
[Escaped Output] label_tag(Order.find(params[:id]).shipping_telephone, nil, :class => "")
[Escaped Output] label_tag(d4x_sanitizer(t("notes")), nil, :class => "")
[Escaped Output] Order.find(params[:id]).customer_notes

orders/_summary.["Template:orders/Copy of show"]

[Escaped Output] d4x_sanitizer(t("order summary"))
[Escaped Output] label_tag(prod_name_by_code(row.product_id), nil, :class => "d4x-label")
[Escaped Output] label_tag(number_to_currency(row.single, :unit => "\u{20ac}"), nil, :class => "d4x-label")
[Escaped Output] label_tag(row.quantity, nil, :class => "")
[Escaped Output] label_tag(number_to_currency(row.total, :unit => "\u{20ac}"), nil, :class => "")
[Escaped Output] label_tag(d4x_sanitizer(t("total order")), nil, :class => "d4x-label")
[Escaped Output] label_tag(number_to_currency(@order.total, :unit => "\u{20ac}"), nil, :class => "yellow")
[Escaped Output] label_tag(d4x_sanitizer(t("billing to")), nil, :class => "d4x-label")
[Escaped Output] d4x_sanitizer(t("firstname"))
[Escaped Output] label_tag(@order.first_name, nil, :class => "")
[Escaped Output] d4x_sanitizer(t("lastname"))
[Escaped Output] label_tag(@order.last_name, nil, :class => "")
[Escaped Output] d4x_sanitizer(t("address"))
[Escaped Output] label_tag(@order.address, nil, :class => "")
[Escaped Output] d4x_sanitizer(t("zip"))
[Escaped Output] label_tag(@order.zip, nil, :class => "")
[Escaped Output] d4x_sanitizer(t("city"))
[Escaped Output] label_tag(@order.city, nil, :class => "")
[Escaped Output] d4x_sanitizer(t("town"))
[Escaped Output] label_tag(@order.town, nil, :class => "")
[Escaped Output] d4x_sanitizer(t("country"))
[Escaped Output] label_tag(@order.country, nil, :class => "micro")
[Escaped Output] d4x_sanitizer(t("telephone"))
[Escaped Output] label_tag(@order.telephone, nil, :class => "")
[Escaped Output] d4x_sanitizer(t("shipping details"))
[Escaped Output] d4x_sanitizer(t("firstname"))
[Escaped Output] label_tag(@order.shipping_first_name, nil, :class => "")
[Escaped Output] d4x_sanitizer(t("lastname"))
[Escaped Output] label_tag(@order.shipping_last_name, nil, :class => "")
[Escaped Output] d4x_sanitizer(t("address"))
[Escaped Output] label_tag(@order.shipping_address, nil, :class => "")
[Escaped Output] d4x_sanitizer(t("zip"))
[Escaped Output] label_tag(@order.shipping_zip, nil, :class => "")
[Escaped Output] d4x_sanitizer(t("city"))
[Escaped Output] label_tag(@order.shipping_city, nil, :class => "")
[Escaped Output] d4x_sanitizer(t("town"))
[Escaped Output] label_tag(@order.shipping_town, nil, :class => "")
[Escaped Output] d4x_sanitizer(t("country"))
[Escaped Output] label_tag(@order.shipping_country, nil, :class => "")
[Escaped Output] d4x_sanitizer(t("telephone"))
[Escaped Output] label_tag(@order.shipping_telephone, nil, :class => "")
[Escaped Output] label_tag(d4x_sanitizer(t("notes")), nil, :class => "")
[Escaped Output] @order.customer_notes

orders/edit

[Escaped Output] link_to(image_tag("arrow_left.png", :border => 0, :title => t("back")), orders_path)
[Escaped Output] t("editing order")
[Escaped Output] render(partial => "form", {})

orders/edit.["OrdersController#edit"]

[Escaped Output] link_to(image_tag("arrow_left.png", :border => 0, :title => t("back")), orders_path)
[Escaped Output] t("editing order")
[Escaped Output] render(partial => "form", {})

orders/failure

[Escaped Output] d4x_sanitizer(t("transaction failed"))
[Escaped Output] d4x_sanitizer(t("credit card problem"))
[Escaped Output] d4x_sanitizer(t("team"))

orders/failure.["OrdersController#index"]

[Escaped Output] d4x_sanitizer(t("transaction failed"))
[Escaped Output] d4x_sanitizer(t("credit card problem"))
[Escaped Output] d4x_sanitizer(t("team"))

orders/index

[Escaped Output] content_for(:head) do; [ignored]; end
[Escaped Output] render(partial => "/agadanga/big_icons_some_active", {})
[Escaped Output] content_for(:big_icons_menu) do; [Escaped Output] render(partial => "/agadanga/big_icons_some_active", {}); end
[Escaped Output] render(partial => "/agadanga/no_folder_selected", {})
[Escaped Output] content_for(:folders_list) do; [Escaped Output] render(partial => "/agadanga/no_folder_selected", {}); end
[Escaped Output] d4x_sanitizer(t("order"))
[Escaped Output] d4x_sanitizer(t("received"))
[Escaped Output] d4x_sanitizer(t("order"))
[Escaped Output] d4x_sanitizer(t("customer"))
[Escaped Output] d4x_sanitizer(t("package"))
[Escaped Output] d4x_sanitizer(t("email"))
[Escaped Output] d4x_sanitizer(t("total"))
[Escaped Output] cycle("odd", "even")
[Escaped Output] order.created_at
[Escaped Output] order.id
[Escaped Output] order.user_id
[Escaped Output] order.package
[Escaped Output] order.email
[Escaped Output] order.total
[Escaped Output] link_to(image_tag("cog.png", :border => 0, :mouseover => "cog.png", :title => d4x_sanitizer(t("show")), :size => "16x16"), order)
[Escaped Output] link_to(image_tag("cog_edit.png", :border => 0, :mouseover => "cog_edit.png", :title => d4x_sanitizer(t("edit")), :size => "16x16"), edit_order_path(order))
[Escaped Output] button_to("", order, :confirm => "are you sure?", :method => :delete, :class => "odestroy", :title => d4x_sanitizer(t("delete")), :name => "destroy", :size => "16x16")

orders/new

[Escaped Output] label_tag(t("place your order"), nil, :class => "navbar-where")
[Escaped Output] render(partial => "form", {})

orders/new.["OrdersController#new"]

[Escaped Output] label_tag(t("place your order"), nil, :class => "navbar-where")
[Escaped Output] render(partial => "form", {})

orders/show

[Escaped Output] render(partial => "/orders/summary", {})
[Escaped Output] hidden_field_tag(:cmd, "_s-xclick")
[Escaped Output] hidden_field_tag(:encrypted, @cart.paypal_encrypted(orders_url, payment_notifications_url(:secret => "1394807388")))
[Escaped Output] image_submit_tag("express-checkout-hero-sg.png", :width => "290px")
[Escaped Output] form_tag("https://www.paypal.com/cgi-bin/webscr") do; [Escaped Output] hidden_field_tag(:cmd, "_s-xclick");[Escaped Output] hidden_field_tag(:encrypted, @cart.paypal_encrypted(orders_url, payment_notifications_url(:secret => "1394807388")));[Escaped Output] image_submit_tag("express-checkout-hero-sg.png", :width => "290px"); end

orders/show.["OrdersController#show"]

[Escaped Output] render(partial => "/orders/summary", {})
[Escaped Output] hidden_field_tag(:cmd, "_s-xclick")
[Escaped Output] hidden_field_tag(:encrypted, Cart.find(Order.find(params[:id]).cart_id).paypal_encrypted(orders_url, payment_notifications_url(:secret => "1394807388")))
[Escaped Output] image_submit_tag("express-checkout-hero-sg.png", :width => "290px")
[Escaped Output] form_tag("https://www.paypal.com/cgi-bin/webscr") do; [Escaped Output] hidden_field_tag(:cmd, "_s-xclick");[Escaped Output] hidden_field_tag(:encrypted, Cart.find(Order.find(params[:id]).cart_id).paypal_encrypted(orders_url, payment_notifications_url(:secret => "1394807388")));[Escaped Output] image_submit_tag("express-checkout-hero-sg.png", :width => "290px"); end

orders/success

[Escaped Output] javascript_include_tag("d4x-signup.js")
[Escaped Output] javascript_include_tag("d4x-check-nick")
[Escaped Output] d4x_sanitizer(t("congratulations"))
[Escaped Output] f.hidden_field(:order_id, :value => @order.id)
[Escaped Output] f.text_field(:firstname, :class => "form-control firstname", :size => "21", :placeholder => d4x_sanitizer(t("firstname")), :value => ((@order.first_name + " ") + @order.last_name))
[Escaped Output] f.text_field(:nickname, :class => "form-control nickname", :size => "21", :placeholder => d4x_sanitizer(t("nickname")))
[Escaped Output] f.email_field(:email, :class => "form-control email", :size => "21", :placeholder => d4x_sanitizer(t("email")))
[Escaped Output] f.password_field(:password, :class => "form-control password", :size => "21", :placeholder => d4x_sanitizer(t("password")))
[Escaped Output] check_box_tag(:agreement)
[Escaped Output] d4x_sanitizer(t("i agree with terms and conditions"))
[Escaped Output] image_tag("registering-spinner.gif", :class => "none", :id => "reg-spinner")
[Escaped Output] f.submit(d4x_sanitizer(t("register")), :id => "signup-submit", :class => "button-d4x")
[Escaped Output] form_for("user", :url => user_registration_path) do; [Escaped Output] f.hidden_field(:order_id, :value => @order.id);[Escaped Output] f.text_field(:firstname, :class => "form-control firstname", :size => "21", :placeholder => d4x_sanitizer(t("firstname")), :value => ((@order.first_name + " ") + @order.last_name));[Escaped Output] f.text_field(:nickname, :class => "form-control nickname", :size => "21", :placeholder => d4x_sanitizer(t("nickname")));[Escaped Output] f.email_field(:email, :class => "form-control email", :size => "21", :placeholder => d4x_sanitizer(t("email")));[Escaped Output] f.password_field(:password, :class => "form-control password", :size => "21", :placeholder => d4x_sanitizer(t("password")));[Escaped Output] check_box_tag(:agreement);[Escaped Output] d4x_sanitizer(t("i agree with terms and conditions"));[Escaped Output] image_tag("registering-spinner.gif", :class => "none", :id => "reg-spinner");[Escaped Output] f.submit(d4x_sanitizer(t("register")), :id => "signup-submit", :class => "button-d4x"); end

orders/success.["OrdersController#express"]

[Escaped Output] javascript_include_tag("d4x-signup.js")
[Escaped Output] javascript_include_tag("d4x-check-nick")
[Escaped Output] d4x_sanitizer(t("congratulations"))
[Escaped Output] FormBuilder.new.hidden_field(:order_id, :value => Order.new(params[:order]).id)
[Escaped Output] FormBuilder.new.text_field(:firstname, :class => "form-control firstname", :size => "21", :placeholder => d4x_sanitizer(t("firstname")), :value => ((Order.new(params[:order]).first_name + " ") + Order.new(params[:order]).last_name))
[Escaped Output] FormBuilder.new.text_field(:nickname, :class => "form-control nickname", :size => "21", :placeholder => d4x_sanitizer(t("nickname")))
[Escaped Output] FormBuilder.new.email_field(:email, :class => "form-control email", :size => "21", :placeholder => d4x_sanitizer(t("email")))
[Escaped Output] FormBuilder.new.password_field(:password, :class => "form-control password", :size => "21", :placeholder => d4x_sanitizer(t("password")))
[Escaped Output] check_box_tag(:agreement)
[Escaped Output] d4x_sanitizer(t("i agree with terms and conditions"))
[Escaped Output] image_tag("registering-spinner.gif", :class => "none", :id => "reg-spinner")
[Escaped Output] FormBuilder.new.submit(d4x_sanitizer(t("register")), :id => "signup-submit", :class => "button-d4x")
[Escaped Output] form_for("user", :url => user_registration_path) do; [Escaped Output] FormBuilder.new.hidden_field(:order_id, :value => Order.new(params[:order]).id);[Escaped Output] FormBuilder.new.text_field(:firstname, :class => "form-control firstname", :size => "21", :placeholder => d4x_sanitizer(t("firstname")), :value => ((Order.new(params[:order]).first_name + " ") + Order.new(params[:order]).last_name));[Escaped Output] FormBuilder.new.text_field(:nickname, :class => "form-control nickname", :size => "21", :placeholder => d4x_sanitizer(t("nickname")));[Escaped Output] FormBuilder.new.email_field(:email, :class => "form-control email", :size => "21", :placeholder => d4x_sanitizer(t("email")));[Escaped Output] FormBuilder.new.password_field(:password, :class => "form-control password", :size => "21", :placeholder => d4x_sanitizer(t("password")));[Escaped Output] check_box_tag(:agreement);[Escaped Output] d4x_sanitizer(t("i agree with terms and conditions"));[Escaped Output] image_tag("registering-spinner.gif", :class => "none", :id => "reg-spinner");[Escaped Output] FormBuilder.new.submit(d4x_sanitizer(t("register")), :id => "signup-submit", :class => "button-d4x"); end

orders/success.["OrdersController#index"]

[Escaped Output] javascript_include_tag("d4x-signup.js")
[Escaped Output] javascript_include_tag("d4x-check-nick")
[Escaped Output] d4x_sanitizer(t("congratulations"))
[Escaped Output] FormBuilder.new.hidden_field(:order_id, :value => Order.where(:cart_id => PaymentNotification.where("params LIKE ?", "%#{params[:tx]}%").first.cart_id).first.id)
[Escaped Output] FormBuilder.new.text_field(:firstname, :class => "form-control firstname", :size => "21", :placeholder => d4x_sanitizer(t("firstname")), :value => ((Order.where(:cart_id => PaymentNotification.where("params LIKE ?", "%#{params[:tx]}%").first.cart_id).first.first_name + " ") + Order.where(:cart_id => PaymentNotification.where("params LIKE ?", "%#{params[:tx]}%").first.cart_id).first.last_name))
[Escaped Output] FormBuilder.new.text_field(:nickname, :class => "form-control nickname", :size => "21", :placeholder => d4x_sanitizer(t("nickname")))
[Escaped Output] FormBuilder.new.email_field(:email, :class => "form-control email", :size => "21", :placeholder => d4x_sanitizer(t("email")))
[Escaped Output] FormBuilder.new.password_field(:password, :class => "form-control password", :size => "21", :placeholder => d4x_sanitizer(t("password")))
[Escaped Output] check_box_tag(:agreement)
[Escaped Output] d4x_sanitizer(t("i agree with terms and conditions"))
[Escaped Output] image_tag("registering-spinner.gif", :class => "none", :id => "reg-spinner")
[Escaped Output] FormBuilder.new.submit(d4x_sanitizer(t("register")), :id => "signup-submit", :class => "button-d4x")
[Escaped Output] form_for("user", :url => user_registration_path) do; [Escaped Output] FormBuilder.new.hidden_field(:order_id, :value => Order.where(:cart_id => PaymentNotification.where("params LIKE ?", "%#{params[:tx]}%").first.cart_id).first.id);[Escaped Output] FormBuilder.new.text_field(:firstname, :class => "form-control firstname", :size => "21", :placeholder => d4x_sanitizer(t("firstname")), :value => ((Order.where(:cart_id => PaymentNotification.where("params LIKE ?", "%#{params[:tx]}%").first.cart_id).first.first_name + " ") + Order.where(:cart_id => PaymentNotification.where("params LIKE ?", "%#{params[:tx]}%").first.cart_id).first.last_name));[Escaped Output] FormBuilder.new.text_field(:nickname, :class => "form-control nickname", :size => "21", :placeholder => d4x_sanitizer(t("nickname")));[Escaped Output] FormBuilder.new.email_field(:email, :class => "form-control email", :size => "21", :placeholder => d4x_sanitizer(t("email")));[Escaped Output] FormBuilder.new.password_field(:password, :class => "form-control password", :size => "21", :placeholder => d4x_sanitizer(t("password")));[Escaped Output] check_box_tag(:agreement);[Escaped Output] d4x_sanitizer(t("i agree with terms and conditions"));[Escaped Output] image_tag("registering-spinner.gif", :class => "none", :id => "reg-spinner");[Escaped Output] FormBuilder.new.submit(d4x_sanitizer(t("register")), :id => "signup-submit", :class => "button-d4x"); end

orders/success.["OrdersController#notification"]

[Escaped Output] javascript_include_tag("d4x-signup.js")
[Escaped Output] javascript_include_tag("d4x-check-nick")
[Escaped Output] d4x_sanitizer(t("congratulations"))
[Escaped Output] FormBuilder.new.hidden_field(:order_id, :value => Order.where(:cart_id => PaymentNotication.where("params like '%?%'", params[:tx]).first.cart_id).id)
[Escaped Output] FormBuilder.new.text_field(:firstname, :class => "form-control firstname", :size => "21", :placeholder => d4x_sanitizer(t("firstname")), :value => ((Order.where(:cart_id => PaymentNotication.where("params like '%?%'", params[:tx]).first.cart_id).first_name + " ") + Order.where(:cart_id => PaymentNotication.where("params like '%?%'", params[:tx]).first.cart_id).last_name))
[Escaped Output] FormBuilder.new.text_field(:nickname, :class => "form-control nickname", :size => "21", :placeholder => d4x_sanitizer(t("nickname")))
[Escaped Output] FormBuilder.new.email_field(:email, :class => "form-control email", :size => "21", :placeholder => d4x_sanitizer(t("email")))
[Escaped Output] FormBuilder.new.password_field(:password, :class => "form-control password", :size => "21", :placeholder => d4x_sanitizer(t("password")))
[Escaped Output] check_box_tag(:agreement)
[Escaped Output] d4x_sanitizer(t("i agree with terms and conditions"))
[Escaped Output] image_tag("registering-spinner.gif", :class => "none", :id => "reg-spinner")
[Escaped Output] FormBuilder.new.submit(d4x_sanitizer(t("register")), :id => "signup-submit", :class => "button-d4x")
[Escaped Output] form_for("user", :url => user_registration_path) do; [Escaped Output] FormBuilder.new.hidden_field(:order_id, :value => Order.where(:cart_id => PaymentNotication.where("params like '%?%'", params[:tx]).first.cart_id).id);[Escaped Output] FormBuilder.new.text_field(:firstname, :class => "form-control firstname", :size => "21", :placeholder => d4x_sanitizer(t("firstname")), :value => ((Order.where(:cart_id => PaymentNotication.where("params like '%?%'", params[:tx]).first.cart_id).first_name + " ") + Order.where(:cart_id => PaymentNotication.where("params like '%?%'", params[:tx]).first.cart_id).last_name));[Escaped Output] FormBuilder.new.text_field(:nickname, :class => "form-control nickname", :size => "21", :placeholder => d4x_sanitizer(t("nickname")));[Escaped Output] FormBuilder.new.email_field(:email, :class => "form-control email", :size => "21", :placeholder => d4x_sanitizer(t("email")));[Escaped Output] FormBuilder.new.password_field(:password, :class => "form-control password", :size => "21", :placeholder => d4x_sanitizer(t("password")));[Escaped Output] check_box_tag(:agreement);[Escaped Output] d4x_sanitizer(t("i agree with terms and conditions"));[Escaped Output] image_tag("registering-spinner.gif", :class => "none", :id => "reg-spinner");[Escaped Output] FormBuilder.new.submit(d4x_sanitizer(t("register")), :id => "signup-submit", :class => "button-d4x"); end

orders/success.["OrdersController#success"]

[Escaped Output] javascript_include_tag("d4x-signup.js")
[Escaped Output] javascript_include_tag("d4x-check-nick")
[Escaped Output] d4x_sanitizer(t("congratulations"))
[Escaped Output] FormBuilder.new.hidden_field(:order_id, :value => Order.find(session[:order_id]).id)
[Escaped Output] FormBuilder.new.text_field(:firstname, :class => "form-control firstname", :size => "21", :placeholder => d4x_sanitizer(t("firstname")), :value => ((Order.find(session[:order_id]).first_name + " ") + Order.find(session[:order_id]).last_name))
[Escaped Output] FormBuilder.new.text_field(:nickname, :class => "form-control nickname", :size => "21", :placeholder => d4x_sanitizer(t("nickname")))
[Escaped Output] FormBuilder.new.email_field(:email, :class => "form-control email", :size => "21", :placeholder => d4x_sanitizer(t("email")))
[Escaped Output] FormBuilder.new.password_field(:password, :class => "form-control password", :size => "21", :placeholder => d4x_sanitizer(t("password")))
[Escaped Output] check_box_tag(:agreement)
[Escaped Output] d4x_sanitizer(t("i agree with terms and conditions"))
[Escaped Output] image_tag("registering-spinner.gif", :class => "none", :id => "reg-spinner")
[Escaped Output] FormBuilder.new.submit(d4x_sanitizer(t("register")), :id => "signup-submit", :class => "button-d4x")
[Escaped Output] form_for("user", :url => user_registration_path) do; [Escaped Output] FormBuilder.new.hidden_field(:order_id, :value => Order.find(session[:order_id]).id);[Escaped Output] FormBuilder.new.text_field(:firstname, :class => "form-control firstname", :size => "21", :placeholder => d4x_sanitizer(t("firstname")), :value => ((Order.find(session[:order_id]).first_name + " ") + Order.find(session[:order_id]).last_name));[Escaped Output] FormBuilder.new.text_field(:nickname, :class => "form-control nickname", :size => "21", :placeholder => d4x_sanitizer(t("nickname")));[Escaped Output] FormBuilder.new.email_field(:email, :class => "form-control email", :size => "21", :placeholder => d4x_sanitizer(t("email")));[Escaped Output] FormBuilder.new.password_field(:password, :class => "form-control password", :size => "21", :placeholder => d4x_sanitizer(t("password")));[Escaped Output] check_box_tag(:agreement);[Escaped Output] d4x_sanitizer(t("i agree with terms and conditions"));[Escaped Output] image_tag("registering-spinner.gif", :class => "none", :id => "reg-spinner");[Escaped Output] FormBuilder.new.submit(d4x_sanitizer(t("register")), :id => "signup-submit", :class => "button-d4x"); end

payments/index

[Escaped Output] content_for(:head) do; [ignored]; end
[Escaped Output] render(partial => "/agadanga/big_icons_some_active", {})
[Escaped Output] content_for(:big_icons_menu) do; [Escaped Output] render(partial => "/agadanga/big_icons_some_active", {}); end
[Escaped Output] render(partial => "/agadanga/no_folder_selected", {})
[Escaped Output] content_for(:folders_list) do; [Escaped Output] render(partial => "/agadanga/no_folder_selected", {}); end
[Escaped Output] d4x_sanitizer(t("sent requests"))
[Escaped Output] d4x_sanitizer(t(:from))
[Escaped Output] d4x_sanitizer(t(:when))
[Escaped Output] d4x_sanitizer(t("request status"))
[Escaped Output] cycle("odd", "even")
[Escaped Output] link_to(label_tag(request.user.nickname, nil, :class => "lcd orange"), request.user)
[Escaped Output] request.created_at
[Escaped Output] time_ago_in_words(request.created_at)
[Escaped Output] d4x_sanitizer(t("ago"))
[Escaped Output] request.message
[Escaped Output] label_tag(request.status, nil, :class => "lcd yellow")
[Escaped Output] button_to("", request, :confirm => "are you sure?", :method => :delete, :class => "request_destroy", :name => "destroy", :size => "16x16")

payments/index.["PaymentsController#index"]

[Escaped Output] content_for(:head) do; [ignored]; end
[Escaped Output] render(partial => "/agadanga/big_icons_some_active", {})
[Escaped Output] content_for(:big_icons_menu) do; [Escaped Output] render(partial => "/agadanga/big_icons_some_active", {}); end
[Escaped Output] render(partial => "/agadanga/no_folder_selected", {})
[Escaped Output] content_for(:folders_list) do; [Escaped Output] render(partial => "/agadanga/no_folder_selected", {}); end
[Escaped Output] d4x_sanitizer(t("sent requests"))
[Escaped Output] d4x_sanitizer(t(:from))
[Escaped Output] d4x_sanitizer(t(:when))
[Escaped Output] d4x_sanitizer(t("request status"))
[Escaped Output] cycle("odd", "even")
[Escaped Output] link_to(label_tag(request.user.nickname, nil, :class => "lcd orange"), request.user)
[Escaped Output] request.created_at
[Escaped Output] time_ago_in_words(request.created_at)
[Escaped Output] d4x_sanitizer(t("ago"))
[Escaped Output] request.message
[Escaped Output] label_tag(request.status, nil, :class => "lcd yellow")
[Escaped Output] button_to("", request, :confirm => "are you sure?", :method => :delete, :class => "request_destroy", :name => "destroy", :size => "16x16")

phone_numbers/create

[Escaped Output] @phone_number.phone_number

phone_numbers/new

[Escaped Output] link_to(image_tag("logo15.png", :class => "imagelogo"), "/")
[Escaped Output] image_tag("tortuga0.gif", :title => raw(((((((((("&copy; " + get_setting_value("PROJECT_COPYRIGHT_YEARS")) + " ") + get_setting_value("PROJECT_NAME")) + "&nbsp;-&nbsp;") + d4x_sanitizer(t("developer"))) + " ") + get_setting_value("PROJECT_AUTHOR")) + "&nbsp;-&nbsp;") + d4x_sanitizer(t("all_rights")))))
[Escaped Output] hidden_field_tag(:confirmation_or_auth, "CONFIRMATION")
[Escaped Output] hidden_field_tag(:confirmation_or_auth, "AUTH")
[Escaped Output] f.telephone_field(:phone_number, :class => "form-control demo center", :placeholder => "", :value => current_user.mobile)
[Escaped Output] f.submit("Send PIN", :class => "btn btn-primary btn-block", :id => "send-pin-link")
[Escaped Output] form_for(@phone_number, :remote => true) do; if (params["mode"] == "CONFIRMATION") then; [Escaped Output] hidden_field_tag(:confirmation_or_auth, "CONFIRMATION");else; [Escaped Output] hidden_field_tag(:confirmation_or_auth, "AUTH");end;[Escaped Output] f.telephone_field(:phone_number, :class => "form-control demo center", :placeholder => "", :value => current_user.mobile);[Escaped Output] f.submit("Send PIN", :class => "btn btn-primary btn-block", :id => "send-pin-link"); end
[Escaped Output] hidden_field_tag(:confirmation_or_auth, "CONFIRMATION")
[Escaped Output] hidden_field_tag(:confirmation_or_auth, "AUTH")
[Escaped Output] hidden_field_tag("hidden_phone_number", "")
[Escaped Output] text_field_tag(:pin, nil, :class => "form-control center")
[Escaped Output] submit_tag("Verify PIN", :class => "btn btn-primary btn-block")
[Escaped Output] form_tag(phone_numbers_verify_path, :remote => true) do; if (params["mode"] == "CONFIRMATION") then; [Escaped Output] hidden_field_tag(:confirmation_or_auth, "CONFIRMATION");else; [Escaped Output] hidden_field_tag(:confirmation_or_auth, "AUTH");end;[Escaped Output] hidden_field_tag("hidden_phone_number", "");[Escaped Output] text_field_tag(:pin, nil, :class => "form-control center");[Escaped Output] submit_tag("Verify PIN", :class => "btn btn-primary btn-block"); end
[Escaped Output] link_to(edit_user_path(current_user), :class => "btn btn-primary btn-xs btn-block", :id => "continue") do; [ignored]; end

phone_numbers/new.["PhoneNumbersController#new"]

[Escaped Output] link_to(image_tag("logo15.png", :class => "imagelogo"), "/")
[Escaped Output] image_tag("tortuga0.gif", :title => raw(((((((((("&copy; " + get_setting_value("PROJECT_COPYRIGHT_YEARS")) + " ") + get_setting_value("PROJECT_NAME")) + "&nbsp;-&nbsp;") + d4x_sanitizer(t("developer"))) + " ") + get_setting_value("PROJECT_AUTHOR")) + "&nbsp;-&nbsp;") + d4x_sanitizer(t("all_rights")))))
[Escaped Output] hidden_field_tag(:confirmation_or_auth, "CONFIRMATION")
[Escaped Output] hidden_field_tag(:confirmation_or_auth, "AUTH")
[Escaped Output] FormBuilder.new.telephone_field(:phone_number, :class => "form-control demo center", :placeholder => "", :value => current_user.mobile)
[Escaped Output] FormBuilder.new.submit("Send PIN", :class => "btn btn-primary btn-block", :id => "send-pin-link")
[Escaped Output] form_for(PhoneNumber.new, :remote => true) do; if (params["mode"] == "CONFIRMATION") then; [Escaped Output] hidden_field_tag(:confirmation_or_auth, "CONFIRMATION");else; [Escaped Output] hidden_field_tag(:confirmation_or_auth, "AUTH");end;[Escaped Output] FormBuilder.new.telephone_field(:phone_number, :class => "form-control demo center", :placeholder => "", :value => current_user.mobile);[Escaped Output] FormBuilder.new.submit("Send PIN", :class => "btn btn-primary btn-block", :id => "send-pin-link"); end
[Escaped Output] hidden_field_tag(:confirmation_or_auth, "CONFIRMATION")
[Escaped Output] hidden_field_tag(:confirmation_or_auth, "AUTH")
[Escaped Output] hidden_field_tag("hidden_phone_number", "")
[Escaped Output] text_field_tag(:pin, nil, :class => "form-control center")
[Escaped Output] submit_tag("Verify PIN", :class => "btn btn-primary btn-block")
[Escaped Output] form_tag(phone_numbers_verify_path, :remote => true) do; if (params["mode"] == "CONFIRMATION") then; [Escaped Output] hidden_field_tag(:confirmation_or_auth, "CONFIRMATION");else; [Escaped Output] hidden_field_tag(:confirmation_or_auth, "AUTH");end;[Escaped Output] hidden_field_tag("hidden_phone_number", "");[Escaped Output] text_field_tag(:pin, nil, :class => "form-control center");[Escaped Output] submit_tag("Verify PIN", :class => "btn btn-primary btn-block"); end
[Escaped Output] link_to(edit_user_path(current_user), :class => "btn btn-primary btn-xs btn-block", :id => "continue") do; [ignored]; end

pictures/index

[Escaped Output] t("pictures")
[Escaped Output] @pictures.count
[Escaped Output] form_for(Picture.new, :html => ({ :multipart => true, :class => "dropzone dz-clickable", :id => "dropzone-upload" })) do; [ignored]; end
[Escaped Output] @pictures.count
[Escaped Output] t("pictures")
[Escaped Output] pic.id
[Escaped Output] pic.pic.url(:original)
[Escaped Output] pic.pic.url(:thumb)

pictures/index.["PicturesController#index"]

[Escaped Output] t("pictures")
[Escaped Output] Picture.all.count
[Escaped Output] form_for(Picture.new, :html => ({ :multipart => true, :class => "dropzone dz-clickable", :id => "dropzone-upload" })) do; [ignored]; end
[Escaped Output] Picture.all.count
[Escaped Output] t("pictures")
[Escaped Output] Picture.new.id
[Escaped Output] Picture.new.pic.url(:original)
[Escaped Output] Picture.new.pic.url(:thumb)

post_tags/_form

[Escaped Output] pluralize(@post_tags.errors.count, t("error"))
[Escaped Output] msg
[Escaped Output] f.label(t("id"))
[Escaped Output] f.text_field(:id)
[Escaped Output] f.label(t("term_id"))
[Escaped Output] f.text_field(:term_id)
[Escaped Output] f.label(t("taxonomy"))
[Escaped Output] f.select(:taxonomy, options_for_select([["Category", "category"], ["Links Category", "link_category"], ["Quote Category", "quote_category"], ["Snippet Category", "snippet_category"], ["Nav Menu", "nav_menu"], ["Post Tag", "post_tag"], ["::choose::", "0"]], "0"), :class => "d4xItem")
[Escaped Output] f.label(t("description"))
[Escaped Output] f.text_field(:description)
[Escaped Output] f.label(t("parent"))
[Escaped Output] f.text_field(:parent)
[Escaped Output] f.label(t("count"))
[Escaped Output] f.text_field(:count)
[Escaped Output] f.submit
[Escaped Output] form_for(@post_tags) do; if @post_tags.errors.any? then; [Escaped Output] pluralize(@post_tags.errors.count, t("error")); @post_tags.errors.full_messages.each do; [Escaped Output] msg; end;end;[Escaped Output] f.label(t("id"));[Escaped Output] f.text_field(:id);[Escaped Output] f.label(t("term_id"));[Escaped Output] f.text_field(:term_id);[Escaped Output] f.label(t("taxonomy"));[Escaped Output] f.select(:taxonomy, options_for_select([["Category", "category"], ["Links Category", "link_category"], ["Quote Category", "quote_category"], ["Snippet Category", "snippet_category"], ["Nav Menu", "nav_menu"], ["Post Tag", "post_tag"], ["::choose::", "0"]], "0"), :class => "d4xItem");[Escaped Output] f.label(t("description"));[Escaped Output] f.text_field(:description);[Escaped Output] f.label(t("parent"));[Escaped Output] f.text_field(:parent);[Escaped Output] f.label(t("count"));[Escaped Output] f.text_field(:count);[Escaped Output] f.submit; end

post_tags/_form.["PostTagsController#create", "Template:post_tags/new"]

[Escaped Output] pluralize(PostTag.new(post_tags_params).errors.count, t("error"))
[Escaped Output] msg
[Escaped Output] FormBuilder.new.label(t("id"))
[Escaped Output] FormBuilder.new.text_field(:id)
[Escaped Output] FormBuilder.new.label(t("term_id"))
[Escaped Output] FormBuilder.new.text_field(:term_id)
[Escaped Output] FormBuilder.new.label(t("taxonomy"))
[Escaped Output] FormBuilder.new.select(:taxonomy, options_for_select([["Category", "category"], ["Links Category", "link_category"], ["Quote Category", "quote_category"], ["Snippet Category", "snippet_category"], ["Nav Menu", "nav_menu"], ["Post Tag", "post_tag"], ["::choose::", "0"]], "0"), :class => "d4xItem")
[Escaped Output] FormBuilder.new.label(t("description"))
[Escaped Output] FormBuilder.new.text_field(:description)
[Escaped Output] FormBuilder.new.label(t("parent"))
[Escaped Output] FormBuilder.new.text_field(:parent)
[Escaped Output] FormBuilder.new.label(t("count"))
[Escaped Output] FormBuilder.new.text_field(:count)
[Escaped Output] FormBuilder.new.submit
[Escaped Output] form_for(PostTag.new(post_tags_params)) do; if PostTag.new(post_tags_params).errors.any? then; [Escaped Output] pluralize(PostTag.new(post_tags_params).errors.count, t("error")); PostTag.new(post_tags_params).errors.full_messages.each do; [Escaped Output] msg; end;end;[Escaped Output] FormBuilder.new.label(t("id"));[Escaped Output] FormBuilder.new.text_field(:id);[Escaped Output] FormBuilder.new.label(t("term_id"));[Escaped Output] FormBuilder.new.text_field(:term_id);[Escaped Output] FormBuilder.new.label(t("taxonomy"));[Escaped Output] FormBuilder.new.select(:taxonomy, options_for_select([["Category", "category"], ["Links Category", "link_category"], ["Quote Category", "quote_category"], ["Snippet Category", "snippet_category"], ["Nav Menu", "nav_menu"], ["Post Tag", "post_tag"], ["::choose::", "0"]], "0"), :class => "d4xItem");[Escaped Output] FormBuilder.new.label(t("description"));[Escaped Output] FormBuilder.new.text_field(:description);[Escaped Output] FormBuilder.new.label(t("parent"));[Escaped Output] FormBuilder.new.text_field(:parent);[Escaped Output] FormBuilder.new.label(t("count"));[Escaped Output] FormBuilder.new.text_field(:count);[Escaped Output] FormBuilder.new.submit; end

post_tags/_form.["PostTagsController#edit", "Template:post_tags/edit"]

[Escaped Output] pluralize(PostTag.find(params[:id]).errors.count, t("error"))
[Escaped Output] (Unresolved Model).new
[Escaped Output] FormBuilder.new.label(t("id"))
[Escaped Output] FormBuilder.new.text_field(:id)
[Escaped Output] FormBuilder.new.label(t("term_id"))
[Escaped Output] FormBuilder.new.text_field(:term_id)
[Escaped Output] FormBuilder.new.label(t("taxonomy"))
[Escaped Output] FormBuilder.new.select(:taxonomy, options_for_select([["Category", "category"], ["Links Category", "link_category"], ["Quote Category", "quote_category"], ["Snippet Category", "snippet_category"], ["Nav Menu", "nav_menu"], ["Post Tag", "post_tag"], ["::choose::", "0"]], "0"), :class => "d4xItem")
[Escaped Output] FormBuilder.new.label(t("description"))
[Escaped Output] FormBuilder.new.text_field(:description)
[Escaped Output] FormBuilder.new.label(t("parent"))
[Escaped Output] FormBuilder.new.text_field(:parent)
[Escaped Output] FormBuilder.new.label(t("count"))
[Escaped Output] FormBuilder.new.text_field(:count)
[Escaped Output] FormBuilder.new.submit
[Escaped Output] form_for(PostTag.find(params[:id])) do; if PostTag.find(params[:id]).errors.any? then; [Escaped Output] pluralize(PostTag.find(params[:id]).errors.count, t("error")); PostTag.find(params[:id]).errors.full_messages.each do; [Escaped Output] (Unresolved Model).new; end;end;[Escaped Output] FormBuilder.new.label(t("id"));[Escaped Output] FormBuilder.new.text_field(:id);[Escaped Output] FormBuilder.new.label(t("term_id"));[Escaped Output] FormBuilder.new.text_field(:term_id);[Escaped Output] FormBuilder.new.label(t("taxonomy"));[Escaped Output] FormBuilder.new.select(:taxonomy, options_for_select([["Category", "category"], ["Links Category", "link_category"], ["Quote Category", "quote_category"], ["Snippet Category", "snippet_category"], ["Nav Menu", "nav_menu"], ["Post Tag", "post_tag"], ["::choose::", "0"]], "0"), :class => "d4xItem");[Escaped Output] FormBuilder.new.label(t("description"));[Escaped Output] FormBuilder.new.text_field(:description);[Escaped Output] FormBuilder.new.label(t("parent"));[Escaped Output] FormBuilder.new.text_field(:parent);[Escaped Output] FormBuilder.new.label(t("count"));[Escaped Output] FormBuilder.new.text_field(:count);[Escaped Output] FormBuilder.new.submit; end

post_tags/_form.["PostTagsController#new", "Template:post_tags/new"]

[Escaped Output] pluralize(PostTag.new.errors.count, t("error"))
[Escaped Output] msg
[Escaped Output] FormBuilder.new.label(t("id"))
[Escaped Output] FormBuilder.new.text_field(:id)
[Escaped Output] FormBuilder.new.label(t("term_id"))
[Escaped Output] FormBuilder.new.text_field(:term_id)
[Escaped Output] FormBuilder.new.label(t("taxonomy"))
[Escaped Output] FormBuilder.new.select(:taxonomy, options_for_select([["Category", "category"], ["Links Category", "link_category"], ["Quote Category", "quote_category"], ["Snippet Category", "snippet_category"], ["Nav Menu", "nav_menu"], ["Post Tag", "post_tag"], ["::choose::", "0"]], "0"), :class => "d4xItem")
[Escaped Output] FormBuilder.new.label(t("description"))
[Escaped Output] FormBuilder.new.text_field(:description)
[Escaped Output] FormBuilder.new.label(t("parent"))
[Escaped Output] FormBuilder.new.text_field(:parent)
[Escaped Output] FormBuilder.new.label(t("count"))
[Escaped Output] FormBuilder.new.text_field(:count)
[Escaped Output] FormBuilder.new.submit
[Escaped Output] form_for(PostTag.new) do; if PostTag.new.errors.any? then; [Escaped Output] pluralize(PostTag.new.errors.count, t("error")); PostTag.new.errors.full_messages.each do; [Escaped Output] msg; end;end;[Escaped Output] FormBuilder.new.label(t("id"));[Escaped Output] FormBuilder.new.text_field(:id);[Escaped Output] FormBuilder.new.label(t("term_id"));[Escaped Output] FormBuilder.new.text_field(:term_id);[Escaped Output] FormBuilder.new.label(t("taxonomy"));[Escaped Output] FormBuilder.new.select(:taxonomy, options_for_select([["Category", "category"], ["Links Category", "link_category"], ["Quote Category", "quote_category"], ["Snippet Category", "snippet_category"], ["Nav Menu", "nav_menu"], ["Post Tag", "post_tag"], ["::choose::", "0"]], "0"), :class => "d4xItem");[Escaped Output] FormBuilder.new.label(t("description"));[Escaped Output] FormBuilder.new.text_field(:description);[Escaped Output] FormBuilder.new.label(t("parent"));[Escaped Output] FormBuilder.new.text_field(:parent);[Escaped Output] FormBuilder.new.label(t("count"));[Escaped Output] FormBuilder.new.text_field(:count);[Escaped Output] FormBuilder.new.submit; end

post_tags/_form.["Template:post_tags/edit"]

[Escaped Output] pluralize(@post_tags.errors.count, t("error"))
[Escaped Output] msg
[Escaped Output] FormBuilder.new.label(t("id"))
[Escaped Output] FormBuilder.new.text_field(:id)
[Escaped Output] FormBuilder.new.label(t("term_id"))
[Escaped Output] FormBuilder.new.text_field(:term_id)
[Escaped Output] FormBuilder.new.label(t("taxonomy"))
[Escaped Output] FormBuilder.new.select(:taxonomy, options_for_select([["Category", "category"], ["Links Category", "link_category"], ["Quote Category", "quote_category"], ["Snippet Category", "snippet_category"], ["Nav Menu", "nav_menu"], ["Post Tag", "post_tag"], ["::choose::", "0"]], "0"), :class => "d4xItem")
[Escaped Output] FormBuilder.new.label(t("description"))
[Escaped Output] FormBuilder.new.text_field(:description)
[Escaped Output] FormBuilder.new.label(t("parent"))
[Escaped Output] FormBuilder.new.text_field(:parent)
[Escaped Output] FormBuilder.new.label(t("count"))
[Escaped Output] FormBuilder.new.text_field(:count)
[Escaped Output] FormBuilder.new.submit
[Escaped Output] form_for(@post_tags) do; if @post_tags.errors.any? then; [Escaped Output] pluralize(@post_tags.errors.count, t("error")); @post_tags.errors.full_messages.each do; [Escaped Output] msg; end;end;[Escaped Output] FormBuilder.new.label(t("id"));[Escaped Output] FormBuilder.new.text_field(:id);[Escaped Output] FormBuilder.new.label(t("term_id"));[Escaped Output] FormBuilder.new.text_field(:term_id);[Escaped Output] FormBuilder.new.label(t("taxonomy"));[Escaped Output] FormBuilder.new.select(:taxonomy, options_for_select([["Category", "category"], ["Links Category", "link_category"], ["Quote Category", "quote_category"], ["Snippet Category", "snippet_category"], ["Nav Menu", "nav_menu"], ["Post Tag", "post_tag"], ["::choose::", "0"]], "0"), :class => "d4xItem");[Escaped Output] FormBuilder.new.label(t("description"));[Escaped Output] FormBuilder.new.text_field(:description);[Escaped Output] FormBuilder.new.label(t("parent"));[Escaped Output] FormBuilder.new.text_field(:parent);[Escaped Output] FormBuilder.new.label(t("count"));[Escaped Output] FormBuilder.new.text_field(:count);[Escaped Output] FormBuilder.new.submit; end

post_tags/edit

[Escaped Output] t("Editing Term")
[Escaped Output] render(partial => "form", {})
[Escaped Output] link_to(t("Show"), @post_tags)
[Escaped Output] link_to(t("Back"), post_tags_path)

post_tags/edit.["PostTagsController#edit"]

[Escaped Output] t("Editing Term")
[Escaped Output] render(partial => "form", {})
[Escaped Output] link_to(t("Show"), PostTag.find(params[:id]))
[Escaped Output] link_to(t("Back"), post_tags_path)

post_tags/index

[Escaped Output] t("listing term taxonomies")
[Escaped Output] link_to(t("new post_tags"), new_post_tag_path)
[Escaped Output] t(:id)
[Escaped Output] t(:post_id)
[Escaped Output] t(:tag_id)
[Escaped Output] post_tags.id
[Escaped Output] post_tags.post_id
[Escaped Output] post_tags.tag_id
[Escaped Output] link_to(t("show"), post_tags)
[Escaped Output] link_to(t("edit"), edit_post_tag_path(post_tags))
[Escaped Output] button_to(t("destroy"), post_tags, :confirm => "are you sure?", :method => :delete)

post_tags/index.["PostTagsController#index"]

[Escaped Output] t("listing term taxonomies")
[Escaped Output] link_to(t("new post_tags"), new_post_tag_path)
[Escaped Output] t(:id)
[Escaped Output] t(:post_id)
[Escaped Output] t(:tag_id)
[Escaped Output] PostTag.new.id
[Escaped Output] PostTag.new.post_id
[Escaped Output] PostTag.new.tag_id
[Escaped Output] link_to(t("show"), PostTag.new)
[Escaped Output] link_to(t("edit"), edit_post_tag_path(PostTag.new))
[Escaped Output] button_to(t("destroy"), PostTag.new, :confirm => "are you sure?", :method => :delete)

post_tags/new

[Escaped Output] t("New Post - Tag Relation")
[Escaped Output] render(partial => "form", {})
[Escaped Output] link_to(t("Back"), post_tags_path)

post_tags/new.["PostTagsController#new"]

[Escaped Output] t("New Post - Tag Relation")
[Escaped Output] render(partial => "form", {})
[Escaped Output] link_to(t("Back"), post_tags_path)

post_tags/show

[Escaped Output] t(:id)
[Escaped Output] @post_tags.id
[Escaped Output] t(:term_id)
[Escaped Output] @post_tags.term_id
[Escaped Output] t(:texonomy)
[Escaped Output] @post_tags.taxonomy
[Escaped Output] t(:description)
[Escaped Output] @post_tags.description
[Escaped Output] t(:parent)
[Escaped Output] @post_tags.parent
[Escaped Output] t(:count)
[Escaped Output] @post_tags.count
[Escaped Output] link_to(t("edit"), edit_post_tag_path(@post_tags))
[Escaped Output] link_to(t("back"), post_tags_path)

post_tags/show.["PostTagsController#show"]

[Escaped Output] t(:id)
[Escaped Output] PostTag.find(params[:id]).id
[Escaped Output] t(:term_id)
[Escaped Output] PostTag.find(params[:id]).term_id
[Escaped Output] t(:texonomy)
[Escaped Output] PostTag.find(params[:id]).taxonomy
[Escaped Output] t(:description)
[Escaped Output] PostTag.find(params[:id]).description
[Escaped Output] t(:parent)
[Escaped Output] PostTag.find(params[:id]).parent
[Escaped Output] t(:count)
[Escaped Output] PostTag.find(params[:id]).count
[Escaped Output] link_to(t("edit"), edit_post_tag_path(PostTag.find(params[:id])))
[Escaped Output] link_to(t("back"), post_tags_path)

posts/_blog_categories

[Escaped Output] t("categories")
[Escaped Output] cycle("odd", "even")
[Escaped Output] post.category
[Escaped Output] link_to(post.title, post)

posts/_blog_recents

[Escaped Output] link_to(t("recent posts"), "/blog")
[Escaped Output] cycle("odd", "even")
[Escaped Output] post.published.strftime("%Y-%m-%d")
[Escaped Output] link_to(post.title, post)

posts/_form

[Escaped Output] pluralize(@post.errors.count, t("error"))
[Escaped Output] msg
[Escaped Output] f.text_field(:title, :class => "form-control input-sm", :placeholder => "Post Title")
[Escaped Output] f.text_area(:content, :class => "form-control custom-control", :placeholder => "Post Content", :maxlength => "337", :rows => 6, :style => "resize:none")
[Escaped Output] f.select(:comment_status, options_for_select([[t("open"), "open"], [t("closed"), "closed"]], @post.comment_status))
[Escaped Output] f.select(:status, options_for_select([[t("publish"), "publish"], [t("draft"), "draft"]], @post.status), :class => "d4xItem")
[Escaped Output] collection_select(:tags, :id, Tag.all, :id, :slug, { :selected => @post.post_tag.map(&:tag_id) }, :name => "post[tags][]", :multiple => true, :size => 2, :id => "existing-tags")
[Escaped Output] f.file_field(:image, :onchange => "$(this).parent().parent().find('.form-control').html($(this).val().split(/[\\\\|/]/).pop());", :style => "display:;")
[Escaped Output] f.submit(:class => "btn btn-primary btn-sm btn-block")
[Escaped Output] form_for(@post) do; if @post.errors.any? then; [Escaped Output] pluralize(@post.errors.count, t("error")); @post.errors.full_messages.each do; [Escaped Output] msg; end;end;[Escaped Output] f.text_field(:title, :class => "form-control input-sm", :placeholder => "Post Title");[Escaped Output] f.text_area(:content, :class => "form-control custom-control", :placeholder => "Post Content", :maxlength => "337", :rows => 6, :style => "resize:none");[Escaped Output] f.select(:comment_status, options_for_select([[t("open"), "open"], [t("closed"), "closed"]], @post.comment_status));[Escaped Output] f.select(:status, options_for_select([[t("publish"), "publish"], [t("draft"), "draft"]], @post.status), :class => "d4xItem");[Escaped Output] collection_select(:tags, :id, Tag.all, :id, :slug, { :selected => @post.post_tag.map(&:tag_id) }, :name => "post[tags][]", :multiple => true, :size => 2, :id => "existing-tags");[Escaped Output] f.file_field(:image, :onchange => "$(this).parent().parent().find('.form-control').html($(this).val().split(/[\\\\|/]/).pop());", :style => "display:;");[Escaped Output] f.submit(:class => "btn btn-primary btn-sm btn-block"); end

posts/_form.["PostsController#edit", "Template:posts/edit"]

[Escaped Output] pluralize(Post.find(params[:id]).errors.count, t("error"))
[Escaped Output] (Unresolved Model).new
[Escaped Output] FormBuilder.new.text_field(:title, :class => "form-control input-sm", :placeholder => "Post Title")
[Escaped Output] FormBuilder.new.text_area(:content, :class => "form-control custom-control", :placeholder => "Post Content", :maxlength => "337", :rows => 6, :style => "resize:none")
[Escaped Output] FormBuilder.new.select(:comment_status, options_for_select([[t("open"), "open"], [t("closed"), "closed"]], Post.find(params[:id]).comment_status))
[Escaped Output] FormBuilder.new.select(:status, options_for_select([[t("publish"), "publish"], [t("draft"), "draft"]], Post.find(params[:id]).status), :class => "d4xItem")
[Escaped Output] collection_select(:tags, :id, Tag.all, :id, :slug, { :selected => Post.find(params[:id]).post_tag.map(&:tag_id) }, :name => "post[tags][]", :multiple => true, :size => 2, :id => "existing-tags")
[Escaped Output] FormBuilder.new.file_field(:image, :onchange => "$(this).parent().parent().find('.form-control').html($(this).val().split(/[\\\\|/]/).pop());", :style => "display:;")
[Escaped Output] FormBuilder.new.submit(:class => "btn btn-primary btn-sm btn-block")
[Escaped Output] form_for(Post.find(params[:id])) do; if Post.find(params[:id]).errors.any? then; [Escaped Output] pluralize(Post.find(params[:id]).errors.count, t("error")); Post.find(params[:id]).errors.full_messages.each do; [Escaped Output] (Unresolved Model).new; end;end;[Escaped Output] FormBuilder.new.text_field(:title, :class => "form-control input-sm", :placeholder => "Post Title");[Escaped Output] FormBuilder.new.text_area(:content, :class => "form-control custom-control", :placeholder => "Post Content", :maxlength => "337", :rows => 6, :style => "resize:none");[Escaped Output] FormBuilder.new.select(:comment_status, options_for_select([[t("open"), "open"], [t("closed"), "closed"]], Post.find(params[:id]).comment_status));[Escaped Output] FormBuilder.new.select(:status, options_for_select([[t("publish"), "publish"], [t("draft"), "draft"]], Post.find(params[:id]).status), :class => "d4xItem");[Escaped Output] collection_select(:tags, :id, Tag.all, :id, :slug, { :selected => Post.find(params[:id]).post_tag.map(&:tag_id) }, :name => "post[tags][]", :multiple => true, :size => 2, :id => "existing-tags");[Escaped Output] FormBuilder.new.file_field(:image, :onchange => "$(this).parent().parent().find('.form-control').html($(this).val().split(/[\\\\|/]/).pop());", :style => "display:;");[Escaped Output] FormBuilder.new.submit(:class => "btn btn-primary btn-sm btn-block"); end

posts/_form.["PostsController#new", "Template:posts/new"]

[Escaped Output] pluralize(Post.new.errors.count, t("error"))
[Escaped Output] msg
[Escaped Output] FormBuilder.new.text_field(:title, :class => "form-control input-sm", :placeholder => "Post Title")
[Escaped Output] FormBuilder.new.text_area(:content, :class => "form-control custom-control", :placeholder => "Post Content", :maxlength => "337", :rows => 6, :style => "resize:none")
[Escaped Output] FormBuilder.new.select(:comment_status, options_for_select([[t("open"), "open"], [t("closed"), "closed"]], Post.new.comment_status))
[Escaped Output] FormBuilder.new.select(:status, options_for_select([[t("publish"), "publish"], [t("draft"), "draft"]], Post.new.status), :class => "d4xItem")
[Escaped Output] collection_select(:tags, :id, Tag.all, :id, :slug, { :selected => Post.new.post_tag.map(&:tag_id) }, :name => "post[tags][]", :multiple => true, :size => 2, :id => "existing-tags")
[Escaped Output] FormBuilder.new.file_field(:image, :onchange => "$(this).parent().parent().find('.form-control').html($(this).val().split(/[\\\\|/]/).pop());", :style => "display:;")
[Escaped Output] FormBuilder.new.submit(:class => "btn btn-primary btn-sm btn-block")
[Escaped Output] form_for(Post.new) do; if Post.new.errors.any? then; [Escaped Output] pluralize(Post.new.errors.count, t("error")); Post.new.errors.full_messages.each do; [Escaped Output] msg; end;end;[Escaped Output] FormBuilder.new.text_field(:title, :class => "form-control input-sm", :placeholder => "Post Title");[Escaped Output] FormBuilder.new.text_area(:content, :class => "form-control custom-control", :placeholder => "Post Content", :maxlength => "337", :rows => 6, :style => "resize:none");[Escaped Output] FormBuilder.new.select(:comment_status, options_for_select([[t("open"), "open"], [t("closed"), "closed"]], Post.new.comment_status));[Escaped Output] FormBuilder.new.select(:status, options_for_select([[t("publish"), "publish"], [t("draft"), "draft"]], Post.new.status), :class => "d4xItem");[Escaped Output] collection_select(:tags, :id, Tag.all, :id, :slug, { :selected => Post.new.post_tag.map(&:tag_id) }, :name => "post[tags][]", :multiple => true, :size => 2, :id => "existing-tags");[Escaped Output] FormBuilder.new.file_field(:image, :onchange => "$(this).parent().parent().find('.form-control').html($(this).val().split(/[\\\\|/]/).pop());", :style => "display:;");[Escaped Output] FormBuilder.new.submit(:class => "btn btn-primary btn-sm btn-block"); end

posts/_form.["Template:posts/edit"]

[Escaped Output] pluralize(@post.errors.count, t("error"))
[Escaped Output] msg
[Escaped Output] FormBuilder.new.text_field(:title, :class => "form-control input-sm", :placeholder => "Post Title")
[Escaped Output] FormBuilder.new.text_area(:content, :class => "form-control custom-control", :placeholder => "Post Content", :maxlength => "337", :rows => 6, :style => "resize:none")
[Escaped Output] FormBuilder.new.select(:comment_status, options_for_select([[t("open"), "open"], [t("closed"), "closed"]], @post.comment_status))
[Escaped Output] FormBuilder.new.select(:status, options_for_select([[t("publish"), "publish"], [t("draft"), "draft"]], @post.status), :class => "d4xItem")
[Escaped Output] collection_select(:tags, :id, Tag.all, :id, :slug, { :selected => @post.post_tag.map(&:tag_id) }, :name => "post[tags][]", :multiple => true, :size => 2, :id => "existing-tags")
[Escaped Output] FormBuilder.new.file_field(:image, :onchange => "$(this).parent().parent().find('.form-control').html($(this).val().split(/[\\\\|/]/).pop());", :style => "display:;")
[Escaped Output] FormBuilder.new.submit(:class => "btn btn-primary btn-sm btn-block")
[Escaped Output] form_for(@post) do; if @post.errors.any? then; [Escaped Output] pluralize(@post.errors.count, t("error")); @post.errors.full_messages.each do; [Escaped Output] msg; end;end;[Escaped Output] FormBuilder.new.text_field(:title, :class => "form-control input-sm", :placeholder => "Post Title");[Escaped Output] FormBuilder.new.text_area(:content, :class => "form-control custom-control", :placeholder => "Post Content", :maxlength => "337", :rows => 6, :style => "resize:none");[Escaped Output] FormBuilder.new.select(:comment_status, options_for_select([[t("open"), "open"], [t("closed"), "closed"]], @post.comment_status));[Escaped Output] FormBuilder.new.select(:status, options_for_select([[t("publish"), "publish"], [t("draft"), "draft"]], @post.status), :class => "d4xItem");[Escaped Output] collection_select(:tags, :id, Tag.all, :id, :slug, { :selected => @post.post_tag.map(&:tag_id) }, :name => "post[tags][]", :multiple => true, :size => 2, :id => "existing-tags");[Escaped Output] FormBuilder.new.file_field(:image, :onchange => "$(this).parent().parent().find('.form-control').html($(this).val().split(/[\\\\|/]/).pop());", :style => "display:;");[Escaped Output] FormBuilder.new.submit(:class => "btn btn-primary btn-sm btn-block"); end

posts/_top

[Escaped Output] image_tag("d4x150.jpg", :height => "48", :border => 0, :mouseover => "d4x150.jpg", :title => "blog post", :class => "round3")
[Escaped Output] label_tag(post.published.to_s(:long), nil, :class => "orange")
[Escaped Output] label_tag(post.title, nil, :class => "lime")
[Escaped Output] raw(post.content)
[Escaped Output] image_tag("tagsicon.gif", :class => "d4xicon", :alt => "tags", :tooltip => "tags")
[Escaped Output] Tag.find(post_tag.tag_id).name

posts/_top_blog

[Escaped Output] image_tag("note.png", :border => 0, :mouseover => "note.png", :title => "blog", :size => "16x16")
[Escaped Output] t("recent posts")
[Escaped Output] cycle("odd", "even")
[Escaped Output] post.published.strftime("%Y-%m-%d")
[Escaped Output] link_to(post.title, post)
[Escaped Output] User.find(post.author).nickname
[Escaped Output] link_to(t("view all"), posts_url)

posts/author

[Escaped Output] @user.avatar.url(:thumb)
[Escaped Output] @user.firstname
[Escaped Output] @user.nickname
[Escaped Output] @user.headline
[Escaped Output] t("status")
[Escaped Output] get_current_status(@user.id)
[Escaped Output] t("set on")
[Escaped Output] last_status_set(@user.id)
[Escaped Output] time_ago_in_words(last_status_set(@user.id))
[Escaped Output] t("ago")
[Escaped Output] t("never")
[Escaped Output] t("last seen")
[Escaped Output] image_tag("online.png")
[Escaped Output] t("online")
[Escaped Output] t("last seen")
[Escaped Output] @user.last_seen
[Escaped Output] time_ago_in_words(@user.last_seen)
[Escaped Output] t("ago")
[Escaped Output] t("last seen")
[Escaped Output] t("never")
[Escaped Output] t("mobile")
[Escaped Output] @user.mobile
[Escaped Output] t("email")
[Escaped Output] @user.email
[Escaped Output] @user.created_at
[Escaped Output] time_ago_in_words(@user.created_at)
[Escaped Output] t("ago")

posts/author.["PostsController#author"]

[Escaped Output] Blog.find(params[:id]).author.avatar.url(:thumb)
[Escaped Output] Blog.find(params[:id]).author.firstname
[Escaped Output] Blog.find(params[:id]).author.nickname
[Escaped Output] Blog.find(params[:id]).author.headline
[Escaped Output] t("status")
[Escaped Output] get_current_status(Blog.find(params[:id]).author.id)
[Escaped Output] t("set on")
[Escaped Output] last_status_set(Blog.find(params[:id]).author.id)
[Escaped Output] time_ago_in_words(last_status_set(Blog.find(params[:id]).author.id))
[Escaped Output] t("ago")
[Escaped Output] t("never")
[Escaped Output] t("last seen")
[Escaped Output] image_tag("online.png")
[Escaped Output] t("online")
[Escaped Output] t("last seen")
[Escaped Output] Blog.find(params[:id]).author.last_seen
[Escaped Output] time_ago_in_words(Blog.find(params[:id]).author.last_seen)
[Escaped Output] t("ago")
[Escaped Output] t("last seen")
[Escaped Output] t("never")
[Escaped Output] t("mobile")
[Escaped Output] Blog.find(params[:id]).author.mobile
[Escaped Output] t("email")
[Escaped Output] Blog.find(params[:id]).author.email
[Escaped Output] Blog.find(params[:id]).author.created_at
[Escaped Output] time_ago_in_words(Blog.find(params[:id]).author.created_at)
[Escaped Output] t("ago")

posts/blog

[Escaped Output] @blog.title
[Escaped Output] @blog.motto
[Escaped Output] @blog.author.nickname
[Escaped Output] @blog.author.firstname
[Escaped Output] image_tag(post.image.url, :class => "card-img-top")
[Escaped Output] post.title
[Escaped Output] user_nick(post.author)
[Escaped Output] post.updated_at
[Escaped Output] post.created_at
[Escaped Output] @contempt = raw(post.content)
[Escaped Output] post.user.avatar.url(:thumb)
[Escaped Output] image_url("missing_avatar.png")
[Escaped Output] d4x_sanitizer(t("author"))
[Escaped Output] post.user.nickname
[Escaped Output] time_ago_in_words(post.created_at)
[Escaped Output] d4x_sanitizer(t("ago"))
[Escaped Output] image_tag("tag_red.png", :border => 0, :mouseover => "tag_red.png", :title => d4x_sanitizer(t("icon-show")), :size => "16x16")
[Escaped Output] Tag.find(post_tag.tag_id).name
[Escaped Output] javascript_include_tag("summernote.js")
[Escaped Output] stylesheet_link_tag("summernote.css")
[Escaped Output] content_for(:head) do; [Escaped Output] javascript_include_tag("summernote.js");[Escaped Output] stylesheet_link_tag("summernote.css"); end
[Escaped Output] f.text_field(:title, :class => "form-control input-sm", :placeholder => "Post Title")
[Escaped Output] f.text_area(:content, :class => "form-control custom-control input-transparent summernote", :placeholder => "Post Content", :maxlength => "337", :rows => 6, :style => "resize:none")
[Escaped Output] f.select(:status, options_for_select([[t("publish"), "publish"], [t("draft"), "draft"]], @post.status), :class => "select2 form-control")
[Escaped Output] collection_select(:tags, :id, Tag.all, :id, :slug, { :selected => @post.post_tag.map(&:tag_id) }, :name => "post[tags][]", :multiple => true, :size => 2, :id => "existing-tags")
[Escaped Output] f.file_field(:image, :onchange => "$(this).parent().parent().find('.form-control').html($(this).val().split(/[\\\\|/]/).pop());", :style => "display: none;")
[Escaped Output] f.submit(:class => "btn btn-outline-warning btn-sm btn-block")
[Escaped Output] form_for(@post) do; [Escaped Output] f.text_field(:title, :class => "form-control input-sm", :placeholder => "Post Title");[Escaped Output] f.text_area(:content, :class => "form-control custom-control input-transparent summernote", :placeholder => "Post Content", :maxlength => "337", :rows => 6, :style => "resize:none");[Escaped Output] f.select(:status, options_for_select([[t("publish"), "publish"], [t("draft"), "draft"]], @post.status), :class => "select2 form-control");[Escaped Output] collection_select(:tags, :id, Tag.all, :id, :slug, { :selected => @post.post_tag.map(&:tag_id) }, :name => "post[tags][]", :multiple => true, :size => 2, :id => "existing-tags");[Escaped Output] f.file_field(:image, :onchange => "$(this).parent().parent().find('.form-control').html($(this).val().split(/[\\\\|/]/).pop());", :style => "display: none;");[Escaped Output] f.submit(:class => "btn btn-outline-warning btn-sm btn-block"); end
[Escaped Output] post.user.avatar.url(:thumb)
[Escaped Output] link_to(post.title[0, 35], edit_post_path(post))
[Escaped Output] link_to(post) do; [Escaped Output] link_to(post.title[0, 35], edit_post_path(post)); end
[Escaped Output] time_ago_in_words_converter(post.created_at)
[Escaped Output] t("ago")
[Escaped Output] button_to(t("delete"), post, :confirm => "really want to delete this post?", :method => :delete, :class => "btn btn-sm btn-outline-danger ", :name => "destroy", :size => "16x16")
[Escaped Output] post.content[0, 100]
[Escaped Output] content_for(:rightside_content) do; [Escaped Output] form_for(@post) do; [Escaped Output] f.text_field(:title, :class => "form-control input-sm", :placeholder => "Post Title");[Escaped Output] f.text_area(:content, :class => "form-control custom-control input-transparent summernote", :placeholder => "Post Content", :maxlength => "337", :rows => 6, :style => "resize:none");[Escaped Output] f.select(:status, options_for_select([[t("publish"), "publish"], [t("draft"), "draft"]], @post.status), :class => "select2 form-control");[Escaped Output] collection_select(:tags, :id, Tag.all, :id, :slug, { :selected => @post.post_tag.map(&:tag_id) }, :name => "post[tags][]", :multiple => true, :size => 2, :id => "existing-tags");[Escaped Output] f.file_field(:image, :onchange => "$(this).parent().parent().find('.form-control').html($(this).val().split(/[\\\\|/]/).pop());", :style => "display: none;");[Escaped Output] f.submit(:class => "btn btn-outline-warning btn-sm btn-block"); end;unless @allposts.blank? then; @allposts.each do; if post.user.avatar(:thumb).present? then; [Escaped Output] post.user.avatar.url(:thumb); else; [ignored]; end; [Escaped Output] link_to(post) do; [Escaped Output] link_to(post.title[0, 35], edit_post_path(post)); end; [Escaped Output] time_ago_in_words_converter(post.created_at); [Escaped Output] t("ago"); if current_user then; if current_user.blog.id = post.blog_id then; [Escaped Output] button_to(t("delete"), post, :confirm => "really want to delete this post?", :method => :delete, :class => "btn btn-sm btn-outline-danger ", :name => "destroy", :size => "16x16"); end; end; [Escaped Output] post.content[0, 100]; end;end; end

posts/blog.["PostsController#blog"]

[Escaped Output] Blog.find(current_user.blog.id).title
[Escaped Output] Blog.find(current_user.blog.id).motto
[Escaped Output] Blog.find(current_user.blog.id).author.nickname
[Escaped Output] Blog.find(current_user.blog.id).author.firstname
[Escaped Output] image_tag((Unresolved Model).new.image.url, :class => "card-img-top")
[Escaped Output] (Unresolved Model).new.title
[Escaped Output] user_nick((Unresolved Model).new.author)
[Escaped Output] (Unresolved Model).new.updated_at
[Escaped Output] (Unresolved Model).new.created_at
[Escaped Output] @contempt = raw((Unresolved Model).new.content)
[Escaped Output] (Unresolved Model).new.user.avatar.url(:thumb)
[Escaped Output] image_url("missing_avatar.png")
[Escaped Output] d4x_sanitizer(t("author"))
[Escaped Output] (Unresolved Model).new.user.nickname
[Escaped Output] time_ago_in_words((Unresolved Model).new.created_at)
[Escaped Output] d4x_sanitizer(t("ago"))
[Escaped Output] image_tag("tag_red.png", :border => 0, :mouseover => "tag_red.png", :title => d4x_sanitizer(t("icon-show")), :size => "16x16")
[Escaped Output] Tag.find(post_tag.tag_id).name
[Escaped Output] javascript_include_tag("summernote.js")
[Escaped Output] stylesheet_link_tag("summernote.css")
[Escaped Output] content_for(:head) do; [Escaped Output] javascript_include_tag("summernote.js");[Escaped Output] stylesheet_link_tag("summernote.css"); end
[Escaped Output] FormBuilder.new.text_field(:title, :class => "form-control input-sm", :placeholder => "Post Title")
[Escaped Output] FormBuilder.new.text_area(:content, :class => "form-control custom-control input-transparent summernote", :placeholder => "Post Content", :maxlength => "337", :rows => 6, :style => "resize:none")
[Escaped Output] FormBuilder.new.select(:status, options_for_select([[t("publish"), "publish"], [t("draft"), "draft"]], Post.new.status), :class => "select2 form-control")
[Escaped Output] collection_select(:tags, :id, Tag.all, :id, :slug, { :selected => Post.new.post_tag.map(&:tag_id) }, :name => "post[tags][]", :multiple => true, :size => 2, :id => "existing-tags")
[Escaped Output] FormBuilder.new.file_field(:image, :onchange => "$(this).parent().parent().find('.form-control').html($(this).val().split(/[\\\\|/]/).pop());", :style => "display: none;")
[Escaped Output] FormBuilder.new.submit(:class => "btn btn-outline-warning btn-sm btn-block")
[Escaped Output] form_for(Post.new) do; [Escaped Output] FormBuilder.new.text_field(:title, :class => "form-control input-sm", :placeholder => "Post Title");[Escaped Output] FormBuilder.new.text_area(:content, :class => "form-control custom-control input-transparent summernote", :placeholder => "Post Content", :maxlength => "337", :rows => 6, :style => "resize:none");[Escaped Output] FormBuilder.new.select(:status, options_for_select([[t("publish"), "publish"], [t("draft"), "draft"]], Post.new.status), :class => "select2 form-control");[Escaped Output] collection_select(:tags, :id, Tag.all, :id, :slug, { :selected => Post.new.post_tag.map(&:tag_id) }, :name => "post[tags][]", :multiple => true, :size => 2, :id => "existing-tags");[Escaped Output] FormBuilder.new.file_field(:image, :onchange => "$(this).parent().parent().find('.form-control').html($(this).val().split(/[\\\\|/]/).pop());", :style => "display: none;");[Escaped Output] FormBuilder.new.submit(:class => "btn btn-outline-warning btn-sm btn-block"); end
[Escaped Output] (Unresolved Model).new.user.avatar.url(:thumb)
[Escaped Output] link_to((Unresolved Model).new.title[0, 35], edit_post_path((Unresolved Model).new))
[Escaped Output] link_to((Unresolved Model).new) do; [Escaped Output] link_to((Unresolved Model).new.title[0, 35], edit_post_path((Unresolved Model).new)); end
[Escaped Output] time_ago_in_words_converter((Unresolved Model).new.created_at)
[Escaped Output] t("ago")
[Escaped Output] button_to(t("delete"), (Unresolved Model).new, :confirm => "really want to delete this post?", :method => :delete, :class => "btn btn-sm btn-outline-danger ", :name => "destroy", :size => "16x16")
[Escaped Output] (Unresolved Model).new.content[0, 100]
[Escaped Output] content_for(:rightside_content) do; [Escaped Output] form_for(Post.new) do; [Escaped Output] FormBuilder.new.text_field(:title, :class => "form-control input-sm", :placeholder => "Post Title");[Escaped Output] FormBuilder.new.text_area(:content, :class => "form-control custom-control input-transparent summernote", :placeholder => "Post Content", :maxlength => "337", :rows => 6, :style => "resize:none");[Escaped Output] FormBuilder.new.select(:status, options_for_select([[t("publish"), "publish"], [t("draft"), "draft"]], Post.new.status), :class => "select2 form-control");[Escaped Output] collection_select(:tags, :id, Tag.all, :id, :slug, { :selected => Post.new.post_tag.map(&:tag_id) }, :name => "post[tags][]", :multiple => true, :size => 2, :id => "existing-tags");[Escaped Output] FormBuilder.new.file_field(:image, :onchange => "$(this).parent().parent().find('.form-control').html($(this).val().split(/[\\\\|/]/).pop());", :style => "display: none;");[Escaped Output] FormBuilder.new.submit(:class => "btn btn-outline-warning btn-sm btn-block"); end;unless Post.where(:author => current_user.id).order(:updated_at).reverse_order.paginate(:page => params[:page]).blank? then; Post.where(:author => current_user.id).order(:updated_at).reverse_order.paginate(:page => params[:page]).each do; if (Unresolved Model).new.user.avatar(:thumb).present? then; [Escaped Output] (Unresolved Model).new.user.avatar.url(:thumb); else; [ignored]; end; [Escaped Output] link_to((Unresolved Model).new) do; [Escaped Output] link_to((Unresolved Model).new.title[0, 35], edit_post_path((Unresolved Model).new)); end; [Escaped Output] time_ago_in_words_converter((Unresolved Model).new.created_at); [Escaped Output] t("ago"); if current_user then; if current_user.blog.id = (Unresolved Model).new.blog_id then; [Escaped Output] button_to(t("delete"), (Unresolved Model).new, :confirm => "really want to delete this post?", :method => :delete, :class => "btn btn-sm btn-outline-danger ", :name => "destroy", :size => "16x16"); end; end; [Escaped Output] (Unresolved Model).new.content[0, 100]; end;end; end

posts/blog2

[Escaped Output] post.title
[Escaped Output] raw(@contempt)
[Escaped Output] image_tag("tag_red.png", :border => 0, :mouseover => "tag_red.png", :title => d4x_sanitizer(t("icon-show")), :size => "16x16")
[Escaped Output] Tag.find(post_tag.tag_id).name
[Escaped Output] d4x_sanitizer(t("posted_by"))
[Escaped Output] post.user.nickname
[Escaped Output] time_ago_in_words(post.created_at)
[Escaped Output] d4x_sanitizer(t("ago"))
[Escaped Output] d4x_sanitizer(t("comments"))
[Escaped Output] post.comments.count

posts/blog2.["PostsController#blog2"]

[Escaped Output] (Unresolved Model).new.title
[Escaped Output] raw(raw((Unresolved Model).new.content))
[Escaped Output] image_tag("tag_red.png", :border => 0, :mouseover => "tag_red.png", :title => d4x_sanitizer(t("icon-show")), :size => "16x16")
[Escaped Output] Tag.find(post_tag.tag_id).name
[Escaped Output] d4x_sanitizer(t("posted_by"))
[Escaped Output] (Unresolved Model).new.user.nickname
[Escaped Output] time_ago_in_words((Unresolved Model).new.created_at)
[Escaped Output] d4x_sanitizer(t("ago"))
[Escaped Output] d4x_sanitizer(t("comments"))
[Escaped Output] (Unresolved Model).new.comments.count

posts/d4x337

[Escaped Output] @user.avatar.url(:thumb)
[Escaped Output] @user.firstname
[Escaped Output] @user.nickname
[Escaped Output] @user.headline
[Escaped Output] t("status")
[Escaped Output] get_current_status(@user.id)
[Escaped Output] t("set on")
[Escaped Output] last_status_set(@user.id)
[Escaped Output] time_ago_in_words(last_status_set(@user.id))
[Escaped Output] t("ago")
[Escaped Output] t("never")
[Escaped Output] t("last seen")
[Escaped Output] image_tag("online.png")
[Escaped Output] t("online")
[Escaped Output] t("last seen")
[Escaped Output] @user.last_seen
[Escaped Output] time_ago_in_words(@user.last_seen)
[Escaped Output] t("ago")
[Escaped Output] t("last seen")
[Escaped Output] t("never")
[Escaped Output] t("mobile")
[Escaped Output] @user.mobile
[Escaped Output] t("email")
[Escaped Output] @user.email
[Escaped Output] t("posts")
[Escaped Output] @user.blog.posts.count
[Escaped Output] @user.created_at
[Escaped Output] time_ago_in_words(@user.created_at)
[Escaped Output] t("ago")

posts/d4x337.["PostsController#d4x337"]

[Escaped Output] Blog.find(1).author.avatar.url(:thumb)
[Escaped Output] Blog.find(1).author.firstname
[Escaped Output] Blog.find(1).author.nickname
[Escaped Output] Blog.find(1).author.headline
[Escaped Output] t("status")
[Escaped Output] get_current_status(Blog.find(1).author.id)
[Escaped Output] t("set on")
[Escaped Output] last_status_set(Blog.find(1).author.id)
[Escaped Output] time_ago_in_words(last_status_set(Blog.find(1).author.id))
[Escaped Output] t("ago")
[Escaped Output] t("never")
[Escaped Output] t("last seen")
[Escaped Output] image_tag("online.png")
[Escaped Output] t("online")
[Escaped Output] t("last seen")
[Escaped Output] Blog.find(1).author.last_seen
[Escaped Output] time_ago_in_words(Blog.find(1).author.last_seen)
[Escaped Output] t("ago")
[Escaped Output] t("last seen")
[Escaped Output] t("never")
[Escaped Output] t("mobile")
[Escaped Output] Blog.find(1).author.mobile
[Escaped Output] t("email")
[Escaped Output] Blog.find(1).author.email
[Escaped Output] t("posts")
[Escaped Output] Blog.find(1).author.blog.posts.count
[Escaped Output] Blog.find(1).author.created_at
[Escaped Output] time_ago_in_words(Blog.find(1).author.created_at)
[Escaped Output] t("ago")

posts/edit

[Escaped Output] render(partial => "form", {})
[Escaped Output] content_for(:head) do; [ignored]; end

posts/edit.["PostsController#edit"]

[Escaped Output] render(partial => "form", {})
[Escaped Output] content_for(:head) do; [ignored]; end

posts/idtag

[Escaped Output] post.user.avatar.url(:thumb)
[Escaped Output] image_url("missing_avatar.png")
[Escaped Output] post.updated_at
[Escaped Output] post.created_at
[Escaped Output] post.title
[Escaped Output] raw(@contempt)
[Escaped Output] image_tag(post.image.url, :class => "post-image")
[Escaped Output] image_tag("tag_red.png", :border => 0, :mouseover => "tag_red.png", :title => d4x_sanitizer(t("icon-show")), :size => "16x16")
[Escaped Output] Tag.find(post_tag.tag_id).name
[Escaped Output] d4x_sanitizer(t("author"))
[Escaped Output] post.user.nickname
[Escaped Output] time_ago_in_words(post.created_at)
[Escaped Output] d4x_sanitizer(t("ago"))

posts/idtag.["PostsController#idtag"]

[Escaped Output] (Unresolved Model).new.user.avatar.url(:thumb)
[Escaped Output] image_url("missing_avatar.png")
[Escaped Output] (Unresolved Model).new.updated_at
[Escaped Output] (Unresolved Model).new.created_at
[Escaped Output] (Unresolved Model).new.title
[Escaped Output] raw(raw((Unresolved Model).new.content))
[Escaped Output] image_tag((Unresolved Model).new.image.url, :class => "post-image")
[Escaped Output] image_tag("tag_red.png", :border => 0, :mouseover => "tag_red.png", :title => d4x_sanitizer(t("icon-show")), :size => "16x16")
[Escaped Output] Tag.find(post_tag.tag_id).name
[Escaped Output] d4x_sanitizer(t("author"))
[Escaped Output] (Unresolved Model).new.user.nickname
[Escaped Output] time_ago_in_words((Unresolved Model).new.created_at)
[Escaped Output] d4x_sanitizer(t("ago"))

posts/index

[Escaped Output] t("admin blog")
[Escaped Output] t(:post)
[Escaped Output] t(:author)
[Escaped Output] t(:published)
[Escaped Output] t("edit")
[Escaped Output] t("delete")
[Escaped Output] post.title[0, 35]
[Escaped Output] link_to(post) do; [Escaped Output] post.title[0, 35]; end
[Escaped Output] post.author
[Escaped Output] link_to(image_tag("note_edit.png", :border => 0, :mouseover => "note_edit.png", :title => t("icon-edit"), :size => "16x16"), edit_post_path(post))
[Escaped Output] button_to("", post, :confirm => "really want to delete this post?", :method => :delete, :class => "postdestroy ", :name => "destroy", :size => "16x16")

posts/index.["PostsController#index"]

[Escaped Output] t("admin blog")
[Escaped Output] t(:post)
[Escaped Output] t(:author)
[Escaped Output] t(:published)
[Escaped Output] t("edit")
[Escaped Output] t("delete")
[Escaped Output] post.title[0, 35]
[Escaped Output] link_to(post) do; [Escaped Output] post.title[0, 35]; end
[Escaped Output] post.author
[Escaped Output] link_to(image_tag("note_edit.png", :border => 0, :mouseover => "note_edit.png", :title => t("icon-edit"), :size => "16x16"), edit_post_path(post))
[Escaped Output] button_to("", post, :confirm => "really want to delete this post?", :method => :delete, :class => "postdestroy ", :name => "destroy", :size => "16x16")

posts/new

[Escaped Output] content_for(:head) do; [ignored]; end
[Escaped Output] render(partial => "form", {})

posts/new.["PostsController#new"]

[Escaped Output] content_for(:head) do; [ignored]; end
[Escaped Output] render(partial => "form", {})

posts/settings

[Escaped Output] t("admin")
[Escaped Output] text_field_tag(:title, @blog.title, :class => "form-control center")
[Escaped Output] t("motto")
[Escaped Output] text_field_tag(:motto, @blog.motto, :class => "form-control center")
[Escaped Output] t("picture")
[Escaped Output] text_field_tag(:motto, @blog.motto, :class => "form-control center")
[Escaped Output] button_tag(:class => "btn btn-danger btn-sm btn-block")
[Escaped Output] form_tag("savesettings") do; [Escaped Output] t("admin") if current_user.role?(:admin);[Escaped Output] text_field_tag(:title, @blog.title, :class => "form-control center");[Escaped Output] t("motto");[Escaped Output] text_field_tag(:motto, @blog.motto, :class => "form-control center");[Escaped Output] t("picture");[Escaped Output] text_field_tag(:motto, @blog.motto, :class => "form-control center");[Escaped Output] button_tag(:class => "btn btn-danger btn-sm btn-block"); end

posts/settings.["PostsController#settings"]

[Escaped Output] t("admin")
[Escaped Output] text_field_tag(:title, Blog.find(1).title, :class => "form-control center")
[Escaped Output] t("motto")
[Escaped Output] text_field_tag(:motto, Blog.find(1).motto, :class => "form-control center")
[Escaped Output] t("picture")
[Escaped Output] text_field_tag(:motto, Blog.find(1).motto, :class => "form-control center")
[Escaped Output] button_tag(:class => "btn btn-danger btn-sm btn-block")
[Escaped Output] form_tag("savesettings") do; [Escaped Output] t("admin") if current_user.role?(:admin);[Escaped Output] text_field_tag(:title, Blog.find(1).title, :class => "form-control center");[Escaped Output] t("motto");[Escaped Output] text_field_tag(:motto, Blog.find(1).motto, :class => "form-control center");[Escaped Output] t("picture");[Escaped Output] text_field_tag(:motto, Blog.find(1).motto, :class => "form-control center");[Escaped Output] button_tag(:class => "btn btn-danger btn-sm btn-block"); end

posts/show

[Escaped Output] @post.user.avatar.url(:thumb)
[Escaped Output] image_url("missing_avatar.png")
[Escaped Output] @post.updated_at
[Escaped Output] @post.created_at
[Escaped Output] @post.title
[Escaped Output] raw(@contempt)
[Escaped Output] image_tag(@post.image.url, :class => "post-image")
[Escaped Output] image_tag("tag_red.png", :border => 0, :mouseover => "tag_red.png", :title => d4x_sanitizer(t("icon-show")), :size => "16x16")
[Escaped Output] Tag.find(post_tag.tag_id).name
[Escaped Output] d4x_sanitizer(t("author"))
[Escaped Output] @post.user.nickname
[Escaped Output] time_ago_in_words(@post.created_at)
[Escaped Output] d4x_sanitizer(t("ago"))

posts/show.["PostsController#show"]

[Escaped Output] Post.find(params[:id]).user.avatar.url(:thumb)
[Escaped Output] image_url("missing_avatar.png")
[Escaped Output] Post.find(params[:id]).updated_at
[Escaped Output] Post.find(params[:id]).created_at
[Escaped Output] Post.find(params[:id]).title
[Escaped Output] raw(raw(Post.find(params[:id]).content))
[Escaped Output] image_tag(Post.find(params[:id]).image.url, :class => "post-image")
[Escaped Output] image_tag("tag_red.png", :border => 0, :mouseover => "tag_red.png", :title => d4x_sanitizer(t("icon-show")), :size => "16x16")
[Escaped Output] Tag.find((Unresolved Model).new.tag_id).name
[Escaped Output] d4x_sanitizer(t("author"))
[Escaped Output] Post.find(params[:id]).user.nickname
[Escaped Output] time_ago_in_words(Post.find(params[:id]).created_at)
[Escaped Output] d4x_sanitizer(t("ago"))

posts/taggings

[Escaped Output] @tags = Tag.select("name.*,count(post_tags.tag_id) as count").joins(:post_tag).group("post_tags.tag_id")

posts/taggings.["PostsController#taggings"]

[Escaped Output] @tags = Tag.select("name.*,count(post_tags.tag_id) as count").joins(:post_tag).group("post_tags.tag_id")

posts/tags

[Escaped Output] tag.first
[Escaped Output] Tag.find(tag.first).name
[Escaped Output] tag.last
[Escaped Output] form_tag("idtag") do; [Escaped Output] tag.first;[Escaped Output] Tag.find(tag.first).name;[Escaped Output] tag.last; end

products/_form

[Escaped Output] t("product")
[Escaped Output] f.text_field(:name, :size => 50, :class => "form-control", :placeholder => t("product"))
[Escaped Output] f.text_field(:description, :size => 50, :class => "form-control", :placeholder => t("description"))
[Escaped Output] f.text_area(:summary, :size => 50, :class => "form-control", :placeholder => t("summary"))
[Escaped Output] f.text_field(:final_price, :size => 50, :class => "form-control", :placeholder => t("price"))
[Escaped Output] f.text_field(:costs, :size => 50, :class => "form-control", :placeholder => t("costs"))
[Escaped Output] f.text_field(:category, :size => 50, :class => "form-control", :placeholder => t("category"))
[Escaped Output] f.text_field(:currency, :size => 50, :class => "form-control", :placeholder => t("currency"))
[Escaped Output] f.text_field(:subscription, :size => 50, :class => "form-control", :placeholder => t("subscription"))
[Escaped Output] f.label(:in_stock, :class => "show-item-label")
[Escaped Output] f.check_box(:in_stock)
[Escaped Output] f.label(:promo, :class => "show-item-label")
[Escaped Output] f.check_box(:promo)
[Escaped Output] f.text_field(:photo_file_name, :size => 40, :class => "form-control")
[Escaped Output] f.file_field(:photo)
[Escaped Output] f.label(:active, :class => "show-item-label")
[Escaped Output] f.check_box(:active)
[Escaped Output] f.submit(t("update"), :class => "btn btn-outline-warning btn-sm btn-block")
[Escaped Output] form_for(@product) do; [Escaped Output] f.text_field(:name, :size => 50, :class => "form-control", :placeholder => t("product"));[Escaped Output] f.text_field(:description, :size => 50, :class => "form-control", :placeholder => t("description"));[Escaped Output] f.text_area(:summary, :size => 50, :class => "form-control", :placeholder => t("summary"));[Escaped Output] f.text_field(:final_price, :size => 50, :class => "form-control", :placeholder => t("price"));[Escaped Output] f.text_field(:costs, :size => 50, :class => "form-control", :placeholder => t("costs"));[Escaped Output] f.text_field(:category, :size => 50, :class => "form-control", :placeholder => t("category"));[Escaped Output] f.text_field(:currency, :size => 50, :class => "form-control", :placeholder => t("currency"));[Escaped Output] f.text_field(:subscription, :size => 50, :class => "form-control", :placeholder => t("subscription"));[Escaped Output] f.label(:in_stock, :class => "show-item-label");[Escaped Output] f.check_box(:in_stock);[Escaped Output] f.label(:promo, :class => "show-item-label");[Escaped Output] f.check_box(:promo);[Escaped Output] f.text_field(:photo_file_name, :size => 40, :class => "form-control");[Escaped Output] f.file_field(:photo);[Escaped Output] f.label(:active, :class => "show-item-label");[Escaped Output] f.check_box(:active);[Escaped Output] f.submit(t("update"), :class => "btn btn-outline-warning btn-sm btn-block"); end

products/_form.["ProductsController#create", "Template:products/new"]

[Escaped Output] t("product")
[Escaped Output] FormBuilder.new.text_field(:name, :size => 50, :class => "form-control", :placeholder => t("product"))
[Escaped Output] FormBuilder.new.text_field(:description, :size => 50, :class => "form-control", :placeholder => t("description"))
[Escaped Output] FormBuilder.new.text_area(:summary, :size => 50, :class => "form-control", :placeholder => t("summary"))
[Escaped Output] FormBuilder.new.text_field(:final_price, :size => 50, :class => "form-control", :placeholder => t("price"))
[Escaped Output] FormBuilder.new.text_field(:costs, :size => 50, :class => "form-control", :placeholder => t("costs"))
[Escaped Output] FormBuilder.new.text_field(:category, :size => 50, :class => "form-control", :placeholder => t("category"))
[Escaped Output] FormBuilder.new.text_field(:currency, :size => 50, :class => "form-control", :placeholder => t("currency"))
[Escaped Output] FormBuilder.new.text_field(:subscription, :size => 50, :class => "form-control", :placeholder => t("subscription"))
[Escaped Output] FormBuilder.new.label(:in_stock, :class => "show-item-label")
[Escaped Output] FormBuilder.new.check_box(:in_stock)
[Escaped Output] FormBuilder.new.label(:promo, :class => "show-item-label")
[Escaped Output] FormBuilder.new.check_box(:promo)
[Escaped Output] FormBuilder.new.text_field(:photo_file_name, :size => 40, :class => "form-control")
[Escaped Output] FormBuilder.new.file_field(:photo)
[Escaped Output] FormBuilder.new.label(:active, :class => "show-item-label")
[Escaped Output] FormBuilder.new.check_box(:active)
[Escaped Output] FormBuilder.new.submit(t("update"), :class => "btn btn-outline-warning btn-sm btn-block")
[Escaped Output] form_for(Product.new(product_params)) do; [Escaped Output] FormBuilder.new.text_field(:name, :size => 50, :class => "form-control", :placeholder => t("product"));[Escaped Output] FormBuilder.new.text_field(:description, :size => 50, :class => "form-control", :placeholder => t("description"));[Escaped Output] FormBuilder.new.text_area(:summary, :size => 50, :class => "form-control", :placeholder => t("summary"));[Escaped Output] FormBuilder.new.text_field(:final_price, :size => 50, :class => "form-control", :placeholder => t("price"));[Escaped Output] FormBuilder.new.text_field(:costs, :size => 50, :class => "form-control", :placeholder => t("costs"));[Escaped Output] FormBuilder.new.text_field(:category, :size => 50, :class => "form-control", :placeholder => t("category"));[Escaped Output] FormBuilder.new.text_field(:currency, :size => 50, :class => "form-control", :placeholder => t("currency"));[Escaped Output] FormBuilder.new.text_field(:subscription, :size => 50, :class => "form-control", :placeholder => t("subscription"));[Escaped Output] FormBuilder.new.label(:in_stock, :class => "show-item-label");[Escaped Output] FormBuilder.new.check_box(:in_stock);[Escaped Output] FormBuilder.new.label(:promo, :class => "show-item-label");[Escaped Output] FormBuilder.new.check_box(:promo);[Escaped Output] FormBuilder.new.text_field(:photo_file_name, :size => 40, :class => "form-control");[Escaped Output] FormBuilder.new.file_field(:photo);[Escaped Output] FormBuilder.new.label(:active, :class => "show-item-label");[Escaped Output] FormBuilder.new.check_box(:active);[Escaped Output] FormBuilder.new.submit(t("update"), :class => "btn btn-outline-warning btn-sm btn-block"); end

products/_form.["ProductsController#edit", "Template:products/edit"]

[Escaped Output] t("product")
[Escaped Output] FormBuilder.new.text_field(:name, :size => 50, :class => "form-control", :placeholder => t("product"))
[Escaped Output] FormBuilder.new.text_field(:description, :size => 50, :class => "form-control", :placeholder => t("description"))
[Escaped Output] FormBuilder.new.text_area(:summary, :size => 50, :class => "form-control", :placeholder => t("summary"))
[Escaped Output] FormBuilder.new.text_field(:final_price, :size => 50, :class => "form-control", :placeholder => t("price"))
[Escaped Output] FormBuilder.new.text_field(:costs, :size => 50, :class => "form-control", :placeholder => t("costs"))
[Escaped Output] FormBuilder.new.text_field(:category, :size => 50, :class => "form-control", :placeholder => t("category"))
[Escaped Output] FormBuilder.new.text_field(:currency, :size => 50, :class => "form-control", :placeholder => t("currency"))
[Escaped Output] FormBuilder.new.text_field(:subscription, :size => 50, :class => "form-control", :placeholder => t("subscription"))
[Escaped Output] FormBuilder.new.label(:in_stock, :class => "show-item-label")
[Escaped Output] FormBuilder.new.check_box(:in_stock)
[Escaped Output] FormBuilder.new.label(:promo, :class => "show-item-label")
[Escaped Output] FormBuilder.new.check_box(:promo)
[Escaped Output] FormBuilder.new.text_field(:photo_file_name, :size => 40, :class => "form-control")
[Escaped Output] FormBuilder.new.file_field(:photo)
[Escaped Output] FormBuilder.new.label(:active, :class => "show-item-label")
[Escaped Output] FormBuilder.new.check_box(:active)
[Escaped Output] FormBuilder.new.submit(t("update"), :class => "btn btn-outline-warning btn-sm btn-block")
[Escaped Output] form_for(Product.find(params[:id])) do; [Escaped Output] FormBuilder.new.text_field(:name, :size => 50, :class => "form-control", :placeholder => t("product"));[Escaped Output] FormBuilder.new.text_field(:description, :size => 50, :class => "form-control", :placeholder => t("description"));[Escaped Output] FormBuilder.new.text_area(:summary, :size => 50, :class => "form-control", :placeholder => t("summary"));[Escaped Output] FormBuilder.new.text_field(:final_price, :size => 50, :class => "form-control", :placeholder => t("price"));[Escaped Output] FormBuilder.new.text_field(:costs, :size => 50, :class => "form-control", :placeholder => t("costs"));[Escaped Output] FormBuilder.new.text_field(:category, :size => 50, :class => "form-control", :placeholder => t("category"));[Escaped Output] FormBuilder.new.text_field(:currency, :size => 50, :class => "form-control", :placeholder => t("currency"));[Escaped Output] FormBuilder.new.text_field(:subscription, :size => 50, :class => "form-control", :placeholder => t("subscription"));[Escaped Output] FormBuilder.new.label(:in_stock, :class => "show-item-label");[Escaped Output] FormBuilder.new.check_box(:in_stock);[Escaped Output] FormBuilder.new.label(:promo, :class => "show-item-label");[Escaped Output] FormBuilder.new.check_box(:promo);[Escaped Output] FormBuilder.new.text_field(:photo_file_name, :size => 40, :class => "form-control");[Escaped Output] FormBuilder.new.file_field(:photo);[Escaped Output] FormBuilder.new.label(:active, :class => "show-item-label");[Escaped Output] FormBuilder.new.check_box(:active);[Escaped Output] FormBuilder.new.submit(t("update"), :class => "btn btn-outline-warning btn-sm btn-block"); end

products/_form.["ProductsController#new", "Template:products/new"]

[Escaped Output] t("product")
[Escaped Output] FormBuilder.new.text_field(:name, :size => 50, :class => "form-control", :placeholder => t("product"))
[Escaped Output] FormBuilder.new.text_field(:description, :size => 50, :class => "form-control", :placeholder => t("description"))
[Escaped Output] FormBuilder.new.text_area(:summary, :size => 50, :class => "form-control", :placeholder => t("summary"))
[Escaped Output] FormBuilder.new.text_field(:final_price, :size => 50, :class => "form-control", :placeholder => t("price"))
[Escaped Output] FormBuilder.new.text_field(:costs, :size => 50, :class => "form-control", :placeholder => t("costs"))
[Escaped Output] FormBuilder.new.text_field(:category, :size => 50, :class => "form-control", :placeholder => t("category"))
[Escaped Output] FormBuilder.new.text_field(:currency, :size => 50, :class => "form-control", :placeholder => t("currency"))
[Escaped Output] FormBuilder.new.text_field(:subscription, :size => 50, :class => "form-control", :placeholder => t("subscription"))
[Escaped Output] FormBuilder.new.label(:in_stock, :class => "show-item-label")
[Escaped Output] FormBuilder.new.check_box(:in_stock)
[Escaped Output] FormBuilder.new.label(:promo, :class => "show-item-label")
[Escaped Output] FormBuilder.new.check_box(:promo)
[Escaped Output] FormBuilder.new.text_field(:photo_file_name, :size => 40, :class => "form-control")
[Escaped Output] FormBuilder.new.file_field(:photo)
[Escaped Output] FormBuilder.new.label(:active, :class => "show-item-label")
[Escaped Output] FormBuilder.new.check_box(:active)
[Escaped Output] FormBuilder.new.submit(t("update"), :class => "btn btn-outline-warning btn-sm btn-block")
[Escaped Output] form_for(Product.new) do; [Escaped Output] FormBuilder.new.text_field(:name, :size => 50, :class => "form-control", :placeholder => t("product"));[Escaped Output] FormBuilder.new.text_field(:description, :size => 50, :class => "form-control", :placeholder => t("description"));[Escaped Output] FormBuilder.new.text_area(:summary, :size => 50, :class => "form-control", :placeholder => t("summary"));[Escaped Output] FormBuilder.new.text_field(:final_price, :size => 50, :class => "form-control", :placeholder => t("price"));[Escaped Output] FormBuilder.new.text_field(:costs, :size => 50, :class => "form-control", :placeholder => t("costs"));[Escaped Output] FormBuilder.new.text_field(:category, :size => 50, :class => "form-control", :placeholder => t("category"));[Escaped Output] FormBuilder.new.text_field(:currency, :size => 50, :class => "form-control", :placeholder => t("currency"));[Escaped Output] FormBuilder.new.text_field(:subscription, :size => 50, :class => "form-control", :placeholder => t("subscription"));[Escaped Output] FormBuilder.new.label(:in_stock, :class => "show-item-label");[Escaped Output] FormBuilder.new.check_box(:in_stock);[Escaped Output] FormBuilder.new.label(:promo, :class => "show-item-label");[Escaped Output] FormBuilder.new.check_box(:promo);[Escaped Output] FormBuilder.new.text_field(:photo_file_name, :size => 40, :class => "form-control");[Escaped Output] FormBuilder.new.file_field(:photo);[Escaped Output] FormBuilder.new.label(:active, :class => "show-item-label");[Escaped Output] FormBuilder.new.check_box(:active);[Escaped Output] FormBuilder.new.submit(t("update"), :class => "btn btn-outline-warning btn-sm btn-block"); end

products/_form.["Template:products/edit"]

[Escaped Output] t("product")
[Escaped Output] FormBuilder.new.text_field(:name, :size => 50, :class => "form-control", :placeholder => t("product"))
[Escaped Output] FormBuilder.new.text_field(:description, :size => 50, :class => "form-control", :placeholder => t("description"))
[Escaped Output] FormBuilder.new.text_area(:summary, :size => 50, :class => "form-control", :placeholder => t("summary"))
[Escaped Output] FormBuilder.new.text_field(:final_price, :size => 50, :class => "form-control", :placeholder => t("price"))
[Escaped Output] FormBuilder.new.text_field(:costs, :size => 50, :class => "form-control", :placeholder => t("costs"))
[Escaped Output] FormBuilder.new.text_field(:category, :size => 50, :class => "form-control", :placeholder => t("category"))
[Escaped Output] FormBuilder.new.text_field(:currency, :size => 50, :class => "form-control", :placeholder => t("currency"))
[Escaped Output] FormBuilder.new.text_field(:subscription, :size => 50, :class => "form-control", :placeholder => t("subscription"))
[Escaped Output] FormBuilder.new.label(:in_stock, :class => "show-item-label")
[Escaped Output] FormBuilder.new.check_box(:in_stock)
[Escaped Output] FormBuilder.new.label(:promo, :class => "show-item-label")
[Escaped Output] FormBuilder.new.check_box(:promo)
[Escaped Output] FormBuilder.new.text_field(:photo_file_name, :size => 40, :class => "form-control")
[Escaped Output] FormBuilder.new.file_field(:photo)
[Escaped Output] FormBuilder.new.label(:active, :class => "show-item-label")
[Escaped Output] FormBuilder.new.check_box(:active)
[Escaped Output] FormBuilder.new.submit(t("update"), :class => "btn btn-outline-warning btn-sm btn-block")
[Escaped Output] form_for(@product) do; [Escaped Output] FormBuilder.new.text_field(:name, :size => 50, :class => "form-control", :placeholder => t("product"));[Escaped Output] FormBuilder.new.text_field(:description, :size => 50, :class => "form-control", :placeholder => t("description"));[Escaped Output] FormBuilder.new.text_area(:summary, :size => 50, :class => "form-control", :placeholder => t("summary"));[Escaped Output] FormBuilder.new.text_field(:final_price, :size => 50, :class => "form-control", :placeholder => t("price"));[Escaped Output] FormBuilder.new.text_field(:costs, :size => 50, :class => "form-control", :placeholder => t("costs"));[Escaped Output] FormBuilder.new.text_field(:category, :size => 50, :class => "form-control", :placeholder => t("category"));[Escaped Output] FormBuilder.new.text_field(:currency, :size => 50, :class => "form-control", :placeholder => t("currency"));[Escaped Output] FormBuilder.new.text_field(:subscription, :size => 50, :class => "form-control", :placeholder => t("subscription"));[Escaped Output] FormBuilder.new.label(:in_stock, :class => "show-item-label");[Escaped Output] FormBuilder.new.check_box(:in_stock);[Escaped Output] FormBuilder.new.label(:promo, :class => "show-item-label");[Escaped Output] FormBuilder.new.check_box(:promo);[Escaped Output] FormBuilder.new.text_field(:photo_file_name, :size => 40, :class => "form-control");[Escaped Output] FormBuilder.new.file_field(:photo);[Escaped Output] FormBuilder.new.label(:active, :class => "show-item-label");[Escaped Output] FormBuilder.new.check_box(:active);[Escaped Output] FormBuilder.new.submit(t("update"), :class => "btn btn-outline-warning btn-sm btn-block"); end

products/edit

[Escaped Output] content_for(:head) do; [ignored]; end
[Escaped Output] render(partial => "/agadanga/big_icons_some_active", {})
[Escaped Output] content_for(:big_icons_menu) do; [Escaped Output] render(partial => "/agadanga/big_icons_some_active", {}); end
[Escaped Output] render(partial => "/agadanga/no_folder_selected", {})
[Escaped Output] content_for(:folders_list) do; [Escaped Output] render(partial => "/agadanga/no_folder_selected", {}); end
[Escaped Output] render(partial => "form", {})

products/edit.["ProductsController#edit"]

[Escaped Output] content_for(:head) do; [ignored]; end
[Escaped Output] render(partial => "/agadanga/big_icons_some_active", {})
[Escaped Output] content_for(:big_icons_menu) do; [Escaped Output] render(partial => "/agadanga/big_icons_some_active", {}); end
[Escaped Output] render(partial => "/agadanga/no_folder_selected", {})
[Escaped Output] content_for(:folders_list) do; [Escaped Output] render(partial => "/agadanga/no_folder_selected", {}); end
[Escaped Output] render(partial => "form", {})

products/index

[Escaped Output] t("products")
[Escaped Output] t(:final_price)
[Escaped Output] t(:category)
[Escaped Output] t("edit")
[Escaped Output] t("delete")
[Escaped Output] link_to(product.name, product)
[Escaped Output] product.final_price
[Escaped Output] product.category
[Escaped Output] link_to(edit_product_path(product)) do; [ignored]; end
[Escaped Output] button_to(product, :method => :delete, :data => ({ :confirm => "Are you sure?" }), :class => "btn btn-sm btn-outline-danger") do; [ignored]; end

products/index.["ProductsController#index"]

[Escaped Output] t("products")
[Escaped Output] t(:final_price)
[Escaped Output] t(:category)
[Escaped Output] t("edit")
[Escaped Output] t("delete")
[Escaped Output] link_to(Product.new.name, Product.new)
[Escaped Output] Product.new.final_price
[Escaped Output] Product.new.category
[Escaped Output] link_to(edit_product_path(Product.new)) do; [ignored]; end
[Escaped Output] button_to(Product.new, :method => :delete, :data => ({ :confirm => "Are you sure?" }), :class => "btn btn-sm btn-outline-danger") do; [ignored]; end

products/new

[Escaped Output] link_to(image_tag("arrow_left.png", :border => 0, :title => t("back")), products_path)
[Escaped Output] t("new product")
[Escaped Output] render(partial => "form", {})

products/new.["ProductsController#new"]

[Escaped Output] link_to(image_tag("arrow_left.png", :border => 0, :title => t("back")), products_path)
[Escaped Output] t("new product")
[Escaped Output] render(partial => "form", {})

products/show

[Escaped Output] javascript_include_tag("d4x-check-email")
[Escaped Output] link_to(image_tag("arrow_left.png", :border => 0, :title => t("back")), products_path)
[Escaped Output] link_to(image_tag("cog_add.png", :border => 0, :mouseover => "cog_add.png", :title => "new", :size => "16x16"), new_product_path)
[Escaped Output] link_to(image_tag("cog_edit.png", :border => 0, :mouseover => "cog_edit.png", :title => t(:edit), :size => "16x16"), edit_product_path(@product))
[Escaped Output] hidden_field_tag(:prod_id, @product.id)
[Escaped Output] hidden_field_tag(:cart_id, @cart.id)
[Escaped Output] @product.name
[Escaped Output] number_to_currency(@product.final_price, :unit => "\u{20ac}", :precision => 2)
[Escaped Output] image_tag(@product.photo.url, :width => "200px", :class => "round-corners10")
[Escaped Output] @product.description
[Escaped Output] text_field_tag(:nickname, nil, :class => "agadanga-check-nick form-control", :size => "32", :id => "user_nick", :placeholder => "choose username")
[Escaped Output] select_tag(:domain, options_for_select([["agadanga.com", "agadanga.com"], ["d4x.cc", "d4x.cc"], "agadanga.com"]), :multiline => true, :onchange => "#", :class => "agadanga-selects", :placeholder => "choose domain")
[Escaped Output] number_field_tag(:items, 1, :in => (1..100), :class => "qty form-control")
[Escaped Output] f.submit(d4x_sanitizer(t("add to cart")), :class => "button-d4x-tiny", :id => "proceed")
[Escaped Output] form_for(@cart_product) do; [Escaped Output] hidden_field_tag(:prod_id, @product.id);[Escaped Output] hidden_field_tag(:cart_id, @cart.id);[Escaped Output] @product.name;[Escaped Output] number_to_currency(@product.final_price, :unit => "\u{20ac}", :precision => 2);[Escaped Output] image_tag(@product.photo.url, :width => "200px", :class => "round-corners10");[Escaped Output] @product.description;if (@product.category == "service") then; [Escaped Output] text_field_tag(:nickname, nil, :class => "agadanga-check-nick form-control", :size => "32", :id => "user_nick", :placeholder => "choose username"); [Escaped Output] select_tag(:domain, options_for_select([["agadanga.com", "agadanga.com"], ["d4x.cc", "d4x.cc"], "agadanga.com"]), :multiline => true, :onchange => "#", :class => "agadanga-selects", :placeholder => "choose domain");end;[Escaped Output] number_field_tag(:items, 1, :in => (1..100), :class => "qty form-control");[Escaped Output] f.submit(d4x_sanitizer(t("add to cart")), :class => "button-d4x-tiny", :id => "proceed"); end

products/show.["ProductsController#show"]

[Escaped Output] javascript_include_tag("d4x-check-email")
[Escaped Output] link_to(image_tag("arrow_left.png", :border => 0, :title => t("back")), products_path)
[Escaped Output] link_to(image_tag("cog_add.png", :border => 0, :mouseover => "cog_add.png", :title => "new", :size => "16x16"), new_product_path)
[Escaped Output] link_to(image_tag("cog_edit.png", :border => 0, :mouseover => "cog_edit.png", :title => t(:edit), :size => "16x16"), edit_product_path(Product.find(params[:id])))
[Escaped Output] hidden_field_tag(:prod_id, Product.find(params[:id]).id)
[Escaped Output] hidden_field_tag(:cart_id, (Cart.find(session[:cart_id]) or (Cart.new(params[:cart]) or Cart.find(params[:cart_id]))).id)
[Escaped Output] Product.find(params[:id]).name
[Escaped Output] number_to_currency(Product.find(params[:id]).final_price, :unit => "\u{20ac}", :precision => 2)
[Escaped Output] image_tag(Product.find(params[:id]).photo.url, :width => "200px", :class => "round-corners10")
[Escaped Output] Product.find(params[:id]).description
[Escaped Output] text_field_tag(:nickname, nil, :class => "agadanga-check-nick form-control", :size => "32", :id => "user_nick", :placeholder => "choose username")
[Escaped Output] select_tag(:domain, options_for_select([["agadanga.com", "agadanga.com"], ["d4x.cc", "d4x.cc"], "agadanga.com"]), :multiline => true, :onchange => "#", :class => "agadanga-selects", :placeholder => "choose domain")
[Escaped Output] number_field_tag(:items, 1, :in => (1..100), :class => "qty form-control")
[Escaped Output] FormBuilder.new.submit(d4x_sanitizer(t("add to cart")), :class => "button-d4x-tiny", :id => "proceed")
[Escaped Output] form_for((Cart.find(session[:cart_id]) or (Cart.new(params[:cart]) or Cart.find(params[:cart_id]))).cart_products.new) do; [Escaped Output] hidden_field_tag(:prod_id, Product.find(params[:id]).id);[Escaped Output] hidden_field_tag(:cart_id, (Cart.find(session[:cart_id]) or (Cart.new(params[:cart]) or Cart.find(params[:cart_id]))).id);[Escaped Output] Product.find(params[:id]).name;[Escaped Output] number_to_currency(Product.find(params[:id]).final_price, :unit => "\u{20ac}", :precision => 2);[Escaped Output] image_tag(Product.find(params[:id]).photo.url, :width => "200px", :class => "round-corners10");[Escaped Output] Product.find(params[:id]).description;if (Product.find(params[:id]).category == "service") then; [Escaped Output] text_field_tag(:nickname, nil, :class => "agadanga-check-nick form-control", :size => "32", :id => "user_nick", :placeholder => "choose username"); [Escaped Output] select_tag(:domain, options_for_select([["agadanga.com", "agadanga.com"], ["d4x.cc", "d4x.cc"], "agadanga.com"]), :multiline => true, :onchange => "#", :class => "agadanga-selects", :placeholder => "choose domain");end;[Escaped Output] number_field_tag(:items, 1, :in => (1..100), :class => "qty form-control");[Escaped Output] FormBuilder.new.submit(d4x_sanitizer(t("add to cart")), :class => "button-d4x-tiny", :id => "proceed"); end

products/store

[Escaped Output] hidden_field_tag(:prod_id, product.id)
[Escaped Output] hidden_field_tag(:cart_id, @cart.id)
[Escaped Output] image_tag(product.photo.url, :class => "card-img-top")
[Escaped Output] link_to(product.name, product)
[Escaped Output] number_to_currency(product.final_price, :unit => "\u{20ac}", :precision => 2)
[Escaped Output] number_field_tag(:items, 1, :in => (1..100), :class => "qty form-control")
[Escaped Output] f.submit(d4x_sanitizer(t("add to cart")), :class => "btn btn-sm btn-outline-success", :id => "proceed")
[Escaped Output] product.description
[Escaped Output] form_for(@cart_product) do; [Escaped Output] hidden_field_tag(:prod_id, product.id);[Escaped Output] hidden_field_tag(:cart_id, @cart.id);if product.photo.present? then; [Escaped Output] image_tag(product.photo.url, :class => "card-img-top");else; [ignored];end;[Escaped Output] link_to(product.name, product);[Escaped Output] number_to_currency(product.final_price, :unit => "\u{20ac}", :precision => 2);[Escaped Output] number_field_tag(:items, 1, :in => (1..100), :class => "qty form-control");[Escaped Output] f.submit(d4x_sanitizer(t("add to cart")), :class => "btn btn-sm btn-outline-success", :id => "proceed");[Escaped Output] product.description; end

products/store.["ProductsController#store"]

[Escaped Output] hidden_field_tag(:prod_id, Product.new.id)
[Escaped Output] hidden_field_tag(:cart_id, (Cart.new or (Cart.new(params[:cart]) or Cart.find(params[:cart_id]))).id)
[Escaped Output] image_tag(Product.new.photo.url, :class => "card-img-top")
[Escaped Output] link_to(Product.new.name, Product.new)
[Escaped Output] number_to_currency(Product.new.final_price, :unit => "\u{20ac}", :precision => 2)
[Escaped Output] number_field_tag(:items, 1, :in => (1..100), :class => "qty form-control")
[Escaped Output] FormBuilder.new.submit(d4x_sanitizer(t("add to cart")), :class => "btn btn-sm btn-outline-success", :id => "proceed")
[Escaped Output] Product.new.description
[Escaped Output] form_for((Cart.new or (Cart.new(params[:cart]) or Cart.find(params[:cart_id]))).cart_products.new) do; [Escaped Output] hidden_field_tag(:prod_id, Product.new.id);[Escaped Output] hidden_field_tag(:cart_id, (Cart.new or (Cart.new(params[:cart]) or Cart.find(params[:cart_id]))).id);if Product.new.photo.present? then; [Escaped Output] image_tag(Product.new.photo.url, :class => "card-img-top");else; [ignored];end;[Escaped Output] link_to(Product.new.name, Product.new);[Escaped Output] number_to_currency(Product.new.final_price, :unit => "\u{20ac}", :precision => 2);[Escaped Output] number_field_tag(:items, 1, :in => (1..100), :class => "qty form-control");[Escaped Output] FormBuilder.new.submit(d4x_sanitizer(t("add to cart")), :class => "btn btn-sm btn-outline-success", :id => "proceed");[Escaped Output] Product.new.description; end

quote_types/_form

[Escaped Output] pluralize(@quote_type.errors.count, d4x_sanitizer(t("error")))
[Escaped Output] d4x_sanitizer(msg)
[Escaped Output] f.label("type of quote", nil, :class => "lcd")
[Escaped Output] f.text_field(:type_of_quote, :size => 64, :class => "def-input")
[Escaped Output] f.label(d4x_sanitizer(t(:visible)), nil, :class => "lcd")
[Escaped Output] f.check_box(:visible)
[Escaped Output] f.submit(:class => "button-d4x")
[Escaped Output] form_for(@quote_type) do; if @quote_type.errors.any? then; [Escaped Output] pluralize(@quote_type.errors.count, d4x_sanitizer(t("error"))); @quote_type.errors.full_messages.each do; [Escaped Output] d4x_sanitizer(msg); end;end;[Escaped Output] f.label("type of quote", nil, :class => "lcd");[Escaped Output] f.text_field(:type_of_quote, :size => 64, :class => "def-input");[Escaped Output] f.label(d4x_sanitizer(t(:visible)), nil, :class => "lcd");[Escaped Output] f.check_box(:visible);[Escaped Output] f.submit(:class => "button-d4x"); end

quote_types/_form.["QuoteTypesController#create", "Template:quote_types/new"]

[Escaped Output] pluralize(QuoteType.new(params[:quote_type]).errors.count, d4x_sanitizer(t("error")))
[Escaped Output] d4x_sanitizer(msg)
[Escaped Output] FormBuilder.new.label("type of quote", nil, :class => "lcd")
[Escaped Output] FormBuilder.new.text_field(:type_of_quote, :size => 64, :class => "def-input")
[Escaped Output] FormBuilder.new.label(d4x_sanitizer(t(:visible)), nil, :class => "lcd")
[Escaped Output] FormBuilder.new.check_box(:visible)
[Escaped Output] FormBuilder.new.submit(:class => "button-d4x")
[Escaped Output] form_for(QuoteType.new(params[:quote_type])) do; if QuoteType.new(params[:quote_type]).errors.any? then; [Escaped Output] pluralize(QuoteType.new(params[:quote_type]).errors.count, d4x_sanitizer(t("error"))); QuoteType.new(params[:quote_type]).errors.full_messages.each do; [Escaped Output] d4x_sanitizer(msg); end;end;[Escaped Output] FormBuilder.new.label("type of quote", nil, :class => "lcd");[Escaped Output] FormBuilder.new.text_field(:type_of_quote, :size => 64, :class => "def-input");[Escaped Output] FormBuilder.new.label(d4x_sanitizer(t(:visible)), nil, :class => "lcd");[Escaped Output] FormBuilder.new.check_box(:visible);[Escaped Output] FormBuilder.new.submit(:class => "button-d4x"); end

quote_types/_form.["QuoteTypesController#edit", "Template:quote_types/edit"]

[Escaped Output] pluralize(QuoteType.find(params[:id]).errors.count, d4x_sanitizer(t("error")))
[Escaped Output] d4x_sanitizer((Unresolved Model).new)
[Escaped Output] FormBuilder.new.label("type of quote", nil, :class => "lcd")
[Escaped Output] FormBuilder.new.text_field(:type_of_quote, :size => 64, :class => "def-input")
[Escaped Output] FormBuilder.new.label(d4x_sanitizer(t(:visible)), nil, :class => "lcd")
[Escaped Output] FormBuilder.new.check_box(:visible)
[Escaped Output] FormBuilder.new.submit(:class => "button-d4x")
[Escaped Output] form_for(QuoteType.find(params[:id])) do; if QuoteType.find(params[:id]).errors.any? then; [Escaped Output] pluralize(QuoteType.find(params[:id]).errors.count, d4x_sanitizer(t("error"))); QuoteType.find(params[:id]).errors.full_messages.each do; [Escaped Output] d4x_sanitizer((Unresolved Model).new); end;end;[Escaped Output] FormBuilder.new.label("type of quote", nil, :class => "lcd");[Escaped Output] FormBuilder.new.text_field(:type_of_quote, :size => 64, :class => "def-input");[Escaped Output] FormBuilder.new.label(d4x_sanitizer(t(:visible)), nil, :class => "lcd");[Escaped Output] FormBuilder.new.check_box(:visible);[Escaped Output] FormBuilder.new.submit(:class => "button-d4x"); end

quote_types/_form.["QuoteTypesController#new", "Template:quote_types/new"]

[Escaped Output] pluralize(QuoteType.new.errors.count, d4x_sanitizer(t("error")))
[Escaped Output] d4x_sanitizer(msg)
[Escaped Output] FormBuilder.new.label("type of quote", nil, :class => "lcd")
[Escaped Output] FormBuilder.new.text_field(:type_of_quote, :size => 64, :class => "def-input")
[Escaped Output] FormBuilder.new.label(d4x_sanitizer(t(:visible)), nil, :class => "lcd")
[Escaped Output] FormBuilder.new.check_box(:visible)
[Escaped Output] FormBuilder.new.submit(:class => "button-d4x")
[Escaped Output] form_for(QuoteType.new) do; if QuoteType.new.errors.any? then; [Escaped Output] pluralize(QuoteType.new.errors.count, d4x_sanitizer(t("error"))); QuoteType.new.errors.full_messages.each do; [Escaped Output] d4x_sanitizer(msg); end;end;[Escaped Output] FormBuilder.new.label("type of quote", nil, :class => "lcd");[Escaped Output] FormBuilder.new.text_field(:type_of_quote, :size => 64, :class => "def-input");[Escaped Output] FormBuilder.new.label(d4x_sanitizer(t(:visible)), nil, :class => "lcd");[Escaped Output] FormBuilder.new.check_box(:visible);[Escaped Output] FormBuilder.new.submit(:class => "button-d4x"); end

quote_types/_form.["Template:quote_types/edit"]

[Escaped Output] pluralize(@quote_type.errors.count, d4x_sanitizer(t("error")))
[Escaped Output] d4x_sanitizer(msg)
[Escaped Output] FormBuilder.new.label("type of quote", nil, :class => "lcd")
[Escaped Output] FormBuilder.new.text_field(:type_of_quote, :size => 64, :class => "def-input")
[Escaped Output] FormBuilder.new.label(d4x_sanitizer(t(:visible)), nil, :class => "lcd")
[Escaped Output] FormBuilder.new.check_box(:visible)
[Escaped Output] FormBuilder.new.submit(:class => "button-d4x")
[Escaped Output] form_for(@quote_type) do; if @quote_type.errors.any? then; [Escaped Output] pluralize(@quote_type.errors.count, d4x_sanitizer(t("error"))); @quote_type.errors.full_messages.each do; [Escaped Output] d4x_sanitizer(msg); end;end;[Escaped Output] FormBuilder.new.label("type of quote", nil, :class => "lcd");[Escaped Output] FormBuilder.new.text_field(:type_of_quote, :size => 64, :class => "def-input");[Escaped Output] FormBuilder.new.label(d4x_sanitizer(t(:visible)), nil, :class => "lcd");[Escaped Output] FormBuilder.new.check_box(:visible);[Escaped Output] FormBuilder.new.submit(:class => "button-d4x"); end

quote_types/admin

[Escaped Output] link_to(image_tag("shape_square_add.png", :border => 0, :mouseover => "shape_square_add.png", :title => t("icon-quotes")), new_quote_type_path)
[Escaped Output] t("Types of Quote")
[Escaped Output] t(:type_of_quote)
[Escaped Output] t(:visible)
[Escaped Output] t(:created)
[Escaped Output] cycle("odd", "even")
[Escaped Output] quote_type.type_of_quote
[Escaped Output] quote_type.visible
[Escaped Output] quote_type.created_at
[Escaped Output] link_to(image_tag("shape_square.png", :border => 0, :mouseover => "shape_square.png", :title => t("icon-show"), :size => "16x16"), quote_type)
[Escaped Output] link_to(image_tag("shape_square_edit.png", :border => 0, :mouseover => "shape_square_edit.png", :title => t("icon-edit"), :size => "16x16"), edit_quote_type_path(quote_type))
[Escaped Output] button_to("", quote_type, :confirm => "are you sure you want to delete this type of quote?", :method => :delete, :class => "zdestroy", :name => "zdestroy", :size => "16x16")

quote_types/admin.["QuoteTypesController#admin"]

[Escaped Output] link_to(image_tag("shape_square_add.png", :border => 0, :mouseover => "shape_square_add.png", :title => t("icon-quotes")), new_quote_type_path)
[Escaped Output] t("Types of Quote")
[Escaped Output] t(:type_of_quote)
[Escaped Output] t(:visible)
[Escaped Output] t(:created)
[Escaped Output] cycle("odd", "even")
[Escaped Output] QuoteType.new.type_of_quote
[Escaped Output] QuoteType.new.visible
[Escaped Output] QuoteType.new.created_at
[Escaped Output] link_to(image_tag("shape_square.png", :border => 0, :mouseover => "shape_square.png", :title => t("icon-show"), :size => "16x16"), QuoteType.new)
[Escaped Output] link_to(image_tag("shape_square_edit.png", :border => 0, :mouseover => "shape_square_edit.png", :title => t("icon-edit"), :size => "16x16"), edit_quote_type_path(QuoteType.new))
[Escaped Output] button_to("", QuoteType.new, :confirm => "are you sure you want to delete this type of quote?", :method => :delete, :class => "zdestroy", :name => "zdestroy", :size => "16x16")

quote_types/edit

[Escaped Output] link_to(image_tag("arrow_left.png", :border => 0, :title => t("back")), quote_types_path)
[Escaped Output] t("editing type of quote")
[Escaped Output] render(partial => "form", {})

quote_types/edit.["QuoteTypesController#edit"]

[Escaped Output] link_to(image_tag("arrow_left.png", :border => 0, :title => t("back")), quote_types_path)
[Escaped Output] t("editing type of quote")
[Escaped Output] render(partial => "form", {})

quote_types/index

[Escaped Output] link_to(image_tag("lightbulb.png", :border => 0, :mouseover => "bulb.png", :title => t("icon-quotes")), new_quote_type_path)
[Escaped Output] d4x_sanitizer(t("Types of Quote"))
[Escaped Output] d4x_sanitizer(t("type_of_quote"))
[Escaped Output] d4x_sanitizer(t("visible"))
[Escaped Output] d4x_sanitizer(t("created"))
[Escaped Output] cycle("odd", "even")
[Escaped Output] quote_type.type_of_quote
[Escaped Output] quote_type.visible
[Escaped Output] quote_type.created_at
[Escaped Output] link_to(image_tag("plugin.png", :border => 0, :mouseover => "plugin.png", :title => d4x_sanitizer(t("icon-show")), :size => "16x16"), quote_type)
[Escaped Output] link_to(image_tag("plugin_edit.png", :border => 0, :mouseover => "plugin_edit.gif", :title => d4x_sanitizer(t("icon-edit")), :size => "16x16"), edit_quote_type_path(quote_type))
[Escaped Output] button_to("", quote_type, :confirm => "are you sure?", :method => :delete, :class => "pdestroy", :name => "destroy", :size => "16x16")

quote_types/index.["QuoteTypesController#index"]

[Escaped Output] link_to(image_tag("lightbulb.png", :border => 0, :mouseover => "bulb.png", :title => t("icon-quotes")), new_quote_type_path)
[Escaped Output] d4x_sanitizer(t("Types of Quote"))
[Escaped Output] d4x_sanitizer(t("type_of_quote"))
[Escaped Output] d4x_sanitizer(t("visible"))
[Escaped Output] d4x_sanitizer(t("created"))
[Escaped Output] cycle("odd", "even")
[Escaped Output] QuoteType.new.type_of_quote
[Escaped Output] QuoteType.new.visible
[Escaped Output] QuoteType.new.created_at
[Escaped Output] link_to(image_tag("plugin.png", :border => 0, :mouseover => "plugin.png", :title => d4x_sanitizer(t("icon-show")), :size => "16x16"), QuoteType.new)
[Escaped Output] link_to(image_tag("plugin_edit.png", :border => 0, :mouseover => "plugin_edit.gif", :title => d4x_sanitizer(t("icon-edit")), :size => "16x16"), edit_quote_type_path(QuoteType.new))
[Escaped Output] button_to("", QuoteType.new, :confirm => "are you sure?", :method => :delete, :class => "pdestroy", :name => "destroy", :size => "16x16")

quote_types/new

[Escaped Output] link_to(image_tag("arrow_left.png", :border => 0, :title => t("back")), quote_types_path)
[Escaped Output] t("add new type of quote")
[Escaped Output] render(partial => "form", {})

quote_types/new.["QuoteTypesController#new"]

[Escaped Output] link_to(image_tag("arrow_left.png", :border => 0, :title => t("back")), quote_types_path)
[Escaped Output] t("add new type of quote")
[Escaped Output] render(partial => "form", {})

quote_types/show

[Escaped Output] link_to(image_tag("quotes.gif", :border => 0, :mouseover => "quotes1.gif", :title => t("icon-quotes"), :size => "32x32"), new_quote_type_path)
[Escaped Output] t("types of quote")
[Escaped Output] t(:id)
[Escaped Output] @quote_type.id
[Escaped Output] t(:type_of_quote)
[Escaped Output] @quote_type.type_of_quote
[Escaped Output] t(:visible)
[Escaped Output] @quote_type.visible

quote_types/show.["QuoteTypesController#show"]

[Escaped Output] link_to(image_tag("quotes.gif", :border => 0, :mouseover => "quotes1.gif", :title => t("icon-quotes"), :size => "32x32"), new_quote_type_path)
[Escaped Output] t("types of quote")
[Escaped Output] t(:id)
[Escaped Output] @quote_type.id
[Escaped Output] t(:type_of_quote)
[Escaped Output] @quote_type.type_of_quote
[Escaped Output] t(:visible)
[Escaped Output] @quote_type.visible

quotes/_form

[Escaped Output] pluralize(@quote.errors.count, t("error"))
[Escaped Output] msg
[Escaped Output] f.label(t(:qtext), :class => "show-item-label")
[Escaped Output] f.text_area(:qtext, :size => "80")
[Escaped Output] f.label(t(:author), :class => "show-item-label")
[Escaped Output] f.collection_select(:author_id, Author.all, :id, :fullname)
[Escaped Output] f.label(t(:qtype), :class => "show-item-label")
[Escaped Output] f.collection_select(:quote_type_id, QuoteType.all, :id, :type_of_quote)
[Escaped Output] f.label(t(:approved), :class => "show-item-label")
[Escaped Output] f.check_box(:approved)
[Escaped Output] f.label(t(:visible), :class => "show-item-label")
[Escaped Output] f.check_box(:visible)
[Escaped Output] f.label(t(:today), :class => "show-item-label")
[Escaped Output] f.check_box(:today)
[Escaped Output] f.label(t(:lang), :class => "show-item-label")
[Escaped Output] f.select(:lang, options_for_select([["English", "en"], ["Italian", "it"]], @quote.lang), :class => "d4xItem")
[Escaped Output] f.submit(:class => "button-d4x")
[Escaped Output] form_for(@quote) do; if @quote.errors.any? then; [Escaped Output] pluralize(@quote.errors.count, t("error")); @quote.errors.full_messages.each do; [Escaped Output] msg; end;end;[Escaped Output] f.label(t(:qtext), :class => "show-item-label");[Escaped Output] f.text_area(:qtext, :size => "80");[Escaped Output] f.label(t(:author), :class => "show-item-label");[Escaped Output] f.collection_select(:author_id, Author.all, :id, :fullname);[Escaped Output] f.label(t(:qtype), :class => "show-item-label");[Escaped Output] f.collection_select(:quote_type_id, QuoteType.all, :id, :type_of_quote);[Escaped Output] f.label(t(:approved), :class => "show-item-label");[Escaped Output] f.check_box(:approved);[Escaped Output] f.label(t(:visible), :class => "show-item-label");[Escaped Output] f.check_box(:visible);[Escaped Output] f.label(t(:today), :class => "show-item-label");[Escaped Output] f.check_box(:today);[Escaped Output] f.label(t(:lang), :class => "show-item-label");[Escaped Output] f.select(:lang, options_for_select([["English", "en"], ["Italian", "it"]], @quote.lang), :class => "d4xItem");[Escaped Output] f.submit(:class => "button-d4x"); end

quotes/_form.["QuotesController#create", "Template:quotes/new"]

[Escaped Output] pluralize(Quote.new(params[:quote]).errors.count, t("error"))
[Escaped Output] msg
[Escaped Output] FormBuilder.new.label(t(:qtext), :class => "show-item-label")
[Escaped Output] FormBuilder.new.text_area(:qtext, :size => "80")
[Escaped Output] FormBuilder.new.label(t(:author), :class => "show-item-label")
[Escaped Output] FormBuilder.new.collection_select(:author_id, Author.all, :id, :fullname)
[Escaped Output] FormBuilder.new.label(t(:qtype), :class => "show-item-label")
[Escaped Output] FormBuilder.new.collection_select(:quote_type_id, QuoteType.all, :id, :type_of_quote)
[Escaped Output] FormBuilder.new.label(t(:approved), :class => "show-item-label")
[Escaped Output] FormBuilder.new.check_box(:approved)
[Escaped Output] FormBuilder.new.label(t(:visible), :class => "show-item-label")
[Escaped Output] FormBuilder.new.check_box(:visible)
[Escaped Output] FormBuilder.new.label(t(:today), :class => "show-item-label")
[Escaped Output] FormBuilder.new.check_box(:today)
[Escaped Output] FormBuilder.new.label(t(:lang), :class => "show-item-label")
[Escaped Output] FormBuilder.new.select(:lang, options_for_select([["English", "en"], ["Italian", "it"]], Quote.new(params[:quote]).lang), :class => "d4xItem")
[Escaped Output] FormBuilder.new.submit(:class => "button-d4x")
[Escaped Output] form_for(Quote.new(params[:quote])) do; if Quote.new(params[:quote]).errors.any? then; [Escaped Output] pluralize(Quote.new(params[:quote]).errors.count, t("error")); Quote.new(params[:quote]).errors.full_messages.each do; [Escaped Output] msg; end;end;[Escaped Output] FormBuilder.new.label(t(:qtext), :class => "show-item-label");[Escaped Output] FormBuilder.new.text_area(:qtext, :size => "80");[Escaped Output] FormBuilder.new.label(t(:author), :class => "show-item-label");[Escaped Output] FormBuilder.new.collection_select(:author_id, Author.all, :id, :fullname);[Escaped Output] FormBuilder.new.label(t(:qtype), :class => "show-item-label");[Escaped Output] FormBuilder.new.collection_select(:quote_type_id, QuoteType.all, :id, :type_of_quote);[Escaped Output] FormBuilder.new.label(t(:approved), :class => "show-item-label");[Escaped Output] FormBuilder.new.check_box(:approved);[Escaped Output] FormBuilder.new.label(t(:visible), :class => "show-item-label");[Escaped Output] FormBuilder.new.check_box(:visible);[Escaped Output] FormBuilder.new.label(t(:today), :class => "show-item-label");[Escaped Output] FormBuilder.new.check_box(:today);[Escaped Output] FormBuilder.new.label(t(:lang), :class => "show-item-label");[Escaped Output] FormBuilder.new.select(:lang, options_for_select([["English", "en"], ["Italian", "it"]], Quote.new(params[:quote]).lang), :class => "d4xItem");[Escaped Output] FormBuilder.new.submit(:class => "button-d4x"); end

quotes/_form.["QuotesController#edit", "Template:quotes/edit"]

[Escaped Output] pluralize(Quote.find(params[:id]).errors.count, t("error"))
[Escaped Output] (Unresolved Model).new
[Escaped Output] FormBuilder.new.label(t(:qtext), :class => "show-item-label")
[Escaped Output] FormBuilder.new.text_area(:qtext, :size => "80")
[Escaped Output] FormBuilder.new.label(t(:author), :class => "show-item-label")
[Escaped Output] FormBuilder.new.collection_select(:author_id, Author.all, :id, :fullname)
[Escaped Output] FormBuilder.new.label(t(:qtype), :class => "show-item-label")
[Escaped Output] FormBuilder.new.collection_select(:quote_type_id, QuoteType.all, :id, :type_of_quote)
[Escaped Output] FormBuilder.new.label(t(:approved), :class => "show-item-label")
[Escaped Output] FormBuilder.new.check_box(:approved)
[Escaped Output] FormBuilder.new.label(t(:visible), :class => "show-item-label")
[Escaped Output] FormBuilder.new.check_box(:visible)
[Escaped Output] FormBuilder.new.label(t(:today), :class => "show-item-label")
[Escaped Output] FormBuilder.new.check_box(:today)
[Escaped Output] FormBuilder.new.label(t(:lang), :class => "show-item-label")
[Escaped Output] FormBuilder.new.select(:lang, options_for_select([["English", "en"], ["Italian", "it"]], Quote.find(params[:id]).lang), :class => "d4xItem")
[Escaped Output] FormBuilder.new.submit(:class => "button-d4x")
[Escaped Output] form_for(Quote.find(params[:id])) do; if Quote.find(params[:id]).errors.any? then; [Escaped Output] pluralize(Quote.find(params[:id]).errors.count, t("error")); Quote.find(params[:id]).errors.full_messages.each do; [Escaped Output] (Unresolved Model).new; end;end;[Escaped Output] FormBuilder.new.label(t(:qtext), :class => "show-item-label");[Escaped Output] FormBuilder.new.text_area(:qtext, :size => "80");[Escaped Output] FormBuilder.new.label(t(:author), :class => "show-item-label");[Escaped Output] FormBuilder.new.collection_select(:author_id, Author.all, :id, :fullname);[Escaped Output] FormBuilder.new.label(t(:qtype), :class => "show-item-label");[Escaped Output] FormBuilder.new.collection_select(:quote_type_id, QuoteType.all, :id, :type_of_quote);[Escaped Output] FormBuilder.new.label(t(:approved), :class => "show-item-label");[Escaped Output] FormBuilder.new.check_box(:approved);[Escaped Output] FormBuilder.new.label(t(:visible), :class => "show-item-label");[Escaped Output] FormBuilder.new.check_box(:visible);[Escaped Output] FormBuilder.new.label(t(:today), :class => "show-item-label");[Escaped Output] FormBuilder.new.check_box(:today);[Escaped Output] FormBuilder.new.label(t(:lang), :class => "show-item-label");[Escaped Output] FormBuilder.new.select(:lang, options_for_select([["English", "en"], ["Italian", "it"]], Quote.find(params[:id]).lang), :class => "d4xItem");[Escaped Output] FormBuilder.new.submit(:class => "button-d4x"); end

quotes/_form.["QuotesController#new", "Template:quotes/new"]

[Escaped Output] pluralize(Quote.new.errors.count, t("error"))
[Escaped Output] msg
[Escaped Output] FormBuilder.new.label(t(:qtext), :class => "show-item-label")
[Escaped Output] FormBuilder.new.text_area(:qtext, :size => "80")
[Escaped Output] FormBuilder.new.label(t(:author), :class => "show-item-label")
[Escaped Output] FormBuilder.new.collection_select(:author_id, Author.all, :id, :fullname)
[Escaped Output] FormBuilder.new.label(t(:qtype), :class => "show-item-label")
[Escaped Output] FormBuilder.new.collection_select(:quote_type_id, QuoteType.all, :id, :type_of_quote)
[Escaped Output] FormBuilder.new.label(t(:approved), :class => "show-item-label")
[Escaped Output] FormBuilder.new.check_box(:approved)
[Escaped Output] FormBuilder.new.label(t(:visible), :class => "show-item-label")
[Escaped Output] FormBuilder.new.check_box(:visible)
[Escaped Output] FormBuilder.new.label(t(:today), :class => "show-item-label")
[Escaped Output] FormBuilder.new.check_box(:today)
[Escaped Output] FormBuilder.new.label(t(:lang), :class => "show-item-label")
[Escaped Output] FormBuilder.new.select(:lang, options_for_select([["English", "en"], ["Italian", "it"]], Quote.new.lang), :class => "d4xItem")
[Escaped Output] FormBuilder.new.submit(:class => "button-d4x")
[Escaped Output] form_for(Quote.new) do; if Quote.new.errors.any? then; [Escaped Output] pluralize(Quote.new.errors.count, t("error")); Quote.new.errors.full_messages.each do; [Escaped Output] msg; end;end;[Escaped Output] FormBuilder.new.label(t(:qtext), :class => "show-item-label");[Escaped Output] FormBuilder.new.text_area(:qtext, :size => "80");[Escaped Output] FormBuilder.new.label(t(:author), :class => "show-item-label");[Escaped Output] FormBuilder.new.collection_select(:author_id, Author.all, :id, :fullname);[Escaped Output] FormBuilder.new.label(t(:qtype), :class => "show-item-label");[Escaped Output] FormBuilder.new.collection_select(:quote_type_id, QuoteType.all, :id, :type_of_quote);[Escaped Output] FormBuilder.new.label(t(:approved), :class => "show-item-label");[Escaped Output] FormBuilder.new.check_box(:approved);[Escaped Output] FormBuilder.new.label(t(:visible), :class => "show-item-label");[Escaped Output] FormBuilder.new.check_box(:visible);[Escaped Output] FormBuilder.new.label(t(:today), :class => "show-item-label");[Escaped Output] FormBuilder.new.check_box(:today);[Escaped Output] FormBuilder.new.label(t(:lang), :class => "show-item-label");[Escaped Output] FormBuilder.new.select(:lang, options_for_select([["English", "en"], ["Italian", "it"]], Quote.new.lang), :class => "d4xItem");[Escaped Output] FormBuilder.new.submit(:class => "button-d4x"); end

quotes/_form.["Template:quotes/edit"]

[Escaped Output] pluralize(@quote.errors.count, t("error"))
[Escaped Output] msg
[Escaped Output] FormBuilder.new.label(t(:qtext), :class => "show-item-label")
[Escaped Output] FormBuilder.new.text_area(:qtext, :size => "80")
[Escaped Output] FormBuilder.new.label(t(:author), :class => "show-item-label")
[Escaped Output] FormBuilder.new.collection_select(:author_id, Author.all, :id, :fullname)
[Escaped Output] FormBuilder.new.label(t(:qtype), :class => "show-item-label")
[Escaped Output] FormBuilder.new.collection_select(:quote_type_id, QuoteType.all, :id, :type_of_quote)
[Escaped Output] FormBuilder.new.label(t(:approved), :class => "show-item-label")
[Escaped Output] FormBuilder.new.check_box(:approved)
[Escaped Output] FormBuilder.new.label(t(:visible), :class => "show-item-label")
[Escaped Output] FormBuilder.new.check_box(:visible)
[Escaped Output] FormBuilder.new.label(t(:today), :class => "show-item-label")
[Escaped Output] FormBuilder.new.check_box(:today)
[Escaped Output] FormBuilder.new.label(t(:lang), :class => "show-item-label")
[Escaped Output] FormBuilder.new.select(:lang, options_for_select([["English", "en"], ["Italian", "it"]], @quote.lang), :class => "d4xItem")
[Escaped Output] FormBuilder.new.submit(:class => "button-d4x")
[Escaped Output] form_for(@quote) do; if @quote.errors.any? then; [Escaped Output] pluralize(@quote.errors.count, t("error")); @quote.errors.full_messages.each do; [Escaped Output] msg; end;end;[Escaped Output] FormBuilder.new.label(t(:qtext), :class => "show-item-label");[Escaped Output] FormBuilder.new.text_area(:qtext, :size => "80");[Escaped Output] FormBuilder.new.label(t(:author), :class => "show-item-label");[Escaped Output] FormBuilder.new.collection_select(:author_id, Author.all, :id, :fullname);[Escaped Output] FormBuilder.new.label(t(:qtype), :class => "show-item-label");[Escaped Output] FormBuilder.new.collection_select(:quote_type_id, QuoteType.all, :id, :type_of_quote);[Escaped Output] FormBuilder.new.label(t(:approved), :class => "show-item-label");[Escaped Output] FormBuilder.new.check_box(:approved);[Escaped Output] FormBuilder.new.label(t(:visible), :class => "show-item-label");[Escaped Output] FormBuilder.new.check_box(:visible);[Escaped Output] FormBuilder.new.label(t(:today), :class => "show-item-label");[Escaped Output] FormBuilder.new.check_box(:today);[Escaped Output] FormBuilder.new.label(t(:lang), :class => "show-item-label");[Escaped Output] FormBuilder.new.select(:lang, options_for_select([["English", "en"], ["Italian", "it"]], @quote.lang), :class => "d4xItem");[Escaped Output] FormBuilder.new.submit(:class => "button-d4x"); end

quotes/_qotd

[Escaped Output] @quote.qtext
[Escaped Output] @quote.author.fullname
[Escaped Output] @quote.author.headline
[Escaped Output] @quote.author.dates

quotes/_random

[Escaped Output] @quote.qtext
[Escaped Output] @quote.author.fullname
[Escaped Output] @quote.author.headline
[Escaped Output] @quote.author.dates

quotes/author

[Escaped Output] link_to(image_tag("ubermail.jpg", :border => 0, :title => "famous quotes"), new_quote_path)
[Escaped Output] image_tag("ubermail.jpg", :mouseover => "ubermail.jpg", :title => d4x_sanitizer(t("quotes")))
[Escaped Output] d4x_sanitizer(t("last added"))
[Escaped Output] link_to("/last-added-quotes") do; [Escaped Output] d4x_sanitizer(t("last added")); end
[Escaped Output] d4x_sanitizer(t("top rated"))
[Escaped Output] link_to("/top-rated-quotes") do; [Escaped Output] d4x_sanitizer(t("top rated")); end
[Escaped Output] d4x_sanitizer(t("most viewed"))
[Escaped Output] link_to("/most-viewed-quotes") do; [Escaped Output] d4x_sanitizer(t("most viewed")); end
[Escaped Output] d4x_sanitizer(t("quotes"))
[Escaped Output] d4x_sanitizer(t("ispirational"))
[Escaped Output] link_to("/ispirational-quotes") do; [Escaped Output] d4x_sanitizer(t("ispirational")); end
[Escaped Output] d4x_sanitizer(t("famous"))
[Escaped Output] link_to("/famous-quotes") do; [Escaped Output] d4x_sanitizer(t("famous")); end
[Escaped Output] d4x_sanitizer(t("movie"))
[Escaped Output] link_to("/movie-quotes") do; [Escaped Output] d4x_sanitizer(t("movie")); end
[Escaped Output] d4x_sanitizer(t("proverbs"))
[Escaped Output] link_to("/proverbs") do; [Escaped Output] d4x_sanitizer(t("proverbs")); end
[Escaped Output] d4x_sanitizer(t("by author"))
[Escaped Output] link_to("/author-quotes") do; [Escaped Output] d4x_sanitizer(t("by author")); end
[Escaped Output] d4x_sanitizer(t("by lang"))
[Escaped Output] link_to("/language-quotes") do; [Escaped Output] d4x_sanitizer(t("by lang")); end
[Escaped Output] d4x_sanitizer(t(:author))
[Escaped Output] d4x_sanitizer(t(:qtext))
[Escaped Output] d4x_sanitizer(t("lang."))
[Escaped Output] d4x_sanitizer(t("appr"))
[Escaped Output] cycle("odd", "even")
[Escaped Output] quote.author.fullname
[Escaped Output] link_to(quote.qtext, quote)
[Escaped Output] image_tag("us.png", :title => "English")
[Escaped Output] image_tag("it.png", :title => "Italian")
[Escaped Output] image_tag("tick.png", :title => "approved")
[Escaped Output] image_tag("time.png", :title => "approvation is pending")
[Escaped Output] link_to(image_tag("comment.png", :border => 0, :mouseover => "comment.png", :title => d4x_sanitizer(t("icon-show")), :size => "16x16"), quote)
[Escaped Output] link_to(image_tag("comment_edit.png", :border => 0, :mouseover => "comment_edit.png", :title => d4x_sanitizer(t("icon-edit")), :size => "16x16"), edit_quote_path(quote))
[Escaped Output] button_to("", quote, :confirm => "are you sure?", :method => :delete, :class => "quote-destroy", :name => "zdestroy", :size => "16x16")
[Escaped Output] will_paginate(@quotes, :per_page => 50)

quotes/author.["QuotesController#author"]

[Escaped Output] link_to(image_tag("ubermail.jpg", :border => 0, :title => "famous quotes"), new_quote_path)
[Escaped Output] image_tag("ubermail.jpg", :mouseover => "ubermail.jpg", :title => d4x_sanitizer(t("quotes")))
[Escaped Output] d4x_sanitizer(t("last added"))
[Escaped Output] link_to("/last-added-quotes") do; [Escaped Output] d4x_sanitizer(t("last added")); end
[Escaped Output] d4x_sanitizer(t("top rated"))
[Escaped Output] link_to("/top-rated-quotes") do; [Escaped Output] d4x_sanitizer(t("top rated")); end
[Escaped Output] d4x_sanitizer(t("most viewed"))
[Escaped Output] link_to("/most-viewed-quotes") do; [Escaped Output] d4x_sanitizer(t("most viewed")); end
[Escaped Output] d4x_sanitizer(t("quotes"))
[Escaped Output] d4x_sanitizer(t("ispirational"))
[Escaped Output] link_to("/ispirational-quotes") do; [Escaped Output] d4x_sanitizer(t("ispirational")); end
[Escaped Output] d4x_sanitizer(t("famous"))
[Escaped Output] link_to("/famous-quotes") do; [Escaped Output] d4x_sanitizer(t("famous")); end
[Escaped Output] d4x_sanitizer(t("movie"))
[Escaped Output] link_to("/movie-quotes") do; [Escaped Output] d4x_sanitizer(t("movie")); end
[Escaped Output] d4x_sanitizer(t("proverbs"))
[Escaped Output] link_to("/proverbs") do; [Escaped Output] d4x_sanitizer(t("proverbs")); end
[Escaped Output] d4x_sanitizer(t("by author"))
[Escaped Output] link_to("/author-quotes") do; [Escaped Output] d4x_sanitizer(t("by author")); end
[Escaped Output] d4x_sanitizer(t("by lang"))
[Escaped Output] link_to("/language-quotes") do; [Escaped Output] d4x_sanitizer(t("by lang")); end
[Escaped Output] d4x_sanitizer(t(:author))
[Escaped Output] d4x_sanitizer(t(:qtext))
[Escaped Output] d4x_sanitizer(t("lang."))
[Escaped Output] d4x_sanitizer(t("appr"))
[Escaped Output] cycle("odd", "even")
[Escaped Output] quote.author.fullname
[Escaped Output] link_to(quote.qtext, quote)
[Escaped Output] image_tag("us.png", :title => "English")
[Escaped Output] image_tag("it.png", :title => "Italian")
[Escaped Output] image_tag("tick.png", :title => "approved")
[Escaped Output] image_tag("time.png", :title => "approvation is pending")
[Escaped Output] link_to(image_tag("comment.png", :border => 0, :mouseover => "comment.png", :title => d4x_sanitizer(t("icon-show")), :size => "16x16"), quote)
[Escaped Output] link_to(image_tag("comment_edit.png", :border => 0, :mouseover => "comment_edit.png", :title => d4x_sanitizer(t("icon-edit")), :size => "16x16"), edit_quote_path(quote))
[Escaped Output] button_to("", quote, :confirm => "are you sure?", :method => :delete, :class => "quote-destroy", :name => "zdestroy", :size => "16x16")
[Escaped Output] will_paginate((Quote.order(:approved).reverse_order.paginate(:page => params[:page]) or Quote.where(:approved => true).order(:approved).reverse_order.paginate(:page => params[:page])), :per_page => 50)

quotes/edit

[Escaped Output] link_to(image_tag("arrow_left.png", :border => 0, :title => t("back")), quotes_path)
[Escaped Output] t("editing famous quote")
[Escaped Output] render(partial => "form", {})

quotes/edit.["QuotesController#edit"]

[Escaped Output] link_to(image_tag("arrow_left.png", :border => 0, :title => t("back")), quotes_path)
[Escaped Output] t("editing famous quote")
[Escaped Output] render(partial => "form", {})

quotes/famous

[Escaped Output] link_to(image_tag("ubermail.jpg", :border => 0, :title => "famous quotes"), new_quote_path)
[Escaped Output] image_tag("ubermail.jpg", :mouseover => "ubermail.jpg", :title => d4x_sanitizer(t("quotes")))
[Escaped Output] d4x_sanitizer(t("last added"))
[Escaped Output] link_to("/last-added-quotes") do; [Escaped Output] d4x_sanitizer(t("last added")); end
[Escaped Output] d4x_sanitizer(t("top rated"))
[Escaped Output] link_to("/top-rated-quotes") do; [Escaped Output] d4x_sanitizer(t("top rated")); end
[Escaped Output] d4x_sanitizer(t("most viewed"))
[Escaped Output] link_to("/most-viewed-quotes") do; [Escaped Output] d4x_sanitizer(t("most viewed")); end
[Escaped Output] d4x_sanitizer(t("quotes"))
[Escaped Output] d4x_sanitizer(t("ispirational"))
[Escaped Output] link_to("/ispirational-quotes") do; [Escaped Output] d4x_sanitizer(t("ispirational")); end
[Escaped Output] d4x_sanitizer(t("famous"))
[Escaped Output] link_to("/famous-quotes") do; [Escaped Output] d4x_sanitizer(t("famous")); end
[Escaped Output] d4x_sanitizer(t("movie"))
[Escaped Output] link_to("/movie-quotes") do; [Escaped Output] d4x_sanitizer(t("movie")); end
[Escaped Output] d4x_sanitizer(t("proverbs"))
[Escaped Output] link_to("/proverbs") do; [Escaped Output] d4x_sanitizer(t("proverbs")); end
[Escaped Output] d4x_sanitizer(t("by author"))
[Escaped Output] link_to("/author-quotes") do; [Escaped Output] d4x_sanitizer(t("by author")); end
[Escaped Output] d4x_sanitizer(t("by lang"))
[Escaped Output] link_to("/language-quotes") do; [Escaped Output] d4x_sanitizer(t("by lang")); end
[Escaped Output] d4x_sanitizer(t(:author))
[Escaped Output] d4x_sanitizer(t(:qtext))
[Escaped Output] d4x_sanitizer(t("lang."))
[Escaped Output] d4x_sanitizer(t("appr"))
[Escaped Output] cycle("odd", "even")
[Escaped Output] quote.author.fullname
[Escaped Output] link_to(quote.qtext, quote)
[Escaped Output] image_tag("us.png", :title => "English")
[Escaped Output] image_tag("it.png", :title => "Italian")
[Escaped Output] image_tag("tick.png", :title => "approved")
[Escaped Output] image_tag("time.png", :title => "approvation is pending")
[Escaped Output] link_to(image_tag("comment.png", :border => 0, :mouseover => "comment.png", :title => d4x_sanitizer(t("icon-show")), :size => "16x16"), quote)
[Escaped Output] link_to(image_tag("comment_edit.png", :border => 0, :mouseover => "comment_edit.png", :title => d4x_sanitizer(t("icon-edit")), :size => "16x16"), edit_quote_path(quote))
[Escaped Output] button_to("", quote, :confirm => "are you sure?", :method => :delete, :class => "quote-destroy", :name => "zdestroy", :size => "16x16")
[Escaped Output] will_paginate(@quotes, :per_page => 50)

quotes/famous.["QuotesController#famous"]

[Escaped Output] link_to(image_tag("ubermail.jpg", :border => 0, :title => "famous quotes"), new_quote_path)
[Escaped Output] image_tag("ubermail.jpg", :mouseover => "ubermail.jpg", :title => d4x_sanitizer(t("quotes")))
[Escaped Output] d4x_sanitizer(t("last added"))
[Escaped Output] link_to("/last-added-quotes") do; [Escaped Output] d4x_sanitizer(t("last added")); end
[Escaped Output] d4x_sanitizer(t("top rated"))
[Escaped Output] link_to("/top-rated-quotes") do; [Escaped Output] d4x_sanitizer(t("top rated")); end
[Escaped Output] d4x_sanitizer(t("most viewed"))
[Escaped Output] link_to("/most-viewed-quotes") do; [Escaped Output] d4x_sanitizer(t("most viewed")); end
[Escaped Output] d4x_sanitizer(t("quotes"))
[Escaped Output] d4x_sanitizer(t("ispirational"))
[Escaped Output] link_to("/ispirational-quotes") do; [Escaped Output] d4x_sanitizer(t("ispirational")); end
[Escaped Output] d4x_sanitizer(t("famous"))
[Escaped Output] link_to("/famous-quotes") do; [Escaped Output] d4x_sanitizer(t("famous")); end
[Escaped Output] d4x_sanitizer(t("movie"))
[Escaped Output] link_to("/movie-quotes") do; [Escaped Output] d4x_sanitizer(t("movie")); end
[Escaped Output] d4x_sanitizer(t("proverbs"))
[Escaped Output] link_to("/proverbs") do; [Escaped Output] d4x_sanitizer(t("proverbs")); end
[Escaped Output] d4x_sanitizer(t("by author"))
[Escaped Output] link_to("/author-quotes") do; [Escaped Output] d4x_sanitizer(t("by author")); end
[Escaped Output] d4x_sanitizer(t("by lang"))
[Escaped Output] link_to("/language-quotes") do; [Escaped Output] d4x_sanitizer(t("by lang")); end
[Escaped Output] d4x_sanitizer(t(:author))
[Escaped Output] d4x_sanitizer(t(:qtext))
[Escaped Output] d4x_sanitizer(t("lang."))
[Escaped Output] d4x_sanitizer(t("appr"))
[Escaped Output] cycle("odd", "even")
[Escaped Output] quote.author.fullname
[Escaped Output] link_to(quote.qtext, quote)
[Escaped Output] image_tag("us.png", :title => "English")
[Escaped Output] image_tag("it.png", :title => "Italian")
[Escaped Output] image_tag("tick.png", :title => "approved")
[Escaped Output] image_tag("time.png", :title => "approvation is pending")
[Escaped Output] link_to(image_tag("comment.png", :border => 0, :mouseover => "comment.png", :title => d4x_sanitizer(t("icon-show")), :size => "16x16"), quote)
[Escaped Output] link_to(image_tag("comment_edit.png", :border => 0, :mouseover => "comment_edit.png", :title => d4x_sanitizer(t("icon-edit")), :size => "16x16"), edit_quote_path(quote))
[Escaped Output] button_to("", quote, :confirm => "are you sure?", :method => :delete, :class => "quote-destroy", :name => "zdestroy", :size => "16x16")
[Escaped Output] will_paginate((Quote.order(:approved).reverse_order.paginate(:page => params[:page]) or Quote.where(:approved => true).order(:approved).reverse_order.paginate(:page => params[:page])), :per_page => 50)

quotes/index

[Escaped Output] t("quotes")
[Escaped Output] t("ispirational quotes")
[Escaped Output] d4x_sanitizer(t(:qtext))
[Escaped Output] d4x_sanitizer(t(:author))
[Escaped Output] d4x_sanitizer(t("lang."))
[Escaped Output] d4x_sanitizer(t("appr"))
[Escaped Output] cycle("odd", "even")
[Escaped Output] link_to(quote.qtext, quote)
[Escaped Output] quote.author.fullname
[Escaped Output] image_tag("us.png", :title => "English")
[Escaped Output] image_tag("it.png", :title => "Italian")
[Escaped Output] image_tag("tick.png", :title => "approved")
[Escaped Output] image_tag("time.png", :title => "approvation is pending")
[Escaped Output] button_to("delete", quote, :confirm => "are you sure?", :method => :delete, :class => "btn btn-sm btn-outline-danger", :name => "zdestroy")

quotes/index.["QuotesController#index"]

[Escaped Output] t("quotes")
[Escaped Output] t("ispirational quotes")
[Escaped Output] d4x_sanitizer(t(:qtext))
[Escaped Output] d4x_sanitizer(t(:author))
[Escaped Output] d4x_sanitizer(t("lang."))
[Escaped Output] d4x_sanitizer(t("appr"))
[Escaped Output] cycle("odd", "even")
[Escaped Output] link_to(quote.qtext, quote)
[Escaped Output] quote.author.fullname
[Escaped Output] image_tag("us.png", :title => "English")
[Escaped Output] image_tag("it.png", :title => "Italian")
[Escaped Output] image_tag("tick.png", :title => "approved")
[Escaped Output] image_tag("time.png", :title => "approvation is pending")
[Escaped Output] button_to("delete", quote, :confirm => "are you sure?", :method => :delete, :class => "btn btn-sm btn-outline-danger", :name => "zdestroy")

quotes/ispirational

[Escaped Output] link_to(image_tag("ubermail.jpg", :border => 0, :title => "famous quotes"), new_quote_path)
[Escaped Output] image_tag("ubermail.jpg", :mouseover => "ubermail.jpg", :title => d4x_sanitizer(t("quotes")))
[Escaped Output] d4x_sanitizer(t("last added"))
[Escaped Output] link_to("/last-added-quotes") do; [Escaped Output] d4x_sanitizer(t("last added")); end
[Escaped Output] d4x_sanitizer(t("top rated"))
[Escaped Output] link_to("/top-rated-quotes") do; [Escaped Output] d4x_sanitizer(t("top rated")); end
[Escaped Output] d4x_sanitizer(t("most viewed"))
[Escaped Output] link_to("/most-viewed-quotes") do; [Escaped Output] d4x_sanitizer(t("most viewed")); end
[Escaped Output] d4x_sanitizer(t("quotes"))
[Escaped Output] d4x_sanitizer(t("ispirational"))
[Escaped Output] link_to("/ispirational-quotes") do; [Escaped Output] d4x_sanitizer(t("ispirational")); end
[Escaped Output] d4x_sanitizer(t("famous"))
[Escaped Output] link_to("/famous-quotes") do; [Escaped Output] d4x_sanitizer(t("famous")); end
[Escaped Output] d4x_sanitizer(t("movie"))
[Escaped Output] link_to("/movie-quotes") do; [Escaped Output] d4x_sanitizer(t("movie")); end
[Escaped Output] d4x_sanitizer(t("proverbs"))
[Escaped Output] link_to("/proverbs") do; [Escaped Output] d4x_sanitizer(t("proverbs")); end
[Escaped Output] d4x_sanitizer(t("by author"))
[Escaped Output] link_to("/author-quotes") do; [Escaped Output] d4x_sanitizer(t("by author")); end
[Escaped Output] d4x_sanitizer(t("by lang"))
[Escaped Output] link_to("/language-quotes") do; [Escaped Output] d4x_sanitizer(t("by lang")); end
[Escaped Output] d4x_sanitizer(t(:author))
[Escaped Output] d4x_sanitizer(t(:qtext))
[Escaped Output] d4x_sanitizer(t("lang."))
[Escaped Output] d4x_sanitizer(t("appr"))
[Escaped Output] cycle("odd", "even")
[Escaped Output] quote.author.fullname
[Escaped Output] link_to(quote.qtext, quote)
[Escaped Output] image_tag("us.png", :title => "English")
[Escaped Output] image_tag("it.png", :title => "Italian")
[Escaped Output] image_tag("tick.png", :title => "approved")
[Escaped Output] image_tag("time.png", :title => "approvation is pending")
[Escaped Output] link_to(image_tag("comment.png", :border => 0, :mouseover => "comment.png", :title => d4x_sanitizer(t("icon-show")), :size => "16x16"), quote)
[Escaped Output] link_to(image_tag("comment_edit.png", :border => 0, :mouseover => "comment_edit.png", :title => d4x_sanitizer(t("icon-edit")), :size => "16x16"), edit_quote_path(quote))
[Escaped Output] button_to("", quote, :confirm => "are you sure?", :method => :delete, :class => "quote-destroy", :name => "zdestroy", :size => "16x16")
[Escaped Output] will_paginate(@quotes, :per_page => 50)

quotes/ispirational.["QuotesController#ispirational"]

[Escaped Output] link_to(image_tag("ubermail.jpg", :border => 0, :title => "famous quotes"), new_quote_path)
[Escaped Output] image_tag("ubermail.jpg", :mouseover => "ubermail.jpg", :title => d4x_sanitizer(t("quotes")))
[Escaped Output] d4x_sanitizer(t("last added"))
[Escaped Output] link_to("/last-added-quotes") do; [Escaped Output] d4x_sanitizer(t("last added")); end
[Escaped Output] d4x_sanitizer(t("top rated"))
[Escaped Output] link_to("/top-rated-quotes") do; [Escaped Output] d4x_sanitizer(t("top rated")); end
[Escaped Output] d4x_sanitizer(t("most viewed"))
[Escaped Output] link_to("/most-viewed-quotes") do; [Escaped Output] d4x_sanitizer(t("most viewed")); end
[Escaped Output] d4x_sanitizer(t("quotes"))
[Escaped Output] d4x_sanitizer(t("ispirational"))
[Escaped Output] link_to("/ispirational-quotes") do; [Escaped Output] d4x_sanitizer(t("ispirational")); end
[Escaped Output] d4x_sanitizer(t("famous"))
[Escaped Output] link_to("/famous-quotes") do; [Escaped Output] d4x_sanitizer(t("famous")); end
[Escaped Output] d4x_sanitizer(t("movie"))
[Escaped Output] link_to("/movie-quotes") do; [Escaped Output] d4x_sanitizer(t("movie")); end
[Escaped Output] d4x_sanitizer(t("proverbs"))
[Escaped Output] link_to("/proverbs") do; [Escaped Output] d4x_sanitizer(t("proverbs")); end
[Escaped Output] d4x_sanitizer(t("by author"))
[Escaped Output] link_to("/author-quotes") do; [Escaped Output] d4x_sanitizer(t("by author")); end
[Escaped Output] d4x_sanitizer(t("by lang"))
[Escaped Output] link_to("/language-quotes") do; [Escaped Output] d4x_sanitizer(t("by lang")); end
[Escaped Output] d4x_sanitizer(t(:author))
[Escaped Output] d4x_sanitizer(t(:qtext))
[Escaped Output] d4x_sanitizer(t("lang."))
[Escaped Output] d4x_sanitizer(t("appr"))
[Escaped Output] cycle("odd", "even")
[Escaped Output] quote.author.fullname
[Escaped Output] link_to(quote.qtext, quote)
[Escaped Output] image_tag("us.png", :title => "English")
[Escaped Output] image_tag("it.png", :title => "Italian")
[Escaped Output] image_tag("tick.png", :title => "approved")
[Escaped Output] image_tag("time.png", :title => "approvation is pending")
[Escaped Output] link_to(image_tag("comment.png", :border => 0, :mouseover => "comment.png", :title => d4x_sanitizer(t("icon-show")), :size => "16x16"), quote)
[Escaped Output] link_to(image_tag("comment_edit.png", :border => 0, :mouseover => "comment_edit.png", :title => d4x_sanitizer(t("icon-edit")), :size => "16x16"), edit_quote_path(quote))
[Escaped Output] button_to("", quote, :confirm => "are you sure?", :method => :delete, :class => "quote-destroy", :name => "zdestroy", :size => "16x16")
[Escaped Output] will_paginate((Quote.order(:approved).reverse_order.paginate(:page => params[:page]) or Quote.where(:approved => true).order(:approved).reverse_order.paginate(:page => params[:page])), :per_page => 50)

quotes/language

[Escaped Output] link_to(image_tag("ubermail.jpg", :border => 0, :title => "famous quotes"), new_quote_path)
[Escaped Output] image_tag("ubermail.jpg", :mouseover => "ubermail.jpg", :title => d4x_sanitizer(t("quotes")))
[Escaped Output] d4x_sanitizer(t("last added"))
[Escaped Output] link_to("/last-added-quotes") do; [Escaped Output] d4x_sanitizer(t("last added")); end
[Escaped Output] d4x_sanitizer(t("top rated"))
[Escaped Output] link_to("/top-rated-quotes") do; [Escaped Output] d4x_sanitizer(t("top rated")); end
[Escaped Output] d4x_sanitizer(t("most viewed"))
[Escaped Output] link_to("/most-viewed-quotes") do; [Escaped Output] d4x_sanitizer(t("most viewed")); end
[Escaped Output] d4x_sanitizer(t("quotes"))
[Escaped Output] d4x_sanitizer(t("ispirational"))
[Escaped Output] link_to("/ispirational-quotes") do; [Escaped Output] d4x_sanitizer(t("ispirational")); end
[Escaped Output] d4x_sanitizer(t("famous"))
[Escaped Output] link_to("/famous-quotes") do; [Escaped Output] d4x_sanitizer(t("famous")); end
[Escaped Output] d4x_sanitizer(t("movie"))
[Escaped Output] link_to("/movie-quotes") do; [Escaped Output] d4x_sanitizer(t("movie")); end
[Escaped Output] d4x_sanitizer(t("proverbs"))
[Escaped Output] link_to("/proverbs") do; [Escaped Output] d4x_sanitizer(t("proverbs")); end
[Escaped Output] d4x_sanitizer(t("by author"))
[Escaped Output] link_to("/author-quotes") do; [Escaped Output] d4x_sanitizer(t("by author")); end
[Escaped Output] d4x_sanitizer(t("by lang"))
[Escaped Output] link_to("/language-quotes") do; [Escaped Output] d4x_sanitizer(t("by lang")); end
[Escaped Output] d4x_sanitizer(t(:author))
[Escaped Output] d4x_sanitizer(t(:qtext))
[Escaped Output] d4x_sanitizer(t("lang."))
[Escaped Output] d4x_sanitizer(t("appr"))
[Escaped Output] cycle("odd", "even")
[Escaped Output] quote.author.fullname
[Escaped Output] link_to(quote.qtext, quote)
[Escaped Output] image_tag("us.png", :title => "English")
[Escaped Output] image_tag("it.png", :title => "Italian")
[Escaped Output] image_tag("tick.png", :title => "approved")
[Escaped Output] image_tag("time.png", :title => "approvation is pending")
[Escaped Output] link_to(image_tag("comment.png", :border => 0, :mouseover => "comment.png", :title => d4x_sanitizer(t("icon-show")), :size => "16x16"), quote)
[Escaped Output] link_to(image_tag("comment_edit.png", :border => 0, :mouseover => "comment_edit.png", :title => d4x_sanitizer(t("icon-edit")), :size => "16x16"), edit_quote_path(quote))
[Escaped Output] button_to("", quote, :confirm => "are you sure?", :method => :delete, :class => "quote-destroy", :name => "zdestroy", :size => "16x16")
[Escaped Output] will_paginate(@quotes, :per_page => 50)

quotes/language.["QuotesController#language"]

[Escaped Output] link_to(image_tag("ubermail.jpg", :border => 0, :title => "famous quotes"), new_quote_path)
[Escaped Output] image_tag("ubermail.jpg", :mouseover => "ubermail.jpg", :title => d4x_sanitizer(t("quotes")))
[Escaped Output] d4x_sanitizer(t("last added"))
[Escaped Output] link_to("/last-added-quotes") do; [Escaped Output] d4x_sanitizer(t("last added")); end
[Escaped Output] d4x_sanitizer(t("top rated"))
[Escaped Output] link_to("/top-rated-quotes") do; [Escaped Output] d4x_sanitizer(t("top rated")); end
[Escaped Output] d4x_sanitizer(t("most viewed"))
[Escaped Output] link_to("/most-viewed-quotes") do; [Escaped Output] d4x_sanitizer(t("most viewed")); end
[Escaped Output] d4x_sanitizer(t("quotes"))
[Escaped Output] d4x_sanitizer(t("ispirational"))
[Escaped Output] link_to("/ispirational-quotes") do; [Escaped Output] d4x_sanitizer(t("ispirational")); end
[Escaped Output] d4x_sanitizer(t("famous"))
[Escaped Output] link_to("/famous-quotes") do; [Escaped Output] d4x_sanitizer(t("famous")); end
[Escaped Output] d4x_sanitizer(t("movie"))
[Escaped Output] link_to("/movie-quotes") do; [Escaped Output] d4x_sanitizer(t("movie")); end
[Escaped Output] d4x_sanitizer(t("proverbs"))
[Escaped Output] link_to("/proverbs") do; [Escaped Output] d4x_sanitizer(t("proverbs")); end
[Escaped Output] d4x_sanitizer(t("by author"))
[Escaped Output] link_to("/author-quotes") do; [Escaped Output] d4x_sanitizer(t("by author")); end
[Escaped Output] d4x_sanitizer(t("by lang"))
[Escaped Output] link_to("/language-quotes") do; [Escaped Output] d4x_sanitizer(t("by lang")); end
[Escaped Output] d4x_sanitizer(t(:author))
[Escaped Output] d4x_sanitizer(t(:qtext))
[Escaped Output] d4x_sanitizer(t("lang."))
[Escaped Output] d4x_sanitizer(t("appr"))
[Escaped Output] cycle("odd", "even")
[Escaped Output] quote.author.fullname
[Escaped Output] link_to(quote.qtext, quote)
[Escaped Output] image_tag("us.png", :title => "English")
[Escaped Output] image_tag("it.png", :title => "Italian")
[Escaped Output] image_tag("tick.png", :title => "approved")
[Escaped Output] image_tag("time.png", :title => "approvation is pending")
[Escaped Output] link_to(image_tag("comment.png", :border => 0, :mouseover => "comment.png", :title => d4x_sanitizer(t("icon-show")), :size => "16x16"), quote)
[Escaped Output] link_to(image_tag("comment_edit.png", :border => 0, :mouseover => "comment_edit.png", :title => d4x_sanitizer(t("icon-edit")), :size => "16x16"), edit_quote_path(quote))
[Escaped Output] button_to("", quote, :confirm => "are you sure?", :method => :delete, :class => "quote-destroy", :name => "zdestroy", :size => "16x16")
[Escaped Output] will_paginate((Quote.order(:approved).reverse_order.paginate(:page => params[:page]) or Quote.where(:approved => true).order(:approved).reverse_order.paginate(:page => params[:page])), :per_page => 50)

quotes/last

[Escaped Output] link_to(image_tag("ubermail.jpg", :border => 0, :title => "famous quotes"), new_quote_path)
[Escaped Output] image_tag("ubermail.jpg", :mouseover => "ubermail.jpg", :title => d4x_sanitizer(t("quotes")))
[Escaped Output] d4x_sanitizer(t("last added"))
[Escaped Output] link_to("/last-added-quotes") do; [Escaped Output] d4x_sanitizer(t("last added")); end
[Escaped Output] d4x_sanitizer(t("top rated"))
[Escaped Output] link_to("/top-rated-quotes") do; [Escaped Output] d4x_sanitizer(t("top rated")); end
[Escaped Output] d4x_sanitizer(t("most viewed"))
[Escaped Output] link_to("/most-viewed-quotes") do; [Escaped Output] d4x_sanitizer(t("most viewed")); end
[Escaped Output] d4x_sanitizer(t("quotes"))
[Escaped Output] d4x_sanitizer(t("ispirational"))
[Escaped Output] link_to("/ispirational-quotes") do; [Escaped Output] d4x_sanitizer(t("ispirational")); end
[Escaped Output] d4x_sanitizer(t("famous"))
[Escaped Output] link_to("/famous-quotes") do; [Escaped Output] d4x_sanitizer(t("famous")); end
[Escaped Output] d4x_sanitizer(t("movie"))
[Escaped Output] link_to("/movie-quotes") do; [Escaped Output] d4x_sanitizer(t("movie")); end
[Escaped Output] d4x_sanitizer(t("proverbs"))
[Escaped Output] link_to("/proverbs") do; [Escaped Output] d4x_sanitizer(t("proverbs")); end
[Escaped Output] d4x_sanitizer(t("by author"))
[Escaped Output] link_to("/author-quotes") do; [Escaped Output] d4x_sanitizer(t("by author")); end
[Escaped Output] d4x_sanitizer(t("by lang"))
[Escaped Output] link_to("/language-quotes") do; [Escaped Output] d4x_sanitizer(t("by lang")); end
[Escaped Output] d4x_sanitizer(t(:author))
[Escaped Output] d4x_sanitizer(t(:qtext))
[Escaped Output] d4x_sanitizer(t("lang."))
[Escaped Output] d4x_sanitizer(t("appr"))
[Escaped Output] cycle("odd", "even")
[Escaped Output] quote.author.fullname
[Escaped Output] link_to(quote.qtext, quote)
[Escaped Output] image_tag("us.png", :title => "English")
[Escaped Output] image_tag("it.png", :title => "Italian")
[Escaped Output] image_tag("tick.png", :title => "approved")
[Escaped Output] image_tag("time.png", :title => "approvation is pending")
[Escaped Output] link_to(image_tag("comment.png", :border => 0, :mouseover => "comment.png", :title => d4x_sanitizer(t("icon-show")), :size => "16x16"), quote)
[Escaped Output] link_to(image_tag("comment_edit.png", :border => 0, :mouseover => "comment_edit.png", :title => d4x_sanitizer(t("icon-edit")), :size => "16x16"), edit_quote_path(quote))
[Escaped Output] button_to("", quote, :confirm => "are you sure?", :method => :delete, :class => "quote-destroy", :name => "zdestroy", :size => "16x16")
[Escaped Output] will_paginate(@quotes, :per_page => 50)

quotes/last.["QuotesController#last"]

[Escaped Output] link_to(image_tag("ubermail.jpg", :border => 0, :title => "famous quotes"), new_quote_path)
[Escaped Output] image_tag("ubermail.jpg", :mouseover => "ubermail.jpg", :title => d4x_sanitizer(t("quotes")))
[Escaped Output] d4x_sanitizer(t("last added"))
[Escaped Output] link_to("/last-added-quotes") do; [Escaped Output] d4x_sanitizer(t("last added")); end
[Escaped Output] d4x_sanitizer(t("top rated"))
[Escaped Output] link_to("/top-rated-quotes") do; [Escaped Output] d4x_sanitizer(t("top rated")); end
[Escaped Output] d4x_sanitizer(t("most viewed"))
[Escaped Output] link_to("/most-viewed-quotes") do; [Escaped Output] d4x_sanitizer(t("most viewed")); end
[Escaped Output] d4x_sanitizer(t("quotes"))
[Escaped Output] d4x_sanitizer(t("ispirational"))
[Escaped Output] link_to("/ispirational-quotes") do; [Escaped Output] d4x_sanitizer(t("ispirational")); end
[Escaped Output] d4x_sanitizer(t("famous"))
[Escaped Output] link_to("/famous-quotes") do; [Escaped Output] d4x_sanitizer(t("famous")); end
[Escaped Output] d4x_sanitizer(t("movie"))
[Escaped Output] link_to("/movie-quotes") do; [Escaped Output] d4x_sanitizer(t("movie")); end
[Escaped Output] d4x_sanitizer(t("proverbs"))
[Escaped Output] link_to("/proverbs") do; [Escaped Output] d4x_sanitizer(t("proverbs")); end
[Escaped Output] d4x_sanitizer(t("by author"))
[Escaped Output] link_to("/author-quotes") do; [Escaped Output] d4x_sanitizer(t("by author")); end
[Escaped Output] d4x_sanitizer(t("by lang"))
[Escaped Output] link_to("/language-quotes") do; [Escaped Output] d4x_sanitizer(t("by lang")); end
[Escaped Output] d4x_sanitizer(t(:author))
[Escaped Output] d4x_sanitizer(t(:qtext))
[Escaped Output] d4x_sanitizer(t("lang."))
[Escaped Output] d4x_sanitizer(t("appr"))
[Escaped Output] cycle("odd", "even")
[Escaped Output] (Unresolved Model).new.author.fullname
[Escaped Output] link_to((Unresolved Model).new.qtext, (Unresolved Model).new)
[Escaped Output] image_tag("us.png", :title => "English")
[Escaped Output] image_tag("it.png", :title => "Italian")
[Escaped Output] image_tag("tick.png", :title => "approved")
[Escaped Output] image_tag("time.png", :title => "approvation is pending")
[Escaped Output] link_to(image_tag("comment.png", :border => 0, :mouseover => "comment.png", :title => d4x_sanitizer(t("icon-show")), :size => "16x16"), (Unresolved Model).new)
[Escaped Output] link_to(image_tag("comment_edit.png", :border => 0, :mouseover => "comment_edit.png", :title => d4x_sanitizer(t("icon-edit")), :size => "16x16"), edit_quote_path((Unresolved Model).new))
[Escaped Output] button_to("", (Unresolved Model).new, :confirm => "are you sure?", :method => :delete, :class => "quote-destroy", :name => "zdestroy", :size => "16x16")
[Escaped Output] will_paginate(Quote.where(:visible => true).order(:published).reverse_order.paginate(:page => params[:page]), :per_page => 50)

quotes/list

[Escaped Output] image_tag("card-icon-quotes.gif", :size => "24x24", :alt => "quotes")
[Escaped Output] quote.author.fullname
[Escaped Output] image_tag(quote.author.photo.url)
[Escaped Output] t("quote")
[Escaped Output] quote.qtext
[Escaped Output] t("author")
[Escaped Output] quote.author.fullname
[Escaped Output] t("country")
[Escaped Output] quote.author.country
[Escaped Output] t("dates")
[Escaped Output] quote.author.dates
[Escaped Output] t("headline")
[Escaped Output] quote.author.headline
[Escaped Output] t("language")
[Escaped Output] quote.lang
[Escaped Output] t("notes")
[Escaped Output] quote.notes
[Escaped Output] t("approved")
[Escaped Output] t("yes")
[Escaped Output] t("approved")
[Escaped Output] t("no")
[Escaped Output] will_paginate(@quotes, :per_page => 25)

quotes/list.["QuotesController#list"]

[Escaped Output] image_tag("card-icon-quotes.gif", :size => "24x24", :alt => "quotes")
[Escaped Output] quote.author.fullname
[Escaped Output] image_tag(quote.author.photo.url)
[Escaped Output] t("quote")
[Escaped Output] quote.qtext
[Escaped Output] t("author")
[Escaped Output] quote.author.fullname
[Escaped Output] t("country")
[Escaped Output] quote.author.country
[Escaped Output] t("dates")
[Escaped Output] quote.author.dates
[Escaped Output] t("headline")
[Escaped Output] quote.author.headline
[Escaped Output] t("language")
[Escaped Output] quote.lang
[Escaped Output] t("notes")
[Escaped Output] quote.notes
[Escaped Output] t("approved")
[Escaped Output] t("yes")
[Escaped Output] t("approved")
[Escaped Output] t("no")
[Escaped Output] will_paginate((Quote.paginate(:page => params[:page]) or Quote.where(:approved => true).paginate(:page => params[:page])), :per_page => 25)

quotes/movie

[Escaped Output] link_to(image_tag("ubermail.jpg", :border => 0, :title => "famous quotes"), new_quote_path)
[Escaped Output] image_tag("ubermail.jpg", :mouseover => "ubermail.jpg", :title => d4x_sanitizer(t("quotes")))
[Escaped Output] d4x_sanitizer(t("last added"))
[Escaped Output] link_to("/last-added-quotes") do; [Escaped Output] d4x_sanitizer(t("last added")); end
[Escaped Output] d4x_sanitizer(t("top rated"))
[Escaped Output] link_to("/top-rated-quotes") do; [Escaped Output] d4x_sanitizer(t("top rated")); end
[Escaped Output] d4x_sanitizer(t("most viewed"))
[Escaped Output] link_to("/most-viewed-quotes") do; [Escaped Output] d4x_sanitizer(t("most viewed")); end
[Escaped Output] d4x_sanitizer(t("quotes"))
[Escaped Output] d4x_sanitizer(t("ispirational"))
[Escaped Output] link_to("/ispirational-quotes") do; [Escaped Output] d4x_sanitizer(t("ispirational")); end
[Escaped Output] d4x_sanitizer(t("famous"))
[Escaped Output] link_to("/famous-quotes") do; [Escaped Output] d4x_sanitizer(t("famous")); end
[Escaped Output] d4x_sanitizer(t("movie"))
[Escaped Output] link_to("/movie-quotes") do; [Escaped Output] d4x_sanitizer(t("movie")); end
[Escaped Output] d4x_sanitizer(t("proverbs"))
[Escaped Output] link_to("/proverbs") do; [Escaped Output] d4x_sanitizer(t("proverbs")); end
[Escaped Output] d4x_sanitizer(t("by author"))
[Escaped Output] link_to("/author-quotes") do; [Escaped Output] d4x_sanitizer(t("by author")); end
[Escaped Output] d4x_sanitizer(t("by lang"))
[Escaped Output] link_to("/language-quotes") do; [Escaped Output] d4x_sanitizer(t("by lang")); end
[Escaped Output] d4x_sanitizer(t(:author))
[Escaped Output] d4x_sanitizer(t(:qtext))
[Escaped Output] d4x_sanitizer(t("lang."))
[Escaped Output] d4x_sanitizer(t("appr"))
[Escaped Output] cycle("odd", "even")
[Escaped Output] quote.author.fullname
[Escaped Output] link_to(quote.qtext, quote)
[Escaped Output] image_tag("us.png", :title => "English")
[Escaped Output] image_tag("it.png", :title => "Italian")
[Escaped Output] image_tag("tick.png", :title => "approved")
[Escaped Output] image_tag("time.png", :title => "approvation is pending")
[Escaped Output] link_to(image_tag("comment.png", :border => 0, :mouseover => "comment.png", :title => d4x_sanitizer(t("icon-show")), :size => "16x16"), quote)
[Escaped Output] link_to(image_tag("comment_edit.png", :border => 0, :mouseover => "comment_edit.png", :title => d4x_sanitizer(t("icon-edit")), :size => "16x16"), edit_quote_path(quote))
[Escaped Output] button_to("", quote, :confirm => "are you sure?", :method => :delete, :class => "quote-destroy", :name => "zdestroy", :size => "16x16")
[Escaped Output] will_paginate(@quotes, :per_page => 50)

quotes/movie.["QuotesController#movie"]

[Escaped Output] link_to(image_tag("ubermail.jpg", :border => 0, :title => "famous quotes"), new_quote_path)
[Escaped Output] image_tag("ubermail.jpg", :mouseover => "ubermail.jpg", :title => d4x_sanitizer(t("quotes")))
[Escaped Output] d4x_sanitizer(t("last added"))
[Escaped Output] link_to("/last-added-quotes") do; [Escaped Output] d4x_sanitizer(t("last added")); end
[Escaped Output] d4x_sanitizer(t("top rated"))
[Escaped Output] link_to("/top-rated-quotes") do; [Escaped Output] d4x_sanitizer(t("top rated")); end
[Escaped Output] d4x_sanitizer(t("most viewed"))
[Escaped Output] link_to("/most-viewed-quotes") do; [Escaped Output] d4x_sanitizer(t("most viewed")); end
[Escaped Output] d4x_sanitizer(t("quotes"))
[Escaped Output] d4x_sanitizer(t("ispirational"))
[Escaped Output] link_to("/ispirational-quotes") do; [Escaped Output] d4x_sanitizer(t("ispirational")); end
[Escaped Output] d4x_sanitizer(t("famous"))
[Escaped Output] link_to("/famous-quotes") do; [Escaped Output] d4x_sanitizer(t("famous")); end
[Escaped Output] d4x_sanitizer(t("movie"))
[Escaped Output] link_to("/movie-quotes") do; [Escaped Output] d4x_sanitizer(t("movie")); end
[Escaped Output] d4x_sanitizer(t("proverbs"))
[Escaped Output] link_to("/proverbs") do; [Escaped Output] d4x_sanitizer(t("proverbs")); end
[Escaped Output] d4x_sanitizer(t("by author"))
[Escaped Output] link_to("/author-quotes") do; [Escaped Output] d4x_sanitizer(t("by author")); end
[Escaped Output] d4x_sanitizer(t("by lang"))
[Escaped Output] link_to("/language-quotes") do; [Escaped Output] d4x_sanitizer(t("by lang")); end
[Escaped Output] d4x_sanitizer(t(:author))
[Escaped Output] d4x_sanitizer(t(:qtext))
[Escaped Output] d4x_sanitizer(t("lang."))
[Escaped Output] d4x_sanitizer(t("appr"))
[Escaped Output] cycle("odd", "even")
[Escaped Output] quote.author.fullname
[Escaped Output] link_to(quote.qtext, quote)
[Escaped Output] image_tag("us.png", :title => "English")
[Escaped Output] image_tag("it.png", :title => "Italian")
[Escaped Output] image_tag("tick.png", :title => "approved")
[Escaped Output] image_tag("time.png", :title => "approvation is pending")
[Escaped Output] link_to(image_tag("comment.png", :border => 0, :mouseover => "comment.png", :title => d4x_sanitizer(t("icon-show")), :size => "16x16"), quote)
[Escaped Output] link_to(image_tag("comment_edit.png", :border => 0, :mouseover => "comment_edit.png", :title => d4x_sanitizer(t("icon-edit")), :size => "16x16"), edit_quote_path(quote))
[Escaped Output] button_to("", quote, :confirm => "are you sure?", :method => :delete, :class => "quote-destroy", :name => "zdestroy", :size => "16x16")
[Escaped Output] will_paginate((Quote.order(:approved).reverse_order.paginate(:page => params[:page]) or Quote.where(:approved => true).order(:approved).reverse_order.paginate(:page => params[:page])), :per_page => 50)

quotes/new

[Escaped Output] link_to(image_tag("arrow_left.png", :border => 0, :title => t("back")), quotes_path)
[Escaped Output] t("add new quote")
[Escaped Output] render(partial => "form", {})

quotes/new.["QuotesController#new"]

[Escaped Output] link_to(image_tag("arrow_left.png", :border => 0, :title => t("back")), quotes_path)
[Escaped Output] t("add new quote")
[Escaped Output] render(partial => "form", {})

quotes/popular

[Escaped Output] link_to(image_tag("ubermail.jpg", :border => 0, :title => "famous quotes"), new_quote_path)
[Escaped Output] image_tag("ubermail.jpg", :mouseover => "ubermail.jpg", :title => d4x_sanitizer(t("quotes")))
[Escaped Output] d4x_sanitizer(t("last added"))
[Escaped Output] link_to("/last-added-quotes") do; [Escaped Output] d4x_sanitizer(t("last added")); end
[Escaped Output] d4x_sanitizer(t("top rated"))
[Escaped Output] link_to("/top-rated-quotes") do; [Escaped Output] d4x_sanitizer(t("top rated")); end
[Escaped Output] d4x_sanitizer(t("most viewed"))
[Escaped Output] link_to("/most-viewed-quotes") do; [Escaped Output] d4x_sanitizer(t("most viewed")); end
[Escaped Output] d4x_sanitizer(t("quotes"))
[Escaped Output] d4x_sanitizer(t("ispirational"))
[Escaped Output] link_to("/ispirational-quotes") do; [Escaped Output] d4x_sanitizer(t("ispirational")); end
[Escaped Output] d4x_sanitizer(t("famous"))
[Escaped Output] link_to("/famous-quotes") do; [Escaped Output] d4x_sanitizer(t("famous")); end
[Escaped Output] d4x_sanitizer(t("movie"))
[Escaped Output] link_to("/movie-quotes") do; [Escaped Output] d4x_sanitizer(t("movie")); end
[Escaped Output] d4x_sanitizer(t("proverbs"))
[Escaped Output] link_to("/proverbs") do; [Escaped Output] d4x_sanitizer(t("proverbs")); end
[Escaped Output] d4x_sanitizer(t("by author"))
[Escaped Output] link_to("/author-quotes") do; [Escaped Output] d4x_sanitizer(t("by author")); end
[Escaped Output] d4x_sanitizer(t("by lang"))
[Escaped Output] link_to("/language-quotes") do; [Escaped Output] d4x_sanitizer(t("by lang")); end
[Escaped Output] d4x_sanitizer(t(:author))
[Escaped Output] d4x_sanitizer(t(:qtext))
[Escaped Output] d4x_sanitizer(t("lang."))
[Escaped Output] d4x_sanitizer(t("appr"))
[Escaped Output] cycle("odd", "even")
[Escaped Output] quote.author.fullname
[Escaped Output] link_to(quote.qtext, quote)
[Escaped Output] image_tag("us.png", :title => "English")
[Escaped Output] image_tag("it.png", :title => "Italian")
[Escaped Output] image_tag("tick.png", :title => "approved")
[Escaped Output] image_tag("time.png", :title => "approvation is pending")
[Escaped Output] link_to(image_tag("comment.png", :border => 0, :mouseover => "comment.png", :title => d4x_sanitizer(t("icon-show")), :size => "16x16"), quote)
[Escaped Output] link_to(image_tag("comment_edit.png", :border => 0, :mouseover => "comment_edit.png", :title => d4x_sanitizer(t("icon-edit")), :size => "16x16"), edit_quote_path(quote))
[Escaped Output] button_to("", quote, :confirm => "are you sure?", :method => :delete, :class => "quote-destroy", :name => "zdestroy", :size => "16x16")
[Escaped Output] will_paginate(@quotes, :per_page => 50)

quotes/popular.["QuotesController#popular"]

[Escaped Output] link_to(image_tag("ubermail.jpg", :border => 0, :title => "famous quotes"), new_quote_path)
[Escaped Output] image_tag("ubermail.jpg", :mouseover => "ubermail.jpg", :title => d4x_sanitizer(t("quotes")))
[Escaped Output] d4x_sanitizer(t("last added"))
[Escaped Output] link_to("/last-added-quotes") do; [Escaped Output] d4x_sanitizer(t("last added")); end
[Escaped Output] d4x_sanitizer(t("top rated"))
[Escaped Output] link_to("/top-rated-quotes") do; [Escaped Output] d4x_sanitizer(t("top rated")); end
[Escaped Output] d4x_sanitizer(t("most viewed"))
[Escaped Output] link_to("/most-viewed-quotes") do; [Escaped Output] d4x_sanitizer(t("most viewed")); end
[Escaped Output] d4x_sanitizer(t("quotes"))
[Escaped Output] d4x_sanitizer(t("ispirational"))
[Escaped Output] link_to("/ispirational-quotes") do; [Escaped Output] d4x_sanitizer(t("ispirational")); end
[Escaped Output] d4x_sanitizer(t("famous"))
[Escaped Output] link_to("/famous-quotes") do; [Escaped Output] d4x_sanitizer(t("famous")); end
[Escaped Output] d4x_sanitizer(t("movie"))
[Escaped Output] link_to("/movie-quotes") do; [Escaped Output] d4x_sanitizer(t("movie")); end
[Escaped Output] d4x_sanitizer(t("proverbs"))
[Escaped Output] link_to("/proverbs") do; [Escaped Output] d4x_sanitizer(t("proverbs")); end
[Escaped Output] d4x_sanitizer(t("by author"))
[Escaped Output] link_to("/author-quotes") do; [Escaped Output] d4x_sanitizer(t("by author")); end
[Escaped Output] d4x_sanitizer(t("by lang"))
[Escaped Output] link_to("/language-quotes") do; [Escaped Output] d4x_sanitizer(t("by lang")); end
[Escaped Output] d4x_sanitizer(t(:author))
[Escaped Output] d4x_sanitizer(t(:qtext))
[Escaped Output] d4x_sanitizer(t("lang."))
[Escaped Output] d4x_sanitizer(t("appr"))
[Escaped Output] cycle("odd", "even")
[Escaped Output] (Unresolved Model).new.author.fullname
[Escaped Output] link_to((Unresolved Model).new.qtext, (Unresolved Model).new)
[Escaped Output] image_tag("us.png", :title => "English")
[Escaped Output] image_tag("it.png", :title => "Italian")
[Escaped Output] image_tag("tick.png", :title => "approved")
[Escaped Output] image_tag("time.png", :title => "approvation is pending")
[Escaped Output] link_to(image_tag("comment.png", :border => 0, :mouseover => "comment.png", :title => d4x_sanitizer(t("icon-show")), :size => "16x16"), (Unresolved Model).new)
[Escaped Output] link_to(image_tag("comment_edit.png", :border => 0, :mouseover => "comment_edit.png", :title => d4x_sanitizer(t("icon-edit")), :size => "16x16"), edit_quote_path((Unresolved Model).new))
[Escaped Output] button_to("", (Unresolved Model).new, :confirm => "are you sure?", :method => :delete, :class => "quote-destroy", :name => "zdestroy", :size => "16x16")
[Escaped Output] will_paginate(Quote.where(:visible => true).order(:clicks).reverse_order.paginate(:page => params[:page]), :per_page => 50)

quotes/proverbs

[Escaped Output] link_to(image_tag("ubermail.jpg", :border => 0, :title => "famous quotes"), new_quote_path)
[Escaped Output] image_tag("ubermail.jpg", :mouseover => "ubermail.jpg", :title => d4x_sanitizer(t("quotes")))
[Escaped Output] d4x_sanitizer(t("last added"))
[Escaped Output] link_to("/last-added-quotes") do; [Escaped Output] d4x_sanitizer(t("last added")); end
[Escaped Output] d4x_sanitizer(t("top rated"))
[Escaped Output] link_to("/top-rated-quotes") do; [Escaped Output] d4x_sanitizer(t("top rated")); end
[Escaped Output] d4x_sanitizer(t("most viewed"))
[Escaped Output] link_to("/most-viewed-quotes") do; [Escaped Output] d4x_sanitizer(t("most viewed")); end
[Escaped Output] d4x_sanitizer(t("quotes"))
[Escaped Output] d4x_sanitizer(t("ispirational"))
[Escaped Output] link_to("/ispirational-quotes") do; [Escaped Output] d4x_sanitizer(t("ispirational")); end
[Escaped Output] d4x_sanitizer(t("famous"))
[Escaped Output] link_to("/famous-quotes") do; [Escaped Output] d4x_sanitizer(t("famous")); end
[Escaped Output] d4x_sanitizer(t("movie"))
[Escaped Output] link_to("/movie-quotes") do; [Escaped Output] d4x_sanitizer(t("movie")); end
[Escaped Output] d4x_sanitizer(t("proverbs"))
[Escaped Output] link_to("/proverbs") do; [Escaped Output] d4x_sanitizer(t("proverbs")); end
[Escaped Output] d4x_sanitizer(t("by author"))
[Escaped Output] link_to("/author-quotes") do; [Escaped Output] d4x_sanitizer(t("by author")); end
[Escaped Output] d4x_sanitizer(t("by lang"))
[Escaped Output] link_to("/language-quotes") do; [Escaped Output] d4x_sanitizer(t("by lang")); end
[Escaped Output] d4x_sanitizer(t(:author))
[Escaped Output] d4x_sanitizer(t(:qtext))
[Escaped Output] d4x_sanitizer(t("lang."))
[Escaped Output] d4x_sanitizer(t("appr"))
[Escaped Output] cycle("odd", "even")
[Escaped Output] quote.author.fullname
[Escaped Output] link_to(quote.qtext, quote)
[Escaped Output] image_tag("us.png", :title => "English")
[Escaped Output] image_tag("it.png", :title => "Italian")
[Escaped Output] image_tag("tick.png", :title => "approved")
[Escaped Output] image_tag("time.png", :title => "approvation is pending")
[Escaped Output] link_to(image_tag("comment.png", :border => 0, :mouseover => "comment.png", :title => d4x_sanitizer(t("icon-show")), :size => "16x16"), quote)
[Escaped Output] link_to(image_tag("comment_edit.png", :border => 0, :mouseover => "comment_edit.png", :title => d4x_sanitizer(t("icon-edit")), :size => "16x16"), edit_quote_path(quote))
[Escaped Output] button_to("", quote, :confirm => "are you sure?", :method => :delete, :class => "quote-destroy", :name => "zdestroy", :size => "16x16")
[Escaped Output] will_paginate(@quotes, :per_page => 50)

quotes/proverbs.["QuotesController#proverbs"]

[Escaped Output] link_to(image_tag("ubermail.jpg", :border => 0, :title => "famous quotes"), new_quote_path)
[Escaped Output] image_tag("ubermail.jpg", :mouseover => "ubermail.jpg", :title => d4x_sanitizer(t("quotes")))
[Escaped Output] d4x_sanitizer(t("last added"))
[Escaped Output] link_to("/last-added-quotes") do; [Escaped Output] d4x_sanitizer(t("last added")); end
[Escaped Output] d4x_sanitizer(t("top rated"))
[Escaped Output] link_to("/top-rated-quotes") do; [Escaped Output] d4x_sanitizer(t("top rated")); end
[Escaped Output] d4x_sanitizer(t("most viewed"))
[Escaped Output] link_to("/most-viewed-quotes") do; [Escaped Output] d4x_sanitizer(t("most viewed")); end
[Escaped Output] d4x_sanitizer(t("quotes"))
[Escaped Output] d4x_sanitizer(t("ispirational"))
[Escaped Output] link_to("/ispirational-quotes") do; [Escaped Output] d4x_sanitizer(t("ispirational")); end
[Escaped Output] d4x_sanitizer(t("famous"))
[Escaped Output] link_to("/famous-quotes") do; [Escaped Output] d4x_sanitizer(t("famous")); end
[Escaped Output] d4x_sanitizer(t("movie"))
[Escaped Output] link_to("/movie-quotes") do; [Escaped Output] d4x_sanitizer(t("movie")); end
[Escaped Output] d4x_sanitizer(t("proverbs"))
[Escaped Output] link_to("/proverbs") do; [Escaped Output] d4x_sanitizer(t("proverbs")); end
[Escaped Output] d4x_sanitizer(t("by author"))
[Escaped Output] link_to("/author-quotes") do; [Escaped Output] d4x_sanitizer(t("by author")); end
[Escaped Output] d4x_sanitizer(t("by lang"))
[Escaped Output] link_to("/language-quotes") do; [Escaped Output] d4x_sanitizer(t("by lang")); end
[Escaped Output] d4x_sanitizer(t(:author))
[Escaped Output] d4x_sanitizer(t(:qtext))
[Escaped Output] d4x_sanitizer(t("lang."))
[Escaped Output] d4x_sanitizer(t("appr"))
[Escaped Output] cycle("odd", "even")
[Escaped Output] quote.author.fullname
[Escaped Output] link_to(quote.qtext, quote)
[Escaped Output] image_tag("us.png", :title => "English")
[Escaped Output] image_tag("it.png", :title => "Italian")
[Escaped Output] image_tag("tick.png", :title => "approved")
[Escaped Output] image_tag("time.png", :title => "approvation is pending")
[Escaped Output] link_to(image_tag("comment.png", :border => 0, :mouseover => "comment.png", :title => d4x_sanitizer(t("icon-show")), :size => "16x16"), quote)
[Escaped Output] link_to(image_tag("comment_edit.png", :border => 0, :mouseover => "comment_edit.png", :title => d4x_sanitizer(t("icon-edit")), :size => "16x16"), edit_quote_path(quote))
[Escaped Output] button_to("", quote, :confirm => "are you sure?", :method => :delete, :class => "quote-destroy", :name => "zdestroy", :size => "16x16")
[Escaped Output] will_paginate((Quote.order(:approved).reverse_order.paginate(:page => params[:page]) or Quote.where(:approved => true).order(:approved).reverse_order.paginate(:page => params[:page])), :per_page => 50)

quotes/show

[Escaped Output] t("quote")
[Escaped Output] image_tag("us.png", :title => "English", :class => "middle")
[Escaped Output] image_tag("it.png", :title => "Italian", :class => "middle")
[Escaped Output] @quote.qtext
[Escaped Output] link_to(@quote.author.fullname, edit_quote_path(@quote))
[Escaped Output] @quote.author.headline
[Escaped Output] @quote.author.fullname
[Escaped Output] @quote.author.headline
[Escaped Output] ratings_for(@quote)
[Escaped Output] @quote.author.dates
[Escaped Output] @quote.notes

quotes/show.["QuotesController#show"]

[Escaped Output] t("quote")
[Escaped Output] image_tag("us.png", :title => "English", :class => "middle")
[Escaped Output] image_tag("it.png", :title => "Italian", :class => "middle")
[Escaped Output] Quote.find(params[:id]).qtext
[Escaped Output] link_to(Quote.find(params[:id]).author.fullname, edit_quote_path(Quote.find(params[:id])))
[Escaped Output] Quote.find(params[:id]).author.headline
[Escaped Output] Quote.find(params[:id]).author.fullname
[Escaped Output] Quote.find(params[:id]).author.headline
[Escaped Output] ratings_for(Quote.find(params[:id]))
[Escaped Output] Quote.find(params[:id]).author.dates
[Escaped Output] Quote.find(params[:id]).notes

quotes/toprated

[Escaped Output] link_to(image_tag("ubermail.jpg", :border => 0, :title => "famous quotes"), new_quote_path)
[Escaped Output] image_tag("ubermail.jpg", :mouseover => "ubermail.jpg", :title => d4x_sanitizer(t("quotes")))
[Escaped Output] d4x_sanitizer(t("last added"))
[Escaped Output] link_to("/last-added-quotes") do; [Escaped Output] d4x_sanitizer(t("last added")); end
[Escaped Output] d4x_sanitizer(t("top rated"))
[Escaped Output] link_to("/top-rated-quotes") do; [Escaped Output] d4x_sanitizer(t("top rated")); end
[Escaped Output] d4x_sanitizer(t("most viewed"))
[Escaped Output] link_to("/most-viewed-quotes") do; [Escaped Output] d4x_sanitizer(t("most viewed")); end
[Escaped Output] d4x_sanitizer(t("quotes"))
[Escaped Output] d4x_sanitizer(t("ispirational"))
[Escaped Output] link_to("/ispirational-quotes") do; [Escaped Output] d4x_sanitizer(t("ispirational")); end
[Escaped Output] d4x_sanitizer(t("famous"))
[Escaped Output] link_to("/famous-quotes") do; [Escaped Output] d4x_sanitizer(t("famous")); end
[Escaped Output] d4x_sanitizer(t("movie"))
[Escaped Output] link_to("/movie-quotes") do; [Escaped Output] d4x_sanitizer(t("movie")); end
[Escaped Output] d4x_sanitizer(t("proverbs"))
[Escaped Output] link_to("/proverbs") do; [Escaped Output] d4x_sanitizer(t("proverbs")); end
[Escaped Output] d4x_sanitizer(t("by author"))
[Escaped Output] link_to("/author-quotes") do; [Escaped Output] d4x_sanitizer(t("by author")); end
[Escaped Output] d4x_sanitizer(t("by lang"))
[Escaped Output] link_to("/language-quotes") do; [Escaped Output] d4x_sanitizer(t("by lang")); end
[Escaped Output] d4x_sanitizer(t(:author))
[Escaped Output] d4x_sanitizer(t(:qtext))
[Escaped Output] d4x_sanitizer(t("lang."))
[Escaped Output] d4x_sanitizer(t("appr"))
[Escaped Output] cycle("odd", "even")
[Escaped Output] quote.author.fullname
[Escaped Output] link_to(quote.qtext, quote)
[Escaped Output] image_tag("us.png", :title => "English")
[Escaped Output] image_tag("it.png", :title => "Italian")
[Escaped Output] image_tag("tick.png", :title => "approved")
[Escaped Output] image_tag("time.png", :title => "approvation is pending")
[Escaped Output] link_to(image_tag("comment.png", :border => 0, :mouseover => "comment.png", :title => d4x_sanitizer(t("icon-show")), :size => "16x16"), quote)
[Escaped Output] link_to(image_tag("comment_edit.png", :border => 0, :mouseover => "comment_edit.png", :title => d4x_sanitizer(t("icon-edit")), :size => "16x16"), edit_quote_path(quote))
[Escaped Output] button_to("", quote, :confirm => "are you sure?", :method => :delete, :class => "quote-destroy", :name => "zdestroy", :size => "16x16")
[Escaped Output] will_paginate(@quotes, :per_page => 50)

quotes/toprated.["QuotesController#toprated"]

[Escaped Output] link_to(image_tag("ubermail.jpg", :border => 0, :title => "famous quotes"), new_quote_path)
[Escaped Output] image_tag("ubermail.jpg", :mouseover => "ubermail.jpg", :title => d4x_sanitizer(t("quotes")))
[Escaped Output] d4x_sanitizer(t("last added"))
[Escaped Output] link_to("/last-added-quotes") do; [Escaped Output] d4x_sanitizer(t("last added")); end
[Escaped Output] d4x_sanitizer(t("top rated"))
[Escaped Output] link_to("/top-rated-quotes") do; [Escaped Output] d4x_sanitizer(t("top rated")); end
[Escaped Output] d4x_sanitizer(t("most viewed"))
[Escaped Output] link_to("/most-viewed-quotes") do; [Escaped Output] d4x_sanitizer(t("most viewed")); end
[Escaped Output] d4x_sanitizer(t("quotes"))
[Escaped Output] d4x_sanitizer(t("ispirational"))
[Escaped Output] link_to("/ispirational-quotes") do; [Escaped Output] d4x_sanitizer(t("ispirational")); end
[Escaped Output] d4x_sanitizer(t("famous"))
[Escaped Output] link_to("/famous-quotes") do; [Escaped Output] d4x_sanitizer(t("famous")); end
[Escaped Output] d4x_sanitizer(t("movie"))
[Escaped Output] link_to("/movie-quotes") do; [Escaped Output] d4x_sanitizer(t("movie")); end
[Escaped Output] d4x_sanitizer(t("proverbs"))
[Escaped Output] link_to("/proverbs") do; [Escaped Output] d4x_sanitizer(t("proverbs")); end
[Escaped Output] d4x_sanitizer(t("by author"))
[Escaped Output] link_to("/author-quotes") do; [Escaped Output] d4x_sanitizer(t("by author")); end
[Escaped Output] d4x_sanitizer(t("by lang"))
[Escaped Output] link_to("/language-quotes") do; [Escaped Output] d4x_sanitizer(t("by lang")); end
[Escaped Output] d4x_sanitizer(t(:author))
[Escaped Output] d4x_sanitizer(t(:qtext))
[Escaped Output] d4x_sanitizer(t("lang."))
[Escaped Output] d4x_sanitizer(t("appr"))
[Escaped Output] cycle("odd", "even")
[Escaped Output] (Unresolved Model).new.author.fullname
[Escaped Output] link_to((Unresolved Model).new.qtext, (Unresolved Model).new)
[Escaped Output] image_tag("us.png", :title => "English")
[Escaped Output] image_tag("it.png", :title => "Italian")
[Escaped Output] image_tag("tick.png", :title => "approved")
[Escaped Output] image_tag("time.png", :title => "approvation is pending")
[Escaped Output] link_to(image_tag("comment.png", :border => 0, :mouseover => "comment.png", :title => d4x_sanitizer(t("icon-show")), :size => "16x16"), (Unresolved Model).new)
[Escaped Output] link_to(image_tag("comment_edit.png", :border => 0, :mouseover => "comment_edit.png", :title => d4x_sanitizer(t("icon-edit")), :size => "16x16"), edit_quote_path((Unresolved Model).new))
[Escaped Output] button_to("", (Unresolved Model).new, :confirm => "are you sure?", :method => :delete, :class => "quote-destroy", :name => "zdestroy", :size => "16x16")
[Escaped Output] will_paginate(Quote.where(:visible => true).order(:rating).reverse_order.paginate(:page => params[:page]), :per_page => 50)

requests/_form

[Escaped Output] pluralize(@request.errors.count, t("error"))
[Escaped Output] msg
[Escaped Output] f.label(t(:id))
[Escaped Output] f.text_field(:id)
[Escaped Output] f.label(t(:target_id))
[Escaped Output] f.text_field(:target_id)
[Escaped Output] f.label(t(:relation))
[Escaped Output] f.text_field(:relation)
[Escaped Output] f.label(t(:message))
[Escaped Output] f.text_area(:message)
[Escaped Output] f.label(t(:status))
[Escaped Output] f.text_field(:status)
[Escaped Output] f.submit(:class => "button-d4x")
[Escaped Output] form_for(@request) do; if @request.errors.any? then; [Escaped Output] pluralize(@request.errors.count, t("error")); @request.errors.full_messages.each do; [Escaped Output] msg; end;end;[Escaped Output] f.label(t(:id));[Escaped Output] f.text_field(:id);[Escaped Output] f.label(t(:target_id));[Escaped Output] f.text_field(:target_id);[Escaped Output] f.label(t(:relation));[Escaped Output] f.text_field(:relation);[Escaped Output] f.label(t(:message));[Escaped Output] f.text_area(:message);[Escaped Output] f.label(t(:status));[Escaped Output] f.text_field(:status);[Escaped Output] f.submit(:class => "button-d4x"); end

requests/_form.["RequestsController#edit", "Template:requests/edit"]

[Escaped Output] pluralize(Request.find(params[:id]).errors.count, t("error"))
[Escaped Output] (Unresolved Model).new
[Escaped Output] FormBuilder.new.label(t(:id))
[Escaped Output] FormBuilder.new.text_field(:id)
[Escaped Output] FormBuilder.new.label(t(:target_id))
[Escaped Output] FormBuilder.new.text_field(:target_id)
[Escaped Output] FormBuilder.new.label(t(:relation))
[Escaped Output] FormBuilder.new.text_field(:relation)
[Escaped Output] FormBuilder.new.label(t(:message))
[Escaped Output] FormBuilder.new.text_area(:message)
[Escaped Output] FormBuilder.new.label(t(:status))
[Escaped Output] FormBuilder.new.text_field(:status)
[Escaped Output] FormBuilder.new.submit(:class => "button-d4x")
[Escaped Output] form_for(Request.find(params[:id])) do; if Request.find(params[:id]).errors.any? then; [Escaped Output] pluralize(Request.find(params[:id]).errors.count, t("error")); Request.find(params[:id]).errors.full_messages.each do; [Escaped Output] (Unresolved Model).new; end;end;[Escaped Output] FormBuilder.new.label(t(:id));[Escaped Output] FormBuilder.new.text_field(:id);[Escaped Output] FormBuilder.new.label(t(:target_id));[Escaped Output] FormBuilder.new.text_field(:target_id);[Escaped Output] FormBuilder.new.label(t(:relation));[Escaped Output] FormBuilder.new.text_field(:relation);[Escaped Output] FormBuilder.new.label(t(:message));[Escaped Output] FormBuilder.new.text_area(:message);[Escaped Output] FormBuilder.new.label(t(:status));[Escaped Output] FormBuilder.new.text_field(:status);[Escaped Output] FormBuilder.new.submit(:class => "button-d4x"); end

requests/_form.["RequestsController#new", "Template:requests/new"]

[Escaped Output] pluralize(Request.new.errors.count, t("error"))
[Escaped Output] msg
[Escaped Output] FormBuilder.new.label(t(:id))
[Escaped Output] FormBuilder.new.text_field(:id)
[Escaped Output] FormBuilder.new.label(t(:target_id))
[Escaped Output] FormBuilder.new.text_field(:target_id)
[Escaped Output] FormBuilder.new.label(t(:relation))
[Escaped Output] FormBuilder.new.text_field(:relation)
[Escaped Output] FormBuilder.new.label(t(:message))
[Escaped Output] FormBuilder.new.text_area(:message)
[Escaped Output] FormBuilder.new.label(t(:status))
[Escaped Output] FormBuilder.new.text_field(:status)
[Escaped Output] FormBuilder.new.submit(:class => "button-d4x")
[Escaped Output] form_for(Request.new) do; if Request.new.errors.any? then; [Escaped Output] pluralize(Request.new.errors.count, t("error")); Request.new.errors.full_messages.each do; [Escaped Output] msg; end;end;[Escaped Output] FormBuilder.new.label(t(:id));[Escaped Output] FormBuilder.new.text_field(:id);[Escaped Output] FormBuilder.new.label(t(:target_id));[Escaped Output] FormBuilder.new.text_field(:target_id);[Escaped Output] FormBuilder.new.label(t(:relation));[Escaped Output] FormBuilder.new.text_field(:relation);[Escaped Output] FormBuilder.new.label(t(:message));[Escaped Output] FormBuilder.new.text_area(:message);[Escaped Output] FormBuilder.new.label(t(:status));[Escaped Output] FormBuilder.new.text_field(:status);[Escaped Output] FormBuilder.new.submit(:class => "button-d4x"); end

requests/_form.["Template:requests/edit"]

[Escaped Output] pluralize(@request.errors.count, t("error"))
[Escaped Output] msg
[Escaped Output] FormBuilder.new.label(t(:id))
[Escaped Output] FormBuilder.new.text_field(:id)
[Escaped Output] FormBuilder.new.label(t(:target_id))
[Escaped Output] FormBuilder.new.text_field(:target_id)
[Escaped Output] FormBuilder.new.label(t(:relation))
[Escaped Output] FormBuilder.new.text_field(:relation)
[Escaped Output] FormBuilder.new.label(t(:message))
[Escaped Output] FormBuilder.new.text_area(:message)
[Escaped Output] FormBuilder.new.label(t(:status))
[Escaped Output] FormBuilder.new.text_field(:status)
[Escaped Output] FormBuilder.new.submit(:class => "button-d4x")
[Escaped Output] form_for(@request) do; if @request.errors.any? then; [Escaped Output] pluralize(@request.errors.count, t("error")); @request.errors.full_messages.each do; [Escaped Output] msg; end;end;[Escaped Output] FormBuilder.new.label(t(:id));[Escaped Output] FormBuilder.new.text_field(:id);[Escaped Output] FormBuilder.new.label(t(:target_id));[Escaped Output] FormBuilder.new.text_field(:target_id);[Escaped Output] FormBuilder.new.label(t(:relation));[Escaped Output] FormBuilder.new.text_field(:relation);[Escaped Output] FormBuilder.new.label(t(:message));[Escaped Output] FormBuilder.new.text_area(:message);[Escaped Output] FormBuilder.new.label(t(:status));[Escaped Output] FormBuilder.new.text_field(:status);[Escaped Output] FormBuilder.new.submit(:class => "button-d4x"); end

requests/edit

[Escaped Output] link_to(image_tag("arrow_left.png", :border => 0, :title => t("back")), requests_path)
[Escaped Output] t("editing request")
[Escaped Output] render(partial => "form", {})

requests/edit.["RequestsController#edit"]

[Escaped Output] link_to(image_tag("arrow_left.png", :border => 0, :title => t("back")), requests_path)
[Escaped Output] t("editing request")
[Escaped Output] render(partial => "form", {})

requests/index

[Escaped Output] label_tag(t("received requests"), nil, :class => "bluesocial")
[Escaped Output] request.id
[Escaped Output] @sender.avatar.url(:thumb)
[Escaped Output] label_tag(@sender.firstname, nil, :class => "xname")
[Escaped Output] label_tag(("@" + @sender.nickname.downcase), nil, :class => "lcd orange")
[Escaped Output] t("requested")
[Escaped Output] t("You")
[Escaped Output] time_ago_in_words_converter(request.created_at)
[Escaped Output] t("ago")
[Escaped Output] f.hidden_field(:target_id, :value => request.target_id)
[Escaped Output] button_to(request, :class => "contacts__btn", :method => :delete, :id => "btrequest", :title => "delete request", :confirm => t("Are you sure you want to delete this request?")) do; [ignored]; end
[Escaped Output] form_for(request) do; [Escaped Output] f.hidden_field(:target_id, :value => request.target_id);[Escaped Output] button_to(request, :class => "contacts__btn", :method => :delete, :id => "btrequest", :title => "delete request", :confirm => t("Are you sure you want to delete this request?")) do; [ignored]; end; end
[Escaped Output] f.button(t("accept"), :name => "accept", :class => "btn btn-xs btn-dark", :value => "accept")
[Escaped Output] form_for(request) do; [Escaped Output] f.button(t("accept"), :name => "accept", :class => "btn btn-xs btn-dark", :value => "accept");f.button(t("ignore"), :name => "ignore", :class => "btn btn-xs btn-dark", :value => "ignore"); end
[Escaped Output] t("status")
[Escaped Output] label_tag(request.status, nil, :class => "lcd yellow")
[Escaped Output] label_tag(t("sent requests"), nil, :class => "bluesocial")
[Escaped Output] request.id
[Escaped Output] @destination.avatar.url(:thumb)
[Escaped Output] t("You")
[Escaped Output] t("Requested")
[Escaped Output] label_tag(@destination.firstname, nil, :class => "")
[Escaped Output] label_tag(("@" + @destination.nickname.downcase), nil, :class => "orange")
[Escaped Output] time_ago_in_words_converter(request.created_at)
[Escaped Output] t("ago")
[Escaped Output] f.hidden_field(:target_id, :value => request.target_id)
[Escaped Output] button_to(request, :class => "btn btn-sm btn-outline-warning", :method => :delete, :id => "btrequest", :title => "delete request", :data => ({ :confirm => "Are you sure you want to delete this request?" })) do; [ignored]; end
[Escaped Output] form_for(request) do; [Escaped Output] f.hidden_field(:target_id, :value => request.target_id);[Escaped Output] button_to(request, :class => "btn btn-sm btn-outline-warning", :method => :delete, :id => "btrequest", :title => "delete request", :data => ({ :confirm => "Are you sure you want to delete this request?" })) do; [ignored]; end; end
[Escaped Output] button_to(request, :class => "btn btn-sm btn-outline-warning", :method => :delete, :id => "btrequest", :title => "delete request", :confirm => t("Are you sure you want to delete this request?")) do; [ignored]; end
[Escaped Output] t("status")
[Escaped Output] label_tag(request.status, nil, :class => "yellow")

requests/index.["RequestsController#index"]

[Escaped Output] label_tag(t("received requests"), nil, :class => "bluesocial")
[Escaped Output] Request.new.id
[Escaped Output] User.find(Request.new.user_id).avatar.url(:thumb)
[Escaped Output] label_tag(User.find(Request.new.user_id).firstname, nil, :class => "xname")
[Escaped Output] label_tag(("@" + User.find(Request.new.user_id).nickname.downcase), nil, :class => "lcd orange")
[Escaped Output] t("requested")
[Escaped Output] t("You")
[Escaped Output] time_ago_in_words_converter(Request.new.created_at)
[Escaped Output] t("ago")
[Escaped Output] FormBuilder.new.hidden_field(:target_id, :value => Request.new.target_id)
[Escaped Output] button_to(Request.new, :class => "contacts__btn", :method => :delete, :id => "btrequest", :title => "delete request", :confirm => t("Are you sure you want to delete this request?")) do; [ignored]; end
[Escaped Output] form_for(Request.new) do; [Escaped Output] FormBuilder.new.hidden_field(:target_id, :value => Request.new.target_id);[Escaped Output] button_to(Request.new, :class => "contacts__btn", :method => :delete, :id => "btrequest", :title => "delete request", :confirm => t("Are you sure you want to delete this request?")) do; [ignored]; end; end
[Escaped Output] FormBuilder.new.button(t("accept"), :name => "accept", :class => "btn btn-xs btn-dark", :value => "accept")
[Escaped Output] form_for(Request.new) do; [Escaped Output] FormBuilder.new.button(t("accept"), :name => "accept", :class => "btn btn-xs btn-dark", :value => "accept");FormBuilder.new.button(t("ignore"), :name => "ignore", :class => "btn btn-xs btn-dark", :value => "ignore"); end
[Escaped Output] t("status")
[Escaped Output] label_tag(Request.new.status, nil, :class => "lcd yellow")
[Escaped Output] label_tag(t("sent requests"), nil, :class => "bluesocial")
[Escaped Output] Request.new.id
[Escaped Output] User.find(Request.new.target_id).avatar.url(:thumb)
[Escaped Output] t("You")
[Escaped Output] t("Requested")
[Escaped Output] label_tag(User.find(Request.new.target_id).firstname, nil, :class => "")
[Escaped Output] label_tag(("@" + User.find(Request.new.target_id).nickname.downcase), nil, :class => "orange")
[Escaped Output] time_ago_in_words_converter(Request.new.created_at)
[Escaped Output] t("ago")
[Escaped Output] FormBuilder.new.hidden_field(:target_id, :value => Request.new.target_id)
[Escaped Output] button_to(Request.new, :class => "btn btn-sm btn-outline-warning", :method => :delete, :id => "btrequest", :title => "delete request", :data => ({ :confirm => "Are you sure you want to delete this request?" })) do; [ignored]; end
[Escaped Output] form_for(Request.new) do; [Escaped Output] FormBuilder.new.hidden_field(:target_id, :value => Request.new.target_id);[Escaped Output] button_to(Request.new, :class => "btn btn-sm btn-outline-warning", :method => :delete, :id => "btrequest", :title => "delete request", :data => ({ :confirm => "Are you sure you want to delete this request?" })) do; [ignored]; end; end
[Escaped Output] button_to(Request.new, :class => "btn btn-sm btn-outline-warning", :method => :delete, :id => "btrequest", :title => "delete request", :confirm => t("Are you sure you want to delete this request?")) do; [ignored]; end
[Escaped Output] t("status")
[Escaped Output] label_tag(Request.new.status, nil, :class => "yellow")

requests/new

[Escaped Output] link_to(image_tag("arrow_left.png", :border => 0, :title => t("back")), request.referer)
[Escaped Output] t("new request")
[Escaped Output] render(partial => "form", {})

requests/new.["RequestsController#new"]

[Escaped Output] link_to(image_tag("arrow_left.png", :border => 0, :title => t("back")), request.referer)
[Escaped Output] t("new request")
[Escaped Output] render(partial => "form", {})

requests/personal

[Escaped Output] t("personal requests")
[Escaped Output] notice
[Escaped Output] link_to(t("new request"), new_request_path)
[Escaped Output] t(:id)
[Escaped Output] t(:sender_id)
[Escaped Output] t(:target_id)
[Escaped Output] t(:reason)
[Escaped Output] t(:sent)
[Escaped Output] request.sender_id
[Escaped Output] request.target_id
[Escaped Output] request.reason
[Escaped Output] request.created_at
[Escaped Output] link_to(image_tag("icon-list-new.gif", :border => 0, :mouseover => "icon-list-new-over.gif", :title => t("icon-show"), :size => "16x16"), request)
[Escaped Output] link_to(image_tag("icon-list-update.gif", :border => 0, :mouseover => "icon-list-update-over.gif", :title => t("icon-edit"), :size => "16x16"), edit_request_path(request))
[Escaped Output] button_to("", request, :confirm => "Are you sure?", :method => :delete, :size => "20x20")
[Escaped Output] render(partial => "shared/menu_admin", {})
[Escaped Output] render(partial => "shared/menu_member", {})
[Escaped Output] content_for(:leftcol) do; if current_user.role?(:admin) then; [Escaped Output] render(partial => "shared/menu_admin", {});else; [Escaped Output] render(partial => "shared/menu_member", {});end; end
[Escaped Output] render(partial => "shared/menu_right_admin", {})
[Escaped Output] render(partial => "shared/menu_right_member", {})
[Escaped Output] content_for(:rightcol) do; if current_user.role?(:admin) then; [Escaped Output] render(partial => "shared/menu_right_admin", {});else; [Escaped Output] render(partial => "shared/menu_right_member", {});end; end

requests/show

[Escaped Output] t(:sender_id)
[Escaped Output] @request.sender_id
[Escaped Output] t(:target_id)
[Escaped Output] @request.target_id
[Escaped Output] t(:reason)
[Escaped Output] @request.reason
[Escaped Output] t(:relationship)
[Escaped Output] @request.relationship
[Escaped Output] t(:message)
[Escaped Output] @request.message
[Escaped Output] t(:status)
[Escaped Output] @request.status
[Escaped Output] t(:sent_at)
[Escaped Output] @request.sent_at
[Escaped Output] t(:read_at)
[Escaped Output] @request.read_at
[Escaped Output] link_to(t("edit"), edit_request_path(@request))
[Escaped Output] link_to(t("back"), requests_path)

requests/show.["RequestsController#show"]

[Escaped Output] t(:sender_id)
[Escaped Output] Request.find(params[:id]).sender_id
[Escaped Output] t(:target_id)
[Escaped Output] Request.find(params[:id]).target_id
[Escaped Output] t(:reason)
[Escaped Output] Request.find(params[:id]).reason
[Escaped Output] t(:relationship)
[Escaped Output] Request.find(params[:id]).relationship
[Escaped Output] t(:message)
[Escaped Output] Request.find(params[:id]).message
[Escaped Output] t(:status)
[Escaped Output] Request.find(params[:id]).status
[Escaped Output] t(:sent_at)
[Escaped Output] Request.find(params[:id]).sent_at
[Escaped Output] t(:read_at)
[Escaped Output] Request.find(params[:id]).read_at
[Escaped Output] link_to(t("edit"), edit_request_path(Request.find(params[:id])))
[Escaped Output] link_to(t("back"), requests_path)

search/directory

[Escaped Output] user_path(user)
[Escaped Output] user.avatar.url(:thumb)
[Escaped Output] image_tag("online.png", :class => "pull-right onoff", :title => "online")
[Escaped Output] user.firstname
[Escaped Output] user_path(user)
[Escaped Output] ("@" + user.nickname)
[Escaped Output] label_tag("You", nil, :class => "lightlime")
[Escaped Output] f.hidden_field(:friend_id, :value => friend.id)
[Escaped Output] label_tag(d4x_sanitizer(t("Connected")), nil, :class => "")
[Escaped Output] link_to(friend, :class => "btn btn-xs btn-dark", :method => :delete, :confirm => "Are you sure you want to disconnect this person?") do; [Escaped Output] label_tag(d4x_sanitizer(t("Connected")), nil, :class => ""); end
[Escaped Output] form_for(friend) do; [Escaped Output] f.hidden_field(:friend_id, :value => friend.id);[Escaped Output] link_to(friend, :class => "btn btn-xs btn-dark", :method => :delete, :confirm => "Are you sure you want to disconnect this person?") do; [Escaped Output] label_tag(d4x_sanitizer(t("Connected")), nil, :class => ""); end; end
[Escaped Output] label_tag(d4x_sanitizer(t("Request Sent")), nil, :class => "orange")
[Escaped Output] f.hidden_field(:target_id, :value => user.id)
[Escaped Output] button_to(d4x_sanitizer(t("request connection")), nil, :class => "btn btn-sm btn-dark", :form_class => "friend", :action => "create", :confirm => "Are you sure you want to add to your network?", :id => "add-to-ring")
[Escaped Output] form_for(Request.new) do; [Escaped Output] f.hidden_field(:target_id, :value => user.id);[Escaped Output] button_to(d4x_sanitizer(t("request connection")), nil, :class => "btn btn-sm btn-dark", :form_class => "friend", :action => "create", :confirm => "Are you sure you want to add to your network?", :id => "add-to-ring"); end
[Escaped Output] link_to(user_path(user)) do; unless is_banned(current_user.id, user.id) then; [Escaped Output] user_path(user); if have_to_show_photo(current_user.id, user.id) then; if user.avatar(:thumb).present? then; [Escaped Output] user.avatar.url(:thumb); else; [ignored]; end; else; [ignored]; end; if user.online? then; [Escaped Output] image_tag("online.png", :class => "pull-right onoff", :title => "online"); end; [Escaped Output] user.firstname; [Escaped Output] user_path(user); [Escaped Output] ("@" + user.nickname); user.email; if (current_user.id == user.id) then; [Escaped Output] label_tag("You", nil, :class => "lightlime"); else; if (is_friend(current_user.id.to_s, user.id.to_s) == true) then; friend = Friend.where(:user_id => current_user.id, :friend_id => user.id).first; [Escaped Output] form_for(friend) do; [Escaped Output] f.hidden_field(:friend_id, :value => friend.id); [Escaped Output] link_to(friend, :class => "btn btn-xs btn-dark", :method => :delete, :confirm => "Are you sure you want to disconnect this person?") do; [Escaped Output] label_tag(d4x_sanitizer(t("Connected")), nil, :class => ""); end; end; else; if (already_requested_and_not_answered(current_user.id.to_s, user.id.to_s) == true) then; [Escaped Output] label_tag(d4x_sanitizer(t("Request Sent")), nil, :class => "orange"); else; if (current_user.id != user.id) then; [Escaped Output] form_for(Request.new) do; [Escaped Output] f.hidden_field(:target_id, :value => user.id); [Escaped Output] button_to(d4x_sanitizer(t("request connection")), nil, :class => "btn btn-sm btn-dark", :form_class => "friend", :action => "create", :confirm => "Are you sure you want to add to your network?", :id => "add-to-ring"); end; end; end; end; end;end; end

search/directory.["SearchController#directory"]

[Escaped Output] user_path(User.new)
[Escaped Output] User.new.avatar.url(:thumb)
[Escaped Output] image_tag("online.png", :class => "pull-right onoff", :title => "online")
[Escaped Output] User.new.firstname
[Escaped Output] user_path(User.new)
[Escaped Output] ("@" + User.new.nickname)
[Escaped Output] label_tag("You", nil, :class => "lightlime")
[Escaped Output] FormBuilder.new.hidden_field(:friend_id, :value => Friend.where(:user_id => current_user.id, :friend_id => User.new.id).first.id)
[Escaped Output] label_tag(d4x_sanitizer(t("Connected")), nil, :class => "")
[Escaped Output] link_to(Friend.where(:user_id => current_user.id, :friend_id => User.new.id).first, :class => "btn btn-xs btn-dark", :method => :delete, :confirm => "Are you sure you want to disconnect this person?") do; [Escaped Output] label_tag(d4x_sanitizer(t("Connected")), nil, :class => ""); end
[Escaped Output] form_for(Friend.where(:user_id => current_user.id, :friend_id => User.new.id).first) do; [Escaped Output] FormBuilder.new.hidden_field(:friend_id, :value => Friend.where(:user_id => current_user.id, :friend_id => User.new.id).first.id);[Escaped Output] link_to(Friend.where(:user_id => current_user.id, :friend_id => User.new.id).first, :class => "btn btn-xs btn-dark", :method => :delete, :confirm => "Are you sure you want to disconnect this person?") do; [Escaped Output] label_tag(d4x_sanitizer(t("Connected")), nil, :class => ""); end; end
[Escaped Output] label_tag(d4x_sanitizer(t("Request Sent")), nil, :class => "orange")
[Escaped Output] FormBuilder.new.hidden_field(:target_id, :value => User.new.id)
[Escaped Output] button_to(d4x_sanitizer(t("request connection")), nil, :class => "btn btn-sm btn-dark", :form_class => "friend", :action => "create", :confirm => "Are you sure you want to add to your network?", :id => "add-to-ring")
[Escaped Output] form_for(Request.new) do; [Escaped Output] FormBuilder.new.hidden_field(:target_id, :value => User.new.id);[Escaped Output] button_to(d4x_sanitizer(t("request connection")), nil, :class => "btn btn-sm btn-dark", :form_class => "friend", :action => "create", :confirm => "Are you sure you want to add to your network?", :id => "add-to-ring"); end
[Escaped Output] link_to(user_path(User.new)) do; unless is_banned(current_user.id, User.new.id) then; [Escaped Output] user_path(User.new); if have_to_show_photo(current_user.id, User.new.id) then; if User.new.avatar(:thumb).present? then; [Escaped Output] User.new.avatar.url(:thumb); else; [ignored]; end; else; [ignored]; end; if User.new.online? then; [Escaped Output] image_tag("online.png", :class => "pull-right onoff", :title => "online"); end; [Escaped Output] User.new.firstname; [Escaped Output] user_path(User.new); [Escaped Output] ("@" + User.new.nickname); User.new.email; if (current_user.id == User.new.id) then; [Escaped Output] label_tag("You", nil, :class => "lightlime"); else; if (is_friend(current_user.id.to_s, User.new.id.to_s) == true) then; friend = Friend.where(:user_id => current_user.id, :friend_id => User.new.id).first; [Escaped Output] form_for(Friend.where(:user_id => current_user.id, :friend_id => User.new.id).first) do; [Escaped Output] FormBuilder.new.hidden_field(:friend_id, :value => Friend.where(:user_id => current_user.id, :friend_id => User.new.id).first.id); [Escaped Output] link_to(Friend.where(:user_id => current_user.id, :friend_id => User.new.id).first, :class => "btn btn-xs btn-dark", :method => :delete, :confirm => "Are you sure you want to disconnect this person?") do; [Escaped Output] label_tag(d4x_sanitizer(t("Connected")), nil, :class => ""); end; end; else; if (already_requested_and_not_answered(current_user.id.to_s, User.new.id.to_s) == true) then; [Escaped Output] label_tag(d4x_sanitizer(t("Request Sent")), nil, :class => "orange"); else; if (current_user.id != User.new.id) then; [Escaped Output] form_for(Request.new) do; [Escaped Output] FormBuilder.new.hidden_field(:target_id, :value => User.new.id); [Escaped Output] button_to(d4x_sanitizer(t("request connection")), nil, :class => "btn btn-sm btn-dark", :form_class => "friend", :action => "create", :confirm => "Are you sure you want to add to your network?", :id => "add-to-ring"); end; end; end; end; end;end; end

search/index

[Escaped Output] @results.length
[Escaped Output] t("results found for")
[Escaped Output] @searched_item
[Escaped Output] user_path(user)
[Escaped Output] user.avatar.url(:thumb)
[Escaped Output] image_tag("online.png", :class => "pull-right onoff", :title => "online")
[Escaped Output] user.firstname
[Escaped Output] user_path(user)
[Escaped Output] ("@" + user.nickname)
[Escaped Output] label_tag("You", nil, :class => "btn btn-md btn-outline-success")
[Escaped Output] f.hidden_field(:friend_id, :value => friend.id)
[Escaped Output] label_tag(d4x_sanitizer(t("Connected")), nil, :class => "btn btn-sm btn-outline-success")
[Escaped Output] link_to(friend, :class => "btn btn-xs btn-info", :method => :delete, :confirm => "Are you sure you want to disconnect this person?") do; [Escaped Output] label_tag(d4x_sanitizer(t("Connected")), nil, :class => "btn btn-sm btn-outline-success"); end
[Escaped Output] form_for(friend) do; [Escaped Output] f.hidden_field(:friend_id, :value => friend.id);[Escaped Output] link_to(friend, :class => "btn btn-xs btn-info", :method => :delete, :confirm => "Are you sure you want to disconnect this person?") do; [Escaped Output] label_tag(d4x_sanitizer(t("Connected")), nil, :class => "btn btn-sm btn-outline-success"); end; end
[Escaped Output] label_tag(d4x_sanitizer(t("Request Sent")), nil, :class => "btn btn-sm btn-outline-warning")
[Escaped Output] f.hidden_field(:target_id, :value => user.id)
[Escaped Output] button_to(d4x_sanitizer(t("request connection")), nil, :class => "btn btn-sm btn-outline-primary", :form_class => "friend", :action => "create", :confirm => "Are you sure you want to add to your network?", :id => "add-to-ring")
[Escaped Output] form_for(Request.new) do; [Escaped Output] f.hidden_field(:target_id, :value => user.id);[Escaped Output] button_to(d4x_sanitizer(t("request connection")), nil, :class => "btn btn-sm btn-outline-primary", :form_class => "friend", :action => "create", :confirm => "Are you sure you want to add to your network?", :id => "add-to-ring"); end

search/index.["SearchController#index"]

[Escaped Output] PgSearch.multisearch(params[:findthis]).paginate(:page => params[:page]).length
[Escaped Output] t("results found for")
[Escaped Output] params[:findthis].to_s
[Escaped Output] user_path(User.find(result.searchable_id))
[Escaped Output] User.find(result.searchable_id).avatar.url(:thumb)
[Escaped Output] image_tag("online.png", :class => "pull-right onoff", :title => "online")
[Escaped Output] User.find(result.searchable_id).firstname
[Escaped Output] user_path(User.find(result.searchable_id))
[Escaped Output] ("@" + User.find(result.searchable_id).nickname)
[Escaped Output] label_tag("You", nil, :class => "btn btn-md btn-outline-success")
[Escaped Output] FormBuilder.new.hidden_field(:friend_id, :value => Friend.where(:user_id => current_user.id, :friend_id => User.find(result.searchable_id).id).first.id)
[Escaped Output] label_tag(d4x_sanitizer(t("Connected")), nil, :class => "btn btn-sm btn-outline-success")
[Escaped Output] link_to(Friend.where(:user_id => current_user.id, :friend_id => User.find(result.searchable_id).id).first, :class => "btn btn-xs btn-info", :method => :delete, :confirm => "Are you sure you want to disconnect this person?") do; [Escaped Output] label_tag(d4x_sanitizer(t("Connected")), nil, :class => "btn btn-sm btn-outline-success"); end
[Escaped Output] form_for(Friend.where(:user_id => current_user.id, :friend_id => User.find(result.searchable_id).id).first) do; [Escaped Output] FormBuilder.new.hidden_field(:friend_id, :value => Friend.where(:user_id => current_user.id, :friend_id => User.find(result.searchable_id).id).first.id);[Escaped Output] link_to(Friend.where(:user_id => current_user.id, :friend_id => User.find(result.searchable_id).id).first, :class => "btn btn-xs btn-info", :method => :delete, :confirm => "Are you sure you want to disconnect this person?") do; [Escaped Output] label_tag(d4x_sanitizer(t("Connected")), nil, :class => "btn btn-sm btn-outline-success"); end; end
[Escaped Output] label_tag(d4x_sanitizer(t("Request Sent")), nil, :class => "btn btn-sm btn-outline-warning")
[Escaped Output] FormBuilder.new.hidden_field(:target_id, :value => User.find(result.searchable_id).id)
[Escaped Output] button_to(d4x_sanitizer(t("request connection")), nil, :class => "btn btn-sm btn-outline-primary", :form_class => "friend", :action => "create", :confirm => "Are you sure you want to add to your network?", :id => "add-to-ring")
[Escaped Output] form_for(Request.new) do; [Escaped Output] FormBuilder.new.hidden_field(:target_id, :value => User.find(result.searchable_id).id);[Escaped Output] button_to(d4x_sanitizer(t("request connection")), nil, :class => "btn btn-sm btn-outline-primary", :form_class => "friend", :action => "create", :confirm => "Are you sure you want to add to your network?", :id => "add-to-ring"); end

shared/_alerts_toaster

[Escaped Output] flash[:notice]
[Escaped Output] t("notice")
[Escaped Output] flash[:alert]
[Escaped Output] t("warning")
[Escaped Output] flash[:error]
[Escaped Output] t("error")

shared/_alerts_toaster.["Template:layouts/blog"]

[Escaped Output] flash[:notice]
[Escaped Output] t("notice")
[Escaped Output] flash[:alert]
[Escaped Output] t("warning")
[Escaped Output] flash[:error]
[Escaped Output] t("error")

shared/_blog_header_logo

[Escaped Output] link_to(image_tag("logo15.png", :class => "imagelogo", :alt => "(x.0)"), "/")
[Escaped Output] hidden_field_tag(:area, "firstname")
[Escaped Output] text_field_tag(:findthis, params[:query], :class => "typeahead form-controls input-sm", :placeholder => d4x_sanitizer(t("search")))
[Escaped Output] button_tag(raw("<i class=\"fa fa-search white\"></i>"), :id => "search-submit", :class => "btn btn-primary btn-sm", :method => "post", :title => d4x_sanitizer(t("search")))
[Escaped Output] form_tag("/search", :method => "get", :role => "search") do; [Escaped Output] hidden_field_tag(:area, "firstname");[Escaped Output] text_field_tag(:findthis, params[:query], :class => "typeahead form-controls input-sm", :placeholder => d4x_sanitizer(t("search")));[Escaped Output] button_tag(raw("<i class=\"fa fa-search white\"></i>"), :id => "search-submit", :class => "btn btn-primary btn-sm", :method => "post", :title => d4x_sanitizer(t("search"))); end
[Escaped Output] link_to(t("Timeline"), "/wall")
[Escaped Output] link_to(t("messages"), "/received")
[Escaped Output] link_to(t("Blog"), "/blog")
[Escaped Output] link_to(t("settings"), "/settings")

shared/_devise_footer

[Escaped Output] link_to(image_tag("us.png", :alt => "English", :title => "English", :class => "d4xicon"), url_for(:locale => "en"))
[Escaped Output] link_to(image_tag("england.png", :alt => "English", :title => "English", :class => "d4xicon"), url_for(:locale => "en"))
[Escaped Output] link_to(image_tag("fr.png", :alt => "French", :title => "French", :class => "d4xicon"), url_for(:locale => "fr"))
[Escaped Output] link_to(image_tag("pt.png", :alt => "Portuguese", :title => "Portuguese", :class => "d4xicon"), url_for(:locale => "pt"))
[Escaped Output] link_to(image_tag("de.png", :alt => "German", :title => "German", :class => "d4xicon"), url_for(:locale => "de"))
[Escaped Output] link_to(image_tag("it.png", :title => "Italian", :alt => "Italian", :class => "d4xicon"), url_for(:locale => "it"))
[Escaped Output] link_to(image_tag("nl.png", :alt => "Dutch", :title => "Dutch", :class => "d4xicon"), url_for(:locale => "nl"))
[Escaped Output] link_to(image_tag("es.png", :alt => "Spanish", :title => "Spanish", :class => "d4xicon"), url_for(:locale => "es"))
[Escaped Output] link_to(image_tag("se.png", :alt => "Swedish", :title => "Swedish", :class => "d4xicon"), url_for(:locale => "se"))
[Escaped Output] link_to(image_tag("cn.png", :alt => "Chinese", :title => "Chinese", :class => "d4xicon"), url_for(:locale => "cn"))
[Escaped Output] link_to(image_tag("ru.png", :alt => "Russian", :title => "Russian", :class => "d4xicon"), url_for(:locale => "ru"))
[Escaped Output] get_setting_value("PROJECT_COPYRIGHT_YEARS")
[Escaped Output] link_to(get_setting_value("PROJECT_NAME"))
[Escaped Output] d4x_sanitizer(t("all_rights"))

shared/_devise_footer.["Template:devise/confirmations/new"]

[Escaped Output] link_to(image_tag("us.png", :alt => "English", :title => "English", :class => "d4xicon"), url_for(:locale => "en"))
[Escaped Output] link_to(image_tag("england.png", :alt => "English", :title => "English", :class => "d4xicon"), url_for(:locale => "en"))
[Escaped Output] link_to(image_tag("fr.png", :alt => "French", :title => "French", :class => "d4xicon"), url_for(:locale => "fr"))
[Escaped Output] link_to(image_tag("pt.png", :alt => "Portuguese", :title => "Portuguese", :class => "d4xicon"), url_for(:locale => "pt"))
[Escaped Output] link_to(image_tag("de.png", :alt => "German", :title => "German", :class => "d4xicon"), url_for(:locale => "de"))
[Escaped Output] link_to(image_tag("it.png", :title => "Italian", :alt => "Italian", :class => "d4xicon"), url_for(:locale => "it"))
[Escaped Output] link_to(image_tag("nl.png", :alt => "Dutch", :title => "Dutch", :class => "d4xicon"), url_for(:locale => "nl"))
[Escaped Output] link_to(image_tag("es.png", :alt => "Spanish", :title => "Spanish", :class => "d4xicon"), url_for(:locale => "es"))
[Escaped Output] link_to(image_tag("se.png", :alt => "Swedish", :title => "Swedish", :class => "d4xicon"), url_for(:locale => "se"))
[Escaped Output] link_to(image_tag("cn.png", :alt => "Chinese", :title => "Chinese", :class => "d4xicon"), url_for(:locale => "cn"))
[Escaped Output] link_to(image_tag("ru.png", :alt => "Russian", :title => "Russian", :class => "d4xicon"), url_for(:locale => "ru"))
[Escaped Output] get_setting_value("PROJECT_COPYRIGHT_YEARS")
[Escaped Output] link_to(get_setting_value("PROJECT_NAME"))
[Escaped Output] d4x_sanitizer(t("all_rights"))

shared/_devise_header_logo

[Escaped Output] link_to(image_tag("logo15.png", :class => "imagelogo", :alt => "(x.0)"), "/")
[Escaped Output] get_setting_value("PROJECT_NAME")

shared/_devise_header_logo.["Template:devise/invitations/edit"]

[Escaped Output] link_to(image_tag("logo15.png", :class => "imagelogo", :alt => "(x.0)"), "/")
[Escaped Output] get_setting_value("PROJECT_NAME")

shared/_header_connections

[Escaped Output] t("connections")
[Escaped Output] edit_user_path(@xuser)
[Escaped Output] @xuser.avatar.url(:thumb)
[Escaped Output] @xuser.firstname
[Escaped Output] @xuser.nickname
[Escaped Output] get_current_status(@xuser.id)

shared/_header_connections.["Template:layouts/blog", "Template:shared/_reloaded_header"]

[Escaped Output] t("connections")
[Escaped Output] edit_user_path(User.find(friend.friend_id))
[Escaped Output] User.find(friend.friend_id).avatar.url(:thumb)
[Escaped Output] User.find(friend.friend_id).firstname
[Escaped Output] User.find(friend.friend_id).nickname
[Escaped Output] get_current_status(User.find(friend.friend_id).id)

shared/_header_connections_demo

[Escaped Output] t("connections")
[Escaped Output] t("online")

shared/_header_connections_demo.["Template:layouts/home", "Template:shared/_reloaded_header_demo"]

[Escaped Output] t("connections")
[Escaped Output] t("online")

shared/_header_messages

[Escaped Output] message.read_token
[Escaped Output] message.user.avatar.url(:thumb)
[Escaped Output] label_tag(user_fullname(message.sender_id), nil, :class => "xname")
[Escaped Output] label_tag(("@" + user_nick(message.sender_id)), nil, :class => "lcd orange")
[Escaped Output] time_ago_in_words_converter(message.created_at)
[Escaped Output] t("ago")
[Escaped Output] message.read_token
[Escaped Output] t("view all messages")

shared/_header_messages.["Template:layouts/blog", "Template:shared/_reloaded_header"]

[Escaped Output] message.read_token
[Escaped Output] message.user.avatar.url(:thumb)
[Escaped Output] label_tag(user_fullname(message.sender_id), nil, :class => "xname")
[Escaped Output] label_tag(("@" + user_nick(message.sender_id)), nil, :class => "lcd orange")
[Escaped Output] time_ago_in_words_converter(message.created_at)
[Escaped Output] t("ago")
[Escaped Output] message.read_token
[Escaped Output] t("view all messages")

shared/_header_notifications

[Escaped Output] t("notifications")
[Escaped Output] time_ago_in_words_converter(update.created_at)
[Escaped Output] t("ago")
[Escaped Output] update.reason

shared/_header_notifications.["Template:layouts/blog", "Template:shared/_reloaded_header"]

[Escaped Output] t("notifications")
[Escaped Output] time_ago_in_words_converter(update.created_at)
[Escaped Output] t("ago")
[Escaped Output] update.reason

shared/_header_notifications_demo

[Escaped Output] t("notifications")
[Escaped Output] time_ago_in_words_converter(DateTime.now)
[Escaped Output] t("ago")
[Escaped Output] t("you have a request of connection")

shared/_header_notifications_demo.["Template:layouts/home", "Template:shared/_reloaded_header_demo"]

[Escaped Output] t("notifications")
[Escaped Output] time_ago_in_words_converter(DateTime.now)
[Escaped Output] t("ago")
[Escaped Output] t("you have a request of connection")

shared/_lounge_chat

[Escaped Output] current_user.nickname
[Escaped Output] user_path(@xuser)
[Escaped Output] @xuser.avatar.url(:thumb)
[Escaped Output] @xuser.firstname
[Escaped Output] @xuser.nickname
[Escaped Output] get_current_status(@xuser.id)

shared/_new_post_social

[Escaped Output] f.file_field(:image, :onchange => "$(this).parent().parent().find('.form-control').html($(this).val().split(/[\\\\|/]/).pop());", :style => "display: none;")
[Escaped Output] f.text_area(:content, :multiline => false, :class => "form-control", :placeholder => d4x_sanitizer(t("Share your status or thoughts with your network")))
[Escaped Output] button_to(d4x_sanitizer(t("post")), nil, :class => "btn btn-outline-success btn-md btn-block", :id => "share-submit-2013")
[Escaped Output] form_for(MiniPost.new, :html => ({ :multipart => true })) do; [Escaped Output] f.file_field(:image, :onchange => "$(this).parent().parent().find('.form-control').html($(this).val().split(/[\\\\|/]/).pop());", :style => "display: none;");[Escaped Output] f.text_area(:content, :multiline => false, :class => "form-control", :placeholder => d4x_sanitizer(t("Share your status or thoughts with your network")));[Escaped Output] button_to(d4x_sanitizer(t("post")), nil, :class => "btn btn-outline-success btn-md btn-block", :id => "share-submit-2013"); end

shared/_new_post_social.["Template:wall/favorites"]

[Escaped Output] FormBuilder.new.file_field(:image, :onchange => "$(this).parent().parent().find('.form-control').html($(this).val().split(/[\\\\|/]/).pop());", :style => "display: none;")
[Escaped Output] FormBuilder.new.text_area(:content, :multiline => false, :class => "form-control", :placeholder => d4x_sanitizer(t("Share your status or thoughts with your network")))
[Escaped Output] button_to(d4x_sanitizer(t("post")), nil, :class => "btn btn-outline-success btn-md btn-block", :id => "share-submit-2013")
[Escaped Output] form_for(MiniPost.new, :html => ({ :multipart => true })) do; [Escaped Output] FormBuilder.new.file_field(:image, :onchange => "$(this).parent().parent().find('.form-control').html($(this).val().split(/[\\\\|/]/).pop());", :style => "display: none;");[Escaped Output] FormBuilder.new.text_area(:content, :multiline => false, :class => "form-control", :placeholder => d4x_sanitizer(t("Share your status or thoughts with your network")));[Escaped Output] button_to(d4x_sanitizer(t("post")), nil, :class => "btn btn-outline-success btn-md btn-block", :id => "share-submit-2013"); end

shared/_reloaded_footer

[Escaped Output] link_to(image_tag("us.png", :alt => "English", :title => "English", :class => "d4xicon"), url_for(:locale => "en"))
[Escaped Output] link_to(image_tag("england.png", :alt => "English", :title => "English", :class => "d4xicon"), url_for(:locale => "en"))
[Escaped Output] link_to(image_tag("se.png", :alt => "Swedish", :title => "Swedish", :class => "d4xicon"), url_for(:locale => "se"))
[Escaped Output] link_to(image_tag("pt.png", :alt => "Portuguese", :title => "Portuguese", :class => "d4xicon"), url_for(:locale => "pt"))
[Escaped Output] link_to(image_tag("de.png", :alt => "German", :title => "German", :class => "d4xicon"), url_for(:locale => "de"))
[Escaped Output] link_to(image_tag("es.png", :alt => "Spanish", :title => "Spanish", :class => "d4xicon"), url_for(:locale => "es"))
[Escaped Output] link_to(image_tag("it.png", :title => "Italian", :alt => "Italian", :class => "d4xicon"), url_for(:locale => "it"))
[Escaped Output] link_to(image_tag("nl.png", :alt => "Dutch", :title => "Dutch", :class => "d4xicon"), url_for(:locale => "nl"))
[Escaped Output] link_to(image_tag("fr.png", :alt => "French", :title => "French", :class => "d4xicon"), url_for(:locale => "fr"))
[Escaped Output] link_to(image_tag("ru.png", :alt => "Russian", :title => "Russian", :class => "d4xicon"), url_for(:locale => "ru"))
[Escaped Output] link_to(image_tag("cn.png", :alt => "Chinese", :title => "Chinese", :class => "d4xicon"), url_for(:locale => "cn"))
[Escaped Output] link_to(image_tag("il.png", :alt => "Hebrew", :title => "Hebrew", :class => "d4xicon"), url_for(:locale => "il"))
[Escaped Output] link_to(image_tag("pl.png", :alt => "Polish", :title => "Polish", :class => "d4xicon"), url_for(:locale => "pl"))
[Escaped Output] get_setting_value("PROJECT_COPYRIGHT_YEARS")
[Escaped Output] link_to(get_setting_value("PROJECT_NAME"))
[Escaped Output] d4x_sanitizer(t("all_rights"))

shared/_reloaded_header

[Escaped Output] javascript_include_tag("d4x-theme")
[Escaped Output] javascript_include_tag("typeahead.bundle.min")
[Escaped Output] link_to(image_tag("pixeltrasp.png", :class => "imagelogo", :alt => "(x.0)", :height => 40), "/")
[Escaped Output] hidden_field_tag(:area, "firstname")
[Escaped Output] text_field_tag(:findthis, params[:query], :class => "search__text typeahead", :placeholder => t("search for people"))
[Escaped Output] render(partial => "/shared/header_messages", {})
[Escaped Output] render(partial => "/shared/header_notifications", {})
[Escaped Output] render(partial => "/shared/header_connections", {})
[Escaped Output] t("product")
[Escaped Output] t("items")
[Escaped Output] @cart.cart_products.count
[Escaped Output] t("total")
[Escaped Output] number_to_currency(@cart.total_price, :unit => "\u{20ac}")
[Escaped Output] @product.photo.url(:thumb)
[Escaped Output] @product.name
[Escaped Output] @product.final_price
[Escaped Output] @product.description
[Escaped Output] @cart.id
[Escaped Output] t("your shopping cart")
[Escaped Output] @cart.id
[Escaped Output] t("go to checkout")
[Escaped Output] t("go to shopping")
[Escaped Output] t("theme")

shared/_reloaded_header.["AdsController#edit", "Template:layouts/dashboard"]

[Escaped Output] javascript_include_tag("d4x-theme")
[Escaped Output] javascript_include_tag("typeahead.bundle.min")
[Escaped Output] link_to(image_tag("pixeltrasp.png", :class => "imagelogo", :alt => "(x.0)", :height => 40), "/")
[Escaped Output] hidden_field_tag(:area, "firstname")
[Escaped Output] text_field_tag(:findthis, params[:query], :class => "search__text typeahead", :placeholder => t("search for people"))
[Escaped Output] render(partial => "/shared/header_messages", {})
[Escaped Output] render(partial => "/shared/header_notifications", {})
[Escaped Output] render(partial => "/shared/header_connections", {})
[Escaped Output] t("product")
[Escaped Output] t("items")
[Escaped Output] (Cart.new or ((Cart.where(:user_id => current_user.id).first or Cart.new(params[:cart])) or Cart.find(params[:cart_id]))).cart_products.count
[Escaped Output] t("total")
[Escaped Output] number_to_currency((Cart.new or ((Cart.where(:user_id => current_user.id).first or Cart.new(params[:cart])) or Cart.find(params[:cart_id]))).total_price, :unit => "\u{20ac}")
[Escaped Output] Product.find(cart_product.product_id).photo.url(:thumb)
[Escaped Output] Product.find(cart_product.product_id).name
[Escaped Output] Product.find(cart_product.product_id).final_price
[Escaped Output] Product.find(cart_product.product_id).description
[Escaped Output] (Cart.new or ((Cart.where(:user_id => current_user.id).first or Cart.new(params[:cart])) or Cart.find(params[:cart_id]))).id
[Escaped Output] t("your shopping cart")
[Escaped Output] (Cart.new or ((Cart.where(:user_id => current_user.id).first or Cart.new(params[:cart])) or Cart.find(params[:cart_id]))).id
[Escaped Output] t("go to checkout")
[Escaped Output] t("go to shopping")
[Escaped Output] t("theme")

shared/_reloaded_header.["CartsController#edit", "Template:layouts/dashboard"]

[Escaped Output] javascript_include_tag("d4x-theme")
[Escaped Output] javascript_include_tag("typeahead.bundle.min")
[Escaped Output] link_to(image_tag("pixeltrasp.png", :class => "imagelogo", :alt => "(x.0)", :height => 40), "/")
[Escaped Output] hidden_field_tag(:area, "firstname")
[Escaped Output] text_field_tag(:findthis, params[:query], :class => "search__text typeahead", :placeholder => t("search for people"))
[Escaped Output] render(partial => "/shared/header_messages", {})
[Escaped Output] render(partial => "/shared/header_notifications", {})
[Escaped Output] render(partial => "/shared/header_connections", {})
[Escaped Output] t("product")
[Escaped Output] t("items")
[Escaped Output] (((Cart.find(params[:id]) or (Cart.where(:user_id => current_user.id).first or Cart.new(params[:cart]))) or Cart.find(params[:cart_id])) or Cart.new).cart_products.count
[Escaped Output] t("total")
[Escaped Output] number_to_currency((((Cart.find(params[:id]) or (Cart.where(:user_id => current_user.id).first or Cart.new(params[:cart]))) or Cart.find(params[:cart_id])) or Cart.new).total_price, :unit => "\u{20ac}")
[Escaped Output] Product.find(cart_product.product_id).photo.url(:thumb)
[Escaped Output] Product.find(cart_product.product_id).name
[Escaped Output] Product.find(cart_product.product_id).final_price
[Escaped Output] Product.find(cart_product.product_id).description
[Escaped Output] (((Cart.find(params[:id]) or (Cart.where(:user_id => current_user.id).first or Cart.new(params[:cart]))) or Cart.find(params[:cart_id])) or Cart.new).id
[Escaped Output] t("your shopping cart")
[Escaped Output] (((Cart.find(params[:id]) or (Cart.where(:user_id => current_user.id).first or Cart.new(params[:cart]))) or Cart.find(params[:cart_id])) or Cart.new).id
[Escaped Output] t("go to checkout")
[Escaped Output] t("go to shopping")
[Escaped Output] t("theme")

shared/_reloaded_header.["Template:layouts/blog"]

[Escaped Output] javascript_include_tag("d4x-theme")
[Escaped Output] javascript_include_tag("typeahead.bundle.min")
[Escaped Output] link_to(image_tag("pixeltrasp.png", :class => "imagelogo", :alt => "(x.0)", :height => 40), "/")
[Escaped Output] hidden_field_tag(:area, "firstname")
[Escaped Output] text_field_tag(:findthis, params[:query], :class => "search__text typeahead", :placeholder => t("search for people"))
[Escaped Output] render(partial => "/shared/header_messages", {})
[Escaped Output] render(partial => "/shared/header_notifications", {})
[Escaped Output] render(partial => "/shared/header_connections", {})
[Escaped Output] t("product")
[Escaped Output] t("items")
[Escaped Output] (Cart.new or ((Cart.where(:user_id => current_user.id).first or Cart.new(params[:cart])) or Cart.find(params[:cart_id]))).cart_products.count
[Escaped Output] t("total")
[Escaped Output] number_to_currency((Cart.new or ((Cart.where(:user_id => current_user.id).first or Cart.new(params[:cart])) or Cart.find(params[:cart_id]))).total_price, :unit => "\u{20ac}")
[Escaped Output] Product.find(cart_product.product_id).photo.url(:thumb)
[Escaped Output] Product.find(cart_product.product_id).name
[Escaped Output] Product.find(cart_product.product_id).final_price
[Escaped Output] Product.find(cart_product.product_id).description
[Escaped Output] (Cart.new or ((Cart.where(:user_id => current_user.id).first or Cart.new(params[:cart])) or Cart.find(params[:cart_id]))).id
[Escaped Output] t("your shopping cart")
[Escaped Output] (Cart.new or ((Cart.where(:user_id => current_user.id).first or Cart.new(params[:cart])) or Cart.find(params[:cart_id]))).id
[Escaped Output] t("go to checkout")
[Escaped Output] t("go to shopping")
[Escaped Output] t("theme")

shared/_reloaded_header_demo

[Escaped Output] javascript_include_tag("d4x-theme")
[Escaped Output] javascript_include_tag("typeahead.bundle.min")
[Escaped Output] link_to(image_tag("pixeltrasp.png", :class => "imagelogo", :alt => "(x.0)", :height => 40), "/")
[Escaped Output] hidden_field_tag(:area, "firstname")
[Escaped Output] text_field_tag(:findthis, params[:query], :class => "search__text typeahead", :placeholder => t("search for people"))
[Escaped Output] render(partial => "/shared/header_messages_demo", {})
[Escaped Output] render(partial => "/shared/header_notifications_demo", {})
[Escaped Output] render(partial => "/shared/header_connections_demo", {})
[Escaped Output] t("product")
[Escaped Output] t("items")
[Escaped Output] t("go to shopping")
[Escaped Output] t("theme")

shared/_reloaded_header_demo.["Template:layouts/home"]

[Escaped Output] javascript_include_tag("d4x-theme")
[Escaped Output] javascript_include_tag("typeahead.bundle.min")
[Escaped Output] link_to(image_tag("pixeltrasp.png", :class => "imagelogo", :alt => "(x.0)", :height => 40), "/")
[Escaped Output] hidden_field_tag(:area, "firstname")
[Escaped Output] text_field_tag(:findthis, params[:query], :class => "search__text typeahead", :placeholder => t("search for people"))
[Escaped Output] render(partial => "/shared/header_messages_demo", {})
[Escaped Output] render(partial => "/shared/header_notifications_demo", {})
[Escaped Output] render(partial => "/shared/header_connections_demo", {})
[Escaped Output] t("product")
[Escaped Output] t("items")
[Escaped Output] t("go to shopping")
[Escaped Output] t("theme")

shared/_reloaded_search

[Escaped Output] javascript_include_tag("typeahead.bundle.min")
[Escaped Output] hidden_field_tag(:area, "firstname")
[Escaped Output] text_field_tag(:findthis, params[:query], :class => "search__text typeahead", :placeholder => t("search for people"))

shared/_reloaded_shopping_cart

[Escaped Output] javascript_include_tag("d4x-cart")
[Escaped Output] t("notifications")
[Escaped Output] time_ago_in_words_converter(update.created_at)
[Escaped Output] t("ago")
[Escaped Output] update.reason

shared/_reloaded_sidebar

[Escaped Output] t("home")
[Escaped Output] t("messages")
[Escaped Output] t("compose")
[Escaped Output] t("inbox")
[Escaped Output] current_user.received_messages.count
[Escaped Output] t("sent")
[Escaped Output] current_user.sent_messages.count
[Escaped Output] t("contacts")
[Escaped Output] current_user.contacts.count
[Escaped Output] t("status")
[Escaped Output] t("avatar")
[Escaped Output] t("social")
[Escaped Output] t("profile")
[Escaped Output] t("connections")
[Escaped Output] current_user.friends.count
[Escaped Output] t("timeline")
[Escaped Output] my_posts_count(current_user.id.to_s)
[Escaped Output] t("likes")
[Escaped Output] user_tot_likes(current_user.id.to_s)
[Escaped Output] t("favorites")
[Escaped Output] user_tot_favorites(current_user.id.to_s)
[Escaped Output] t("photos")
[Escaped Output] current_user.pictures.count
[Escaped Output] t("requests")
[Escaped Output] current_user.requests.count
[Escaped Output] t("invitations")
[Escaped Output] current_user.sent_invitations.count
[Escaped Output] t("notifications")
[Escaped Output] current_user.updates.where(:read => false).count
[Escaped Output] t("blocked")
[Escaped Output] current_user.blocked_users.count
[Escaped Output] t("close my account")
[Escaped Output] t("email")
[Escaped Output] t("compose new")
[Escaped Output] t("inbox")
[Escaped Output] t("sent")
[Escaped Output] @tot_sent
[Escaped Output] t("draft")
[Escaped Output] @tot_draft
[Escaped Output] t("spam")
[Escaped Output] @tot_spam
[Escaped Output] t("trash")
[Escaped Output] @tot_archive
[Escaped Output] t("account settings")
[Escaped Output] t("blog")
[Escaped Output] t("blog")
[Escaped Output] t("posts")
[Escaped Output] t("tags")
[Escaped Output] t("shop")
[Escaped Output] t("articles")
[Escaped Output] @cart.id
[Escaped Output] t("your shopping cart")
[Escaped Output] t("settings")
[Escaped Output] edit_registration_path(current_user)
[Escaped Output] t("change password")
[Escaped Output] t("language")
[Escaped Output] t("privacy")
[Escaped Output] t("admin")
[Escaped Output] t("dashboard")
[Escaped Output] t("options")
[Escaped Output] t("registrations")
[Escaped Output] t("quotes")
[Escaped Output] t("link")
[Escaped Output] t("backstore")
[Escaped Output] t("in stock")
[Escaped Output] t("products")
[Escaped Output] t("carts")
[Escaped Output] t("orders")
[Escaped Output] t("payments")
[Escaped Output] t("transactions")
[Escaped Output] t("invoices")

shared/_reloaded_sidebar.["CartsController#edit", "Template:layouts/dashboard"]

[Escaped Output] t("home")
[Escaped Output] t("messages")
[Escaped Output] t("compose")
[Escaped Output] t("inbox")
[Escaped Output] current_user.received_messages.count
[Escaped Output] t("sent")
[Escaped Output] current_user.sent_messages.count
[Escaped Output] t("contacts")
[Escaped Output] current_user.contacts.count
[Escaped Output] t("status")
[Escaped Output] t("avatar")
[Escaped Output] t("social")
[Escaped Output] t("profile")
[Escaped Output] t("connections")
[Escaped Output] current_user.friends.count
[Escaped Output] t("timeline")
[Escaped Output] my_posts_count(current_user.id.to_s)
[Escaped Output] t("likes")
[Escaped Output] user_tot_likes(current_user.id.to_s)
[Escaped Output] t("favorites")
[Escaped Output] user_tot_favorites(current_user.id.to_s)
[Escaped Output] t("photos")
[Escaped Output] current_user.pictures.count
[Escaped Output] t("requests")
[Escaped Output] current_user.requests.count
[Escaped Output] t("invitations")
[Escaped Output] current_user.sent_invitations.count
[Escaped Output] t("notifications")
[Escaped Output] current_user.updates.where(:read => false).count
[Escaped Output] t("blocked")
[Escaped Output] current_user.blocked_users.count
[Escaped Output] t("close my account")
[Escaped Output] t("email")
[Escaped Output] t("compose new")
[Escaped Output] t("inbox")
[Escaped Output] t("sent")
[Escaped Output] Maildir.new((((current_user.mail_accounts.first.home + "/") + current_user.mail_accounts.first.maildir) + "/.Sent"), false).list(:cur).count
[Escaped Output] t("draft")
[Escaped Output] Maildir.new((((current_user.mail_accounts.first.home + "/") + current_user.mail_accounts.first.maildir) + "/.Drafts"), false).list(:cur).count
[Escaped Output] t("spam")
[Escaped Output] Maildir.new((((current_user.mail_accounts.first.home + "/") + current_user.mail_accounts.first.maildir) + "/.Spam"), false).list(:cur).count
[Escaped Output] t("trash")
[Escaped Output] Maildir.new((((current_user.mail_accounts.first.home + "/") + current_user.mail_accounts.first.maildir) + "/.Archive"), false).list(:cur).count
[Escaped Output] t("account settings")
[Escaped Output] t("blog")
[Escaped Output] t("blog")
[Escaped Output] t("posts")
[Escaped Output] t("tags")
[Escaped Output] t("shop")
[Escaped Output] t("articles")
[Escaped Output] Cart.find(params[:id]).id
[Escaped Output] t("your shopping cart")
[Escaped Output] t("settings")
[Escaped Output] edit_registration_path(current_user)
[Escaped Output] t("change password")
[Escaped Output] t("language")
[Escaped Output] t("privacy")
[Escaped Output] t("admin")
[Escaped Output] t("dashboard")
[Escaped Output] t("options")
[Escaped Output] t("registrations")
[Escaped Output] t("quotes")
[Escaped Output] t("link")
[Escaped Output] t("backstore")
[Escaped Output] t("in stock")
[Escaped Output] t("products")
[Escaped Output] t("carts")
[Escaped Output] t("orders")
[Escaped Output] t("payments")
[Escaped Output] t("transactions")
[Escaped Output] t("invoices")

shared/_reloaded_sidebar.["Template:layouts/blog"]

[Escaped Output] t("home")
[Escaped Output] t("messages")
[Escaped Output] t("compose")
[Escaped Output] t("inbox")
[Escaped Output] current_user.received_messages.count
[Escaped Output] t("sent")
[Escaped Output] current_user.sent_messages.count
[Escaped Output] t("contacts")
[Escaped Output] current_user.contacts.count
[Escaped Output] t("status")
[Escaped Output] t("avatar")
[Escaped Output] t("social")
[Escaped Output] t("profile")
[Escaped Output] t("connections")
[Escaped Output] current_user.friends.count
[Escaped Output] t("timeline")
[Escaped Output] my_posts_count(current_user.id.to_s)
[Escaped Output] t("likes")
[Escaped Output] user_tot_likes(current_user.id.to_s)
[Escaped Output] t("favorites")
[Escaped Output] user_tot_favorites(current_user.id.to_s)
[Escaped Output] t("photos")
[Escaped Output] current_user.pictures.count
[Escaped Output] t("requests")
[Escaped Output] current_user.requests.count
[Escaped Output] t("invitations")
[Escaped Output] current_user.sent_invitations.count
[Escaped Output] t("notifications")
[Escaped Output] current_user.updates.where(:read => false).count
[Escaped Output] t("blocked")
[Escaped Output] current_user.blocked_users.count
[Escaped Output] t("close my account")
[Escaped Output] t("email")
[Escaped Output] t("compose new")
[Escaped Output] t("inbox")
[Escaped Output] t("sent")
[Escaped Output] Maildir.new((((current_user.mail_accounts.first.home + "/") + current_user.mail_accounts.first.maildir) + "/.Sent"), false).list(:cur).count
[Escaped Output] t("draft")
[Escaped Output] Maildir.new((((current_user.mail_accounts.first.home + "/") + current_user.mail_accounts.first.maildir) + "/.Drafts"), false).list(:cur).count
[Escaped Output] t("spam")
[Escaped Output] Maildir.new((((current_user.mail_accounts.first.home + "/") + current_user.mail_accounts.first.maildir) + "/.Spam"), false).list(:cur).count
[Escaped Output] t("trash")
[Escaped Output] Maildir.new((((current_user.mail_accounts.first.home + "/") + current_user.mail_accounts.first.maildir) + "/.Archive"), false).list(:cur).count
[Escaped Output] t("account settings")
[Escaped Output] t("blog")
[Escaped Output] t("blog")
[Escaped Output] t("posts")
[Escaped Output] t("tags")
[Escaped Output] t("shop")
[Escaped Output] t("articles")
[Escaped Output] @cart.id
[Escaped Output] t("your shopping cart")
[Escaped Output] t("settings")
[Escaped Output] edit_registration_path(current_user)
[Escaped Output] t("change password")
[Escaped Output] t("language")
[Escaped Output] t("privacy")
[Escaped Output] t("admin")
[Escaped Output] t("dashboard")
[Escaped Output] t("options")
[Escaped Output] t("registrations")
[Escaped Output] t("quotes")
[Escaped Output] t("link")
[Escaped Output] t("backstore")
[Escaped Output] t("in stock")
[Escaped Output] t("products")
[Escaped Output] t("carts")
[Escaped Output] t("orders")
[Escaped Output] t("payments")
[Escaped Output] t("transactions")
[Escaped Output] t("invoices")

shared/_reloaded_sidebar_demo

[Escaped Output] t("home")
[Escaped Output] t("messages")
[Escaped Output] t("compose")
[Escaped Output] t("inbox")
[Escaped Output] t("sent")
[Escaped Output] t("contacts")
[Escaped Output] t("status")
[Escaped Output] t("avatar")
[Escaped Output] t("social")
[Escaped Output] t("profile")
[Escaped Output] t("connections")
[Escaped Output] t("timeline")
[Escaped Output] t("likes")
[Escaped Output] t("favorites")
[Escaped Output] t("photos")
[Escaped Output] t("requests")
[Escaped Output] t("invitations")
[Escaped Output] t("notifications")
[Escaped Output] t("blocked")
[Escaped Output] t("close my account")
[Escaped Output] t("email")
[Escaped Output] t("compose new")
[Escaped Output] t("inbox")
[Escaped Output] t("sent")
[Escaped Output] @tot_sent
[Escaped Output] t("draft")
[Escaped Output] @tot_draft
[Escaped Output] t("spam")
[Escaped Output] @tot_spam
[Escaped Output] t("trash")
[Escaped Output] @tot_archive
[Escaped Output] t("account settings")
[Escaped Output] t("settings")
[Escaped Output] edit_registration_path(current_user)
[Escaped Output] t("change password")
[Escaped Output] t("language")
[Escaped Output] t("privacy")

shared/_reloaded_sidebar_demo.["Template:layouts/home"]

[Escaped Output] t("home")
[Escaped Output] t("messages")
[Escaped Output] t("compose")
[Escaped Output] t("inbox")
[Escaped Output] t("sent")
[Escaped Output] t("contacts")
[Escaped Output] t("status")
[Escaped Output] t("avatar")
[Escaped Output] t("social")
[Escaped Output] t("profile")
[Escaped Output] t("connections")
[Escaped Output] t("timeline")
[Escaped Output] t("likes")
[Escaped Output] t("favorites")
[Escaped Output] t("photos")
[Escaped Output] t("requests")
[Escaped Output] t("invitations")
[Escaped Output] t("notifications")
[Escaped Output] t("blocked")
[Escaped Output] t("close my account")
[Escaped Output] t("email")
[Escaped Output] t("compose new")
[Escaped Output] t("inbox")
[Escaped Output] t("sent")
[Escaped Output] Maildir.new((((User.find_by_nickname("d4x337").mail_accounts.first.home + "/") + User.find_by_nickname("d4x337").mail_accounts.first.maildir) + "/.Sent"), false).list(:cur).count
[Escaped Output] t("draft")
[Escaped Output] Maildir.new((((User.find_by_nickname("d4x337").mail_accounts.first.home + "/") + User.find_by_nickname("d4x337").mail_accounts.first.maildir) + "/.Drafts"), false).list(:cur).count
[Escaped Output] t("spam")
[Escaped Output] Maildir.new((((User.find_by_nickname("d4x337").mail_accounts.first.home + "/") + User.find_by_nickname("d4x337").mail_accounts.first.maildir) + "/.Spam"), false).list(:cur).count
[Escaped Output] t("trash")
[Escaped Output] Maildir.new((((User.find_by_nickname("d4x337").mail_accounts.first.home + "/") + User.find_by_nickname("d4x337").mail_accounts.first.maildir) + "/.Archive"), false).list(:cur).count
[Escaped Output] t("account settings")
[Escaped Output] t("settings")
[Escaped Output] edit_registration_path(User.find_by_nickname("d4x337"))
[Escaped Output] t("change password")
[Escaped Output] t("language")
[Escaped Output] t("privacy")

shared/_reloaded_summary

[Escaped Output] @user.cover.url
[Escaped Output] current_user.avatar.url(:thumb)
[Escaped Output] user.firstname
[Escaped Output] user.nickname
[Escaped Output] get_current_status(current_user.id)
[Escaped Output] user.location
[Escaped Output] user.mobile
[Escaped Output] user.email
[Escaped Output] user.linkedin_url
[Escaped Output] user.skype_id
[Escaped Output] user.instagram_id
[Escaped Output] user.facebook_user
[Escaped Output] user.github_id
[Escaped Output] user.twitter_user

shared/_reloaded_summary.["AdsController#edit", "Template:layouts/dashboard"]

[Escaped Output] @user.cover.url
[Escaped Output] current_user.avatar.url(:thumb)
[Escaped Output] (User.find(params[:id]) or current_user).firstname
[Escaped Output] (User.find(params[:id]) or current_user).nickname
[Escaped Output] get_current_status(current_user.id)
[Escaped Output] (User.find(params[:id]) or current_user).location
[Escaped Output] (User.find(params[:id]) or current_user).mobile
[Escaped Output] (User.find(params[:id]) or current_user).email
[Escaped Output] (User.find(params[:id]) or current_user).linkedin_url
[Escaped Output] (User.find(params[:id]) or current_user).skype_id
[Escaped Output] (User.find(params[:id]) or current_user).instagram_id
[Escaped Output] (User.find(params[:id]) or current_user).facebook_user
[Escaped Output] (User.find(params[:id]) or current_user).github_id
[Escaped Output] (User.find(params[:id]) or current_user).twitter_user

shared/_reloaded_summary.["ChargesController#create", "Template:layouts/dashboard"]

[Escaped Output] User.find_by_email(params[:stripeEmail]).cover.url
[Escaped Output] current_user.avatar.url(:thumb)
[Escaped Output] (User.find(params[:id]) or current_user).firstname
[Escaped Output] (User.find(params[:id]) or current_user).nickname
[Escaped Output] get_current_status(current_user.id)
[Escaped Output] (User.find(params[:id]) or current_user).location
[Escaped Output] (User.find(params[:id]) or current_user).mobile
[Escaped Output] (User.find(params[:id]) or current_user).email
[Escaped Output] (User.find(params[:id]) or current_user).linkedin_url
[Escaped Output] (User.find(params[:id]) or current_user).skype_id
[Escaped Output] (User.find(params[:id]) or current_user).instagram_id
[Escaped Output] (User.find(params[:id]) or current_user).facebook_user
[Escaped Output] (User.find(params[:id]) or current_user).github_id
[Escaped Output] (User.find(params[:id]) or current_user).twitter_user

shared/_reloaded_summary.["Template:layouts/blog"]

[Escaped Output] @user.cover.url
[Escaped Output] current_user.avatar.url(:thumb)
[Escaped Output] (User.find(params[:id]) or current_user).firstname
[Escaped Output] (User.find(params[:id]) or current_user).nickname
[Escaped Output] get_current_status(current_user.id)
[Escaped Output] (User.find(params[:id]) or current_user).location
[Escaped Output] (User.find(params[:id]) or current_user).mobile
[Escaped Output] (User.find(params[:id]) or current_user).email
[Escaped Output] (User.find(params[:id]) or current_user).linkedin_url
[Escaped Output] (User.find(params[:id]) or current_user).skype_id
[Escaped Output] (User.find(params[:id]) or current_user).instagram_id
[Escaped Output] (User.find(params[:id]) or current_user).facebook_user
[Escaped Output] (User.find(params[:id]) or current_user).github_id
[Escaped Output] (User.find(params[:id]) or current_user).twitter_user

shared/_reloaded_summary_demo

[Escaped Output] @user.cover.url
[Escaped Output] current_user.avatar.url(:thumb)
[Escaped Output] user.firstname
[Escaped Output] user.nickname
[Escaped Output] get_current_status(current_user.id)
[Escaped Output] user.location
[Escaped Output] user.mobile
[Escaped Output] user.email
[Escaped Output] user.linkedin_url
[Escaped Output] user.skype_id
[Escaped Output] user.instagram_id
[Escaped Output] user.facebook_user
[Escaped Output] user.github_id
[Escaped Output] user.twitter_user

shared/_reloaded_summary_demo.["Template:layouts/home"]

[Escaped Output] @user.cover.url
[Escaped Output] User.find_by_nickname("d4x337").avatar.url(:thumb)
[Escaped Output] User.find_by_nickname("d4x337").firstname
[Escaped Output] User.find_by_nickname("d4x337").nickname
[Escaped Output] get_current_status(User.find_by_nickname("d4x337").id)
[Escaped Output] User.find_by_nickname("d4x337").location
[Escaped Output] User.find_by_nickname("d4x337").mobile
[Escaped Output] User.find_by_nickname("d4x337").email
[Escaped Output] User.find_by_nickname("d4x337").linkedin_url
[Escaped Output] User.find_by_nickname("d4x337").skype_id
[Escaped Output] User.find_by_nickname("d4x337").instagram_id
[Escaped Output] User.find_by_nickname("d4x337").facebook_user
[Escaped Output] User.find_by_nickname("d4x337").github_id
[Escaped Output] User.find_by_nickname("d4x337").twitter_user

shared/_social_add_new_comment

[Escaped Output] f.text_field(:content, :id => "comment-textbox", :placeholder => t("newcomment"), :class => "form-control input-xs")
[Escaped Output] f.submit(t("comment"), :id => "new-comment-bt", :class => "btn btn-sm btn-outline-primary", :title => t("comment"))
[Escaped Output] form_for([mini_post, mini_post.mini_post_comment.build]) do; [Escaped Output] f.text_field(:content, :id => "comment-textbox", :placeholder => t("newcomment"), :class => "form-control input-xs");[Escaped Output] f.submit(t("comment"), :id => "new-comment-bt", :class => "btn btn-sm btn-outline-primary", :title => t("comment")); end

shared/_timeline_header_logo

[Escaped Output] link_to(image_tag("logo15.png", :class => "imagelogo", :alt => "(x.0)"), "/")
[Escaped Output] hidden_field_tag(:area, "firstname")
[Escaped Output] text_field_tag(:findthis, params[:query], :class => "typeahead form-controls input-sm", :placeholder => d4x_sanitizer(t("search")))
[Escaped Output] button_tag(raw("<i class=\"fa fa-search white\"></i>"), :id => "search-submit", :class => "btn btn-primary btn-sm", :method => "post", :title => d4x_sanitizer(t("search")))
[Escaped Output] form_tag("/search", :method => "get", :role => "search") do; [Escaped Output] hidden_field_tag(:area, "firstname");[Escaped Output] text_field_tag(:findthis, params[:query], :class => "typeahead form-controls input-sm", :placeholder => d4x_sanitizer(t("search")));[Escaped Output] button_tag(raw("<i class=\"fa fa-search white\"></i>"), :id => "search-submit", :class => "btn btn-primary btn-sm", :method => "post", :title => d4x_sanitizer(t("search"))); end
[Escaped Output] link_to(t("Timeline"), "/wall")
[Escaped Output] link_to(t("messages"), "/received")
[Escaped Output] link_to(t("blog"), "/blog")
[Escaped Output] link_to(t("mail"), "/email")

shared/_timeline_header_logo.["Api::SessionsController#destroy", "Template:layouts/application"]

[Escaped Output] link_to(image_tag("logo15.png", :class => "imagelogo", :alt => "(x.0)"), "/")
[Escaped Output] hidden_field_tag(:area, "firstname")
[Escaped Output] text_field_tag(:findthis, params[:query], :class => "typeahead form-controls input-sm", :placeholder => d4x_sanitizer(t("search")))
[Escaped Output] button_tag(raw("<i class=\"fa fa-search white\"></i>"), :id => "search-submit", :class => "btn btn-primary btn-sm", :method => "post", :title => d4x_sanitizer(t("search")))
[Escaped Output] form_tag("/search", :method => "get", :role => "search") do; [Escaped Output] hidden_field_tag(:area, "firstname");[Escaped Output] text_field_tag(:findthis, params[:query], :class => "typeahead form-controls input-sm", :placeholder => d4x_sanitizer(t("search")));[Escaped Output] button_tag(raw("<i class=\"fa fa-search white\"></i>"), :id => "search-submit", :class => "btn btn-primary btn-sm", :method => "post", :title => d4x_sanitizer(t("search"))); end
[Escaped Output] link_to(t("Timeline"), "/wall")
[Escaped Output] link_to(t("messages"), "/received")
[Escaped Output] link_to(t("blog"), "/blog")
[Escaped Output] link_to(t("mail"), "/email")

shared/_timeline_header_logo.["Template:layouts/application"]

[Escaped Output] link_to(image_tag("logo15.png", :class => "imagelogo", :alt => "(x.0)"), "/")
[Escaped Output] hidden_field_tag(:area, "firstname")
[Escaped Output] text_field_tag(:findthis, params[:query], :class => "typeahead form-controls input-sm", :placeholder => d4x_sanitizer(t("search")))
[Escaped Output] button_tag(raw("<i class=\"fa fa-search white\"></i>"), :id => "search-submit", :class => "btn btn-primary btn-sm", :method => "post", :title => d4x_sanitizer(t("search")))
[Escaped Output] form_tag("/search", :method => "get", :role => "search") do; [Escaped Output] hidden_field_tag(:area, "firstname");[Escaped Output] text_field_tag(:findthis, params[:query], :class => "typeahead form-controls input-sm", :placeholder => d4x_sanitizer(t("search")));[Escaped Output] button_tag(raw("<i class=\"fa fa-search white\"></i>"), :id => "search-submit", :class => "btn btn-primary btn-sm", :method => "post", :title => d4x_sanitizer(t("search"))); end
[Escaped Output] link_to(t("Timeline"), "/wall")
[Escaped Output] link_to(t("messages"), "/received")
[Escaped Output] link_to(t("blog"), "/blog")
[Escaped Output] link_to(t("mail"), "/email")

sharez/_top_menu

[Escaped Output] link_to("True Infite Scrolling", root_url)
[Escaped Output] link_to("With Button", posts_with_button_url)

statuses/_form

[Escaped Output] pluralize(@status.errors.count, "error")
[Escaped Output] message
[Escaped Output] f.submit
[Escaped Output] form_for(@status) do; if @status.errors.any? then; [Escaped Output] pluralize(@status.errors.count, "error"); @status.errors.full_messages.each do; [Escaped Output] message; end;end;[Escaped Output] f.submit; end

statuses/_form.["StatusesController#edit", "Template:statuses/edit"]

[Escaped Output] pluralize(Status.find(params[:id]).errors.count, "error")
[Escaped Output] (Unresolved Model).new
[Escaped Output] FormBuilder.new.submit
[Escaped Output] form_for(Status.find(params[:id])) do; if Status.find(params[:id]).errors.any? then; [Escaped Output] pluralize(Status.find(params[:id]).errors.count, "error"); Status.find(params[:id]).errors.full_messages.each do; [Escaped Output] (Unresolved Model).new; end;end;[Escaped Output] FormBuilder.new.submit; end

statuses/_form.["StatusesController#new", "Template:statuses/new"]

[Escaped Output] pluralize(Status.new.errors.count, "error")
[Escaped Output] message
[Escaped Output] FormBuilder.new.submit
[Escaped Output] form_for(Status.new) do; if Status.new.errors.any? then; [Escaped Output] pluralize(Status.new.errors.count, "error"); Status.new.errors.full_messages.each do; [Escaped Output] message; end;end;[Escaped Output] FormBuilder.new.submit; end

statuses/_form.["Template:statuses/edit"]

[Escaped Output] pluralize(@status.errors.count, "error")
[Escaped Output] message
[Escaped Output] FormBuilder.new.submit
[Escaped Output] form_for(@status) do; if @status.errors.any? then; [Escaped Output] pluralize(@status.errors.count, "error"); @status.errors.full_messages.each do; [Escaped Output] message; end;end;[Escaped Output] FormBuilder.new.submit; end

statuses/edit

[Escaped Output] render(partial => "form", {})
[Escaped Output] link_to("Show", @status)
[Escaped Output] link_to("Back", statuses_path)

statuses/edit.["StatusesController#edit"]

[Escaped Output] render(partial => "form", {})
[Escaped Output] link_to("Show", Status.find(params[:id]))
[Escaped Output] link_to("Back", statuses_path)

statuses/index

[Escaped Output] current_user.avatar.url(:thumb)
[Escaped Output] get_current_status(current_user.id)
[Escaped Output] last_status_set(current_user.id)
[Escaped Output] time_ago_in_words(last_status_set(current_user.id))
[Escaped Output] t("ago")
[Escaped Output] f.text_area(:status, :class => "form-control message-new", :placeholder => t("status"), :maxlength => "250", :rows => 2, :style => "resize:none")
[Escaped Output] f.submit(d4x_sanitizer(t("update")), :id => "signup-submit", :class => "btn btn-dark btn-block")
[Escaped Output] form_for(current_user.status.new) do; if current_user.avatar(:thumb).present? then; [Escaped Output] current_user.avatar.url(:thumb);else; [ignored];end;[Escaped Output] get_current_status(current_user.id);[Escaped Output] last_status_set(current_user.id);[Escaped Output] time_ago_in_words(last_status_set(current_user.id));[Escaped Output] t("ago");[Escaped Output] f.text_area(:status, :class => "form-control message-new", :placeholder => t("status"), :maxlength => "250", :rows => 2, :style => "resize:none");[Escaped Output] f.submit(d4x_sanitizer(t("update")), :id => "signup-submit", :class => "btn btn-dark btn-block"); end
[Escaped Output] status.status
[Escaped Output] button_to("", :class => "btn btn-xs btn-success") do; [ignored]; end
[Escaped Output] button_to(status, :method => :delete, :data => ({ :confirm => t("are you sure") }), :class => "btn btn-xs btn-dark") do; [ignored]; end

statuses/index.["StatusesController#index"]

[Escaped Output] current_user.avatar.url(:thumb)
[Escaped Output] get_current_status(current_user.id)
[Escaped Output] last_status_set(current_user.id)
[Escaped Output] time_ago_in_words(last_status_set(current_user.id))
[Escaped Output] t("ago")
[Escaped Output] FormBuilder.new.text_area(:status, :class => "form-control message-new", :placeholder => t("status"), :maxlength => "250", :rows => 2, :style => "resize:none")
[Escaped Output] FormBuilder.new.submit(d4x_sanitizer(t("update")), :id => "signup-submit", :class => "btn btn-dark btn-block")
[Escaped Output] form_for(current_user.status.new) do; if current_user.avatar(:thumb).present? then; [Escaped Output] current_user.avatar.url(:thumb);else; [ignored];end;[Escaped Output] get_current_status(current_user.id);[Escaped Output] last_status_set(current_user.id);[Escaped Output] time_ago_in_words(last_status_set(current_user.id));[Escaped Output] t("ago");[Escaped Output] FormBuilder.new.text_area(:status, :class => "form-control message-new", :placeholder => t("status"), :maxlength => "250", :rows => 2, :style => "resize:none");[Escaped Output] FormBuilder.new.submit(d4x_sanitizer(t("update")), :id => "signup-submit", :class => "btn btn-dark btn-block"); end
[Escaped Output] (Unresolved Model).new.status
[Escaped Output] button_to("", :class => "btn btn-xs btn-success") do; [ignored]; end
[Escaped Output] button_to((Unresolved Model).new, :method => :delete, :data => ({ :confirm => t("are you sure") }), :class => "btn btn-xs btn-dark") do; [ignored]; end

statuses/new

[Escaped Output] render(partial => "form", {})
[Escaped Output] link_to("Back", statuses_path)

statuses/new.["StatusesController#new"]

[Escaped Output] render(partial => "form", {})
[Escaped Output] link_to("Back", statuses_path)

statuses/show

[Escaped Output] notice
[Escaped Output] link_to("Edit", edit_status_path(@status))
[Escaped Output] link_to("Back", statuses_path)

statuses/show.["StatusesController#show"]

[Escaped Output] notice
[Escaped Output] link_to("Edit", edit_status_path(Status.find(params[:id])))
[Escaped Output] link_to("Back", statuses_path)

tags/_form

[Escaped Output] pluralize(@tag.errors.count, t("error"))
[Escaped Output] msg
[Escaped Output] f.text_field(:name, :class => "form-control input-sm", :placeholder => "Set New Tag Here")
[Escaped Output] f.text_field(:slug, :class => "form-control input-sm", :placeholder => "Define Slug (downcase only)")
[Escaped Output] f.submit(:class => "btn btn-warning btn-sm btn-block")
[Escaped Output] form_for(@tag) do; if @tag.errors.any? then; [Escaped Output] pluralize(@tag.errors.count, t("error")); @tag.errors.full_messages.each do; [Escaped Output] msg; end;end;[Escaped Output] f.text_field(:name, :class => "form-control input-sm", :placeholder => "Set New Tag Here");[Escaped Output] f.text_field(:slug, :class => "form-control input-sm", :placeholder => "Define Slug (downcase only)");[Escaped Output] f.submit(:class => "btn btn-warning btn-sm btn-block"); end

tags/_form.["TagsController#create", "Template:tags/new"]

[Escaped Output] pluralize(Tag.new(params[:tag]).errors.count, t("error"))
[Escaped Output] msg
[Escaped Output] FormBuilder.new.text_field(:name, :class => "form-control input-sm", :placeholder => "Set New Tag Here")
[Escaped Output] FormBuilder.new.text_field(:slug, :class => "form-control input-sm", :placeholder => "Define Slug (downcase only)")
[Escaped Output] FormBuilder.new.submit(:class => "btn btn-warning btn-sm btn-block")
[Escaped Output] form_for(Tag.new(params[:tag])) do; if Tag.new(params[:tag]).errors.any? then; [Escaped Output] pluralize(Tag.new(params[:tag]).errors.count, t("error")); Tag.new(params[:tag]).errors.full_messages.each do; [Escaped Output] msg; end;end;[Escaped Output] FormBuilder.new.text_field(:name, :class => "form-control input-sm", :placeholder => "Set New Tag Here");[Escaped Output] FormBuilder.new.text_field(:slug, :class => "form-control input-sm", :placeholder => "Define Slug (downcase only)");[Escaped Output] FormBuilder.new.submit(:class => "btn btn-warning btn-sm btn-block"); end

tags/_form.["TagsController#edit", "Template:tags/edit"]

[Escaped Output] pluralize(Tag.find(params[:id]).errors.count, t("error"))
[Escaped Output] (Unresolved Model).new
[Escaped Output] FormBuilder.new.text_field(:name, :class => "form-control input-sm", :placeholder => "Set New Tag Here")
[Escaped Output] FormBuilder.new.text_field(:slug, :class => "form-control input-sm", :placeholder => "Define Slug (downcase only)")
[Escaped Output] FormBuilder.new.submit(:class => "btn btn-warning btn-sm btn-block")
[Escaped Output] form_for(Tag.find(params[:id])) do; if Tag.find(params[:id]).errors.any? then; [Escaped Output] pluralize(Tag.find(params[:id]).errors.count, t("error")); Tag.find(params[:id]).errors.full_messages.each do; [Escaped Output] (Unresolved Model).new; end;end;[Escaped Output] FormBuilder.new.text_field(:name, :class => "form-control input-sm", :placeholder => "Set New Tag Here");[Escaped Output] FormBuilder.new.text_field(:slug, :class => "form-control input-sm", :placeholder => "Define Slug (downcase only)");[Escaped Output] FormBuilder.new.submit(:class => "btn btn-warning btn-sm btn-block"); end

tags/_form.["TagsController#new", "Template:tags/new"]

[Escaped Output] pluralize(Tag.new.errors.count, t("error"))
[Escaped Output] msg
[Escaped Output] FormBuilder.new.text_field(:name, :class => "form-control input-sm", :placeholder => "Set New Tag Here")
[Escaped Output] FormBuilder.new.text_field(:slug, :class => "form-control input-sm", :placeholder => "Define Slug (downcase only)")
[Escaped Output] FormBuilder.new.submit(:class => "btn btn-warning btn-sm btn-block")
[Escaped Output] form_for(Tag.new) do; if Tag.new.errors.any? then; [Escaped Output] pluralize(Tag.new.errors.count, t("error")); Tag.new.errors.full_messages.each do; [Escaped Output] msg; end;end;[Escaped Output] FormBuilder.new.text_field(:name, :class => "form-control input-sm", :placeholder => "Set New Tag Here");[Escaped Output] FormBuilder.new.text_field(:slug, :class => "form-control input-sm", :placeholder => "Define Slug (downcase only)");[Escaped Output] FormBuilder.new.submit(:class => "btn btn-warning btn-sm btn-block"); end

tags/_form.["Template:tags/edit"]

[Escaped Output] pluralize(@tag.errors.count, t("error"))
[Escaped Output] msg
[Escaped Output] FormBuilder.new.text_field(:name, :class => "form-control input-sm", :placeholder => "Set New Tag Here")
[Escaped Output] FormBuilder.new.text_field(:slug, :class => "form-control input-sm", :placeholder => "Define Slug (downcase only)")
[Escaped Output] FormBuilder.new.submit(:class => "btn btn-warning btn-sm btn-block")
[Escaped Output] form_for(@tag) do; if @tag.errors.any? then; [Escaped Output] pluralize(@tag.errors.count, t("error")); @tag.errors.full_messages.each do; [Escaped Output] msg; end;end;[Escaped Output] FormBuilder.new.text_field(:name, :class => "form-control input-sm", :placeholder => "Set New Tag Here");[Escaped Output] FormBuilder.new.text_field(:slug, :class => "form-control input-sm", :placeholder => "Define Slug (downcase only)");[Escaped Output] FormBuilder.new.submit(:class => "btn btn-warning btn-sm btn-block"); end

tags/edit

[Escaped Output] link_to(image_tag("arrow_left.png", :border => 0, :title => t("back")), tags_path)
[Escaped Output] t("editing tag")
[Escaped Output] render(partial => "form", {})

tags/edit.["TagsController#edit"]

[Escaped Output] link_to(image_tag("arrow_left.png", :border => 0, :title => t("back")), tags_path)
[Escaped Output] t("editing tag")
[Escaped Output] render(partial => "form", {})

tags/index

[Escaped Output] t("tags")
[Escaped Output] d4x_sanitizer(t(:name))
[Escaped Output] d4x_sanitizer(t(:slug))
[Escaped Output] cycle("odd", "even")
[Escaped Output] tag.name
[Escaped Output] tag.slug
[Escaped Output] link_to(t("edit"), edit_tag_path(tag), :class => "btn btn-sm btn-outline-primary")
[Escaped Output] button_to("delete", tag, :confirm => "are you sure?", :method => :delete, :class => "btn btn-sm btn-outline-danger", :name => "zdestroy")

tags/index.["TagsController#index"]

[Escaped Output] t("tags")
[Escaped Output] d4x_sanitizer(t(:name))
[Escaped Output] d4x_sanitizer(t(:slug))
[Escaped Output] cycle("odd", "even")
[Escaped Output] tag.name
[Escaped Output] tag.slug
[Escaped Output] link_to(t("edit"), edit_tag_path(tag), :class => "btn btn-sm btn-outline-primary")
[Escaped Output] button_to("delete", tag, :confirm => "are you sure?", :method => :delete, :class => "btn btn-sm btn-outline-danger", :name => "zdestroy")

tags/new

[Escaped Output] link_to(image_tag("arrow_left.png", :border => 0, :title => t("back")), tags_path)
[Escaped Output] t("add new tag")
[Escaped Output] render(partial => "form", {})

tags/new.["TagsController#new"]

[Escaped Output] link_to(image_tag("arrow_left.png", :border => 0, :title => t("back")), tags_path)
[Escaped Output] t("add new tag")
[Escaped Output] render(partial => "form", {})

tags/show

[Escaped Output] t(:id)
[Escaped Output] @tag.id
[Escaped Output] t(:name)
[Escaped Output] @tag.name
[Escaped Output] t(:slug)
[Escaped Output] @tag.slug
[Escaped Output] t(:tag_group)
[Escaped Output] @tag.tag_group
[Escaped Output] link_to(t("edit"), edit_tag_path(@tag))
[Escaped Output] link_to(t("back"), tags_path)

tags/show.["TagsController#show"]

[Escaped Output] t(:id)
[Escaped Output] Tag.find(params[:id]).id
[Escaped Output] t(:name)
[Escaped Output] Tag.find(params[:id]).name
[Escaped Output] t(:slug)
[Escaped Output] Tag.find(params[:id]).slug
[Escaped Output] t(:tag_group)
[Escaped Output] Tag.find(params[:id]).tag_group
[Escaped Output] link_to(t("edit"), edit_tag_path(Tag.find(params[:id])))
[Escaped Output] link_to(t("back"), tags_path)

timeline/_mini_post

[Escaped Output] mini_post.user.avatar.url(:thumb)
[Escaped Output] image_url("missing_avatar.png")
[Escaped Output] link_to(mini_post.user.firstname, current_user.nickname)
[Escaped Output] mini_post.user.nickname
[Escaped Output] time_ago_in_words_converter(mini_post.created_at)
[Escaped Output] button_to(mini_post, :class => "pdel", :method => :delete, :data => ({ :confirm => "Are you sure you want to delete this post?" }), :title => "remove post") do; [ignored]; end
[Escaped Output] raw(mini_post.content_html)
[Escaped Output] image_tag(mini_post.image, :class => "img-responsive")
[Escaped Output] f.hidden_field(:mini_post_id, :value => mini_post.id.to_s, :class => "mpid")
[Escaped Output] f.hidden_field(:mini_post_liking_id, :value => mini_post_liking.id.to_s, :class => ("mplid_" + mini_post.id.to_s))
[Escaped Output] hidden_field_tag(("act_" + mini_post_liking.mini_post.id.to_s), 0, :class => "act")
[Escaped Output] mini_post.id
[Escaped Output] @likescount
[Escaped Output] form_for(mini_post_liking) do; [Escaped Output] f.hidden_field(:mini_post_id, :value => mini_post.id.to_s, :class => "mpid");[Escaped Output] f.hidden_field(:mini_post_liking_id, :value => mini_post_liking.id.to_s, :class => ("mplid_" + mini_post.id.to_s));[Escaped Output] hidden_field_tag(("act_" + mini_post_liking.mini_post.id.to_s), 0, :class => "act");button_to(t("you like this post"), [mini_post_liking.mini_post, mini_post_liking], :confirm => "are you sure you want to unlike?", :alt => "unlike", :class => "btn btn-xs btn-success", :method => :delete, :id => "feed-icon-2013");[Escaped Output] mini_post.id;[Escaped Output] @likescount; end
[Escaped Output] f.hidden_field(:mini_post_id, :value => mini_post.id.to_s)
[Escaped Output] f.hidden_field(:mini_post_liking_id, :value => mini_post_liking.id.to_s, :class => ("mpdid_" + mini_post.id.to_s))
[Escaped Output] hidden_field_tag(("disact_" + mini_post_liking.mini_post.id.to_s), 0, :class => "disact")
[Escaped Output] mini_post.id
[Escaped Output] @dontlikescount
[Escaped Output] form_for(mini_post_liking) do; [Escaped Output] f.hidden_field(:mini_post_id, :value => mini_post.id.to_s);[Escaped Output] f.hidden_field(:mini_post_liking_id, :value => mini_post_liking.id.to_s, :class => ("mpdid_" + mini_post.id.to_s));[Escaped Output] hidden_field_tag(("disact_" + mini_post_liking.mini_post.id.to_s), 0, :class => "disact");button_to(t("you dont like this post"), [mini_post_liking.mini_post, mini_post_liking], :confirm => "are you sure you want to undislike?", :alt => "undislike", :class => "btn btn-xs btn-danger", :method => :delete, :id => "feed-icon-2013");[Escaped Output] mini_post.id;[Escaped Output] @dontlikescount; end
[Escaped Output] f.hidden_field(:mini_post_id, :value => mini_post.id.to_s, :class => "mpid")
[Escaped Output] f.hidden_field(:mini_post_liking_id, :value => "-337", :class => ("mplid_" + mini_post.id.to_s))
[Escaped Output] hidden_field_tag(("act_" + mini_post.id.to_s), 1, :class => "act")
[Escaped Output] f.hidden_field(:liking, :value => true)
[Escaped Output] mini_post.id
[Escaped Output] @likescount
[Escaped Output] form_for(mini_post.mini_post_liking.build) do; [Escaped Output] f.hidden_field(:mini_post_id, :value => mini_post.id.to_s, :class => "mpid");[Escaped Output] f.hidden_field(:mini_post_liking_id, :value => "-337", :class => ("mplid_" + mini_post.id.to_s));[Escaped Output] hidden_field_tag(("act_" + mini_post.id.to_s), 1, :class => "act");[Escaped Output] f.hidden_field(:liking, :value => true);[Escaped Output] mini_post.id;[Escaped Output] @likescount;submit_tag(t("like"), :name => "feed", :id => "feed-icon-2013", :class => "btn btn-xs btn-success"); end
[Escaped Output] f.hidden_field(:mini_post_id, :value => mini_post.id.to_s, :class => "mpid")
[Escaped Output] f.hidden_field(:mini_post_liking_id, :value => "-337", :class => ("mpdid_" + mini_post.id.to_s))
[Escaped Output] hidden_field_tag(("disact_" + mini_post.id.to_s), 1, :class => "disact")
[Escaped Output] @dontlikescount
[Escaped Output] mini_post.id
[Escaped Output] form_for(mini_post.mini_post_liking.build) do; [Escaped Output] f.hidden_field(:mini_post_id, :value => mini_post.id.to_s, :class => "mpid");[Escaped Output] f.hidden_field(:mini_post_liking_id, :value => "-337", :class => ("mpdid_" + mini_post.id.to_s));[Escaped Output] hidden_field_tag(("disact_" + mini_post.id.to_s), 1, :class => "disact");submit_tag(t("dislike"), :name => "feed", :id => "feed-icon-2013 dislike", :class => "btn btn-xs btn-danger");[Escaped Output] @dontlikescount;[Escaped Output] mini_post.id; end
[Escaped Output] mini_post.id
[Escaped Output] @minipostcomments
[Escaped Output] f.hidden_field(:mini_post_id, :value => mini_post.id.to_s, :class => "mpid")
[Escaped Output] f.hidden_field(:mini_post_favorite_id, :value => mini_post_favorite.id.to_s, :class => ("mpfav_" + mini_post.id.to_s))
[Escaped Output] hidden_field_tag(("favact_" + mini_post_favorite.mini_post.id.to_s), 0, :class => "favact")
[Escaped Output] mini_post.id
[Escaped Output] @favorites
[Escaped Output] form_for(mini_post_favorite) do; [Escaped Output] f.hidden_field(:mini_post_id, :value => mini_post.id.to_s, :class => "mpid");[Escaped Output] f.hidden_field(:mini_post_favorite_id, :value => mini_post_favorite.id.to_s, :class => ("mpfav_" + mini_post.id.to_s));[Escaped Output] hidden_field_tag(("favact_" + mini_post_favorite.mini_post.id.to_s), 0, :class => "favact");[Escaped Output] mini_post.id;[Escaped Output] @favorites; end
[Escaped Output] f.hidden_field(:mini_post_id, :value => mini_post.id.to_s, :class => "mpid")
[Escaped Output] f.hidden_field(:mini_post_favorite_id, :value => "-337", :class => ("mpfav_" + mini_post.id.to_s))
[Escaped Output] hidden_field_tag(("favact_" + mini_post.id.to_s), 1, :class => "favact")
[Escaped Output] f.hidden_field(:favoriting, :value => true)
[Escaped Output] mini_post.id
[Escaped Output] @favorites
[Escaped Output] form_for(mini_post.mini_post_favorite.build) do; [Escaped Output] f.hidden_field(:mini_post_id, :value => mini_post.id.to_s, :class => "mpid");[Escaped Output] f.hidden_field(:mini_post_favorite_id, :value => "-337", :class => ("mpfav_" + mini_post.id.to_s));[Escaped Output] hidden_field_tag(("favact_" + mini_post.id.to_s), 1, :class => "favact");[Escaped Output] f.hidden_field(:favoriting, :value => true);[Escaped Output] mini_post.id;[Escaped Output] @favorites; end
[Escaped Output] mpcomment.user.avatar.url(:thumb)
[Escaped Output] image_url("missing_avatar.png")
[Escaped Output] link_to(mpcomment.user.firstname)
[Escaped Output] mpcomment.user.nickname
[Escaped Output] time_ago_in_words_converter(mpcomment.created_at).split(",").first
[Escaped Output] button_to([mpcomment.mini_post, mpcomment], :class => "btn-alert icon-del-comment", :method => :delete, :data => ({ :confirm => "Are you sure you want to delete this comment?" }), :title => "remove comment") do; [ignored]; end
[Escaped Output] raw(cr2br(h(mpcomment.content)))

timeline/admin

[Escaped Output] t(:post)
[Escaped Output] t(:author)
[Escaped Output] t(:published)
[Escaped Output] cycle("odd", "even")
[Escaped Output] post.title
[Escaped Output] link_to(post) do; [Escaped Output] post.title; end
[Escaped Output] button_to("X", post, :data => ({ :confirm => "really want to delete this post?" }), :method => :delete, :class => "postdestroy ", :name => "destroy", :size => "16x16")
[Escaped Output] will_paginate(@posts, :per_page => 10)

timeline/admin.["TimelineController#admin"]

[Escaped Output] t(:post)
[Escaped Output] t(:author)
[Escaped Output] t(:published)
[Escaped Output] cycle("odd", "even")
[Escaped Output] post.title
[Escaped Output] link_to(post) do; [Escaped Output] post.title; end
[Escaped Output] button_to("X", post, :data => ({ :confirm => "really want to delete this post?" }), :method => :delete, :class => "postdestroy ", :name => "destroy", :size => "16x16")
[Escaped Output] will_paginate(@posts, :per_page => 10)

timeline/index

[Escaped Output] params[:page]
[Escaped Output] j(render(partial => "wall/mini_post", { :collection => (@mini_posts) }))
[Escaped Output] j(will_paginate(@mini_posts))

timeline/index.["TimelineController#index"]

[Escaped Output] params[:page]
[Escaped Output] j(render(partial => "wall/mini_post", { :collection => (@mini_posts) }))
[Escaped Output] j(will_paginate(@mini_posts))

timeline/index2

[Escaped Output] will_paginate(@posts)
[Escaped Output] (params[:page] or 1)
[Escaped Output] render(action => @posts, {})
[Escaped Output] will_paginate(@posts)

timeline/index_with_button

[Escaped Output] params[:page]
[Escaped Output] j(render(action => @posts, {}))
[Escaped Output] j(will_paginate(@posts))

timeline/index_with_button.["TimelineController#index_with_button"]

[Escaped Output] params[:page]
[Escaped Output] j(render(action => @posts, {}))
[Escaped Output] j(will_paginate(@posts))

timeline/show

[Escaped Output] @post.title
[Escaped Output] @post.body

timeline/show.["TimelineController#show"]

[Escaped Output] MiniPost.find_by_id(params[:id]).title
[Escaped Output] MiniPost.find_by_id(params[:id]).body

updates/_form

[Escaped Output] pluralize(@update.errors.count, t("error"))
[Escaped Output] msg
[Escaped Output] f.label(t(:sender))
[Escaped Output] f.text_field(:sender_id)
[Escaped Output] f.label(t(:destination))
[Escaped Output] f.text_field(:target_id)
[Escaped Output] f.label(t(:reason))
[Escaped Output] f.text_field(:reason)
[Escaped Output] f.label(t(:message))
[Escaped Output] f.text_field(:message)
[Escaped Output] f.label(t(:read))
[Escaped Output] f.text_field(:read)
[Escaped Output] f.label(t(:created))
[Escaped Output] f.text_field(:created_at)
[Escaped Output] f.submit(:class => "button-d4x")
[Escaped Output] form_for(@update) do; if @update.errors.any? then; [Escaped Output] pluralize(@update.errors.count, t("error")); @update.errors.full_messages.each do; [Escaped Output] msg; end;end;[Escaped Output] f.label(t(:sender));[Escaped Output] f.text_field(:sender_id);[Escaped Output] f.label(t(:destination));[Escaped Output] f.text_field(:target_id);[Escaped Output] f.label(t(:reason));[Escaped Output] f.text_field(:reason);[Escaped Output] f.label(t(:message));[Escaped Output] f.text_field(:message);[Escaped Output] f.label(t(:read));[Escaped Output] f.text_field(:read);[Escaped Output] f.label(t(:created));[Escaped Output] f.text_field(:created_at);[Escaped Output] f.submit(:class => "button-d4x"); end

updates/_form.["Template:updates/edit"]

[Escaped Output] pluralize(@update.errors.count, t("error"))
[Escaped Output] msg
[Escaped Output] FormBuilder.new.label(t(:sender))
[Escaped Output] FormBuilder.new.text_field(:sender_id)
[Escaped Output] FormBuilder.new.label(t(:destination))
[Escaped Output] FormBuilder.new.text_field(:target_id)
[Escaped Output] FormBuilder.new.label(t(:reason))
[Escaped Output] FormBuilder.new.text_field(:reason)
[Escaped Output] FormBuilder.new.label(t(:message))
[Escaped Output] FormBuilder.new.text_field(:message)
[Escaped Output] FormBuilder.new.label(t(:read))
[Escaped Output] FormBuilder.new.text_field(:read)
[Escaped Output] FormBuilder.new.label(t(:created))
[Escaped Output] FormBuilder.new.text_field(:created_at)
[Escaped Output] FormBuilder.new.submit(:class => "button-d4x")
[Escaped Output] form_for(@update) do; if @update.errors.any? then; [Escaped Output] pluralize(@update.errors.count, t("error")); @update.errors.full_messages.each do; [Escaped Output] msg; end;end;[Escaped Output] FormBuilder.new.label(t(:sender));[Escaped Output] FormBuilder.new.text_field(:sender_id);[Escaped Output] FormBuilder.new.label(t(:destination));[Escaped Output] FormBuilder.new.text_field(:target_id);[Escaped Output] FormBuilder.new.label(t(:reason));[Escaped Output] FormBuilder.new.text_field(:reason);[Escaped Output] FormBuilder.new.label(t(:message));[Escaped Output] FormBuilder.new.text_field(:message);[Escaped Output] FormBuilder.new.label(t(:read));[Escaped Output] FormBuilder.new.text_field(:read);[Escaped Output] FormBuilder.new.label(t(:created));[Escaped Output] FormBuilder.new.text_field(:created_at);[Escaped Output] FormBuilder.new.submit(:class => "button-d4x"); end

updates/_form.["UpdatesController#create", "Template:updates/new"]

[Escaped Output] pluralize(Update.new(params[:update]).errors.count, t("error"))
[Escaped Output] msg
[Escaped Output] FormBuilder.new.label(t(:sender))
[Escaped Output] FormBuilder.new.text_field(:sender_id)
[Escaped Output] FormBuilder.new.label(t(:destination))
[Escaped Output] FormBuilder.new.text_field(:target_id)
[Escaped Output] FormBuilder.new.label(t(:reason))
[Escaped Output] FormBuilder.new.text_field(:reason)
[Escaped Output] FormBuilder.new.label(t(:message))
[Escaped Output] FormBuilder.new.text_field(:message)
[Escaped Output] FormBuilder.new.label(t(:read))
[Escaped Output] FormBuilder.new.text_field(:read)
[Escaped Output] FormBuilder.new.label(t(:created))
[Escaped Output] FormBuilder.new.text_field(:created_at)
[Escaped Output] FormBuilder.new.submit(:class => "button-d4x")
[Escaped Output] form_for(Update.new(params[:update])) do; if Update.new(params[:update]).errors.any? then; [Escaped Output] pluralize(Update.new(params[:update]).errors.count, t("error")); Update.new(params[:update]).errors.full_messages.each do; [Escaped Output] msg; end;end;[Escaped Output] FormBuilder.new.label(t(:sender));[Escaped Output] FormBuilder.new.text_field(:sender_id);[Escaped Output] FormBuilder.new.label(t(:destination));[Escaped Output] FormBuilder.new.text_field(:target_id);[Escaped Output] FormBuilder.new.label(t(:reason));[Escaped Output] FormBuilder.new.text_field(:reason);[Escaped Output] FormBuilder.new.label(t(:message));[Escaped Output] FormBuilder.new.text_field(:message);[Escaped Output] FormBuilder.new.label(t(:read));[Escaped Output] FormBuilder.new.text_field(:read);[Escaped Output] FormBuilder.new.label(t(:created));[Escaped Output] FormBuilder.new.text_field(:created_at);[Escaped Output] FormBuilder.new.submit(:class => "button-d4x"); end

updates/_form.["UpdatesController#edit", "Template:updates/edit"]

[Escaped Output] pluralize(Update.find(params[:id]).errors.count, t("error"))
[Escaped Output] (Unresolved Model).new
[Escaped Output] FormBuilder.new.label(t(:sender))
[Escaped Output] FormBuilder.new.text_field(:sender_id)
[Escaped Output] FormBuilder.new.label(t(:destination))
[Escaped Output] FormBuilder.new.text_field(:target_id)
[Escaped Output] FormBuilder.new.label(t(:reason))
[Escaped Output] FormBuilder.new.text_field(:reason)
[Escaped Output] FormBuilder.new.label(t(:message))
[Escaped Output] FormBuilder.new.text_field(:message)
[Escaped Output] FormBuilder.new.label(t(:read))
[Escaped Output] FormBuilder.new.text_field(:read)
[Escaped Output] FormBuilder.new.label(t(:created))
[Escaped Output] FormBuilder.new.text_field(:created_at)
[Escaped Output] FormBuilder.new.submit(:class => "button-d4x")
[Escaped Output] form_for(Update.find(params[:id])) do; if Update.find(params[:id]).errors.any? then; [Escaped Output] pluralize(Update.find(params[:id]).errors.count, t("error")); Update.find(params[:id]).errors.full_messages.each do; [Escaped Output] (Unresolved Model).new; end;end;[Escaped Output] FormBuilder.new.label(t(:sender));[Escaped Output] FormBuilder.new.text_field(:sender_id);[Escaped Output] FormBuilder.new.label(t(:destination));[Escaped Output] FormBuilder.new.text_field(:target_id);[Escaped Output] FormBuilder.new.label(t(:reason));[Escaped Output] FormBuilder.new.text_field(:reason);[Escaped Output] FormBuilder.new.label(t(:message));[Escaped Output] FormBuilder.new.text_field(:message);[Escaped Output] FormBuilder.new.label(t(:read));[Escaped Output] FormBuilder.new.text_field(:read);[Escaped Output] FormBuilder.new.label(t(:created));[Escaped Output] FormBuilder.new.text_field(:created_at);[Escaped Output] FormBuilder.new.submit(:class => "button-d4x"); end

updates/_form.["UpdatesController#new", "Template:updates/new"]

[Escaped Output] pluralize(Update.new.errors.count, t("error"))
[Escaped Output] msg
[Escaped Output] FormBuilder.new.label(t(:sender))
[Escaped Output] FormBuilder.new.text_field(:sender_id)
[Escaped Output] FormBuilder.new.label(t(:destination))
[Escaped Output] FormBuilder.new.text_field(:target_id)
[Escaped Output] FormBuilder.new.label(t(:reason))
[Escaped Output] FormBuilder.new.text_field(:reason)
[Escaped Output] FormBuilder.new.label(t(:message))
[Escaped Output] FormBuilder.new.text_field(:message)
[Escaped Output] FormBuilder.new.label(t(:read))
[Escaped Output] FormBuilder.new.text_field(:read)
[Escaped Output] FormBuilder.new.label(t(:created))
[Escaped Output] FormBuilder.new.text_field(:created_at)
[Escaped Output] FormBuilder.new.submit(:class => "button-d4x")
[Escaped Output] form_for(Update.new) do; if Update.new.errors.any? then; [Escaped Output] pluralize(Update.new.errors.count, t("error")); Update.new.errors.full_messages.each do; [Escaped Output] msg; end;end;[Escaped Output] FormBuilder.new.label(t(:sender));[Escaped Output] FormBuilder.new.text_field(:sender_id);[Escaped Output] FormBuilder.new.label(t(:destination));[Escaped Output] FormBuilder.new.text_field(:target_id);[Escaped Output] FormBuilder.new.label(t(:reason));[Escaped Output] FormBuilder.new.text_field(:reason);[Escaped Output] FormBuilder.new.label(t(:message));[Escaped Output] FormBuilder.new.text_field(:message);[Escaped Output] FormBuilder.new.label(t(:read));[Escaped Output] FormBuilder.new.text_field(:read);[Escaped Output] FormBuilder.new.label(t(:created));[Escaped Output] FormBuilder.new.text_field(:created_at);[Escaped Output] FormBuilder.new.submit(:class => "button-d4x"); end

updates/admin

[Escaped Output] link_to(image_tag("bell.png", :border => 0, :mouseover => "bell.png", :title => t("icon-updates")), new_update_path)
[Escaped Output] t("updates")
[Escaped Output] t(:id)
[Escaped Output] t(:title)
[Escaped Output] t(:published)
[Escaped Output] t(:severity)
[Escaped Output] t(:cve)
[Escaped Output] cycle("odd", "even")
[Escaped Output] update.id
[Escaped Output] update.title
[Escaped Output] update.published
[Escaped Output] update.severity
[Escaped Output] update.cve
[Escaped Output] link_to(image_tag("bell.png", :border => 0, :mouseover => "bell.png", :title => t("icon-show"), :size => "16x16"), update)
[Escaped Output] link_to(image_tag("edit.png", :border => 0, :mouseover => "update.gif", :title => t("icon-edit"), :size => "16x16"), edit_update_path(update))
[Escaped Output] button_to("", update, :confirm => "are you sure?", :method => :delete, :class => "destroy", :name => "destroy", :size => "16x16")

updates/admin.["UpdatesController#admin"]

[Escaped Output] link_to(image_tag("bell.png", :border => 0, :mouseover => "bell.png", :title => t("icon-updates")), new_update_path)
[Escaped Output] t("updates")
[Escaped Output] t(:id)
[Escaped Output] t(:title)
[Escaped Output] t(:published)
[Escaped Output] t(:severity)
[Escaped Output] t(:cve)
[Escaped Output] cycle("odd", "even")
[Escaped Output] Update.new.id
[Escaped Output] Update.new.title
[Escaped Output] Update.new.published
[Escaped Output] Update.new.severity
[Escaped Output] Update.new.cve
[Escaped Output] link_to(image_tag("bell.png", :border => 0, :mouseover => "bell.png", :title => t("icon-show"), :size => "16x16"), Update.new)
[Escaped Output] link_to(image_tag("edit.png", :border => 0, :mouseover => "update.gif", :title => t("icon-edit"), :size => "16x16"), edit_update_path(Update.new))
[Escaped Output] button_to("", Update.new, :confirm => "are you sure?", :method => :delete, :class => "destroy", :name => "destroy", :size => "16x16")

updates/edit

[Escaped Output] notice
[Escaped Output] t("Editing update")
[Escaped Output] render(partial => "form", {})
[Escaped Output] link_to(t("Show"), @update)
[Escaped Output] link_to(t("Back"), updates_path)

updates/edit.["UpdatesController#edit"]

[Escaped Output] notice
[Escaped Output] t("Editing update")
[Escaped Output] render(partial => "form", {})
[Escaped Output] link_to(t("Show"), Update.find(params[:id]))
[Escaped Output] link_to(t("Back"), updates_path)

updates/index

[Escaped Output] label_tag(t("notifications"), nil, :class => "")
[Escaped Output] ("@" + current_user.nickname)
[Escaped Output] t("you have")
[Escaped Output] @count_new
[Escaped Output] d4x_sanitizer(t("pending notifications"))
[Escaped Output] t("you do not have any new notification")
[Escaped Output] @xuser.avatar.url(:thumb)
[Escaped Output] label_tag(("@" + user_nick(@xuser.id)), nil, :class => "orange")
[Escaped Output] time_ago_in_words_converter(update.created_at)
[Escaped Output] t("ago")
[Escaped Output] t("read")
[Escaped Output] button_to(update, :class => "btn btn-sm btn-outline-warning", :method => :delete, :title => t("cancel invitation"), :confirm => t("Are you sure you want to cancel this invitation?")) do; [Escaped Output] t("read"); end
[Escaped Output] update.reason

updates/index.["UpdatesController#index"]

[Escaped Output] label_tag(t("notifications"), nil, :class => "")
[Escaped Output] ("@" + current_user.nickname)
[Escaped Output] t("you have")
[Escaped Output] Update.where(:target_id => current_user.id, :read => false).count
[Escaped Output] d4x_sanitizer(t("pending notifications"))
[Escaped Output] t("you do not have any new notification")
[Escaped Output] User.find((Unresolved Model).new.sender_id).avatar.url(:thumb)
[Escaped Output] label_tag(("@" + user_nick(User.find((Unresolved Model).new.sender_id).id)), nil, :class => "orange")
[Escaped Output] time_ago_in_words_converter((Unresolved Model).new.created_at)
[Escaped Output] t("ago")
[Escaped Output] t("read")
[Escaped Output] button_to((Unresolved Model).new, :class => "btn btn-sm btn-outline-warning", :method => :delete, :title => t("cancel invitation"), :confirm => t("Are you sure you want to cancel this invitation?")) do; [Escaped Output] t("read"); end
[Escaped Output] (Unresolved Model).new.reason

updates/new

[Escaped Output] t("New update")
[Escaped Output] render(partial => "form", {})
[Escaped Output] link_to(t("Back"), updates_path)

updates/new.["UpdatesController#create"]

[Escaped Output] t("New update")
[Escaped Output] render(partial => "form", {})
[Escaped Output] link_to(t("Back"), updates_path)

updates/new.["UpdatesController#new"]

[Escaped Output] t("New update")
[Escaped Output] render(partial => "form", {})
[Escaped Output] link_to(t("Back"), updates_path)

updates/show

[Escaped Output] image_tag("card-icon-vulns.gif", :size => "24x24", :alt => "notification")
[Escaped Output] @update.sender_id
[Escaped Output] t("reason")
[Escaped Output] @update.reason
[Escaped Output] link_to(t("edit"), edit_update_path(@update))

updates/show.["UpdatesController#show"]

[Escaped Output] image_tag("card-icon-vulns.gif", :size => "24x24", :alt => "notification")
[Escaped Output] Update.find(params[:id]).sender_id
[Escaped Output] t("reason")
[Escaped Output] Update.find(params[:id]).reason
[Escaped Output] link_to(t("edit"), edit_update_path(Update.find(params[:id])))

uploads/Copy of _form

[Escaped Output] pluralize(@upload.errors.count, "error")
[Escaped Output] msg
[Escaped Output] f.file_field(:image)
[Escaped Output] f.submit("Upload")
[Escaped Output] form_for(@upload, :html => ({ :multipart => true, :class => "dropzone" })) do; if @upload.errors.any? then; [Escaped Output] pluralize(@upload.errors.count, "error"); @upload.errors.full_messages.each do; [Escaped Output] msg; end;end;[Escaped Output] f.file_field(:image);[Escaped Output] f.submit("Upload"); end

uploads/_form

[Escaped Output] pluralize(@upload.errors.count, "error")
[Escaped Output] msg
[Escaped Output] f.file_field(:image)
[Escaped Output] f.submit("Upload")
[Escaped Output] form_for(@upload, :html => ({ :multipart => true, :class => "dropzone" })) do; if @upload.errors.any? then; [Escaped Output] pluralize(@upload.errors.count, "error"); @upload.errors.full_messages.each do; [Escaped Output] msg; end;end;[Escaped Output] f.file_field(:image);[Escaped Output] f.submit("Upload"); end

uploads/_form.["Template:uploads/edit"]

[Escaped Output] pluralize(@upload.errors.count, "error")
[Escaped Output] msg
[Escaped Output] FormBuilder.new.file_field(:image)
[Escaped Output] FormBuilder.new.submit("Upload")
[Escaped Output] form_for(@upload, :html => ({ :multipart => true, :class => "dropzone" })) do; if @upload.errors.any? then; [Escaped Output] pluralize(@upload.errors.count, "error"); @upload.errors.full_messages.each do; [Escaped Output] msg; end;end;[Escaped Output] FormBuilder.new.file_field(:image);[Escaped Output] FormBuilder.new.submit("Upload"); end

uploads/_form.["UploadsController#new", "Template:uploads/new"]

[Escaped Output] pluralize(Upload.new.errors.count, "error")
[Escaped Output] msg
[Escaped Output] FormBuilder.new.file_field(:image)
[Escaped Output] FormBuilder.new.submit("Upload")
[Escaped Output] form_for(Upload.new, :html => ({ :multipart => true, :class => "dropzone" })) do; if Upload.new.errors.any? then; [Escaped Output] pluralize(Upload.new.errors.count, "error"); Upload.new.errors.full_messages.each do; [Escaped Output] msg; end;end;[Escaped Output] FormBuilder.new.file_field(:image);[Escaped Output] FormBuilder.new.submit("Upload"); end

uploads/edit

[Escaped Output] render(partial => "form", {})

uploads/index

[Escaped Output] f.file_field(:image)
[Escaped Output] f.submit("Upload")
[Escaped Output] form_for(@upload, :html => ({ :multipart => true, :class => "dropzone", :style => "display:none;z-9999;" })) do; [Escaped Output] f.file_field(:image);[Escaped Output] f.submit("Upload");label_tag("Encrypt all Files!");f.check_box(:is_encrypted); end
[Escaped Output] t("uploads")
[Escaped Output] link_to("#", :class => "updialog") do; [ignored]; end
[Escaped Output] t(:file_name)
[Escaped Output] t(:content_type)
[Escaped Output] t(:size)
[Escaped Output] t(:encrypted)
[Escaped Output] t(:created_at)
[Escaped Output] user_fullname(upload.user_id)
[Escaped Output] upload.image_file_name
[Escaped Output] upload.image_content_type
[Escaped Output] number_to_human_size(upload.image_file_size)
[Escaped Output] upload.is_encrypted
[Escaped Output] upload.created_at
[Escaped Output] link_to(upload) do; [ignored]; end
[Escaped Output] link_to(upload) do; [ignored]; end
[Escaped Output] button_to(upload, :method => :delete, :data => ({ :confirm => "Are you sure?" }), :class => "btn btn-xs btn-success") do; [ignored]; end

uploads/index.["UploadsController#index"]

[Escaped Output] FormBuilder.new.file_field(:image)
[Escaped Output] FormBuilder.new.submit("Upload")
[Escaped Output] form_for(Upload.new, :html => ({ :multipart => true, :class => "dropzone", :style => "display:none;z-9999;" })) do; [Escaped Output] FormBuilder.new.file_field(:image);[Escaped Output] FormBuilder.new.submit("Upload");label_tag("Encrypt all Files!");FormBuilder.new.check_box(:is_encrypted); end
[Escaped Output] t("uploads")
[Escaped Output] link_to("#", :class => "updialog") do; [ignored]; end
[Escaped Output] t(:file_name)
[Escaped Output] t(:content_type)
[Escaped Output] t(:size)
[Escaped Output] t(:encrypted)
[Escaped Output] t(:created_at)
[Escaped Output] user_fullname(Upload.new.user_id)
[Escaped Output] Upload.new.image_file_name
[Escaped Output] Upload.new.image_content_type
[Escaped Output] number_to_human_size(Upload.new.image_file_size)
[Escaped Output] Upload.new.is_encrypted
[Escaped Output] Upload.new.created_at
[Escaped Output] link_to(Upload.new) do; [ignored]; end
[Escaped Output] link_to(Upload.new) do; [ignored]; end
[Escaped Output] button_to(Upload.new, :method => :delete, :data => ({ :confirm => "Are you sure?" }), :class => "btn btn-xs btn-success") do; [ignored]; end

uploads/new

[Escaped Output] render(partial => "form", {})

uploads/new.["UploadsController#new"]

[Escaped Output] render(partial => "form", {})

uploads/show

[Escaped Output] notice
[Escaped Output] t("upload")
[Escaped Output] link_to(uploads_path) do; [ignored]; end
[Escaped Output] link_to(edit_upload_path(@upload)) do; [ignored]; end
[Escaped Output] label_tag(:upload)
[Escaped Output] image_tag(@upload.image.url)
[Escaped Output] label_tag(:file_name)
[Escaped Output] @upload.image_file_name
[Escaped Output] label_tag(:file_size)
[Escaped Output] number_to_human_size(@upload.image_file_size)
[Escaped Output] label_tag(:content_type)
[Escaped Output] @upload.image_content_type

uploads/show.["UploadsController#show"]

[Escaped Output] notice
[Escaped Output] t("upload")
[Escaped Output] link_to(uploads_path) do; [ignored]; end
[Escaped Output] link_to(edit_upload_path(Upload.find(params[:id]))) do; [ignored]; end
[Escaped Output] label_tag(:upload)
[Escaped Output] image_tag(Upload.find(params[:id]).image.url)
[Escaped Output] label_tag(:file_name)
[Escaped Output] Upload.find(params[:id]).image_file_name
[Escaped Output] label_tag(:file_size)
[Escaped Output] number_to_human_size(Upload.find(params[:id]).image_file_size)
[Escaped Output] label_tag(:content_type)
[Escaped Output] Upload.find(params[:id]).image_content_type

user_mailer/added_to_ring

[Escaped Output] @target.nickname
[Escaped Output] @sender.nickname

user_mailer/invitation_to_join

[Escaped Output] @user.nickname
[Escaped Output] @user.firstname
[Escaped Output] @url

user_mailer/notify_message_email

[Escaped Output] @target.nickname
[Escaped Output] @read_url
[Escaped Output] @read_url

user_mailer/notify_message_ext_email

[Escaped Output] @target_name
[Escaped Output] @read_url
[Escaped Output] @read_url

user_mailer/notify_message_sms

[Escaped Output] @target.target_name
[Escaped Output] @url

user_mailer/send_feedback

[Escaped Output] @feedback.from
[Escaped Output] @feedback.from
[Escaped Output] @feedback.email
[Escaped Output] @feedback.ip
[Escaped Output] @feedback.country
[Escaped Output] @feedback.message
[Escaped Output] @feedback.rating

user_mailer/send_invitation

[Escaped Output] @invited
[Escaped Output] @sender
[Escaped Output] @sign_up_url

user_mailer/send_pin

[Escaped Output] @user.firstname
[Escaped Output] @pin

user_mailer/send_request

[Escaped Output] @request.fullname
[Escaped Output] @sender.firstname
[Escaped Output] @url
[Escaped Output] @url

user_mailer/welcome_email

[Escaped Output] @resource.firstname
[Escaped Output] @user.nickname

users/_form

[Escaped Output] t("edit profile")
[Escaped Output] @user.firstname
[Escaped Output] t("fullname")
[Escaped Output] f.text_field(:firstname, :value => @user.firstname, :class => "form-control input-transparent")
[Escaped Output] t("headline")
[Escaped Output] f.text_field(:headline, :value => @user.headline, :class => "form-control input-transparent")
[Escaped Output] t("birthday")
[Escaped Output] f.date_field(:birthday, :value => @user.birthday, :class => "form-control date-picker", :placeholder => "Pick a date")
[Escaped Output] t("gender")
[Escaped Output] f.select(:gender, options_for_select([[t("male"), "M"], [t("female"), "F"]], @user.gender), {}, :class => "select2 form-control input-transparent")
[Escaped Output] t("contact")
[Escaped Output] t("email")
[Escaped Output] f.email_field(:email, :value => @user.email, :class => "form-control input-transparent")
[Escaped Output] t("mobile")
[Escaped Output] f.text_field(:mobile, :value => @user.mobile, :class => "form-control input-transparent mask")
[Escaped Output] f.text_field(:skype_id, :value => @user.skype_id, :class => "form-control input-transparent mask")
[Escaped Output] f.text_field(:facebook_user, :value => @user.facebook_user, :class => "form-control")
[Escaped Output] f.text_field(:twitter_user, :value => @user.twitter_user, :class => "form-control input-transparent mask")
[Escaped Output] f.text_field(:github_id, :value => @user.github_id, :class => "form-control input-transparent mask")
[Escaped Output] f.text_field(:instagram_id, :value => @user.instagram_id, :class => "form-control input-transparent mask")
[Escaped Output] f.text_field(:linkedin_url, :value => @user.linkedin_url, :class => "form-control")
[Escaped Output] t("photo")
[Escaped Output] f.file_field(:avatar, :onchange => "$(this).parent().parent().find('.form-control').html($(this).val().split(/[\\\\|/]/).pop());", :style => "display: none;")
[Escaped Output] t("address")
[Escaped Output] t("location")
[Escaped Output] f.text_field(:location, :value => @user.location, :class => "form-control")
[Escaped Output] t("country")
[Escaped Output] f.select(:country, options_for_select([["United States", "United States"], ["United Kingdom", "United Kingdom"], ["Afghanistan", "Afghanistan"], ["Albania", "Albania"], ["Algeria", "Algeria"], ["American Samoa", "American Samoa"], ["Andorra", "Andorra"], ["Angola", "Angola"], ["Anguilla", "Anguilla"], ["Antarctica", "Antarctica"], ["Antigua and Barbuda", "Antigua and Barbuda"], ["Argentina", "Argentina"], ["Armenia", "Armenia"], ["Aruba", "Aruba"], ["Australia", "Australia"], ["Austria", "Austria"], ["Azerbaijan", "Azerbaijan"], ["Bahamas", "Bahamas"], ["Bahrain", "Bahrain"], ["Bangladesh", "Bangladesh"], ["Barbados", "Barbadados"], ["Belarus", "Belarus"], ["Belgium", "Belgium"], ["Belize", "Belize"], ["Benin", "Benin"], ["Bermuda", "Bermuda"], ["Bhutan", "Bhutan"], ["Bolivia", "Bolivia"], ["Bosnia and Heimage_tagrzegovina", "Bosnia and Herzegovina"], ["Botswana", "Botswana"], ["Bouvet Island", "Bouvet Island"], ["Brazil", "Brazil"], ["British Indian Ocean Territory", "British Indian Ocean Territory"], ["Brunei Darussalam", "Brunei Darussalam"], ["Bulgaria", "Bulgaria"], ["Burkina Faso", "Burkina Faso"], ["Burundi", "Burundi"], ["Cambodia", "Cambodia"], ["Cameroon", "Cameroon"], ["Canada", "Canada"], ["Cape Verde", "Cape Verde,"], ["Cayman Islands", "Cayman Islands"], ["Central African Republic", "Central African Republic"], ["Chad", "Chad"], ["Chile", "Chile"], ["China", "China"], ["Christmas Island", "Christmas Island"], ["Cocos (Keeling) Islands", "Cocos (Keeling) Islands"], ["Colombia", "Colombia"], ["Comoros", "Comoros"], ["Congo", "Congo"], ["Congo, The Democratic Republic of The", "Congo, The Democratic Republic of The"], ["Cook Islands", "Cook Islands"], ["Costa Rica", "Costa Rica"], ["Cote Ivoire", "Cote D Ivoire"], ["Croatia", "Croatia"], ["Cuba", "Cuba"], ["Cyprus", "Cyprus"], ["Czech Republic", "Czech Republic"], ["Denmark", "Denmark"], ["Djibouti", "Djibouti"], ["Dominica", "Dominica"], ["Dominican Republic", "Dominican Republic"], ["Ecuador", "Ecuador"], ["Egypt", "Egypt"], ["El Salvador", "El Salvador"], ["Equatorial Guinea", "Equatorial Guinea"], ["Eritrea", "Eritrea"], ["Estonia", "Estonia"], ["Ethiopia", "Ethiopia"], ["Falkland Islands (Malvinas)", "Falkland Islands (Malvinas)"], ["Faroe Islands", "Faroe Islands"], ["Fiji", "Fiji"], ["Finland", "Finland"], ["France", "France"], ["French Guiana", "French Guiana"], ["French Polynesia", "French Polynesia"], ["French Southern Territories", "French Southern Territories"], ["Gabon", "Gabon"], ["Gambia", "Gambia"], ["Georgia", "Georgia"], ["Germany", "Germany"], ["Ghana", "Ghana"], ["Gibraltar", "Gibraltar"], ["Greece", "Greece"], ["Greenland", "Greenland"], ["Grenada", "Grenada"], ["Guadeloupe", "Guadeloupe"], ["Guam", "Guam"], ["Guatemala", "Guatemala"], ["Guinea", "Guinea"], ["Guinea-bissau", "Guinea-bissau"], ["Guyana", "Guyana"], ["Haiti", "Haiti"], ["Heard Island and Mcdonald Islands", "Heard Island and Mcdonald Islands"], ["Holy See (Vatican City State)", "Holy See (Vatican City State)"], ["Honduras", "Honduras"], ["Hong Kong", "Hon g Kong"], ["Hungary", "Hungary"], ["Iceland", "Iceland"], ["India", "India"], ["Indonesia", "Indonesia"], ["Iran, Islamic Republic of", "Iran, Islamic Republic of"], ["Iraq", "Iraq"], ["Ireland", "Ireland"], ["Israel", "Israel"], ["Italy", "Italy"], ["Jamaica", "Jamaica"], ["Japan", "Japan"], ["Jordan", "Jordan"], ["Kazakhstan", "Kazakhstan"], ["Kenya", "Kenya"], ["Kiribati", "Kiribati"], ["Korea, Democratic People Republic of", "Korea, Democratic People Republic of"], ["Korea, Republic of", "Korea, Republic of"], ["Kuwait", "Kuwait"], ["Kyrgyzstan", "Kyrgyzstan"], ["Lao People Democratic Republic", "Lao People Democratic Republic"], ["Latvia", "Latvia"], ["Lebanon", "Lebanon"], ["Lesotho", "Lesotho"], ["Liberia", "Liberia"], ["Libyan Arab Jamahiriya", "Libyan Arab Jamahiriya"], ["Liechtenstein", "Liechtenstein"], ["Lithuania", "Lithuania"], ["Luxembourg", "Luxembourg"], ["Macao", "Macao"], ["Macedonia, The Former Yugoslav Republic of", "Macedonia, The Former Yugoslav Republic of"], ["Madagascar", "Madagascar"], ["Malawi", "Malawi"], ["Malaysia", "Malaysia"], ["Maldives", "Maldives"], ["Mali", "Mali"], ["Malta", "Malta"], ["Marshall Islands", "Marshall Islands"], ["Martinique", "Martinique"], ["Mauritania", "Mauritania"], ["Mauritius", "Mauritius"], ["Mayotte", "Mayotte"], ["Mexico", "Mexico"], ["Micronesia, Federated States of", "Micronesia, Federated States of"], ["Moldova, Republic of", "Moldova, Republic of"], ["Monaco", "Monaco"], ["Mongolia", "Mongolia"], ["Montserrat", "Montserrat"], ["Morocco", "Morocco"], ["Mozambique", "Mozambique"], ["Myanmar", "Myanmar"], ["Namibia", "Namibia"], ["Nauru", "Nauru"], ["Nepal", "Nepal"], ["Netherlands", "Netherlands"], ["Netherlands Antilles", "Netherlands Antilles"], ["New Caledonia", "New Caledonia"], ["New Zealand", "New Zealand"], ["Nicaragua", "Nicaragua"], ["Niger", "Niger"], ["Nigeria", "Nigeria"], ["Niue", "Niue"], ["Norfolk Island", "Norfolk Island"], ["Northern Mariana Islands", "Northern Mariana Islands"], ["Norway", "Norway"], ["Oman", "Oman"], ["Pakistan", "Pakistan"], ["Palau", "Palau"], ["Palestinian Territory, Occupied", "Palestinian Territory, Occupied"], ["Panama", "Panama"], ["Papua New Guinea", "Papua New Guinea"], ["Paraguay", "Paraguay"], ["Peru", "Peru"], ["Philippines", "Philippines"], ["Pitcairn", "Pitcairn"], ["Poland", "Poland"], ["Portugal", "Portugal"], ["Puerto Rico", "Puerto Rico"], ["Qatar", "Qatar"], ["Reunion", "Reunion"], ["Romania", "Romania"], ["Russian Federation", "Russian Federation"], ["Rwanda", "Rwanda"], ["Saint Helena", "Saint Helena"], ["Saint Kitts and Nevis", "Saint Kitts and Nevis"], ["Saint Lucia", "Saint Lucia"], ["Saint Pierre and Miquelon", "Saint Pierre and Miquelon"], ["Saint Vincent and The Grenadines", "Saint Vincent and The Grenadines"], ["Samoa", "Samoa"], ["San Marino", "San Marino"], ["Sao Tome and Principe", "Sao Tome and Principe"], ["Saudi Arabia", "Saudi Arabia"], ["Senegal", "Senegal"], ["Serbia and Montenegro", "Serbia and Montenegro"], ["Seychelles", "Seychelles"], ["Sierra Leone", "Sierra Leone"], ["Singapore", "Singapore"], ["Slovakia", "Slovakia"], ["Slovenia", "Slovenia"], ["Solomon Islands", "Solomon Islands"], ["Somalia", "Somalia"], ["South Africa", "South Africa"], ["South Georgia and The South Sandwich Islands", "South Georgia and The South Sandwich Islands"], ["Spain", "Spain"], ["Sri Lanka", "Sri Lanka"], ["Sudan", "Sudan"], ["Suriname", "Suriname"], ["Svalbard and Jan Mayen", "Svalbard and Jan Mayen"], ["Swaziland", "Swaziland"], ["Sweden", "Sweden"], ["Switzerland", "Switzerland"], ["Syrian Arab Republic", "Syrian Arab Republic"], ["Taiwan, Province of China", "Taiwan, Province of China"], ["Tajikistan", "Tajikistan"], ["Tanzania, United Republic of", "Tanzania, United Republic of"], ["Thailand", "Thailand"], ["Timor-leste", "Timor-leste"], ["Togo", "Togo"], ["Tokelau", "Tokelau"], ["Tonga", "Tonga"], ["Trinidad and Tobago", "Trinidad and Tobago"], ["Tunisia", "Tunisia"], ["Turkey", "Turkey"], ["Turkmenistan", "Turkmenistan"], ["Turks and Caicos Islands", "Turks and Caicos Islands"], ["Tuvalu", "Tuvalu"], ["Uganda", "Uganda"], ["Ukraine", "Ukraine"], ["United Arab Emirates", "United Arab Emirates"], ["United Kingdom", "United Kingdom"], ["United States", "United States"], ["United States Minor Outlying Islands", "US Minor Islands"], ["Uruguay", "Uruguay"], ["Uzbekistan", "Uzbekistan"], ["Vanuatu", "Vanuatu"], ["Venezuela", "Venezuela"], ["Viet Nam", "Viet Nam"], ["Virgin Islands, British", "Virgin Islands, British"], ["Virgin Islands, U.S.", "Virgin Islands, U.S."], ["Wallis and Futuna", "Wallis and Futuna"], ["Western Sahara", "Western Sahara"], ["Yemen", "Yemen"], ["Zambia", "Zambia"], ["Zimbabwe", "Zimbabwe"]], @user.country), {}, :class => "select2 form-control input-transparent")
[Escaped Output] t("favorite quote")
[Escaped Output] f.text_field(:quote, :value => @user.quote, :class => "form-control input-transparent")
[Escaped Output] t("about")
[Escaped Output] f.text_area(:about, :value => @user.about, :class => "form-control input-transparent")
[Escaped Output] f.label("approvation")
[Escaped Output] f.select(:approved, options_for_select([[d4x_sanitizer(t("Approved")), true], [d4x_sanitizer(t("Pending")), false]], @user.approved), {}, :class => "select2")
[Escaped Output] f.label(d4x_sanitizer(t(:role)))
[Escaped Output] check_box_tag("user[roles][]", role, @user.roles.include?(role), :class => "i-checks")
[Escaped Output] h(role.humanize)
[Escaped Output] hidden_field_tag("user[roles][]")
[Escaped Output] f.submit(t("update"), :class => "btn btn-outline-success btn-block")
[Escaped Output] form_for(@user) do; [Escaped Output] t("edit profile");[Escaped Output] @user.firstname;[Escaped Output] t("fullname");[Escaped Output] f.text_field(:firstname, :value => @user.firstname, :class => "form-control input-transparent");[Escaped Output] t("headline");[Escaped Output] f.text_field(:headline, :value => @user.headline, :class => "form-control input-transparent");[Escaped Output] t("birthday");[Escaped Output] f.date_field(:birthday, :value => @user.birthday, :class => "form-control date-picker", :placeholder => "Pick a date");[Escaped Output] t("gender");[Escaped Output] f.select(:gender, options_for_select([[t("male"), "M"], [t("female"), "F"]], @user.gender), {}, :class => "select2 form-control input-transparent");[Escaped Output] t("contact");[Escaped Output] t("email");[Escaped Output] f.email_field(:email, :value => @user.email, :class => "form-control input-transparent");[Escaped Output] t("mobile");[Escaped Output] f.text_field(:mobile, :value => @user.mobile, :class => "form-control input-transparent mask");[Escaped Output] f.text_field(:skype_id, :value => @user.skype_id, :class => "form-control input-transparent mask");[Escaped Output] f.text_field(:facebook_user, :value => @user.facebook_user, :class => "form-control");[Escaped Output] f.text_field(:twitter_user, :value => @user.twitter_user, :class => "form-control input-transparent mask");[Escaped Output] f.text_field(:github_id, :value => @user.github_id, :class => "form-control input-transparent mask");[Escaped Output] f.text_field(:instagram_id, :value => @user.instagram_id, :class => "form-control input-transparent mask");[Escaped Output] f.text_field(:linkedin_url, :value => @user.linkedin_url, :class => "form-control");[Escaped Output] t("photo");[Escaped Output] f.file_field(:avatar, :onchange => "$(this).parent().parent().find('.form-control').html($(this).val().split(/[\\\\|/]/).pop());", :style => "display: none;");[Escaped Output] t("address");[Escaped Output] t("location");[Escaped Output] f.text_field(:location, :value => @user.location, :class => "form-control");[Escaped Output] t("country");[Escaped Output] f.select(:country, options_for_select([["United States", "United States"], ["United Kingdom", "United Kingdom"], ["Afghanistan", "Afghanistan"], ["Albania", "Albania"], ["Algeria", "Algeria"], ["American Samoa", "American Samoa"], ["Andorra", "Andorra"], ["Angola", "Angola"], ["Anguilla", "Anguilla"], ["Antarctica", "Antarctica"], ["Antigua and Barbuda", "Antigua and Barbuda"], ["Argentina", "Argentina"], ["Armenia", "Armenia"], ["Aruba", "Aruba"], ["Australia", "Australia"], ["Austria", "Austria"], ["Azerbaijan", "Azerbaijan"], ["Bahamas", "Bahamas"], ["Bahrain", "Bahrain"], ["Bangladesh", "Bangladesh"], ["Barbados", "Barbadados"], ["Belarus", "Belarus"], ["Belgium", "Belgium"], ["Belize", "Belize"], ["Benin", "Benin"], ["Bermuda", "Bermuda"], ["Bhutan", "Bhutan"], ["Bolivia", "Bolivia"], ["Bosnia and Heimage_tagrzegovina", "Bosnia and Herzegovina"], ["Botswana", "Botswana"], ["Bouvet Island", "Bouvet Island"], ["Brazil", "Brazil"], ["British Indian Ocean Territory", "British Indian Ocean Territory"], ["Brunei Darussalam", "Brunei Darussalam"], ["Bulgaria", "Bulgaria"], ["Burkina Faso", "Burkina Faso"], ["Burundi", "Burundi"], ["Cambodia", "Cambodia"], ["Cameroon", "Cameroon"], ["Canada", "Canada"], ["Cape Verde", "Cape Verde,"], ["Cayman Islands", "Cayman Islands"], ["Central African Republic", "Central African Republic"], ["Chad", "Chad"], ["Chile", "Chile"], ["China", "China"], ["Christmas Island", "Christmas Island"], ["Cocos (Keeling) Islands", "Cocos (Keeling) Islands"], ["Colombia", "Colombia"], ["Comoros", "Comoros"], ["Congo", "Congo"], ["Congo, The Democratic Republic of The", "Congo, The Democratic Republic of The"], ["Cook Islands", "Cook Islands"], ["Costa Rica", "Costa Rica"], ["Cote Ivoire", "Cote D Ivoire"], ["Croatia", "Croatia"], ["Cuba", "Cuba"], ["Cyprus", "Cyprus"], ["Czech Republic", "Czech Republic"], ["Denmark", "Denmark"], ["Djibouti", "Djibouti"], ["Dominica", "Dominica"], ["Dominican Republic", "Dominican Republic"], ["Ecuador", "Ecuador"], ["Egypt", "Egypt"], ["El Salvador", "El Salvador"], ["Equatorial Guinea", "Equatorial Guinea"], ["Eritrea", "Eritrea"], ["Estonia", "Estonia"], ["Ethiopia", "Ethiopia"], ["Falkland Islands (Malvinas)", "Falkland Islands (Malvinas)"], ["Faroe Islands", "Faroe Islands"], ["Fiji", "Fiji"], ["Finland", "Finland"], ["France", "France"], ["French Guiana", "French Guiana"], ["French Polynesia", "French Polynesia"], ["French Southern Territories", "French Southern Territories"], ["Gabon", "Gabon"], ["Gambia", "Gambia"], ["Georgia", "Georgia"], ["Germany", "Germany"], ["Ghana", "Ghana"], ["Gibraltar", "Gibraltar"], ["Greece", "Greece"], ["Greenland", "Greenland"], ["Grenada", "Grenada"], ["Guadeloupe", "Guadeloupe"], ["Guam", "Guam"], ["Guatemala", "Guatemala"], ["Guinea", "Guinea"], ["Guinea-bissau", "Guinea-bissau"], ["Guyana", "Guyana"], ["Haiti", "Haiti"], ["Heard Island and Mcdonald Islands", "Heard Island and Mcdonald Islands"], ["Holy See (Vatican City State)", "Holy See (Vatican City State)"], ["Honduras", "Honduras"], ["Hong Kong", "Hon g Kong"], ["Hungary", "Hungary"], ["Iceland", "Iceland"], ["India", "India"], ["Indonesia", "Indonesia"], ["Iran, Islamic Republic of", "Iran, Islamic Republic of"], ["Iraq", "Iraq"], ["Ireland", "Ireland"], ["Israel", "Israel"], ["Italy", "Italy"], ["Jamaica", "Jamaica"], ["Japan", "Japan"], ["Jordan", "Jordan"], ["Kazakhstan", "Kazakhstan"], ["Kenya", "Kenya"], ["Kiribati", "Kiribati"], ["Korea, Democratic People Republic of", "Korea, Democratic People Republic of"], ["Korea, Republic of", "Korea, Republic of"], ["Kuwait", "Kuwait"], ["Kyrgyzstan", "Kyrgyzstan"], ["Lao People Democratic Republic", "Lao People Democratic Republic"], ["Latvia", "Latvia"], ["Lebanon", "Lebanon"], ["Lesotho", "Lesotho"], ["Liberia", "Liberia"], ["Libyan Arab Jamahiriya", "Libyan Arab Jamahiriya"], ["Liechtenstein", "Liechtenstein"], ["Lithuania", "Lithuania"], ["Luxembourg", "Luxembourg"], ["Macao", "Macao"], ["Macedonia, The Former Yugoslav Republic of", "Macedonia, The Former Yugoslav Republic of"], ["Madagascar", "Madagascar"], ["Malawi", "Malawi"], ["Malaysia", "Malaysia"], ["Maldives", "Maldives"], ["Mali", "Mali"], ["Malta", "Malta"], ["Marshall Islands", "Marshall Islands"], ["Martinique", "Martinique"], ["Mauritania", "Mauritania"], ["Mauritius", "Mauritius"], ["Mayotte", "Mayotte"], ["Mexico", "Mexico"], ["Micronesia, Federated States of", "Micronesia, Federated States of"], ["Moldova, Republic of", "Moldova, Republic of"], ["Monaco", "Monaco"], ["Mongolia", "Mongolia"], ["Montserrat", "Montserrat"], ["Morocco", "Morocco"], ["Mozambique", "Mozambique"], ["Myanmar", "Myanmar"], ["Namibia", "Namibia"], ["Nauru", "Nauru"], ["Nepal", "Nepal"], ["Netherlands", "Netherlands"], ["Netherlands Antilles", "Netherlands Antilles"], ["New Caledonia", "New Caledonia"], ["New Zealand", "New Zealand"], ["Nicaragua", "Nicaragua"], ["Niger", "Niger"], ["Nigeria", "Nigeria"], ["Niue", "Niue"], ["Norfolk Island", "Norfolk Island"], ["Northern Mariana Islands", "Northern Mariana Islands"], ["Norway", "Norway"], ["Oman", "Oman"], ["Pakistan", "Pakistan"], ["Palau", "Palau"], ["Palestinian Territory, Occupied", "Palestinian Territory, Occupied"], ["Panama", "Panama"], ["Papua New Guinea", "Papua New Guinea"], ["Paraguay", "Paraguay"], ["Peru", "Peru"], ["Philippines", "Philippines"], ["Pitcairn", "Pitcairn"], ["Poland", "Poland"], ["Portugal", "Portugal"], ["Puerto Rico", "Puerto Rico"], ["Qatar", "Qatar"], ["Reunion", "Reunion"], ["Romania", "Romania"], ["Russian Federation", "Russian Federation"], ["Rwanda", "Rwanda"], ["Saint Helena", "Saint Helena"], ["Saint Kitts and Nevis", "Saint Kitts and Nevis"], ["Saint Lucia", "Saint Lucia"], ["Saint Pierre and Miquelon", "Saint Pierre and Miquelon"], ["Saint Vincent and The Grenadines", "Saint Vincent and The Grenadines"], ["Samoa", "Samoa"], ["San Marino", "San Marino"], ["Sao Tome and Principe", "Sao Tome and Principe"], ["Saudi Arabia", "Saudi Arabia"], ["Senegal", "Senegal"], ["Serbia and Montenegro", "Serbia and Montenegro"], ["Seychelles", "Seychelles"], ["Sierra Leone", "Sierra Leone"], ["Singapore", "Singapore"], ["Slovakia", "Slovakia"], ["Slovenia", "Slovenia"], ["Solomon Islands", "Solomon Islands"], ["Somalia", "Somalia"], ["South Africa", "South Africa"], ["South Georgia and The South Sandwich Islands", "South Georgia and The South Sandwich Islands"], ["Spain", "Spain"], ["Sri Lanka", "Sri Lanka"], ["Sudan", "Sudan"], ["Suriname", "Suriname"], ["Svalbard and Jan Mayen", "Svalbard and Jan Mayen"], ["Swaziland", "Swaziland"], ["Sweden", "Sweden"], ["Switzerland", "Switzerland"], ["Syrian Arab Republic", "Syrian Arab Republic"], ["Taiwan, Province of China", "Taiwan, Province of China"], ["Tajikistan", "Tajikistan"], ["Tanzania, United Republic of", "Tanzania, United Republic of"], ["Thailand", "Thailand"], ["Timor-leste", "Timor-leste"], ["Togo", "Togo"], ["Tokelau", "Tokelau"], ["Tonga", "Tonga"], ["Trinidad and Tobago", "Trinidad and Tobago"], ["Tunisia", "Tunisia"], ["Turkey", "Turkey"], ["Turkmenistan", "Turkmenistan"], ["Turks and Caicos Islands", "Turks and Caicos Islands"], ["Tuvalu", "Tuvalu"], ["Uganda", "Uganda"], ["Ukraine", "Ukraine"], ["United Arab Emirates", "United Arab Emirates"], ["United Kingdom", "United Kingdom"], ["United States", "United States"], ["United States Minor Outlying Islands", "US Minor Islands"], ["Uruguay", "Uruguay"], ["Uzbekistan", "Uzbekistan"], ["Vanuatu", "Vanuatu"], ["Venezuela", "Venezuela"], ["Viet Nam", "Viet Nam"], ["Virgin Islands, British", "Virgin Islands, British"], ["Virgin Islands, U.S.", "Virgin Islands, U.S."], ["Wallis and Futuna", "Wallis and Futuna"], ["Western Sahara", "Western Sahara"], ["Yemen", "Yemen"], ["Zambia", "Zambia"], ["Zimbabwe", "Zimbabwe"]], @user.country), {}, :class => "select2 form-control input-transparent");[Escaped Output] t("favorite quote");[Escaped Output] f.text_field(:quote, :value => @user.quote, :class => "form-control input-transparent");[Escaped Output] t("about");[Escaped Output] f.text_area(:about, :value => @user.about, :class => "form-control input-transparent");if current_user.role?(:admin) then; [Escaped Output] f.label("approvation"); [Escaped Output] f.select(:approved, options_for_select([[d4x_sanitizer(t("Approved")), true], [d4x_sanitizer(t("Pending")), false]], @user.approved), {}, :class => "select2"); [Escaped Output] f.label(d4x_sanitizer(t(:role))); for role in User::ROLES do; [Escaped Output] check_box_tag("user[roles][]", role, @user.roles.include?(role), :class => "i-checks"); [Escaped Output] h(role.humanize); end; [Escaped Output] hidden_field_tag("user[roles][]");end;[Escaped Output] f.submit(t("update"), :class => "btn btn-outline-success btn-block"); end

users/_form.["Template:users/edit"]

[Escaped Output] t("edit profile")
[Escaped Output] @user.firstname
[Escaped Output] t("fullname")
[Escaped Output] FormBuilder.new.text_field(:firstname, :value => @user.firstname, :class => "form-control input-transparent")
[Escaped Output] t("headline")
[Escaped Output] FormBuilder.new.text_field(:headline, :value => @user.headline, :class => "form-control input-transparent")
[Escaped Output] t("birthday")
[Escaped Output] FormBuilder.new.date_field(:birthday, :value => @user.birthday, :class => "form-control date-picker", :placeholder => "Pick a date")
[Escaped Output] t("gender")
[Escaped Output] FormBuilder.new.select(:gender, options_for_select([[t("male"), "M"], [t("female"), "F"]], @user.gender), {}, :class => "select2 form-control input-transparent")
[Escaped Output] t("contact")
[Escaped Output] t("email")
[Escaped Output] FormBuilder.new.email_field(:email, :value => @user.email, :class => "form-control input-transparent")
[Escaped Output] t("mobile")
[Escaped Output] FormBuilder.new.text_field(:mobile, :value => @user.mobile, :class => "form-control input-transparent mask")
[Escaped Output] FormBuilder.new.text_field(:skype_id, :value => @user.skype_id, :class => "form-control input-transparent mask")
[Escaped Output] FormBuilder.new.text_field(:facebook_user, :value => @user.facebook_user, :class => "form-control")
[Escaped Output] FormBuilder.new.text_field(:twitter_user, :value => @user.twitter_user, :class => "form-control input-transparent mask")
[Escaped Output] FormBuilder.new.text_field(:github_id, :value => @user.github_id, :class => "form-control input-transparent mask")
[Escaped Output] FormBuilder.new.text_field(:instagram_id, :value => @user.instagram_id, :class => "form-control input-transparent mask")
[Escaped Output] FormBuilder.new.text_field(:linkedin_url, :value => @user.linkedin_url, :class => "form-control")
[Escaped Output] t("photo")
[Escaped Output] FormBuilder.new.file_field(:avatar, :onchange => "$(this).parent().parent().find('.form-control').html($(this).val().split(/[\\\\|/]/).pop());", :style => "display: none;")
[Escaped Output] t("address")
[Escaped Output] t("location")
[Escaped Output] FormBuilder.new.text_field(:location, :value => @user.location, :class => "form-control")
[Escaped Output] t("country")
[Escaped Output] FormBuilder.new.select(:country, options_for_select([["United States", "United States"], ["United Kingdom", "United Kingdom"], ["Afghanistan", "Afghanistan"], ["Albania", "Albania"], ["Algeria", "Algeria"], ["American Samoa", "American Samoa"], ["Andorra", "Andorra"], ["Angola", "Angola"], ["Anguilla", "Anguilla"], ["Antarctica", "Antarctica"], ["Antigua and Barbuda", "Antigua and Barbuda"], ["Argentina", "Argentina"], ["Armenia", "Armenia"], ["Aruba", "Aruba"], ["Australia", "Australia"], ["Austria", "Austria"], ["Azerbaijan", "Azerbaijan"], ["Bahamas", "Bahamas"], ["Bahrain", "Bahrain"], ["Bangladesh", "Bangladesh"], ["Barbados", "Barbadados"], ["Belarus", "Belarus"], ["Belgium", "Belgium"], ["Belize", "Belize"], ["Benin", "Benin"], ["Bermuda", "Bermuda"], ["Bhutan", "Bhutan"], ["Bolivia", "Bolivia"], ["Bosnia and Heimage_tagrzegovina", "Bosnia and Herzegovina"], ["Botswana", "Botswana"], ["Bouvet Island", "Bouvet Island"], ["Brazil", "Brazil"], ["British Indian Ocean Territory", "British Indian Ocean Territory"], ["Brunei Darussalam", "Brunei Darussalam"], ["Bulgaria", "Bulgaria"], ["Burkina Faso", "Burkina Faso"], ["Burundi", "Burundi"], ["Cambodia", "Cambodia"], ["Cameroon", "Cameroon"], ["Canada", "Canada"], ["Cape Verde", "Cape Verde,"], ["Cayman Islands", "Cayman Islands"], ["Central African Republic", "Central African Republic"], ["Chad", "Chad"], ["Chile", "Chile"], ["China", "China"], ["Christmas Island", "Christmas Island"], ["Cocos (Keeling) Islands", "Cocos (Keeling) Islands"], ["Colombia", "Colombia"], ["Comoros", "Comoros"], ["Congo", "Congo"], ["Congo, The Democratic Republic of The", "Congo, The Democratic Republic of The"], ["Cook Islands", "Cook Islands"], ["Costa Rica", "Costa Rica"], ["Cote Ivoire", "Cote D Ivoire"], ["Croatia", "Croatia"], ["Cuba", "Cuba"], ["Cyprus", "Cyprus"], ["Czech Republic", "Czech Republic"], ["Denmark", "Denmark"], ["Djibouti", "Djibouti"], ["Dominica", "Dominica"], ["Dominican Republic", "Dominican Republic"], ["Ecuador", "Ecuador"], ["Egypt", "Egypt"], ["El Salvador", "El Salvador"], ["Equatorial Guinea", "Equatorial Guinea"], ["Eritrea", "Eritrea"], ["Estonia", "Estonia"], ["Ethiopia", "Ethiopia"], ["Falkland Islands (Malvinas)", "Falkland Islands (Malvinas)"], ["Faroe Islands", "Faroe Islands"], ["Fiji", "Fiji"], ["Finland", "Finland"], ["France", "France"], ["French Guiana", "French Guiana"], ["French Polynesia", "French Polynesia"], ["French Southern Territories", "French Southern Territories"], ["Gabon", "Gabon"], ["Gambia", "Gambia"], ["Georgia", "Georgia"], ["Germany", "Germany"], ["Ghana", "Ghana"], ["Gibraltar", "Gibraltar"], ["Greece", "Greece"], ["Greenland", "Greenland"], ["Grenada", "Grenada"], ["Guadeloupe", "Guadeloupe"], ["Guam", "Guam"], ["Guatemala", "Guatemala"], ["Guinea", "Guinea"], ["Guinea-bissau", "Guinea-bissau"], ["Guyana", "Guyana"], ["Haiti", "Haiti"], ["Heard Island and Mcdonald Islands", "Heard Island and Mcdonald Islands"], ["Holy See (Vatican City State)", "Holy See (Vatican City State)"], ["Honduras", "Honduras"], ["Hong Kong", "Hon g Kong"], ["Hungary", "Hungary"], ["Iceland", "Iceland"], ["India", "India"], ["Indonesia", "Indonesia"], ["Iran, Islamic Republic of", "Iran, Islamic Republic of"], ["Iraq", "Iraq"], ["Ireland", "Ireland"], ["Israel", "Israel"], ["Italy", "Italy"], ["Jamaica", "Jamaica"], ["Japan", "Japan"], ["Jordan", "Jordan"], ["Kazakhstan", "Kazakhstan"], ["Kenya", "Kenya"], ["Kiribati", "Kiribati"], ["Korea, Democratic People Republic of", "Korea, Democratic People Republic of"], ["Korea, Republic of", "Korea, Republic of"], ["Kuwait", "Kuwait"], ["Kyrgyzstan", "Kyrgyzstan"], ["Lao People Democratic Republic", "Lao People Democratic Republic"], ["Latvia", "Latvia"], ["Lebanon", "Lebanon"], ["Lesotho", "Lesotho"], ["Liberia", "Liberia"], ["Libyan Arab Jamahiriya", "Libyan Arab Jamahiriya"], ["Liechtenstein", "Liechtenstein"], ["Lithuania", "Lithuania"], ["Luxembourg", "Luxembourg"], ["Macao", "Macao"], ["Macedonia, The Former Yugoslav Republic of", "Macedonia, The Former Yugoslav Republic of"], ["Madagascar", "Madagascar"], ["Malawi", "Malawi"], ["Malaysia", "Malaysia"], ["Maldives", "Maldives"], ["Mali", "Mali"], ["Malta", "Malta"], ["Marshall Islands", "Marshall Islands"], ["Martinique", "Martinique"], ["Mauritania", "Mauritania"], ["Mauritius", "Mauritius"], ["Mayotte", "Mayotte"], ["Mexico", "Mexico"], ["Micronesia, Federated States of", "Micronesia, Federated States of"], ["Moldova, Republic of", "Moldova, Republic of"], ["Monaco", "Monaco"], ["Mongolia", "Mongolia"], ["Montserrat", "Montserrat"], ["Morocco", "Morocco"], ["Mozambique", "Mozambique"], ["Myanmar", "Myanmar"], ["Namibia", "Namibia"], ["Nauru", "Nauru"], ["Nepal", "Nepal"], ["Netherlands", "Netherlands"], ["Netherlands Antilles", "Netherlands Antilles"], ["New Caledonia", "New Caledonia"], ["New Zealand", "New Zealand"], ["Nicaragua", "Nicaragua"], ["Niger", "Niger"], ["Nigeria", "Nigeria"], ["Niue", "Niue"], ["Norfolk Island", "Norfolk Island"], ["Northern Mariana Islands", "Northern Mariana Islands"], ["Norway", "Norway"], ["Oman", "Oman"], ["Pakistan", "Pakistan"], ["Palau", "Palau"], ["Palestinian Territory, Occupied", "Palestinian Territory, Occupied"], ["Panama", "Panama"], ["Papua New Guinea", "Papua New Guinea"], ["Paraguay", "Paraguay"], ["Peru", "Peru"], ["Philippines", "Philippines"], ["Pitcairn", "Pitcairn"], ["Poland", "Poland"], ["Portugal", "Portugal"], ["Puerto Rico", "Puerto Rico"], ["Qatar", "Qatar"], ["Reunion", "Reunion"], ["Romania", "Romania"], ["Russian Federation", "Russian Federation"], ["Rwanda", "Rwanda"], ["Saint Helena", "Saint Helena"], ["Saint Kitts and Nevis", "Saint Kitts and Nevis"], ["Saint Lucia", "Saint Lucia"], ["Saint Pierre and Miquelon", "Saint Pierre and Miquelon"], ["Saint Vincent and The Grenadines", "Saint Vincent and The Grenadines"], ["Samoa", "Samoa"], ["San Marino", "San Marino"], ["Sao Tome and Principe", "Sao Tome and Principe"], ["Saudi Arabia", "Saudi Arabia"], ["Senegal", "Senegal"], ["Serbia and Montenegro", "Serbia and Montenegro"], ["Seychelles", "Seychelles"], ["Sierra Leone", "Sierra Leone"], ["Singapore", "Singapore"], ["Slovakia", "Slovakia"], ["Slovenia", "Slovenia"], ["Solomon Islands", "Solomon Islands"], ["Somalia", "Somalia"], ["South Africa", "South Africa"], ["South Georgia and The South Sandwich Islands", "South Georgia and The South Sandwich Islands"], ["Spain", "Spain"], ["Sri Lanka", "Sri Lanka"], ["Sudan", "Sudan"], ["Suriname", "Suriname"], ["Svalbard and Jan Mayen", "Svalbard and Jan Mayen"], ["Swaziland", "Swaziland"], ["Sweden", "Sweden"], ["Switzerland", "Switzerland"], ["Syrian Arab Republic", "Syrian Arab Republic"], ["Taiwan, Province of China", "Taiwan, Province of China"], ["Tajikistan", "Tajikistan"], ["Tanzania, United Republic of", "Tanzania, United Republic of"], ["Thailand", "Thailand"], ["Timor-leste", "Timor-leste"], ["Togo", "Togo"], ["Tokelau", "Tokelau"], ["Tonga", "Tonga"], ["Trinidad and Tobago", "Trinidad and Tobago"], ["Tunisia", "Tunisia"], ["Turkey", "Turkey"], ["Turkmenistan", "Turkmenistan"], ["Turks and Caicos Islands", "Turks and Caicos Islands"], ["Tuvalu", "Tuvalu"], ["Uganda", "Uganda"], ["Ukraine", "Ukraine"], ["United Arab Emirates", "United Arab Emirates"], ["United Kingdom", "United Kingdom"], ["United States", "United States"], ["United States Minor Outlying Islands", "US Minor Islands"], ["Uruguay", "Uruguay"], ["Uzbekistan", "Uzbekistan"], ["Vanuatu", "Vanuatu"], ["Venezuela", "Venezuela"], ["Viet Nam", "Viet Nam"], ["Virgin Islands, British", "Virgin Islands, British"], ["Virgin Islands, U.S.", "Virgin Islands, U.S."], ["Wallis and Futuna", "Wallis and Futuna"], ["Western Sahara", "Western Sahara"], ["Yemen", "Yemen"], ["Zambia", "Zambia"], ["Zimbabwe", "Zimbabwe"]], @user.country), {}, :class => "select2 form-control input-transparent")
[Escaped Output] t("favorite quote")
[Escaped Output] FormBuilder.new.text_field(:quote, :value => @user.quote, :class => "form-control input-transparent")
[Escaped Output] t("about")
[Escaped Output] FormBuilder.new.text_area(:about, :value => @user.about, :class => "form-control input-transparent")
[Escaped Output] FormBuilder.new.label("approvation")
[Escaped Output] FormBuilder.new.select(:approved, options_for_select([[d4x_sanitizer(t("Approved")), true], [d4x_sanitizer(t("Pending")), false]], @user.approved), {}, :class => "select2")
[Escaped Output] FormBuilder.new.label(d4x_sanitizer(t(:role)))
[Escaped Output] check_box_tag("user[roles][]", role, @user.roles.include?(role), :class => "i-checks")
[Escaped Output] h(role.humanize)
[Escaped Output] hidden_field_tag("user[roles][]")
[Escaped Output] FormBuilder.new.submit(t("update"), :class => "btn btn-outline-success btn-block")
[Escaped Output] form_for(@user) do; [Escaped Output] t("edit profile");[Escaped Output] @user.firstname;[Escaped Output] t("fullname");[Escaped Output] FormBuilder.new.text_field(:firstname, :value => @user.firstname, :class => "form-control input-transparent");[Escaped Output] t("headline");[Escaped Output] FormBuilder.new.text_field(:headline, :value => @user.headline, :class => "form-control input-transparent");[Escaped Output] t("birthday");[Escaped Output] FormBuilder.new.date_field(:birthday, :value => @user.birthday, :class => "form-control date-picker", :placeholder => "Pick a date");[Escaped Output] t("gender");[Escaped Output] FormBuilder.new.select(:gender, options_for_select([[t("male"), "M"], [t("female"), "F"]], @user.gender), {}, :class => "select2 form-control input-transparent");[Escaped Output] t("contact");[Escaped Output] t("email");[Escaped Output] FormBuilder.new.email_field(:email, :value => @user.email, :class => "form-control input-transparent");[Escaped Output] t("mobile");[Escaped Output] FormBuilder.new.text_field(:mobile, :value => @user.mobile, :class => "form-control input-transparent mask");[Escaped Output] FormBuilder.new.text_field(:skype_id, :value => @user.skype_id, :class => "form-control input-transparent mask");[Escaped Output] FormBuilder.new.text_field(:facebook_user, :value => @user.facebook_user, :class => "form-control");[Escaped Output] FormBuilder.new.text_field(:twitter_user, :value => @user.twitter_user, :class => "form-control input-transparent mask");[Escaped Output] FormBuilder.new.text_field(:github_id, :value => @user.github_id, :class => "form-control input-transparent mask");[Escaped Output] FormBuilder.new.text_field(:instagram_id, :value => @user.instagram_id, :class => "form-control input-transparent mask");[Escaped Output] FormBuilder.new.text_field(:linkedin_url, :value => @user.linkedin_url, :class => "form-control");[Escaped Output] t("photo");[Escaped Output] FormBuilder.new.file_field(:avatar, :onchange => "$(this).parent().parent().find('.form-control').html($(this).val().split(/[\\\\|/]/).pop());", :style => "display: none;");[Escaped Output] t("address");[Escaped Output] t("location");[Escaped Output] FormBuilder.new.text_field(:location, :value => @user.location, :class => "form-control");[Escaped Output] t("country");[Escaped Output] FormBuilder.new.select(:country, options_for_select([["United States", "United States"], ["United Kingdom", "United Kingdom"], ["Afghanistan", "Afghanistan"], ["Albania", "Albania"], ["Algeria", "Algeria"], ["American Samoa", "American Samoa"], ["Andorra", "Andorra"], ["Angola", "Angola"], ["Anguilla", "Anguilla"], ["Antarctica", "Antarctica"], ["Antigua and Barbuda", "Antigua and Barbuda"], ["Argentina", "Argentina"], ["Armenia", "Armenia"], ["Aruba", "Aruba"], ["Australia", "Australia"], ["Austria", "Austria"], ["Azerbaijan", "Azerbaijan"], ["Bahamas", "Bahamas"], ["Bahrain", "Bahrain"], ["Bangladesh", "Bangladesh"], ["Barbados", "Barbadados"], ["Belarus", "Belarus"], ["Belgium", "Belgium"], ["Belize", "Belize"], ["Benin", "Benin"], ["Bermuda", "Bermuda"], ["Bhutan", "Bhutan"], ["Bolivia", "Bolivia"], ["Bosnia and Heimage_tagrzegovina", "Bosnia and Herzegovina"], ["Botswana", "Botswana"], ["Bouvet Island", "Bouvet Island"], ["Brazil", "Brazil"], ["British Indian Ocean Territory", "British Indian Ocean Territory"], ["Brunei Darussalam", "Brunei Darussalam"], ["Bulgaria", "Bulgaria"], ["Burkina Faso", "Burkina Faso"], ["Burundi", "Burundi"], ["Cambodia", "Cambodia"], ["Cameroon", "Cameroon"], ["Canada", "Canada"], ["Cape Verde", "Cape Verde,"], ["Cayman Islands", "Cayman Islands"], ["Central African Republic", "Central African Republic"], ["Chad", "Chad"], ["Chile", "Chile"], ["China", "China"], ["Christmas Island", "Christmas Island"], ["Cocos (Keeling) Islands", "Cocos (Keeling) Islands"], ["Colombia", "Colombia"], ["Comoros", "Comoros"], ["Congo", "Congo"], ["Congo, The Democratic Republic of The", "Congo, The Democratic Republic of The"], ["Cook Islands", "Cook Islands"], ["Costa Rica", "Costa Rica"], ["Cote Ivoire", "Cote D Ivoire"], ["Croatia", "Croatia"], ["Cuba", "Cuba"], ["Cyprus", "Cyprus"], ["Czech Republic", "Czech Republic"], ["Denmark", "Denmark"], ["Djibouti", "Djibouti"], ["Dominica", "Dominica"], ["Dominican Republic", "Dominican Republic"], ["Ecuador", "Ecuador"], ["Egypt", "Egypt"], ["El Salvador", "El Salvador"], ["Equatorial Guinea", "Equatorial Guinea"], ["Eritrea", "Eritrea"], ["Estonia", "Estonia"], ["Ethiopia", "Ethiopia"], ["Falkland Islands (Malvinas)", "Falkland Islands (Malvinas)"], ["Faroe Islands", "Faroe Islands"], ["Fiji", "Fiji"], ["Finland", "Finland"], ["France", "France"], ["French Guiana", "French Guiana"], ["French Polynesia", "French Polynesia"], ["French Southern Territories", "French Southern Territories"], ["Gabon", "Gabon"], ["Gambia", "Gambia"], ["Georgia", "Georgia"], ["Germany", "Germany"], ["Ghana", "Ghana"], ["Gibraltar", "Gibraltar"], ["Greece", "Greece"], ["Greenland", "Greenland"], ["Grenada", "Grenada"], ["Guadeloupe", "Guadeloupe"], ["Guam", "Guam"], ["Guatemala", "Guatemala"], ["Guinea", "Guinea"], ["Guinea-bissau", "Guinea-bissau"], ["Guyana", "Guyana"], ["Haiti", "Haiti"], ["Heard Island and Mcdonald Islands", "Heard Island and Mcdonald Islands"], ["Holy See (Vatican City State)", "Holy See (Vatican City State)"], ["Honduras", "Honduras"], ["Hong Kong", "Hon g Kong"], ["Hungary", "Hungary"], ["Iceland", "Iceland"], ["India", "India"], ["Indonesia", "Indonesia"], ["Iran, Islamic Republic of", "Iran, Islamic Republic of"], ["Iraq", "Iraq"], ["Ireland", "Ireland"], ["Israel", "Israel"], ["Italy", "Italy"], ["Jamaica", "Jamaica"], ["Japan", "Japan"], ["Jordan", "Jordan"], ["Kazakhstan", "Kazakhstan"], ["Kenya", "Kenya"], ["Kiribati", "Kiribati"], ["Korea, Democratic People Republic of", "Korea, Democratic People Republic of"], ["Korea, Republic of", "Korea, Republic of"], ["Kuwait", "Kuwait"], ["Kyrgyzstan", "Kyrgyzstan"], ["Lao People Democratic Republic", "Lao People Democratic Republic"], ["Latvia", "Latvia"], ["Lebanon", "Lebanon"], ["Lesotho", "Lesotho"], ["Liberia", "Liberia"], ["Libyan Arab Jamahiriya", "Libyan Arab Jamahiriya"], ["Liechtenstein", "Liechtenstein"], ["Lithuania", "Lithuania"], ["Luxembourg", "Luxembourg"], ["Macao", "Macao"], ["Macedonia, The Former Yugoslav Republic of", "Macedonia, The Former Yugoslav Republic of"], ["Madagascar", "Madagascar"], ["Malawi", "Malawi"], ["Malaysia", "Malaysia"], ["Maldives", "Maldives"], ["Mali", "Mali"], ["Malta", "Malta"], ["Marshall Islands", "Marshall Islands"], ["Martinique", "Martinique"], ["Mauritania", "Mauritania"], ["Mauritius", "Mauritius"], ["Mayotte", "Mayotte"], ["Mexico", "Mexico"], ["Micronesia, Federated States of", "Micronesia, Federated States of"], ["Moldova, Republic of", "Moldova, Republic of"], ["Monaco", "Monaco"], ["Mongolia", "Mongolia"], ["Montserrat", "Montserrat"], ["Morocco", "Morocco"], ["Mozambique", "Mozambique"], ["Myanmar", "Myanmar"], ["Namibia", "Namibia"], ["Nauru", "Nauru"], ["Nepal", "Nepal"], ["Netherlands", "Netherlands"], ["Netherlands Antilles", "Netherlands Antilles"], ["New Caledonia", "New Caledonia"], ["New Zealand", "New Zealand"], ["Nicaragua", "Nicaragua"], ["Niger", "Niger"], ["Nigeria", "Nigeria"], ["Niue", "Niue"], ["Norfolk Island", "Norfolk Island"], ["Northern Mariana Islands", "Northern Mariana Islands"], ["Norway", "Norway"], ["Oman", "Oman"], ["Pakistan", "Pakistan"], ["Palau", "Palau"], ["Palestinian Territory, Occupied", "Palestinian Territory, Occupied"], ["Panama", "Panama"], ["Papua New Guinea", "Papua New Guinea"], ["Paraguay", "Paraguay"], ["Peru", "Peru"], ["Philippines", "Philippines"], ["Pitcairn", "Pitcairn"], ["Poland", "Poland"], ["Portugal", "Portugal"], ["Puerto Rico", "Puerto Rico"], ["Qatar", "Qatar"], ["Reunion", "Reunion"], ["Romania", "Romania"], ["Russian Federation", "Russian Federation"], ["Rwanda", "Rwanda"], ["Saint Helena", "Saint Helena"], ["Saint Kitts and Nevis", "Saint Kitts and Nevis"], ["Saint Lucia", "Saint Lucia"], ["Saint Pierre and Miquelon", "Saint Pierre and Miquelon"], ["Saint Vincent and The Grenadines", "Saint Vincent and The Grenadines"], ["Samoa", "Samoa"], ["San Marino", "San Marino"], ["Sao Tome and Principe", "Sao Tome and Principe"], ["Saudi Arabia", "Saudi Arabia"], ["Senegal", "Senegal"], ["Serbia and Montenegro", "Serbia and Montenegro"], ["Seychelles", "Seychelles"], ["Sierra Leone", "Sierra Leone"], ["Singapore", "Singapore"], ["Slovakia", "Slovakia"], ["Slovenia", "Slovenia"], ["Solomon Islands", "Solomon Islands"], ["Somalia", "Somalia"], ["South Africa", "South Africa"], ["South Georgia and The South Sandwich Islands", "South Georgia and The South Sandwich Islands"], ["Spain", "Spain"], ["Sri Lanka", "Sri Lanka"], ["Sudan", "Sudan"], ["Suriname", "Suriname"], ["Svalbard and Jan Mayen", "Svalbard and Jan Mayen"], ["Swaziland", "Swaziland"], ["Sweden", "Sweden"], ["Switzerland", "Switzerland"], ["Syrian Arab Republic", "Syrian Arab Republic"], ["Taiwan, Province of China", "Taiwan, Province of China"], ["Tajikistan", "Tajikistan"], ["Tanzania, United Republic of", "Tanzania, United Republic of"], ["Thailand", "Thailand"], ["Timor-leste", "Timor-leste"], ["Togo", "Togo"], ["Tokelau", "Tokelau"], ["Tonga", "Tonga"], ["Trinidad and Tobago", "Trinidad and Tobago"], ["Tunisia", "Tunisia"], ["Turkey", "Turkey"], ["Turkmenistan", "Turkmenistan"], ["Turks and Caicos Islands", "Turks and Caicos Islands"], ["Tuvalu", "Tuvalu"], ["Uganda", "Uganda"], ["Ukraine", "Ukraine"], ["United Arab Emirates", "United Arab Emirates"], ["United Kingdom", "United Kingdom"], ["United States", "United States"], ["United States Minor Outlying Islands", "US Minor Islands"], ["Uruguay", "Uruguay"], ["Uzbekistan", "Uzbekistan"], ["Vanuatu", "Vanuatu"], ["Venezuela", "Venezuela"], ["Viet Nam", "Viet Nam"], ["Virgin Islands, British", "Virgin Islands, British"], ["Virgin Islands, U.S.", "Virgin Islands, U.S."], ["Wallis and Futuna", "Wallis and Futuna"], ["Western Sahara", "Western Sahara"], ["Yemen", "Yemen"], ["Zambia", "Zambia"], ["Zimbabwe", "Zimbabwe"]], @user.country), {}, :class => "select2 form-control input-transparent");[Escaped Output] t("favorite quote");[Escaped Output] FormBuilder.new.text_field(:quote, :value => @user.quote, :class => "form-control input-transparent");[Escaped Output] t("about");[Escaped Output] FormBuilder.new.text_area(:about, :value => @user.about, :class => "form-control input-transparent");if current_user.role?(:admin) then; [Escaped Output] FormBuilder.new.label("approvation"); [Escaped Output] FormBuilder.new.select(:approved, options_for_select([[d4x_sanitizer(t("Approved")), true], [d4x_sanitizer(t("Pending")), false]], @user.approved), {}, :class => "select2"); [Escaped Output] FormBuilder.new.label(d4x_sanitizer(t(:role))); for role in User::ROLES do; [Escaped Output] check_box_tag("user[roles][]", role, @user.roles.include?(role), :class => "i-checks"); [Escaped Output] h(role.humanize); end; [Escaped Output] hidden_field_tag("user[roles][]");end;[Escaped Output] FormBuilder.new.submit(t("update"), :class => "btn btn-outline-success btn-block"); end

users/_form.["UsersController#edit", "Template:users/edit"]

[Escaped Output] t("edit profile")
[Escaped Output] (User.find_by_nickname(params[:nickname]) or User.find(params[:id])).firstname
[Escaped Output] t("fullname")
[Escaped Output] FormBuilder.new.text_field(:firstname, :value => (User.find_by_nickname(params[:nickname]) or User.find(params[:id])).firstname, :class => "form-control input-transparent")
[Escaped Output] t("headline")
[Escaped Output] FormBuilder.new.text_field(:headline, :value => (User.find_by_nickname(params[:nickname]) or User.find(params[:id])).headline, :class => "form-control input-transparent")
[Escaped Output] t("birthday")
[Escaped Output] FormBuilder.new.date_field(:birthday, :value => (User.find_by_nickname(params[:nickname]) or User.find(params[:id])).birthday, :class => "form-control date-picker", :placeholder => "Pick a date")
[Escaped Output] t("gender")
[Escaped Output] FormBuilder.new.select(:gender, options_for_select([[t("male"), "M"], [t("female"), "F"]], (User.find_by_nickname(params[:nickname]) or User.find(params[:id])).gender), {}, :class => "select2 form-control input-transparent")
[Escaped Output] t("contact")
[Escaped Output] t("email")
[Escaped Output] FormBuilder.new.email_field(:email, :value => (User.find_by_nickname(params[:nickname]) or User.find(params[:id])).email, :class => "form-control input-transparent")
[Escaped Output] t("mobile")
[Escaped Output] FormBuilder.new.text_field(:mobile, :value => (User.find_by_nickname(params[:nickname]) or User.find(params[:id])).mobile, :class => "form-control input-transparent mask")
[Escaped Output] FormBuilder.new.text_field(:skype_id, :value => (User.find_by_nickname(params[:nickname]) or User.find(params[:id])).skype_id, :class => "form-control input-transparent mask")
[Escaped Output] FormBuilder.new.text_field(:facebook_user, :value => (User.find_by_nickname(params[:nickname]) or User.find(params[:id])).facebook_user, :class => "form-control")
[Escaped Output] FormBuilder.new.text_field(:twitter_user, :value => (User.find_by_nickname(params[:nickname]) or User.find(params[:id])).twitter_user, :class => "form-control input-transparent mask")
[Escaped Output] FormBuilder.new.text_field(:github_id, :value => (User.find_by_nickname(params[:nickname]) or User.find(params[:id])).github_id, :class => "form-control input-transparent mask")
[Escaped Output] FormBuilder.new.text_field(:instagram_id, :value => (User.find_by_nickname(params[:nickname]) or User.find(params[:id])).instagram_id, :class => "form-control input-transparent mask")
[Escaped Output] FormBuilder.new.text_field(:linkedin_url, :value => (User.find_by_nickname(params[:nickname]) or User.find(params[:id])).linkedin_url, :class => "form-control")
[Escaped Output] t("photo")
[Escaped Output] FormBuilder.new.file_field(:avatar, :onchange => "$(this).parent().parent().find('.form-control').html($(this).val().split(/[\\\\|/]/).pop());", :style => "display: none;")
[Escaped Output] t("address")
[Escaped Output] t("location")
[Escaped Output] FormBuilder.new.text_field(:location, :value => (User.find_by_nickname(params[:nickname]) or User.find(params[:id])).location, :class => "form-control")
[Escaped Output] t("country")
[Escaped Output] FormBuilder.new.select(:country, options_for_select([["United States", "United States"], ["United Kingdom", "United Kingdom"], ["Afghanistan", "Afghanistan"], ["Albania", "Albania"], ["Algeria", "Algeria"], ["American Samoa", "American Samoa"], ["Andorra", "Andorra"], ["Angola", "Angola"], ["Anguilla", "Anguilla"], ["Antarctica", "Antarctica"], ["Antigua and Barbuda", "Antigua and Barbuda"], ["Argentina", "Argentina"], ["Armenia", "Armenia"], ["Aruba", "Aruba"], ["Australia", "Australia"], ["Austria", "Austria"], ["Azerbaijan", "Azerbaijan"], ["Bahamas", "Bahamas"], ["Bahrain", "Bahrain"], ["Bangladesh", "Bangladesh"], ["Barbados", "Barbadados"], ["Belarus", "Belarus"], ["Belgium", "Belgium"], ["Belize", "Belize"], ["Benin", "Benin"], ["Bermuda", "Bermuda"], ["Bhutan", "Bhutan"], ["Bolivia", "Bolivia"], ["Bosnia and Heimage_tagrzegovina", "Bosnia and Herzegovina"], ["Botswana", "Botswana"], ["Bouvet Island", "Bouvet Island"], ["Brazil", "Brazil"], ["British Indian Ocean Territory", "British Indian Ocean Territory"], ["Brunei Darussalam", "Brunei Darussalam"], ["Bulgaria", "Bulgaria"], ["Burkina Faso", "Burkina Faso"], ["Burundi", "Burundi"], ["Cambodia", "Cambodia"], ["Cameroon", "Cameroon"], ["Canada", "Canada"], ["Cape Verde", "Cape Verde,"], ["Cayman Islands", "Cayman Islands"], ["Central African Republic", "Central African Republic"], ["Chad", "Chad"], ["Chile", "Chile"], ["China", "China"], ["Christmas Island", "Christmas Island"], ["Cocos (Keeling) Islands", "Cocos (Keeling) Islands"], ["Colombia", "Colombia"], ["Comoros", "Comoros"], ["Congo", "Congo"], ["Congo, The Democratic Republic of The", "Congo, The Democratic Republic of The"], ["Cook Islands", "Cook Islands"], ["Costa Rica", "Costa Rica"], ["Cote Ivoire", "Cote D Ivoire"], ["Croatia", "Croatia"], ["Cuba", "Cuba"], ["Cyprus", "Cyprus"], ["Czech Republic", "Czech Republic"], ["Denmark", "Denmark"], ["Djibouti", "Djibouti"], ["Dominica", "Dominica"], ["Dominican Republic", "Dominican Republic"], ["Ecuador", "Ecuador"], ["Egypt", "Egypt"], ["El Salvador", "El Salvador"], ["Equatorial Guinea", "Equatorial Guinea"], ["Eritrea", "Eritrea"], ["Estonia", "Estonia"], ["Ethiopia", "Ethiopia"], ["Falkland Islands (Malvinas)", "Falkland Islands (Malvinas)"], ["Faroe Islands", "Faroe Islands"], ["Fiji", "Fiji"], ["Finland", "Finland"], ["France", "France"], ["French Guiana", "French Guiana"], ["French Polynesia", "French Polynesia"], ["French Southern Territories", "French Southern Territories"], ["Gabon", "Gabon"], ["Gambia", "Gambia"], ["Georgia", "Georgia"], ["Germany", "Germany"], ["Ghana", "Ghana"], ["Gibraltar", "Gibraltar"], ["Greece", "Greece"], ["Greenland", "Greenland"], ["Grenada", "Grenada"], ["Guadeloupe", "Guadeloupe"], ["Guam", "Guam"], ["Guatemala", "Guatemala"], ["Guinea", "Guinea"], ["Guinea-bissau", "Guinea-bissau"], ["Guyana", "Guyana"], ["Haiti", "Haiti"], ["Heard Island and Mcdonald Islands", "Heard Island and Mcdonald Islands"], ["Holy See (Vatican City State)", "Holy See (Vatican City State)"], ["Honduras", "Honduras"], ["Hong Kong", "Hon g Kong"], ["Hungary", "Hungary"], ["Iceland", "Iceland"], ["India", "India"], ["Indonesia", "Indonesia"], ["Iran, Islamic Republic of", "Iran, Islamic Republic of"], ["Iraq", "Iraq"], ["Ireland", "Ireland"], ["Israel", "Israel"], ["Italy", "Italy"], ["Jamaica", "Jamaica"], ["Japan", "Japan"], ["Jordan", "Jordan"], ["Kazakhstan", "Kazakhstan"], ["Kenya", "Kenya"], ["Kiribati", "Kiribati"], ["Korea, Democratic People Republic of", "Korea, Democratic People Republic of"], ["Korea, Republic of", "Korea, Republic of"], ["Kuwait", "Kuwait"], ["Kyrgyzstan", "Kyrgyzstan"], ["Lao People Democratic Republic", "Lao People Democratic Republic"], ["Latvia", "Latvia"], ["Lebanon", "Lebanon"], ["Lesotho", "Lesotho"], ["Liberia", "Liberia"], ["Libyan Arab Jamahiriya", "Libyan Arab Jamahiriya"], ["Liechtenstein", "Liechtenstein"], ["Lithuania", "Lithuania"], ["Luxembourg", "Luxembourg"], ["Macao", "Macao"], ["Macedonia, The Former Yugoslav Republic of", "Macedonia, The Former Yugoslav Republic of"], ["Madagascar", "Madagascar"], ["Malawi", "Malawi"], ["Malaysia", "Malaysia"], ["Maldives", "Maldives"], ["Mali", "Mali"], ["Malta", "Malta"], ["Marshall Islands", "Marshall Islands"], ["Martinique", "Martinique"], ["Mauritania", "Mauritania"], ["Mauritius", "Mauritius"], ["Mayotte", "Mayotte"], ["Mexico", "Mexico"], ["Micronesia, Federated States of", "Micronesia, Federated States of"], ["Moldova, Republic of", "Moldova, Republic of"], ["Monaco", "Monaco"], ["Mongolia", "Mongolia"], ["Montserrat", "Montserrat"], ["Morocco", "Morocco"], ["Mozambique", "Mozambique"], ["Myanmar", "Myanmar"], ["Namibia", "Namibia"], ["Nauru", "Nauru"], ["Nepal", "Nepal"], ["Netherlands", "Netherlands"], ["Netherlands Antilles", "Netherlands Antilles"], ["New Caledonia", "New Caledonia"], ["New Zealand", "New Zealand"], ["Nicaragua", "Nicaragua"], ["Niger", "Niger"], ["Nigeria", "Nigeria"], ["Niue", "Niue"], ["Norfolk Island", "Norfolk Island"], ["Northern Mariana Islands", "Northern Mariana Islands"], ["Norway", "Norway"], ["Oman", "Oman"], ["Pakistan", "Pakistan"], ["Palau", "Palau"], ["Palestinian Territory, Occupied", "Palestinian Territory, Occupied"], ["Panama", "Panama"], ["Papua New Guinea", "Papua New Guinea"], ["Paraguay", "Paraguay"], ["Peru", "Peru"], ["Philippines", "Philippines"], ["Pitcairn", "Pitcairn"], ["Poland", "Poland"], ["Portugal", "Portugal"], ["Puerto Rico", "Puerto Rico"], ["Qatar", "Qatar"], ["Reunion", "Reunion"], ["Romania", "Romania"], ["Russian Federation", "Russian Federation"], ["Rwanda", "Rwanda"], ["Saint Helena", "Saint Helena"], ["Saint Kitts and Nevis", "Saint Kitts and Nevis"], ["Saint Lucia", "Saint Lucia"], ["Saint Pierre and Miquelon", "Saint Pierre and Miquelon"], ["Saint Vincent and The Grenadines", "Saint Vincent and The Grenadines"], ["Samoa", "Samoa"], ["San Marino", "San Marino"], ["Sao Tome and Principe", "Sao Tome and Principe"], ["Saudi Arabia", "Saudi Arabia"], ["Senegal", "Senegal"], ["Serbia and Montenegro", "Serbia and Montenegro"], ["Seychelles", "Seychelles"], ["Sierra Leone", "Sierra Leone"], ["Singapore", "Singapore"], ["Slovakia", "Slovakia"], ["Slovenia", "Slovenia"], ["Solomon Islands", "Solomon Islands"], ["Somalia", "Somalia"], ["South Africa", "South Africa"], ["South Georgia and The South Sandwich Islands", "South Georgia and The South Sandwich Islands"], ["Spain", "Spain"], ["Sri Lanka", "Sri Lanka"], ["Sudan", "Sudan"], ["Suriname", "Suriname"], ["Svalbard and Jan Mayen", "Svalbard and Jan Mayen"], ["Swaziland", "Swaziland"], ["Sweden", "Sweden"], ["Switzerland", "Switzerland"], ["Syrian Arab Republic", "Syrian Arab Republic"], ["Taiwan, Province of China", "Taiwan, Province of China"], ["Tajikistan", "Tajikistan"], ["Tanzania, United Republic of", "Tanzania, United Republic of"], ["Thailand", "Thailand"], ["Timor-leste", "Timor-leste"], ["Togo", "Togo"], ["Tokelau", "Tokelau"], ["Tonga", "Tonga"], ["Trinidad and Tobago", "Trinidad and Tobago"], ["Tunisia", "Tunisia"], ["Turkey", "Turkey"], ["Turkmenistan", "Turkmenistan"], ["Turks and Caicos Islands", "Turks and Caicos Islands"], ["Tuvalu", "Tuvalu"], ["Uganda", "Uganda"], ["Ukraine", "Ukraine"], ["United Arab Emirates", "United Arab Emirates"], ["United Kingdom", "United Kingdom"], ["United States", "United States"], ["United States Minor Outlying Islands", "US Minor Islands"], ["Uruguay", "Uruguay"], ["Uzbekistan", "Uzbekistan"], ["Vanuatu", "Vanuatu"], ["Venezuela", "Venezuela"], ["Viet Nam", "Viet Nam"], ["Virgin Islands, British", "Virgin Islands, British"], ["Virgin Islands, U.S.", "Virgin Islands, U.S."], ["Wallis and Futuna", "Wallis and Futuna"], ["Western Sahara", "Western Sahara"], ["Yemen", "Yemen"], ["Zambia", "Zambia"], ["Zimbabwe", "Zimbabwe"]], (User.find_by_nickname(params[:nickname]) or User.find(params[:id])).country), {}, :class => "select2 form-control input-transparent")
[Escaped Output] t("favorite quote")
[Escaped Output] FormBuilder.new.text_field(:quote, :value => (User.find_by_nickname(params[:nickname]) or User.find(params[:id])).quote, :class => "form-control input-transparent")
[Escaped Output] t("about")
[Escaped Output] FormBuilder.new.text_area(:about, :value => (User.find_by_nickname(params[:nickname]) or User.find(params[:id])).about, :class => "form-control input-transparent")
[Escaped Output] FormBuilder.new.label("approvation")
[Escaped Output] FormBuilder.new.select(:approved, options_for_select([[d4x_sanitizer(t("Approved")), true], [d4x_sanitizer(t("Pending")), false]], (User.find_by_nickname(params[:nickname]) or User.find(params[:id])).approved), {}, :class => "select2")
[Escaped Output] FormBuilder.new.label(d4x_sanitizer(t(:role)))
[Escaped Output] check_box_tag("user[roles][]", role, (User.find_by_nickname(params[:nickname]) or User.find(params[:id])).roles.include?(role), :class => "i-checks")
[Escaped Output] h(role.humanize)
[Escaped Output] hidden_field_tag("user[roles][]")
[Escaped Output] FormBuilder.new.submit(t("update"), :class => "btn btn-outline-success btn-block")
[Escaped Output] form_for((User.find_by_nickname(params[:nickname]) or User.find(params[:id]))) do; [Escaped Output] t("edit profile");[Escaped Output] (User.find_by_nickname(params[:nickname]) or User.find(params[:id])).firstname;[Escaped Output] t("fullname");[Escaped Output] FormBuilder.new.text_field(:firstname, :value => (User.find_by_nickname(params[:nickname]) or User.find(params[:id])).firstname, :class => "form-control input-transparent");[Escaped Output] t("headline");[Escaped Output] FormBuilder.new.text_field(:headline, :value => (User.find_by_nickname(params[:nickname]) or User.find(params[:id])).headline, :class => "form-control input-transparent");[Escaped Output] t("birthday");[Escaped Output] FormBuilder.new.date_field(:birthday, :value => (User.find_by_nickname(params[:nickname]) or User.find(params[:id])).birthday, :class => "form-control date-picker", :placeholder => "Pick a date");[Escaped Output] t("gender");[Escaped Output] FormBuilder.new.select(:gender, options_for_select([[t("male"), "M"], [t("female"), "F"]], (User.find_by_nickname(params[:nickname]) or User.find(params[:id])).gender), {}, :class => "select2 form-control input-transparent");[Escaped Output] t("contact");[Escaped Output] t("email");[Escaped Output] FormBuilder.new.email_field(:email, :value => (User.find_by_nickname(params[:nickname]) or User.find(params[:id])).email, :class => "form-control input-transparent");[Escaped Output] t("mobile");[Escaped Output] FormBuilder.new.text_field(:mobile, :value => (User.find_by_nickname(params[:nickname]) or User.find(params[:id])).mobile, :class => "form-control input-transparent mask");[Escaped Output] FormBuilder.new.text_field(:skype_id, :value => (User.find_by_nickname(params[:nickname]) or User.find(params[:id])).skype_id, :class => "form-control input-transparent mask");[Escaped Output] FormBuilder.new.text_field(:facebook_user, :value => (User.find_by_nickname(params[:nickname]) or User.find(params[:id])).facebook_user, :class => "form-control");[Escaped Output] FormBuilder.new.text_field(:twitter_user, :value => (User.find_by_nickname(params[:nickname]) or User.find(params[:id])).twitter_user, :class => "form-control input-transparent mask");[Escaped Output] FormBuilder.new.text_field(:github_id, :value => (User.find_by_nickname(params[:nickname]) or User.find(params[:id])).github_id, :class => "form-control input-transparent mask");[Escaped Output] FormBuilder.new.text_field(:instagram_id, :value => (User.find_by_nickname(params[:nickname]) or User.find(params[:id])).instagram_id, :class => "form-control input-transparent mask");[Escaped Output] FormBuilder.new.text_field(:linkedin_url, :value => (User.find_by_nickname(params[:nickname]) or User.find(params[:id])).linkedin_url, :class => "form-control");[Escaped Output] t("photo");[Escaped Output] FormBuilder.new.file_field(:avatar, :onchange => "$(this).parent().parent().find('.form-control').html($(this).val().split(/[\\\\|/]/).pop());", :style => "display: none;");[Escaped Output] t("address");[Escaped Output] t("location");[Escaped Output] FormBuilder.new.text_field(:location, :value => (User.find_by_nickname(params[:nickname]) or User.find(params[:id])).location, :class => "form-control");[Escaped Output] t("country");[Escaped Output] FormBuilder.new.select(:country, options_for_select([["United States", "United States"], ["United Kingdom", "United Kingdom"], ["Afghanistan", "Afghanistan"], ["Albania", "Albania"], ["Algeria", "Algeria"], ["American Samoa", "American Samoa"], ["Andorra", "Andorra"], ["Angola", "Angola"], ["Anguilla", "Anguilla"], ["Antarctica", "Antarctica"], ["Antigua and Barbuda", "Antigua and Barbuda"], ["Argentina", "Argentina"], ["Armenia", "Armenia"], ["Aruba", "Aruba"], ["Australia", "Australia"], ["Austria", "Austria"], ["Azerbaijan", "Azerbaijan"], ["Bahamas", "Bahamas"], ["Bahrain", "Bahrain"], ["Bangladesh", "Bangladesh"], ["Barbados", "Barbadados"], ["Belarus", "Belarus"], ["Belgium", "Belgium"], ["Belize", "Belize"], ["Benin", "Benin"], ["Bermuda", "Bermuda"], ["Bhutan", "Bhutan"], ["Bolivia", "Bolivia"], ["Bosnia and Heimage_tagrzegovina", "Bosnia and Herzegovina"], ["Botswana", "Botswana"], ["Bouvet Island", "Bouvet Island"], ["Brazil", "Brazil"], ["British Indian Ocean Territory", "British Indian Ocean Territory"], ["Brunei Darussalam", "Brunei Darussalam"], ["Bulgaria", "Bulgaria"], ["Burkina Faso", "Burkina Faso"], ["Burundi", "Burundi"], ["Cambodia", "Cambodia"], ["Cameroon", "Cameroon"], ["Canada", "Canada"], ["Cape Verde", "Cape Verde,"], ["Cayman Islands", "Cayman Islands"], ["Central African Republic", "Central African Republic"], ["Chad", "Chad"], ["Chile", "Chile"], ["China", "China"], ["Christmas Island", "Christmas Island"], ["Cocos (Keeling) Islands", "Cocos (Keeling) Islands"], ["Colombia", "Colombia"], ["Comoros", "Comoros"], ["Congo", "Congo"], ["Congo, The Democratic Republic of The", "Congo, The Democratic Republic of The"], ["Cook Islands", "Cook Islands"], ["Costa Rica", "Costa Rica"], ["Cote Ivoire", "Cote D Ivoire"], ["Croatia", "Croatia"], ["Cuba", "Cuba"], ["Cyprus", "Cyprus"], ["Czech Republic", "Czech Republic"], ["Denmark", "Denmark"], ["Djibouti", "Djibouti"], ["Dominica", "Dominica"], ["Dominican Republic", "Dominican Republic"], ["Ecuador", "Ecuador"], ["Egypt", "Egypt"], ["El Salvador", "El Salvador"], ["Equatorial Guinea", "Equatorial Guinea"], ["Eritrea", "Eritrea"], ["Estonia", "Estonia"], ["Ethiopia", "Ethiopia"], ["Falkland Islands (Malvinas)", "Falkland Islands (Malvinas)"], ["Faroe Islands", "Faroe Islands"], ["Fiji", "Fiji"], ["Finland", "Finland"], ["France", "France"], ["French Guiana", "French Guiana"], ["French Polynesia", "French Polynesia"], ["French Southern Territories", "French Southern Territories"], ["Gabon", "Gabon"], ["Gambia", "Gambia"], ["Georgia", "Georgia"], ["Germany", "Germany"], ["Ghana", "Ghana"], ["Gibraltar", "Gibraltar"], ["Greece", "Greece"], ["Greenland", "Greenland"], ["Grenada", "Grenada"], ["Guadeloupe", "Guadeloupe"], ["Guam", "Guam"], ["Guatemala", "Guatemala"], ["Guinea", "Guinea"], ["Guinea-bissau", "Guinea-bissau"], ["Guyana", "Guyana"], ["Haiti", "Haiti"], ["Heard Island and Mcdonald Islands", "Heard Island and Mcdonald Islands"], ["Holy See (Vatican City State)", "Holy See (Vatican City State)"], ["Honduras", "Honduras"], ["Hong Kong", "Hon g Kong"], ["Hungary", "Hungary"], ["Iceland", "Iceland"], ["India", "India"], ["Indonesia", "Indonesia"], ["Iran, Islamic Republic of", "Iran, Islamic Republic of"], ["Iraq", "Iraq"], ["Ireland", "Ireland"], ["Israel", "Israel"], ["Italy", "Italy"], ["Jamaica", "Jamaica"], ["Japan", "Japan"], ["Jordan", "Jordan"], ["Kazakhstan", "Kazakhstan"], ["Kenya", "Kenya"], ["Kiribati", "Kiribati"], ["Korea, Democratic People Republic of", "Korea, Democratic People Republic of"], ["Korea, Republic of", "Korea, Republic of"], ["Kuwait", "Kuwait"], ["Kyrgyzstan", "Kyrgyzstan"], ["Lao People Democratic Republic", "Lao People Democratic Republic"], ["Latvia", "Latvia"], ["Lebanon", "Lebanon"], ["Lesotho", "Lesotho"], ["Liberia", "Liberia"], ["Libyan Arab Jamahiriya", "Libyan Arab Jamahiriya"], ["Liechtenstein", "Liechtenstein"], ["Lithuania", "Lithuania"], ["Luxembourg", "Luxembourg"], ["Macao", "Macao"], ["Macedonia, The Former Yugoslav Republic of", "Macedonia, The Former Yugoslav Republic of"], ["Madagascar", "Madagascar"], ["Malawi", "Malawi"], ["Malaysia", "Malaysia"], ["Maldives", "Maldives"], ["Mali", "Mali"], ["Malta", "Malta"], ["Marshall Islands", "Marshall Islands"], ["Martinique", "Martinique"], ["Mauritania", "Mauritania"], ["Mauritius", "Mauritius"], ["Mayotte", "Mayotte"], ["Mexico", "Mexico"], ["Micronesia, Federated States of", "Micronesia, Federated States of"], ["Moldova, Republic of", "Moldova, Republic of"], ["Monaco", "Monaco"], ["Mongolia", "Mongolia"], ["Montserrat", "Montserrat"], ["Morocco", "Morocco"], ["Mozambique", "Mozambique"], ["Myanmar", "Myanmar"], ["Namibia", "Namibia"], ["Nauru", "Nauru"], ["Nepal", "Nepal"], ["Netherlands", "Netherlands"], ["Netherlands Antilles", "Netherlands Antilles"], ["New Caledonia", "New Caledonia"], ["New Zealand", "New Zealand"], ["Nicaragua", "Nicaragua"], ["Niger", "Niger"], ["Nigeria", "Nigeria"], ["Niue", "Niue"], ["Norfolk Island", "Norfolk Island"], ["Northern Mariana Islands", "Northern Mariana Islands"], ["Norway", "Norway"], ["Oman", "Oman"], ["Pakistan", "Pakistan"], ["Palau", "Palau"], ["Palestinian Territory, Occupied", "Palestinian Territory, Occupied"], ["Panama", "Panama"], ["Papua New Guinea", "Papua New Guinea"], ["Paraguay", "Paraguay"], ["Peru", "Peru"], ["Philippines", "Philippines"], ["Pitcairn", "Pitcairn"], ["Poland", "Poland"], ["Portugal", "Portugal"], ["Puerto Rico", "Puerto Rico"], ["Qatar", "Qatar"], ["Reunion", "Reunion"], ["Romania", "Romania"], ["Russian Federation", "Russian Federation"], ["Rwanda", "Rwanda"], ["Saint Helena", "Saint Helena"], ["Saint Kitts and Nevis", "Saint Kitts and Nevis"], ["Saint Lucia", "Saint Lucia"], ["Saint Pierre and Miquelon", "Saint Pierre and Miquelon"], ["Saint Vincent and The Grenadines", "Saint Vincent and The Grenadines"], ["Samoa", "Samoa"], ["San Marino", "San Marino"], ["Sao Tome and Principe", "Sao Tome and Principe"], ["Saudi Arabia", "Saudi Arabia"], ["Senegal", "Senegal"], ["Serbia and Montenegro", "Serbia and Montenegro"], ["Seychelles", "Seychelles"], ["Sierra Leone", "Sierra Leone"], ["Singapore", "Singapore"], ["Slovakia", "Slovakia"], ["Slovenia", "Slovenia"], ["Solomon Islands", "Solomon Islands"], ["Somalia", "Somalia"], ["South Africa", "South Africa"], ["South Georgia and The South Sandwich Islands", "South Georgia and The South Sandwich Islands"], ["Spain", "Spain"], ["Sri Lanka", "Sri Lanka"], ["Sudan", "Sudan"], ["Suriname", "Suriname"], ["Svalbard and Jan Mayen", "Svalbard and Jan Mayen"], ["Swaziland", "Swaziland"], ["Sweden", "Sweden"], ["Switzerland", "Switzerland"], ["Syrian Arab Republic", "Syrian Arab Republic"], ["Taiwan, Province of China", "Taiwan, Province of China"], ["Tajikistan", "Tajikistan"], ["Tanzania, United Republic of", "Tanzania, United Republic of"], ["Thailand", "Thailand"], ["Timor-leste", "Timor-leste"], ["Togo", "Togo"], ["Tokelau", "Tokelau"], ["Tonga", "Tonga"], ["Trinidad and Tobago", "Trinidad and Tobago"], ["Tunisia", "Tunisia"], ["Turkey", "Turkey"], ["Turkmenistan", "Turkmenistan"], ["Turks and Caicos Islands", "Turks and Caicos Islands"], ["Tuvalu", "Tuvalu"], ["Uganda", "Uganda"], ["Ukraine", "Ukraine"], ["United Arab Emirates", "United Arab Emirates"], ["United Kingdom", "United Kingdom"], ["United States", "United States"], ["United States Minor Outlying Islands", "US Minor Islands"], ["Uruguay", "Uruguay"], ["Uzbekistan", "Uzbekistan"], ["Vanuatu", "Vanuatu"], ["Venezuela", "Venezuela"], ["Viet Nam", "Viet Nam"], ["Virgin Islands, British", "Virgin Islands, British"], ["Virgin Islands, U.S.", "Virgin Islands, U.S."], ["Wallis and Futuna", "Wallis and Futuna"], ["Western Sahara", "Western Sahara"], ["Yemen", "Yemen"], ["Zambia", "Zambia"], ["Zimbabwe", "Zimbabwe"]], (User.find_by_nickname(params[:nickname]) or User.find(params[:id])).country), {}, :class => "select2 form-control input-transparent");[Escaped Output] t("favorite quote");[Escaped Output] FormBuilder.new.text_field(:quote, :value => (User.find_by_nickname(params[:nickname]) or User.find(params[:id])).quote, :class => "form-control input-transparent");[Escaped Output] t("about");[Escaped Output] FormBuilder.new.text_area(:about, :value => (User.find_by_nickname(params[:nickname]) or User.find(params[:id])).about, :class => "form-control input-transparent");if current_user.role?(:admin) then; [Escaped Output] FormBuilder.new.label("approvation"); [Escaped Output] FormBuilder.new.select(:approved, options_for_select([[d4x_sanitizer(t("Approved")), true], [d4x_sanitizer(t("Pending")), false]], (User.find_by_nickname(params[:nickname]) or User.find(params[:id])).approved), {}, :class => "select2"); [Escaped Output] FormBuilder.new.label(d4x_sanitizer(t(:role))); for role in ["master", "admin", "cpr", "pr", "prj"] do; [Escaped Output] check_box_tag("user[roles][]", role, (User.find_by_nickname(params[:nickname]) or User.find(params[:id])).roles.include?(role), :class => "i-checks"); [Escaped Output] h(role.humanize); end; [Escaped Output] hidden_field_tag("user[roles][]");end;[Escaped Output] FormBuilder.new.submit(t("update"), :class => "btn btn-outline-success btn-block"); end

users/_form.["UsersController#update", "Template:users/edit"]

[Escaped Output] t("edit profile")
[Escaped Output] User.find(current_user.id).firstname
[Escaped Output] t("fullname")
[Escaped Output] FormBuilder.new.text_field(:firstname, :value => User.find(current_user.id).firstname, :class => "form-control input-transparent")
[Escaped Output] t("headline")
[Escaped Output] FormBuilder.new.text_field(:headline, :value => User.find(current_user.id).headline, :class => "form-control input-transparent")
[Escaped Output] t("birthday")
[Escaped Output] FormBuilder.new.date_field(:birthday, :value => User.find(current_user.id).birthday, :class => "form-control date-picker", :placeholder => "Pick a date")
[Escaped Output] t("gender")
[Escaped Output] FormBuilder.new.select(:gender, options_for_select([[t("male"), "M"], [t("female"), "F"]], User.find(current_user.id).gender), {}, :class => "select2 form-control input-transparent")
[Escaped Output] t("contact")
[Escaped Output] t("email")
[Escaped Output] FormBuilder.new.email_field(:email, :value => User.find(current_user.id).email, :class => "form-control input-transparent")
[Escaped Output] t("mobile")
[Escaped Output] FormBuilder.new.text_field(:mobile, :value => User.find(current_user.id).mobile, :class => "form-control input-transparent mask")
[Escaped Output] FormBuilder.new.text_field(:skype_id, :value => User.find(current_user.id).skype_id, :class => "form-control input-transparent mask")
[Escaped Output] FormBuilder.new.text_field(:facebook_user, :value => User.find(current_user.id).facebook_user, :class => "form-control")
[Escaped Output] FormBuilder.new.text_field(:twitter_user, :value => User.find(current_user.id).twitter_user, :class => "form-control input-transparent mask")
[Escaped Output] FormBuilder.new.text_field(:github_id, :value => User.find(current_user.id).github_id, :class => "form-control input-transparent mask")
[Escaped Output] FormBuilder.new.text_field(:instagram_id, :value => User.find(current_user.id).instagram_id, :class => "form-control input-transparent mask")
[Escaped Output] FormBuilder.new.text_field(:linkedin_url, :value => User.find(current_user.id).linkedin_url, :class => "form-control")
[Escaped Output] t("photo")
[Escaped Output] FormBuilder.new.file_field(:avatar, :onchange => "$(this).parent().parent().find('.form-control').html($(this).val().split(/[\\\\|/]/).pop());", :style => "display: none;")
[Escaped Output] t("address")
[Escaped Output] t("location")
[Escaped Output] FormBuilder.new.text_field(:location, :value => User.find(current_user.id).location, :class => "form-control")
[Escaped Output] t("country")
[Escaped Output] FormBuilder.new.select(:country, options_for_select([["United States", "United States"], ["United Kingdom", "United Kingdom"], ["Afghanistan", "Afghanistan"], ["Albania", "Albania"], ["Algeria", "Algeria"], ["American Samoa", "American Samoa"], ["Andorra", "Andorra"], ["Angola", "Angola"], ["Anguilla", "Anguilla"], ["Antarctica", "Antarctica"], ["Antigua and Barbuda", "Antigua and Barbuda"], ["Argentina", "Argentina"], ["Armenia", "Armenia"], ["Aruba", "Aruba"], ["Australia", "Australia"], ["Austria", "Austria"], ["Azerbaijan", "Azerbaijan"], ["Bahamas", "Bahamas"], ["Bahrain", "Bahrain"], ["Bangladesh", "Bangladesh"], ["Barbados", "Barbadados"], ["Belarus", "Belarus"], ["Belgium", "Belgium"], ["Belize", "Belize"], ["Benin", "Benin"], ["Bermuda", "Bermuda"], ["Bhutan", "Bhutan"], ["Bolivia", "Bolivia"], ["Bosnia and Heimage_tagrzegovina", "Bosnia and Herzegovina"], ["Botswana", "Botswana"], ["Bouvet Island", "Bouvet Island"], ["Brazil", "Brazil"], ["British Indian Ocean Territory", "British Indian Ocean Territory"], ["Brunei Darussalam", "Brunei Darussalam"], ["Bulgaria", "Bulgaria"], ["Burkina Faso", "Burkina Faso"], ["Burundi", "Burundi"], ["Cambodia", "Cambodia"], ["Cameroon", "Cameroon"], ["Canada", "Canada"], ["Cape Verde", "Cape Verde,"], ["Cayman Islands", "Cayman Islands"], ["Central African Republic", "Central African Republic"], ["Chad", "Chad"], ["Chile", "Chile"], ["China", "China"], ["Christmas Island", "Christmas Island"], ["Cocos (Keeling) Islands", "Cocos (Keeling) Islands"], ["Colombia", "Colombia"], ["Comoros", "Comoros"], ["Congo", "Congo"], ["Congo, The Democratic Republic of The", "Congo, The Democratic Republic of The"], ["Cook Islands", "Cook Islands"], ["Costa Rica", "Costa Rica"], ["Cote Ivoire", "Cote D Ivoire"], ["Croatia", "Croatia"], ["Cuba", "Cuba"], ["Cyprus", "Cyprus"], ["Czech Republic", "Czech Republic"], ["Denmark", "Denmark"], ["Djibouti", "Djibouti"], ["Dominica", "Dominica"], ["Dominican Republic", "Dominican Republic"], ["Ecuador", "Ecuador"], ["Egypt", "Egypt"], ["El Salvador", "El Salvador"], ["Equatorial Guinea", "Equatorial Guinea"], ["Eritrea", "Eritrea"], ["Estonia", "Estonia"], ["Ethiopia", "Ethiopia"], ["Falkland Islands (Malvinas)", "Falkland Islands (Malvinas)"], ["Faroe Islands", "Faroe Islands"], ["Fiji", "Fiji"], ["Finland", "Finland"], ["France", "France"], ["French Guiana", "French Guiana"], ["French Polynesia", "French Polynesia"], ["French Southern Territories", "French Southern Territories"], ["Gabon", "Gabon"], ["Gambia", "Gambia"], ["Georgia", "Georgia"], ["Germany", "Germany"], ["Ghana", "Ghana"], ["Gibraltar", "Gibraltar"], ["Greece", "Greece"], ["Greenland", "Greenland"], ["Grenada", "Grenada"], ["Guadeloupe", "Guadeloupe"], ["Guam", "Guam"], ["Guatemala", "Guatemala"], ["Guinea", "Guinea"], ["Guinea-bissau", "Guinea-bissau"], ["Guyana", "Guyana"], ["Haiti", "Haiti"], ["Heard Island and Mcdonald Islands", "Heard Island and Mcdonald Islands"], ["Holy See (Vatican City State)", "Holy See (Vatican City State)"], ["Honduras", "Honduras"], ["Hong Kong", "Hon g Kong"], ["Hungary", "Hungary"], ["Iceland", "Iceland"], ["India", "India"], ["Indonesia", "Indonesia"], ["Iran, Islamic Republic of", "Iran, Islamic Republic of"], ["Iraq", "Iraq"], ["Ireland", "Ireland"], ["Israel", "Israel"], ["Italy", "Italy"], ["Jamaica", "Jamaica"], ["Japan", "Japan"], ["Jordan", "Jordan"], ["Kazakhstan", "Kazakhstan"], ["Kenya", "Kenya"], ["Kiribati", "Kiribati"], ["Korea, Democratic People Republic of", "Korea, Democratic People Republic of"], ["Korea, Republic of", "Korea, Republic of"], ["Kuwait", "Kuwait"], ["Kyrgyzstan", "Kyrgyzstan"], ["Lao People Democratic Republic", "Lao People Democratic Republic"], ["Latvia", "Latvia"], ["Lebanon", "Lebanon"], ["Lesotho", "Lesotho"], ["Liberia", "Liberia"], ["Libyan Arab Jamahiriya", "Libyan Arab Jamahiriya"], ["Liechtenstein", "Liechtenstein"], ["Lithuania", "Lithuania"], ["Luxembourg", "Luxembourg"], ["Macao", "Macao"], ["Macedonia, The Former Yugoslav Republic of", "Macedonia, The Former Yugoslav Republic of"], ["Madagascar", "Madagascar"], ["Malawi", "Malawi"], ["Malaysia", "Malaysia"], ["Maldives", "Maldives"], ["Mali", "Mali"], ["Malta", "Malta"], ["Marshall Islands", "Marshall Islands"], ["Martinique", "Martinique"], ["Mauritania", "Mauritania"], ["Mauritius", "Mauritius"], ["Mayotte", "Mayotte"], ["Mexico", "Mexico"], ["Micronesia, Federated States of", "Micronesia, Federated States of"], ["Moldova, Republic of", "Moldova, Republic of"], ["Monaco", "Monaco"], ["Mongolia", "Mongolia"], ["Montserrat", "Montserrat"], ["Morocco", "Morocco"], ["Mozambique", "Mozambique"], ["Myanmar", "Myanmar"], ["Namibia", "Namibia"], ["Nauru", "Nauru"], ["Nepal", "Nepal"], ["Netherlands", "Netherlands"], ["Netherlands Antilles", "Netherlands Antilles"], ["New Caledonia", "New Caledonia"], ["New Zealand", "New Zealand"], ["Nicaragua", "Nicaragua"], ["Niger", "Niger"], ["Nigeria", "Nigeria"], ["Niue", "Niue"], ["Norfolk Island", "Norfolk Island"], ["Northern Mariana Islands", "Northern Mariana Islands"], ["Norway", "Norway"], ["Oman", "Oman"], ["Pakistan", "Pakistan"], ["Palau", "Palau"], ["Palestinian Territory, Occupied", "Palestinian Territory, Occupied"], ["Panama", "Panama"], ["Papua New Guinea", "Papua New Guinea"], ["Paraguay", "Paraguay"], ["Peru", "Peru"], ["Philippines", "Philippines"], ["Pitcairn", "Pitcairn"], ["Poland", "Poland"], ["Portugal", "Portugal"], ["Puerto Rico", "Puerto Rico"], ["Qatar", "Qatar"], ["Reunion", "Reunion"], ["Romania", "Romania"], ["Russian Federation", "Russian Federation"], ["Rwanda", "Rwanda"], ["Saint Helena", "Saint Helena"], ["Saint Kitts and Nevis", "Saint Kitts and Nevis"], ["Saint Lucia", "Saint Lucia"], ["Saint Pierre and Miquelon", "Saint Pierre and Miquelon"], ["Saint Vincent and The Grenadines", "Saint Vincent and The Grenadines"], ["Samoa", "Samoa"], ["San Marino", "San Marino"], ["Sao Tome and Principe", "Sao Tome and Principe"], ["Saudi Arabia", "Saudi Arabia"], ["Senegal", "Senegal"], ["Serbia and Montenegro", "Serbia and Montenegro"], ["Seychelles", "Seychelles"], ["Sierra Leone", "Sierra Leone"], ["Singapore", "Singapore"], ["Slovakia", "Slovakia"], ["Slovenia", "Slovenia"], ["Solomon Islands", "Solomon Islands"], ["Somalia", "Somalia"], ["South Africa", "South Africa"], ["South Georgia and The South Sandwich Islands", "South Georgia and The South Sandwich Islands"], ["Spain", "Spain"], ["Sri Lanka", "Sri Lanka"], ["Sudan", "Sudan"], ["Suriname", "Suriname"], ["Svalbard and Jan Mayen", "Svalbard and Jan Mayen"], ["Swaziland", "Swaziland"], ["Sweden", "Sweden"], ["Switzerland", "Switzerland"], ["Syrian Arab Republic", "Syrian Arab Republic"], ["Taiwan, Province of China", "Taiwan, Province of China"], ["Tajikistan", "Tajikistan"], ["Tanzania, United Republic of", "Tanzania, United Republic of"], ["Thailand", "Thailand"], ["Timor-leste", "Timor-leste"], ["Togo", "Togo"], ["Tokelau", "Tokelau"], ["Tonga", "Tonga"], ["Trinidad and Tobago", "Trinidad and Tobago"], ["Tunisia", "Tunisia"], ["Turkey", "Turkey"], ["Turkmenistan", "Turkmenistan"], ["Turks and Caicos Islands", "Turks and Caicos Islands"], ["Tuvalu", "Tuvalu"], ["Uganda", "Uganda"], ["Ukraine", "Ukraine"], ["United Arab Emirates", "United Arab Emirates"], ["United Kingdom", "United Kingdom"], ["United States", "United States"], ["United States Minor Outlying Islands", "US Minor Islands"], ["Uruguay", "Uruguay"], ["Uzbekistan", "Uzbekistan"], ["Vanuatu", "Vanuatu"], ["Venezuela", "Venezuela"], ["Viet Nam", "Viet Nam"], ["Virgin Islands, British", "Virgin Islands, British"], ["Virgin Islands, U.S.", "Virgin Islands, U.S."], ["Wallis and Futuna", "Wallis and Futuna"], ["Western Sahara", "Western Sahara"], ["Yemen", "Yemen"], ["Zambia", "Zambia"], ["Zimbabwe", "Zimbabwe"]], User.find(current_user.id).country), {}, :class => "select2 form-control input-transparent")
[Escaped Output] t("favorite quote")
[Escaped Output] FormBuilder.new.text_field(:quote, :value => User.find(current_user.id).quote, :class => "form-control input-transparent")
[Escaped Output] t("about")
[Escaped Output] FormBuilder.new.text_area(:about, :value => User.find(current_user.id).about, :class => "form-control input-transparent")
[Escaped Output] FormBuilder.new.label("approvation")
[Escaped Output] FormBuilder.new.select(:approved, options_for_select([[d4x_sanitizer(t("Approved")), true], [d4x_sanitizer(t("Pending")), false]], User.find(current_user.id).approved), {}, :class => "select2")
[Escaped Output] FormBuilder.new.label(d4x_sanitizer(t(:role)))
[Escaped Output] check_box_tag("user[roles][]", role, User.find(current_user.id).roles.include?(role), :class => "i-checks")
[Escaped Output] h(role.humanize)
[Escaped Output] hidden_field_tag("user[roles][]")
[Escaped Output] FormBuilder.new.submit(t("update"), :class => "btn btn-outline-success btn-block")
[Escaped Output] form_for(User.find(current_user.id)) do; [Escaped Output] t("edit profile");[Escaped Output] User.find(current_user.id).firstname;[Escaped Output] t("fullname");[Escaped Output] FormBuilder.new.text_field(:firstname, :value => User.find(current_user.id).firstname, :class => "form-control input-transparent");[Escaped Output] t("headline");[Escaped Output] FormBuilder.new.text_field(:headline, :value => User.find(current_user.id).headline, :class => "form-control input-transparent");[Escaped Output] t("birthday");[Escaped Output] FormBuilder.new.date_field(:birthday, :value => User.find(current_user.id).birthday, :class => "form-control date-picker", :placeholder => "Pick a date");[Escaped Output] t("gender");[Escaped Output] FormBuilder.new.select(:gender, options_for_select([[t("male"), "M"], [t("female"), "F"]], User.find(current_user.id).gender), {}, :class => "select2 form-control input-transparent");[Escaped Output] t("contact");[Escaped Output] t("email");[Escaped Output] FormBuilder.new.email_field(:email, :value => User.find(current_user.id).email, :class => "form-control input-transparent");[Escaped Output] t("mobile");[Escaped Output] FormBuilder.new.text_field(:mobile, :value => User.find(current_user.id).mobile, :class => "form-control input-transparent mask");[Escaped Output] FormBuilder.new.text_field(:skype_id, :value => User.find(current_user.id).skype_id, :class => "form-control input-transparent mask");[Escaped Output] FormBuilder.new.text_field(:facebook_user, :value => User.find(current_user.id).facebook_user, :class => "form-control");[Escaped Output] FormBuilder.new.text_field(:twitter_user, :value => User.find(current_user.id).twitter_user, :class => "form-control input-transparent mask");[Escaped Output] FormBuilder.new.text_field(:github_id, :value => User.find(current_user.id).github_id, :class => "form-control input-transparent mask");[Escaped Output] FormBuilder.new.text_field(:instagram_id, :value => User.find(current_user.id).instagram_id, :class => "form-control input-transparent mask");[Escaped Output] FormBuilder.new.text_field(:linkedin_url, :value => User.find(current_user.id).linkedin_url, :class => "form-control");[Escaped Output] t("photo");[Escaped Output] FormBuilder.new.file_field(:avatar, :onchange => "$(this).parent().parent().find('.form-control').html($(this).val().split(/[\\\\|/]/).pop());", :style => "display: none;");[Escaped Output] t("address");[Escaped Output] t("location");[Escaped Output] FormBuilder.new.text_field(:location, :value => User.find(current_user.id).location, :class => "form-control");[Escaped Output] t("country");[Escaped Output] FormBuilder.new.select(:country, options_for_select([["United States", "United States"], ["United Kingdom", "United Kingdom"], ["Afghanistan", "Afghanistan"], ["Albania", "Albania"], ["Algeria", "Algeria"], ["American Samoa", "American Samoa"], ["Andorra", "Andorra"], ["Angola", "Angola"], ["Anguilla", "Anguilla"], ["Antarctica", "Antarctica"], ["Antigua and Barbuda", "Antigua and Barbuda"], ["Argentina", "Argentina"], ["Armenia", "Armenia"], ["Aruba", "Aruba"], ["Australia", "Australia"], ["Austria", "Austria"], ["Azerbaijan", "Azerbaijan"], ["Bahamas", "Bahamas"], ["Bahrain", "Bahrain"], ["Bangladesh", "Bangladesh"], ["Barbados", "Barbadados"], ["Belarus", "Belarus"], ["Belgium", "Belgium"], ["Belize", "Belize"], ["Benin", "Benin"], ["Bermuda", "Bermuda"], ["Bhutan", "Bhutan"], ["Bolivia", "Bolivia"], ["Bosnia and Heimage_tagrzegovina", "Bosnia and Herzegovina"], ["Botswana", "Botswana"], ["Bouvet Island", "Bouvet Island"], ["Brazil", "Brazil"], ["British Indian Ocean Territory", "British Indian Ocean Territory"], ["Brunei Darussalam", "Brunei Darussalam"], ["Bulgaria", "Bulgaria"], ["Burkina Faso", "Burkina Faso"], ["Burundi", "Burundi"], ["Cambodia", "Cambodia"], ["Cameroon", "Cameroon"], ["Canada", "Canada"], ["Cape Verde", "Cape Verde,"], ["Cayman Islands", "Cayman Islands"], ["Central African Republic", "Central African Republic"], ["Chad", "Chad"], ["Chile", "Chile"], ["China", "China"], ["Christmas Island", "Christmas Island"], ["Cocos (Keeling) Islands", "Cocos (Keeling) Islands"], ["Colombia", "Colombia"], ["Comoros", "Comoros"], ["Congo", "Congo"], ["Congo, The Democratic Republic of The", "Congo, The Democratic Republic of The"], ["Cook Islands", "Cook Islands"], ["Costa Rica", "Costa Rica"], ["Cote Ivoire", "Cote D Ivoire"], ["Croatia", "Croatia"], ["Cuba", "Cuba"], ["Cyprus", "Cyprus"], ["Czech Republic", "Czech Republic"], ["Denmark", "Denmark"], ["Djibouti", "Djibouti"], ["Dominica", "Dominica"], ["Dominican Republic", "Dominican Republic"], ["Ecuador", "Ecuador"], ["Egypt", "Egypt"], ["El Salvador", "El Salvador"], ["Equatorial Guinea", "Equatorial Guinea"], ["Eritrea", "Eritrea"], ["Estonia", "Estonia"], ["Ethiopia", "Ethiopia"], ["Falkland Islands (Malvinas)", "Falkland Islands (Malvinas)"], ["Faroe Islands", "Faroe Islands"], ["Fiji", "Fiji"], ["Finland", "Finland"], ["France", "France"], ["French Guiana", "French Guiana"], ["French Polynesia", "French Polynesia"], ["French Southern Territories", "French Southern Territories"], ["Gabon", "Gabon"], ["Gambia", "Gambia"], ["Georgia", "Georgia"], ["Germany", "Germany"], ["Ghana", "Ghana"], ["Gibraltar", "Gibraltar"], ["Greece", "Greece"], ["Greenland", "Greenland"], ["Grenada", "Grenada"], ["Guadeloupe", "Guadeloupe"], ["Guam", "Guam"], ["Guatemala", "Guatemala"], ["Guinea", "Guinea"], ["Guinea-bissau", "Guinea-bissau"], ["Guyana", "Guyana"], ["Haiti", "Haiti"], ["Heard Island and Mcdonald Islands", "Heard Island and Mcdonald Islands"], ["Holy See (Vatican City State)", "Holy See (Vatican City State)"], ["Honduras", "Honduras"], ["Hong Kong", "Hon g Kong"], ["Hungary", "Hungary"], ["Iceland", "Iceland"], ["India", "India"], ["Indonesia", "Indonesia"], ["Iran, Islamic Republic of", "Iran, Islamic Republic of"], ["Iraq", "Iraq"], ["Ireland", "Ireland"], ["Israel", "Israel"], ["Italy", "Italy"], ["Jamaica", "Jamaica"], ["Japan", "Japan"], ["Jordan", "Jordan"], ["Kazakhstan", "Kazakhstan"], ["Kenya", "Kenya"], ["Kiribati", "Kiribati"], ["Korea, Democratic People Republic of", "Korea, Democratic People Republic of"], ["Korea, Republic of", "Korea, Republic of"], ["Kuwait", "Kuwait"], ["Kyrgyzstan", "Kyrgyzstan"], ["Lao People Democratic Republic", "Lao People Democratic Republic"], ["Latvia", "Latvia"], ["Lebanon", "Lebanon"], ["Lesotho", "Lesotho"], ["Liberia", "Liberia"], ["Libyan Arab Jamahiriya", "Libyan Arab Jamahiriya"], ["Liechtenstein", "Liechtenstein"], ["Lithuania", "Lithuania"], ["Luxembourg", "Luxembourg"], ["Macao", "Macao"], ["Macedonia, The Former Yugoslav Republic of", "Macedonia, The Former Yugoslav Republic of"], ["Madagascar", "Madagascar"], ["Malawi", "Malawi"], ["Malaysia", "Malaysia"], ["Maldives", "Maldives"], ["Mali", "Mali"], ["Malta", "Malta"], ["Marshall Islands", "Marshall Islands"], ["Martinique", "Martinique"], ["Mauritania", "Mauritania"], ["Mauritius", "Mauritius"], ["Mayotte", "Mayotte"], ["Mexico", "Mexico"], ["Micronesia, Federated States of", "Micronesia, Federated States of"], ["Moldova, Republic of", "Moldova, Republic of"], ["Monaco", "Monaco"], ["Mongolia", "Mongolia"], ["Montserrat", "Montserrat"], ["Morocco", "Morocco"], ["Mozambique", "Mozambique"], ["Myanmar", "Myanmar"], ["Namibia", "Namibia"], ["Nauru", "Nauru"], ["Nepal", "Nepal"], ["Netherlands", "Netherlands"], ["Netherlands Antilles", "Netherlands Antilles"], ["New Caledonia", "New Caledonia"], ["New Zealand", "New Zealand"], ["Nicaragua", "Nicaragua"], ["Niger", "Niger"], ["Nigeria", "Nigeria"], ["Niue", "Niue"], ["Norfolk Island", "Norfolk Island"], ["Northern Mariana Islands", "Northern Mariana Islands"], ["Norway", "Norway"], ["Oman", "Oman"], ["Pakistan", "Pakistan"], ["Palau", "Palau"], ["Palestinian Territory, Occupied", "Palestinian Territory, Occupied"], ["Panama", "Panama"], ["Papua New Guinea", "Papua New Guinea"], ["Paraguay", "Paraguay"], ["Peru", "Peru"], ["Philippines", "Philippines"], ["Pitcairn", "Pitcairn"], ["Poland", "Poland"], ["Portugal", "Portugal"], ["Puerto Rico", "Puerto Rico"], ["Qatar", "Qatar"], ["Reunion", "Reunion"], ["Romania", "Romania"], ["Russian Federation", "Russian Federation"], ["Rwanda", "Rwanda"], ["Saint Helena", "Saint Helena"], ["Saint Kitts and Nevis", "Saint Kitts and Nevis"], ["Saint Lucia", "Saint Lucia"], ["Saint Pierre and Miquelon", "Saint Pierre and Miquelon"], ["Saint Vincent and The Grenadines", "Saint Vincent and The Grenadines"], ["Samoa", "Samoa"], ["San Marino", "San Marino"], ["Sao Tome and Principe", "Sao Tome and Principe"], ["Saudi Arabia", "Saudi Arabia"], ["Senegal", "Senegal"], ["Serbia and Montenegro", "Serbia and Montenegro"], ["Seychelles", "Seychelles"], ["Sierra Leone", "Sierra Leone"], ["Singapore", "Singapore"], ["Slovakia", "Slovakia"], ["Slovenia", "Slovenia"], ["Solomon Islands", "Solomon Islands"], ["Somalia", "Somalia"], ["South Africa", "South Africa"], ["South Georgia and The South Sandwich Islands", "South Georgia and The South Sandwich Islands"], ["Spain", "Spain"], ["Sri Lanka", "Sri Lanka"], ["Sudan", "Sudan"], ["Suriname", "Suriname"], ["Svalbard and Jan Mayen", "Svalbard and Jan Mayen"], ["Swaziland", "Swaziland"], ["Sweden", "Sweden"], ["Switzerland", "Switzerland"], ["Syrian Arab Republic", "Syrian Arab Republic"], ["Taiwan, Province of China", "Taiwan, Province of China"], ["Tajikistan", "Tajikistan"], ["Tanzania, United Republic of", "Tanzania, United Republic of"], ["Thailand", "Thailand"], ["Timor-leste", "Timor-leste"], ["Togo", "Togo"], ["Tokelau", "Tokelau"], ["Tonga", "Tonga"], ["Trinidad and Tobago", "Trinidad and Tobago"], ["Tunisia", "Tunisia"], ["Turkey", "Turkey"], ["Turkmenistan", "Turkmenistan"], ["Turks and Caicos Islands", "Turks and Caicos Islands"], ["Tuvalu", "Tuvalu"], ["Uganda", "Uganda"], ["Ukraine", "Ukraine"], ["United Arab Emirates", "United Arab Emirates"], ["United Kingdom", "United Kingdom"], ["United States", "United States"], ["United States Minor Outlying Islands", "US Minor Islands"], ["Uruguay", "Uruguay"], ["Uzbekistan", "Uzbekistan"], ["Vanuatu", "Vanuatu"], ["Venezuela", "Venezuela"], ["Viet Nam", "Viet Nam"], ["Virgin Islands, British", "Virgin Islands, British"], ["Virgin Islands, U.S.", "Virgin Islands, U.S."], ["Wallis and Futuna", "Wallis and Futuna"], ["Western Sahara", "Western Sahara"], ["Yemen", "Yemen"], ["Zambia", "Zambia"], ["Zimbabwe", "Zimbabwe"]], User.find(current_user.id).country), {}, :class => "select2 form-control input-transparent");[Escaped Output] t("favorite quote");[Escaped Output] FormBuilder.new.text_field(:quote, :value => User.find(current_user.id).quote, :class => "form-control input-transparent");[Escaped Output] t("about");[Escaped Output] FormBuilder.new.text_area(:about, :value => User.find(current_user.id).about, :class => "form-control input-transparent");if current_user.role?(:admin) then; [Escaped Output] FormBuilder.new.label("approvation"); [Escaped Output] FormBuilder.new.select(:approved, options_for_select([[d4x_sanitizer(t("Approved")), true], [d4x_sanitizer(t("Pending")), false]], User.find(current_user.id).approved), {}, :class => "select2"); [Escaped Output] FormBuilder.new.label(d4x_sanitizer(t(:role))); for role in ["master", "admin", "cpr", "pr", "prj"] do; [Escaped Output] check_box_tag("user[roles][]", role, User.find(current_user.id).roles.include?(role), :class => "i-checks"); [Escaped Output] h(role.humanize); end; [Escaped Output] hidden_field_tag("user[roles][]");end;[Escaped Output] FormBuilder.new.submit(t("update"), :class => "btn btn-outline-success btn-block"); end

users/_picture

[Escaped Output] pluralize(@user.errors.count, "error")
[Escaped Output] d4x_sanitizer(msg)
[Escaped Output] f.file_field(:avatar, :class => "button-d4x-tiny")
[Escaped Output] f.submit(d4x_sanitizer(t("upload")), :class => "button-d4x-tiny")
[Escaped Output] form_for(@user, :html => ({ :multipart => true })) do; if @user.errors.any? then; [Escaped Output] pluralize(@user.errors.count, "error"); @user.errors.full_messages.each do; [Escaped Output] d4x_sanitizer(msg); end;end;[Escaped Output] f.file_field(:avatar, :class => "button-d4x-tiny");[Escaped Output] f.submit(d4x_sanitizer(t("upload")), :class => "button-d4x-tiny"); end
[Escaped Output] image_tag(@user.avatar.url, :class => "jcrop-preview", :id => "target", :width => "70%")

users/_picture.["Template:users/picture"]

[Escaped Output] pluralize(@user.errors.count, "error")
[Escaped Output] d4x_sanitizer(msg)
[Escaped Output] FormBuilder.new.file_field(:avatar, :class => "button-d4x-tiny")
[Escaped Output] FormBuilder.new.submit(d4x_sanitizer(t("upload")), :class => "button-d4x-tiny")
[Escaped Output] form_for(@user, :html => ({ :multipart => true })) do; if @user.errors.any? then; [Escaped Output] pluralize(@user.errors.count, "error"); @user.errors.full_messages.each do; [Escaped Output] d4x_sanitizer(msg); end;end;[Escaped Output] FormBuilder.new.file_field(:avatar, :class => "button-d4x-tiny");[Escaped Output] FormBuilder.new.submit(d4x_sanitizer(t("upload")), :class => "button-d4x-tiny"); end
[Escaped Output] image_tag(@user.avatar.url, :class => "jcrop-preview", :id => "target", :width => "70%")

users/_picture.["UsersController#picture", "Template:users/picture"]

[Escaped Output] pluralize(User.find(current_user.id).errors.count, "error")
[Escaped Output] d4x_sanitizer((Unresolved Model).new)
[Escaped Output] FormBuilder.new.file_field(:avatar, :class => "button-d4x-tiny")
[Escaped Output] FormBuilder.new.submit(d4x_sanitizer(t("upload")), :class => "button-d4x-tiny")
[Escaped Output] form_for(User.find(current_user.id), :html => ({ :multipart => true })) do; if User.find(current_user.id).errors.any? then; [Escaped Output] pluralize(User.find(current_user.id).errors.count, "error"); User.find(current_user.id).errors.full_messages.each do; [Escaped Output] d4x_sanitizer((Unresolved Model).new); end;end;[Escaped Output] FormBuilder.new.file_field(:avatar, :class => "button-d4x-tiny");[Escaped Output] FormBuilder.new.submit(d4x_sanitizer(t("upload")), :class => "button-d4x-tiny"); end
[Escaped Output] image_tag(User.find(current_user.id).avatar.url, :class => "jcrop-preview", :id => "target", :width => "70%")

users/_settings

[Escaped Output] javascript_include_tag("d4x-settings")
[Escaped Output] content_for(:head) do; [Escaped Output] javascript_include_tag("d4x-settings"); end
[Escaped Output] f.label(t("approved"), :class => "show-item-data")
[Escaped Output] f.select(:approved, options_for_select([[d4x_sanitizer(t("approved")), true], [d4x_sanitizer(t("pending")), false]], @user.approved))
[Escaped Output] check_box_tag("user[roles][]", role, @user.roles.include?(role))
[Escaped Output] h(role.humanize)
[Escaped Output] hidden_field_tag("user[roles][]")
[Escaped Output] f.submit(d4x_sanitizer(t("save settings")), :class => "btn btn-xs btn-info")
[Escaped Output] form_for(@user, :html => ({ :multipart => true })) do; if current_user.role?(:admin) then; [Escaped Output] f.label(t("approved"), :class => "show-item-data"); [Escaped Output] f.select(:approved, options_for_select([[d4x_sanitizer(t("approved")), true], [d4x_sanitizer(t("pending")), false]], @user.approved)); for role in User::ROLES do; [Escaped Output] check_box_tag("user[roles][]", role, @user.roles.include?(role)); [Escaped Output] h(role.humanize); end; [Escaped Output] hidden_field_tag("user[roles][]");end;[Escaped Output] f.submit(d4x_sanitizer(t("save settings")), :class => "btn btn-xs btn-info"); end

users/crop

[Escaped Output] label_tag(t("crop image"), nil, :class => "grey")
[Escaped Output] image_tag(@user.avatar.url(:large), :id => "cropbox")
[Escaped Output] javascript_include_tag("jquery.color.js")
[Escaped Output] javascript_include_tag("jquery.Jcrop.min.js")
[Escaped Output] stylesheet_link_tag("jquery.Jcrop")
[Escaped Output] image_tag(@user.avatar.url(:large), :id => "preview")
[Escaped Output] f.hidden_field(attribute, :id => attribute)
[Escaped Output] f.submit("Crop", :class => "btn btn-outline-success btn-block")
[Escaped Output] form_for(@user, :url => crop_user_path(@user.id)) do; for attribute in [:crop_x, :crop_y, :crop_w, :crop_h] do; [Escaped Output] f.hidden_field(attribute, :id => attribute);end;[Escaped Output] f.submit("Crop", :class => "btn btn-outline-success btn-block"); end
[Escaped Output] @user.avatar_geometry(:large).width
[Escaped Output] @user.avatar_geometry(:large).height
[Escaped Output] @user.avatar_geometry(:original).width
[Escaped Output] @user.avatar_geometry(:large).width

users/crop.["UsersController#crop"]

[Escaped Output] label_tag(t("crop image"), nil, :class => "grey")
[Escaped Output] image_tag(User.find(params[:id]).avatar.url(:large), :id => "cropbox")
[Escaped Output] javascript_include_tag("jquery.color.js")
[Escaped Output] javascript_include_tag("jquery.Jcrop.min.js")
[Escaped Output] stylesheet_link_tag("jquery.Jcrop")
[Escaped Output] image_tag(User.find(params[:id]).avatar.url(:large), :id => "preview")
[Escaped Output] FormBuilder.new.hidden_field(attribute, :id => attribute)
[Escaped Output] FormBuilder.new.submit("Crop", :class => "btn btn-outline-success btn-block")
[Escaped Output] form_for(User.find(params[:id]), :url => crop_user_path(User.find(params[:id]).id)) do; for attribute in [:crop_x, :crop_y, :crop_w, :crop_h] do; [Escaped Output] FormBuilder.new.hidden_field(attribute, :id => attribute);end;[Escaped Output] FormBuilder.new.submit("Crop", :class => "btn btn-outline-success btn-block"); end
[Escaped Output] User.find(params[:id]).avatar_geometry(:large).width
[Escaped Output] User.find(params[:id]).avatar_geometry(:large).height
[Escaped Output] User.find(params[:id]).avatar_geometry(:original).width
[Escaped Output] User.find(params[:id]).avatar_geometry(:large).width

users/crop.["UsersController#update"]

[Escaped Output] label_tag(t("crop image"), nil, :class => "grey")
[Escaped Output] image_tag(User.find(current_user.id).avatar.url(:large), :id => "cropbox")
[Escaped Output] javascript_include_tag("jquery.color.js")
[Escaped Output] javascript_include_tag("jquery.Jcrop.min.js")
[Escaped Output] stylesheet_link_tag("jquery.Jcrop")
[Escaped Output] image_tag(User.find(current_user.id).avatar.url(:large), :id => "preview")
[Escaped Output] FormBuilder.new.hidden_field(attribute, :id => attribute)
[Escaped Output] FormBuilder.new.submit("Crop", :class => "btn btn-outline-success btn-block")
[Escaped Output] form_for(User.find(current_user.id), :url => crop_user_path(User.find(current_user.id).id)) do; for attribute in [:crop_x, :crop_y, :crop_w, :crop_h] do; [Escaped Output] FormBuilder.new.hidden_field(attribute, :id => attribute);end;[Escaped Output] FormBuilder.new.submit("Crop", :class => "btn btn-outline-success btn-block"); end
[Escaped Output] User.find(current_user.id).avatar_geometry(:large).width
[Escaped Output] User.find(current_user.id).avatar_geometry(:large).height
[Escaped Output] User.find(current_user.id).avatar_geometry(:original).width
[Escaped Output] User.find(current_user.id).avatar_geometry(:large).width

users/edit

[Escaped Output] render(partial => "form", {})

users/edit.["UsersController#edit"]

[Escaped Output] render(partial => "form", {})

users/home

[Escaped Output] t("welcome to")
[Escaped Output] t("home_intro0")
[Escaped Output] t("home_intro1")
[Escaped Output] t("home_intro2")
[Escaped Output] t("about the author")
[Escaped Output] t("about_me_p0")
[Escaped Output] t("about_me_p1")
[Escaped Output] t("about_me_p2")
[Escaped Output] t("about_me_p3")
[Escaped Output] image_tag("d4x337.jpg", :size => "180x180")
[Escaped Output] d4x_sanitizer(t("sign up"))
[Escaped Output] hidden_field_tag(:invitation_token, :value => params[:invitation_token])
[Escaped Output] hidden_field_tag(:invite_email, :value => invited_email)
[Escaped Output] d4x_sanitizer(t("invitated sir"))
[Escaped Output] d4x_sanitizer(t("invalid invite"))
[Escaped Output] f.text_field(:firstname, :class => "form-control firstname center", :placeholder => d4x_sanitizer(t("fullname")))
[Escaped Output] f.email_field(:email, :value => invited_email, :class => "form-control email center", :placeholder => t("current email"))
[Escaped Output] f.text_field(:nickname, :value => invited_name, :class => "form-control nickname center", :placeholder => d4x_sanitizer(t("nickname")))
[Escaped Output] f.password_field(:password, :class => "form-control password center", :placeholder => d4x_sanitizer(t("new password")))
[Escaped Output] check_box_tag(:agreement, :class => "i-checks")
[Escaped Output] link_to(d4x_sanitizer(t("i agree with terms and conditions")), "/terms")
[Escaped Output] f.submit(t("sign up"), :id => "signup-submit", :class => "btn btn-md btn-outline-success btn-block")
[Escaped Output] t("already have an account")
[Escaped Output] link_to(d4x_sanitizer(t("login")), new_session_path(User.new), :id => "login-link")
[Escaped Output] form_for(new_users_path) do; [Escaped Output] f.text_field(:firstname, :class => "form-control firstname center", :placeholder => d4x_sanitizer(t("fullname")));[Escaped Output] f.email_field(:email, :value => invited_email, :class => "form-control email center", :placeholder => t("current email"));[Escaped Output] f.text_field(:nickname, :value => invited_name, :class => "form-control nickname center", :placeholder => d4x_sanitizer(t("nickname")));[Escaped Output] f.password_field(:password, :class => "form-control password center", :placeholder => d4x_sanitizer(t("new password")));[Escaped Output] check_box_tag(:agreement, :class => "i-checks");[Escaped Output] link_to(d4x_sanitizer(t("i agree with terms and conditions")), "/terms");[Escaped Output] f.submit(t("sign up"), :id => "signup-submit", :class => "btn btn-md btn-outline-success btn-block");[Escaped Output] t("already have an account");[Escaped Output] link_to(d4x_sanitizer(t("login")), new_session_path(User.new), :id => "login-link"); end
[Escaped Output] render(partial => "/shared/devise_footer", {})

users/home.["UsersController#home"]

[Escaped Output] t("welcome to")
[Escaped Output] t("home_intro0")
[Escaped Output] t("home_intro1")
[Escaped Output] t("home_intro2")
[Escaped Output] t("about the author")
[Escaped Output] t("about_me_p0")
[Escaped Output] t("about_me_p1")
[Escaped Output] t("about_me_p2")
[Escaped Output] t("about_me_p3")
[Escaped Output] image_tag("d4x337.jpg", :size => "180x180")
[Escaped Output] d4x_sanitizer(t("sign up"))
[Escaped Output] hidden_field_tag(:invitation_token, :value => params[:invitation_token])
[Escaped Output] hidden_field_tag(:invite_email, :value => get_token_email(params[:invitation_token]))
[Escaped Output] d4x_sanitizer(t("invitated sir"))
[Escaped Output] d4x_sanitizer(t("invalid invite"))
[Escaped Output] FormBuilder.new.text_field(:firstname, :class => "form-control firstname center", :placeholder => d4x_sanitizer(t("fullname")))
[Escaped Output] FormBuilder.new.email_field(:email, :value => get_token_email(params[:invitation_token]), :class => "form-control email center", :placeholder => t("current email"))
[Escaped Output] FormBuilder.new.text_field(:nickname, :value => get_token_name(params[:invitation_token]), :class => "form-control nickname center", :placeholder => d4x_sanitizer(t("nickname")))
[Escaped Output] FormBuilder.new.password_field(:password, :class => "form-control password center", :placeholder => d4x_sanitizer(t("new password")))
[Escaped Output] check_box_tag(:agreement, :class => "i-checks")
[Escaped Output] link_to(d4x_sanitizer(t("i agree with terms and conditions")), "/terms")
[Escaped Output] FormBuilder.new.submit(t("sign up"), :id => "signup-submit", :class => "btn btn-md btn-outline-success btn-block")
[Escaped Output] t("already have an account")
[Escaped Output] link_to(d4x_sanitizer(t("login")), new_session_path(User.new), :id => "login-link")
[Escaped Output] form_for(new_users_path) do; [Escaped Output] FormBuilder.new.text_field(:firstname, :class => "form-control firstname center", :placeholder => d4x_sanitizer(t("fullname")));[Escaped Output] FormBuilder.new.email_field(:email, :value => get_token_email(params[:invitation_token]), :class => "form-control email center", :placeholder => t("current email"));[Escaped Output] FormBuilder.new.text_field(:nickname, :value => get_token_name(params[:invitation_token]), :class => "form-control nickname center", :placeholder => d4x_sanitizer(t("nickname")));[Escaped Output] FormBuilder.new.password_field(:password, :class => "form-control password center", :placeholder => d4x_sanitizer(t("new password")));[Escaped Output] check_box_tag(:agreement, :class => "i-checks");[Escaped Output] link_to(d4x_sanitizer(t("i agree with terms and conditions")), "/terms");[Escaped Output] FormBuilder.new.submit(t("sign up"), :id => "signup-submit", :class => "btn btn-md btn-outline-success btn-block");[Escaped Output] t("already have an account");[Escaped Output] link_to(d4x_sanitizer(t("login")), new_session_path(User.new), :id => "login-link"); end
[Escaped Output] render(partial => "/shared/devise_footer", {})

users/index

[Escaped Output] d4x_sanitizer(t(:firstname))
[Escaped Output] d4x_sanitizer(t(:nickname))
[Escaped Output] d4x_sanitizer(t(:email))
[Escaped Output] d4x_sanitizer(t(:acc))
[Escaped Output] d4x_sanitizer(t(:current))
[Escaped Output] d4x_sanitizer(t(:failed))
[Escaped Output] d4x_sanitizer(t(:appr))
[Escaped Output] d4x_sanitizer(t(:on?))
[Escaped Output] user.firstname
[Escaped Output] link_to(user.nickname, user)
[Escaped Output] link_to(user.email, ("mailto:" + user.email))
[Escaped Output] ((time_ago_in_words(user.last_seen) + " Ago") or "Never Seen")
[Escaped Output] user.sign_in_count
[Escaped Output] user.current_sign_in_ip
[Escaped Output] user.failed_attempts
[Escaped Output] image_tag("bullet_green.png")
[Escaped Output] image_tag("bullet_red.png")
[Escaped Output] image_tag("bullet_green.png")
[Escaped Output] image_tag("bullet_red.png")
[Escaped Output] link_to(edit_user_path(user)) do; [ignored]; end
[Escaped Output] button_to(user, :method => :delete, :data => ({ :confirm => "Are you sure?" }), :class => "btn btn-sm btn-dark") do; [ignored]; end

users/index.["UsersController#index"]

[Escaped Output] d4x_sanitizer(t(:firstname))
[Escaped Output] d4x_sanitizer(t(:nickname))
[Escaped Output] d4x_sanitizer(t(:email))
[Escaped Output] d4x_sanitizer(t(:acc))
[Escaped Output] d4x_sanitizer(t(:current))
[Escaped Output] d4x_sanitizer(t(:failed))
[Escaped Output] d4x_sanitizer(t(:appr))
[Escaped Output] d4x_sanitizer(t(:on?))
[Escaped Output] user.firstname
[Escaped Output] link_to(user.nickname, user)
[Escaped Output] link_to(user.email, ("mailto:" + user.email))
[Escaped Output] ((time_ago_in_words(user.last_seen) + " Ago") or "Never Seen")
[Escaped Output] user.sign_in_count
[Escaped Output] user.current_sign_in_ip
[Escaped Output] user.failed_attempts
[Escaped Output] image_tag("bullet_green.png")
[Escaped Output] image_tag("bullet_red.png")
[Escaped Output] image_tag("bullet_green.png")
[Escaped Output] image_tag("bullet_red.png")
[Escaped Output] link_to(edit_user_path(user)) do; [ignored]; end
[Escaped Output] button_to(user, :method => :delete, :data => ({ :confirm => "Are you sure?" }), :class => "btn btn-sm btn-dark") do; [ignored]; end

users/picture

[Escaped Output] label_tag(t("avatar"), nil, :class => "navbar-where")
[Escaped Output] render(partial => "picture", {})

users/picture.["UsersController#picture"]

[Escaped Output] label_tag(t("avatar"), nil, :class => "navbar-where")
[Escaped Output] render(partial => "picture", {})

users/profile

[Escaped Output] current_user.avatar.url(:thumb)
[Escaped Output] current_user.firstname
[Escaped Output] t("settings")
[Escaped Output] edit_user_path(current_user)
[Escaped Output] t("edit profile")
[Escaped Output] t("profile")
[Escaped Output] t("picture")
[Escaped Output] t("privacy settings")
[Escaped Output] current_user.nickname
[Escaped Output] current_user.headline
[Escaped Output] get_current_status(current_user.id)
[Escaped Output] t("about")
[Escaped Output] current_user.firstname
[Escaped Output] current_user.about
[Escaped Output] t("favorite quote")
[Escaped Output] current_user.quote
[Escaped Output] current_user.location
[Escaped Output] current_user.mobile
[Escaped Output] current_user.email
[Escaped Output] current_user.linkedin_url
[Escaped Output] current_user.skype_id
[Escaped Output] current_user.instagram_id
[Escaped Output] current_user.facebook_user
[Escaped Output] current_user.github_id
[Escaped Output] current_user.twitter_user
[Escaped Output] image_tag("online.png")
[Escaped Output] t("online")
[Escaped Output] image_tag("online.png")
[Escaped Output] current_user.last_seen
[Escaped Output] time_ago_in_words(current_user.last_seen)
[Escaped Output] t("ago")
[Escaped Output] t("never")
[Escaped Output] current_user.created_at
[Escaped Output] time_ago_in_words(current_user.created_at)
[Escaped Output] t("ago")

users/profile.["UsersController#profile"]

[Escaped Output] current_user.avatar.url(:thumb)
[Escaped Output] current_user.firstname
[Escaped Output] t("settings")
[Escaped Output] edit_user_path(current_user)
[Escaped Output] t("edit profile")
[Escaped Output] t("profile")
[Escaped Output] t("picture")
[Escaped Output] t("privacy settings")
[Escaped Output] current_user.nickname
[Escaped Output] current_user.headline
[Escaped Output] get_current_status(current_user.id)
[Escaped Output] t("about")
[Escaped Output] current_user.firstname
[Escaped Output] current_user.about
[Escaped Output] t("favorite quote")
[Escaped Output] current_user.quote
[Escaped Output] current_user.location
[Escaped Output] current_user.mobile
[Escaped Output] current_user.email
[Escaped Output] current_user.linkedin_url
[Escaped Output] current_user.skype_id
[Escaped Output] current_user.instagram_id
[Escaped Output] current_user.facebook_user
[Escaped Output] current_user.github_id
[Escaped Output] current_user.twitter_user
[Escaped Output] image_tag("online.png")
[Escaped Output] t("online")
[Escaped Output] image_tag("online.png")
[Escaped Output] current_user.last_seen
[Escaped Output] time_ago_in_words(current_user.last_seen)
[Escaped Output] t("ago")
[Escaped Output] t("never")
[Escaped Output] current_user.created_at
[Escaped Output] time_ago_in_words(current_user.created_at)
[Escaped Output] t("ago")

users/show

[Escaped Output] @user.avatar.url(:thumb)
[Escaped Output] @user.firstname
[Escaped Output] @user.nickname
[Escaped Output] @user.headline
[Escaped Output] get_current_status(@user.id)
[Escaped Output] button_to("Remove Block", blocked_user, :method => :delete, :data => ({ :confirm => "Are you sure?" }), :class => "btn btn-warning btn-md")
[Escaped Output] f.hidden_field(:user_id, :value => current_user.id.to_s, :class => "mpid")
[Escaped Output] f.hidden_field(:blocked_id, :value => @user.id.to_s, :class => "mplid_")
[Escaped Output] f.submit("Block This Person", :class => "btn btn-dark btn-md")
[Escaped Output] form_for(BlockedUser.new) do; [Escaped Output] f.hidden_field(:user_id, :value => current_user.id.to_s, :class => "mpid");[Escaped Output] f.hidden_field(:blocked_id, :value => @user.id.to_s, :class => "mplid_");[Escaped Output] f.submit("Block This Person", :class => "btn btn-dark btn-md"); end
[Escaped Output] t("settings")
[Escaped Output] edit_user_path(current_user)
[Escaped Output] t("edit profile")
[Escaped Output] t("profile")
[Escaped Output] t("picture")
[Escaped Output] t("privacy settings")
[Escaped Output] button_to("Remove from Contacts", user_contact, :method => :delete, :data => ({ :confirm => "Are you sure?" }), :class => "btn btn-warning btn-md")
[Escaped Output] f.hidden_field(:user_id, :value => current_user.id.to_s, :class => "mpid")
[Escaped Output] f.hidden_field(:contact_id, :value => @user.id.to_s, :class => "mplid_")
[Escaped Output] f.submit("Add To Contacts", :class => "btn btn-dark btn-md")
[Escaped Output] form_for(UserContact.new) do; [Escaped Output] f.hidden_field(:user_id, :value => current_user.id.to_s, :class => "mpid");[Escaped Output] f.hidden_field(:contact_id, :value => @user.id.to_s, :class => "mplid_");[Escaped Output] f.submit("Add To Contacts", :class => "btn btn-dark btn-md"); end
[Escaped Output] t("about")
[Escaped Output] @user.firstname
[Escaped Output] @user.about
[Escaped Output] t("favorite quote")
[Escaped Output] @user.quote
[Escaped Output] t("contacts")
[Escaped Output] @user.location
[Escaped Output] @user.mobile
[Escaped Output] @user.email
[Escaped Output] @user.linkedin_url
[Escaped Output] @user.skype_id
[Escaped Output] @user.instagram_id
[Escaped Output] @user.facebook_user
[Escaped Output] @user.github_id
[Escaped Output] @user.twitter_user
[Escaped Output] image_tag("online.png")
[Escaped Output] t("online")
[Escaped Output] image_tag("online.png")
[Escaped Output] @user.last_seen
[Escaped Output] time_ago_in_words(@user.last_seen)
[Escaped Output] t("ago")
[Escaped Output] t("never")
[Escaped Output] @user.created_at
[Escaped Output] time_ago_in_words(@user.created_at)
[Escaped Output] t("ago")

users/show.["UsersController#show"]

[Escaped Output] (User.find(params[:id]) or User.find_by_nickname(params[:nickname])).avatar.url(:thumb)
[Escaped Output] (User.find(params[:id]) or User.find_by_nickname(params[:nickname])).firstname
[Escaped Output] (User.find(params[:id]) or User.find_by_nickname(params[:nickname])).nickname
[Escaped Output] (User.find(params[:id]) or User.find_by_nickname(params[:nickname])).headline
[Escaped Output] get_current_status((User.find(params[:id]) or User.find_by_nickname(params[:nickname])).id)
[Escaped Output] button_to("Remove Block", get_blocked_user(current_user.id, (User.find(params[:id]) or User.find_by_nickname(params[:nickname])).id), :method => :delete, :data => ({ :confirm => "Are you sure?" }), :class => "btn btn-warning btn-md")
[Escaped Output] FormBuilder.new.hidden_field(:user_id, :value => current_user.id.to_s, :class => "mpid")
[Escaped Output] FormBuilder.new.hidden_field(:blocked_id, :value => (User.find(params[:id]) or User.find_by_nickname(params[:nickname])).id.to_s, :class => "mplid_")
[Escaped Output] FormBuilder.new.submit("Block This Person", :class => "btn btn-dark btn-md")
[Escaped Output] form_for(BlockedUser.new) do; [Escaped Output] FormBuilder.new.hidden_field(:user_id, :value => current_user.id.to_s, :class => "mpid");[Escaped Output] FormBuilder.new.hidden_field(:blocked_id, :value => (User.find(params[:id]) or User.find_by_nickname(params[:nickname])).id.to_s, :class => "mplid_");[Escaped Output] FormBuilder.new.submit("Block This Person", :class => "btn btn-dark btn-md"); end
[Escaped Output] t("settings")
[Escaped Output] edit_user_path(current_user)
[Escaped Output] t("edit profile")
[Escaped Output] t("profile")
[Escaped Output] t("picture")
[Escaped Output] t("privacy settings")
[Escaped Output] button_to("Remove from Contacts", get_user_contact(current_user.id, (User.find(params[:id]) or User.find_by_nickname(params[:nickname])).id), :method => :delete, :data => ({ :confirm => "Are you sure?" }), :class => "btn btn-warning btn-md")
[Escaped Output] FormBuilder.new.hidden_field(:user_id, :value => current_user.id.to_s, :class => "mpid")
[Escaped Output] FormBuilder.new.hidden_field(:contact_id, :value => (User.find(params[:id]) or User.find_by_nickname(params[:nickname])).id.to_s, :class => "mplid_")
[Escaped Output] FormBuilder.new.submit("Add To Contacts", :class => "btn btn-dark btn-md")
[Escaped Output] form_for(UserContact.new) do; [Escaped Output] FormBuilder.new.hidden_field(:user_id, :value => current_user.id.to_s, :class => "mpid");[Escaped Output] FormBuilder.new.hidden_field(:contact_id, :value => (User.find(params[:id]) or User.find_by_nickname(params[:nickname])).id.to_s, :class => "mplid_");[Escaped Output] FormBuilder.new.submit("Add To Contacts", :class => "btn btn-dark btn-md"); end
[Escaped Output] t("about")
[Escaped Output] (User.find(params[:id]) or User.find_by_nickname(params[:nickname])).firstname
[Escaped Output] (User.find(params[:id]) or User.find_by_nickname(params[:nickname])).about
[Escaped Output] t("favorite quote")
[Escaped Output] (User.find(params[:id]) or User.find_by_nickname(params[:nickname])).quote
[Escaped Output] t("contacts")
[Escaped Output] (User.find(params[:id]) or User.find_by_nickname(params[:nickname])).location
[Escaped Output] (User.find(params[:id]) or User.find_by_nickname(params[:nickname])).mobile
[Escaped Output] (User.find(params[:id]) or User.find_by_nickname(params[:nickname])).email
[Escaped Output] (User.find(params[:id]) or User.find_by_nickname(params[:nickname])).linkedin_url
[Escaped Output] (User.find(params[:id]) or User.find_by_nickname(params[:nickname])).skype_id
[Escaped Output] (User.find(params[:id]) or User.find_by_nickname(params[:nickname])).instagram_id
[Escaped Output] (User.find(params[:id]) or User.find_by_nickname(params[:nickname])).facebook_user
[Escaped Output] (User.find(params[:id]) or User.find_by_nickname(params[:nickname])).github_id
[Escaped Output] (User.find(params[:id]) or User.find_by_nickname(params[:nickname])).twitter_user
[Escaped Output] image_tag("online.png")
[Escaped Output] t("online")
[Escaped Output] image_tag("online.png")
[Escaped Output] (User.find(params[:id]) or User.find_by_nickname(params[:nickname])).last_seen
[Escaped Output] time_ago_in_words((User.find(params[:id]) or User.find_by_nickname(params[:nickname])).last_seen)
[Escaped Output] t("ago")
[Escaped Output] t("never")
[Escaped Output] (User.find(params[:id]) or User.find_by_nickname(params[:nickname])).created_at
[Escaped Output] time_ago_in_words((User.find(params[:id]) or User.find_by_nickname(params[:nickname])).created_at)
[Escaped Output] t("ago")

users/visitors

[Escaped Output] t("online visitors")
[Escaped Output] t("Who's online")
[Escaped Output] t("nick")
[Escaped Output] t("IP Address")
[Escaped Output] t("Timestamp")
[Escaped Output] t("Session")
[Escaped Output] t("Method")
[Escaped Output] t("URL")
[Escaped Output] visitor.nickname
[Escaped Output] visitor.remote_ip
[Escaped Output] visitor.created_at
[Escaped Output] visitor.session_id
[Escaped Output] visitor.method
[Escaped Output] visitor.visited_url
[Escaped Output] will_paginate(@visitors, :per_page => 50)

users/visitors.["UsersController#visitors"]

[Escaped Output] t("online visitors")
[Escaped Output] t("Who's online")
[Escaped Output] t("nick")
[Escaped Output] t("IP Address")
[Escaped Output] t("Timestamp")
[Escaped Output] t("Session")
[Escaped Output] t("Method")
[Escaped Output] t("URL")
[Escaped Output] visitor.nickname
[Escaped Output] visitor.remote_ip
[Escaped Output] visitor.created_at
[Escaped Output] visitor.session_id
[Escaped Output] visitor.method
[Escaped Output] visitor.visited_url
[Escaped Output] will_paginate(@visitors, :per_page => 50)

wall/_footer

[Escaped Output] t("new_post")
[Escaped Output] current_user.nickname
[Escaped Output] t("profile")
[Escaped Output] @posts
[Escaped Output] t("timeline")
[Escaped Output] @updates
[Escaped Output] t("notifications")
[Escaped Output] @friends
[Escaped Output] t("connections")
[Escaped Output] t("settings")

wall/_mini_post

[Escaped Output] mini_post.user.avatar.url(:thumb)
[Escaped Output] image_url("missing_avatar.png")
[Escaped Output] link_to(mini_post.user.firstname, current_user.nickname)
[Escaped Output] mini_post.user.nickname
[Escaped Output] time_ago_in_words_converter(mini_post.created_at)
[Escaped Output] button_to(mini_post, :class => "pdel", :method => :delete, :data => ({ :confirm => "Are you sure you want to delete this post?" }), :title => "remove post") do; [ignored]; end
[Escaped Output] mini_post.content_html
[Escaped Output] image_tag(mini_post.image, :class => "img-responsive")
[Escaped Output] f.hidden_field(:mini_post_id, :value => mini_post.id.to_s, :class => "mpid")
[Escaped Output] f.hidden_field(:mini_post_liking_id, :value => mini_post_liking.id.to_s, :class => ("mplid_" + mini_post.id.to_s))
[Escaped Output] hidden_field_tag(("act_" + mini_post_liking.mini_post.id.to_s), 0, :class => "act")
[Escaped Output] mini_post.id
[Escaped Output] @likescount
[Escaped Output] form_for(mini_post_liking) do; [Escaped Output] f.hidden_field(:mini_post_id, :value => mini_post.id.to_s, :class => "mpid");[Escaped Output] f.hidden_field(:mini_post_liking_id, :value => mini_post_liking.id.to_s, :class => ("mplid_" + mini_post.id.to_s));[Escaped Output] hidden_field_tag(("act_" + mini_post_liking.mini_post.id.to_s), 0, :class => "act");button_to(t("you like this post"), [mini_post_liking.mini_post, mini_post_liking], :confirm => "are you sure you want to unlike?", :alt => "unlike", :class => "btn btn-xs btn-success", :method => :delete, :id => "feed-icon-2013");[Escaped Output] mini_post.id;[Escaped Output] @likescount; end
[Escaped Output] mini_post.id
[Escaped Output] f.hidden_field(:mini_post_id, :value => mini_post.id.to_s)
[Escaped Output] f.hidden_field(:mini_post_liking_id, :value => mini_post_liking.id.to_s, :class => ("mpdid_" + mini_post.id.to_s))
[Escaped Output] hidden_field_tag(("disact_" + mini_post_liking.mini_post.id.to_s), 0, :class => "disact")
[Escaped Output] mini_post.id
[Escaped Output] @dontlikescount
[Escaped Output] form_for(mini_post_liking) do; [Escaped Output] f.hidden_field(:mini_post_id, :value => mini_post.id.to_s);[Escaped Output] f.hidden_field(:mini_post_liking_id, :value => mini_post_liking.id.to_s, :class => ("mpdid_" + mini_post.id.to_s));[Escaped Output] hidden_field_tag(("disact_" + mini_post_liking.mini_post.id.to_s), 0, :class => "disact");button_to(t("you dont like this post"), [mini_post_liking.mini_post, mini_post_liking], :confirm => "are you sure you want to undislike?", :alt => "undislike", :class => "btn btn-xs btn-danger", :method => :delete, :id => "feed-icon-2013");[Escaped Output] mini_post.id;[Escaped Output] @dontlikescount; end
[Escaped Output] f.hidden_field(:mini_post_id, :value => mini_post.id.to_s, :class => "mpid")
[Escaped Output] f.hidden_field(:mini_post_liking_id, :value => "-337", :class => ("mplid_" + mini_post.id.to_s))
[Escaped Output] hidden_field_tag(("act_" + mini_post.id.to_s), 1, :class => "act")
[Escaped Output] f.hidden_field(:liking, :value => true)
[Escaped Output] mini_post.id
[Escaped Output] @likescount
[Escaped Output] form_for(mini_post.mini_post_liking.build) do; [Escaped Output] f.hidden_field(:mini_post_id, :value => mini_post.id.to_s, :class => "mpid");[Escaped Output] f.hidden_field(:mini_post_liking_id, :value => "-337", :class => ("mplid_" + mini_post.id.to_s));[Escaped Output] hidden_field_tag(("act_" + mini_post.id.to_s), 1, :class => "act");[Escaped Output] f.hidden_field(:liking, :value => true);[Escaped Output] mini_post.id;[Escaped Output] @likescount;submit_tag(t("like"), :name => "feed", :id => "feed-icon-2013", :class => "btn btn-xs btn-success"); end
[Escaped Output] mini_post.id
[Escaped Output] f.hidden_field(:mini_post_id, :value => mini_post.id.to_s, :class => "mpid")
[Escaped Output] f.hidden_field(:mini_post_liking_id, :value => "-337", :class => ("mpdid_" + mini_post.id.to_s))
[Escaped Output] hidden_field_tag(("disact_" + mini_post.id.to_s), 1, :class => "disact")
[Escaped Output] @dontlikescount
[Escaped Output] mini_post.id
[Escaped Output] form_for(mini_post.mini_post_liking.build) do; [Escaped Output] f.hidden_field(:mini_post_id, :value => mini_post.id.to_s, :class => "mpid");[Escaped Output] f.hidden_field(:mini_post_liking_id, :value => "-337", :class => ("mpdid_" + mini_post.id.to_s));[Escaped Output] hidden_field_tag(("disact_" + mini_post.id.to_s), 1, :class => "disact");submit_tag(t("dislike"), :name => "feed", :id => "feed-icon-2013 dislike", :class => "btn btn-xs btn-danger");[Escaped Output] @dontlikescount;[Escaped Output] mini_post.id; end
[Escaped Output] mini_post.id
[Escaped Output] @minipostcomments
[Escaped Output] f.hidden_field(:mini_post_id, :value => mini_post.id.to_s, :class => "mpid")
[Escaped Output] f.hidden_field(:mini_post_favorite_id, :value => mini_post_favorite.id.to_s, :class => ("mpfav_" + mini_post.id.to_s))
[Escaped Output] hidden_field_tag(("favact_" + mini_post_favorite.mini_post.id.to_s), 0, :class => "favact")
[Escaped Output] mini_post.id
[Escaped Output] @favorites
[Escaped Output] form_for(mini_post_favorite) do; [Escaped Output] f.hidden_field(:mini_post_id, :value => mini_post.id.to_s, :class => "mpid");[Escaped Output] f.hidden_field(:mini_post_favorite_id, :value => mini_post_favorite.id.to_s, :class => ("mpfav_" + mini_post.id.to_s));[Escaped Output] hidden_field_tag(("favact_" + mini_post_favorite.mini_post.id.to_s), 0, :class => "favact");[Escaped Output] mini_post.id;[Escaped Output] @favorites; end
[Escaped Output] f.hidden_field(:mini_post_id, :value => mini_post.id.to_s, :class => "mpid")
[Escaped Output] f.hidden_field(:mini_post_favorite_id, :value => "-337", :class => ("mpfav_" + mini_post.id.to_s))
[Escaped Output] hidden_field_tag(("favact_" + mini_post.id.to_s), 1, :class => "favact")
[Escaped Output] f.hidden_field(:favoriting, :value => true)
[Escaped Output] mini_post.id
[Escaped Output] @favorites
[Escaped Output] form_for(mini_post.mini_post_favorite.build) do; [Escaped Output] f.hidden_field(:mini_post_id, :value => mini_post.id.to_s, :class => "mpid");[Escaped Output] f.hidden_field(:mini_post_favorite_id, :value => "-337", :class => ("mpfav_" + mini_post.id.to_s));[Escaped Output] hidden_field_tag(("favact_" + mini_post.id.to_s), 1, :class => "favact");[Escaped Output] f.hidden_field(:favoriting, :value => true);[Escaped Output] mini_post.id;[Escaped Output] @favorites; end
[Escaped Output] mini_post.id
[Escaped Output] mpcomment.user.avatar.url(:thumb)
[Escaped Output] image_url("missing_avatar.png")
[Escaped Output] link_to(mpcomment.user.firstname)
[Escaped Output] mpcomment.user.nickname
[Escaped Output] button_to([mpcomment.mini_post, mpcomment], :class => "btn-alert icon-del-comment pull-right", :method => :delete, :data => ({ :confirm => "Are you sure you want to delete this comment?" }), :title => "remove comment") do; [ignored]; end
[Escaped Output] raw(cr2br(h(mpcomment.content)))
[Escaped Output] f.text_field(:content, :id => "comment-textbox", :placeholder => t("newcomment"), :class => "form-control input-xs")
[Escaped Output] f.submit(t("comment"), :id => "new-comment-bt", :class => "btn btn-sm btn-outline-success", :title => t("comment"))
[Escaped Output] form_for([mini_post, mini_post.mini_post_comment.build]) do; [Escaped Output] f.text_field(:content, :id => "comment-textbox", :placeholder => t("newcomment"), :class => "form-control input-xs");[Escaped Output] f.submit(t("comment"), :id => "new-comment-bt", :class => "btn btn-sm btn-outline-success", :title => t("comment")); end

wall/_mini_post.["Template:timeline/index"]

[Escaped Output] (Unresolved Model).new.user.avatar.url(:thumb)
[Escaped Output] image_url("missing_avatar.png")
[Escaped Output] link_to((Unresolved Model).new.user.firstname, current_user.nickname)
[Escaped Output] (Unresolved Model).new.user.nickname
[Escaped Output] time_ago_in_words_converter((Unresolved Model).new.created_at)
[Escaped Output] button_to((Unresolved Model).new, :class => "pdel", :method => :delete, :data => ({ :confirm => "Are you sure you want to delete this post?" }), :title => "remove post") do; [ignored]; end
[Escaped Output] (Unresolved Model).new.content_html
[Escaped Output] image_tag((Unresolved Model).new.image, :class => "img-responsive")
[Escaped Output] FormBuilder.new.hidden_field(:mini_post_id, :value => (Unresolved Model).new.id.to_s, :class => "mpid")
[Escaped Output] FormBuilder.new.hidden_field(:mini_post_liking_id, :value => mini_post_liking.id.to_s, :class => ("mplid_" + (Unresolved Model).new.id.to_s))
[Escaped Output] hidden_field_tag(("act_" + mini_post_liking.mini_post.id.to_s), 0, :class => "act")
[Escaped Output] (Unresolved Model).new.id
[Escaped Output] count_likes((Unresolved Model).new.id)
[Escaped Output] form_for(mini_post_liking) do; [Escaped Output] FormBuilder.new.hidden_field(:mini_post_id, :value => (Unresolved Model).new.id.to_s, :class => "mpid");[Escaped Output] FormBuilder.new.hidden_field(:mini_post_liking_id, :value => mini_post_liking.id.to_s, :class => ("mplid_" + (Unresolved Model).new.id.to_s));[Escaped Output] hidden_field_tag(("act_" + mini_post_liking.mini_post.id.to_s), 0, :class => "act");button_to(t("you like this post"), [mini_post_liking.mini_post, mini_post_liking], :confirm => "are you sure you want to unlike?", :alt => "unlike", :class => "btn btn-xs btn-success", :method => :delete, :id => "feed-icon-2013");[Escaped Output] (Unresolved Model).new.id;[Escaped Output] count_likes((Unresolved Model).new.id); end
[Escaped Output] (Unresolved Model).new.id
[Escaped Output] FormBuilder.new.hidden_field(:mini_post_id, :value => (Unresolved Model).new.id.to_s)
[Escaped Output] FormBuilder.new.hidden_field(:mini_post_liking_id, :value => mini_post_liking.id.to_s, :class => ("mpdid_" + (Unresolved Model).new.id.to_s))
[Escaped Output] hidden_field_tag(("disact_" + mini_post_liking.mini_post.id.to_s), 0, :class => "disact")
[Escaped Output] (Unresolved Model).new.id
[Escaped Output] count_dontlikes((Unresolved Model).new.id)
[Escaped Output] form_for(mini_post_liking) do; [Escaped Output] FormBuilder.new.hidden_field(:mini_post_id, :value => (Unresolved Model).new.id.to_s);[Escaped Output] FormBuilder.new.hidden_field(:mini_post_liking_id, :value => mini_post_liking.id.to_s, :class => ("mpdid_" + (Unresolved Model).new.id.to_s));[Escaped Output] hidden_field_tag(("disact_" + mini_post_liking.mini_post.id.to_s), 0, :class => "disact");button_to(t("you dont like this post"), [mini_post_liking.mini_post, mini_post_liking], :confirm => "are you sure you want to undislike?", :alt => "undislike", :class => "btn btn-xs btn-danger", :method => :delete, :id => "feed-icon-2013");[Escaped Output] (Unresolved Model).new.id;[Escaped Output] count_dontlikes((Unresolved Model).new.id); end
[Escaped Output] FormBuilder.new.hidden_field(:mini_post_id, :value => (Unresolved Model).new.id.to_s, :class => "mpid")
[Escaped Output] FormBuilder.new.hidden_field(:mini_post_liking_id, :value => "-337", :class => ("mplid_" + (Unresolved Model).new.id.to_s))
[Escaped Output] hidden_field_tag(("act_" + (Unresolved Model).new.id.to_s), 1, :class => "act")
[Escaped Output] FormBuilder.new.hidden_field(:liking, :value => true)
[Escaped Output] (Unresolved Model).new.id
[Escaped Output] count_likes((Unresolved Model).new.id)
[Escaped Output] form_for((Unresolved Model).new.mini_post_liking.build) do; [Escaped Output] FormBuilder.new.hidden_field(:mini_post_id, :value => (Unresolved Model).new.id.to_s, :class => "mpid");[Escaped Output] FormBuilder.new.hidden_field(:mini_post_liking_id, :value => "-337", :class => ("mplid_" + (Unresolved Model).new.id.to_s));[Escaped Output] hidden_field_tag(("act_" + (Unresolved Model).new.id.to_s), 1, :class => "act");[Escaped Output] FormBuilder.new.hidden_field(:liking, :value => true);[Escaped Output] (Unresolved Model).new.id;[Escaped Output] count_likes((Unresolved Model).new.id);submit_tag(t("like"), :name => "feed", :id => "feed-icon-2013", :class => "btn btn-xs btn-success"); end
[Escaped Output] (Unresolved Model).new.id
[Escaped Output] FormBuilder.new.hidden_field(:mini_post_id, :value => (Unresolved Model).new.id.to_s, :class => "mpid")
[Escaped Output] FormBuilder.new.hidden_field(:mini_post_liking_id, :value => "-337", :class => ("mpdid_" + (Unresolved Model).new.id.to_s))
[Escaped Output] hidden_field_tag(("disact_" + (Unresolved Model).new.id.to_s), 1, :class => "disact")
[Escaped Output] count_dontlikes((Unresolved Model).new.id)
[Escaped Output] (Unresolved Model).new.id
[Escaped Output] form_for((Unresolved Model).new.mini_post_liking.build) do; [Escaped Output] FormBuilder.new.hidden_field(:mini_post_id, :value => (Unresolved Model).new.id.to_s, :class => "mpid");[Escaped Output] FormBuilder.new.hidden_field(:mini_post_liking_id, :value => "-337", :class => ("mpdid_" + (Unresolved Model).new.id.to_s));[Escaped Output] hidden_field_tag(("disact_" + (Unresolved Model).new.id.to_s), 1, :class => "disact");submit_tag(t("dislike"), :name => "feed", :id => "feed-icon-2013 dislike", :class => "btn btn-xs btn-danger");[Escaped Output] count_dontlikes((Unresolved Model).new.id);[Escaped Output] (Unresolved Model).new.id; end
[Escaped Output] (Unresolved Model).new.id
[Escaped Output] (Unresolved Model).new.mini_post_comment.count
[Escaped Output] FormBuilder.new.hidden_field(:mini_post_id, :value => (Unresolved Model).new.id.to_s, :class => "mpid")
[Escaped Output] FormBuilder.new.hidden_field(:mini_post_favorite_id, :value => mini_post_favorite.id.to_s, :class => ("mpfav_" + (Unresolved Model).new.id.to_s))
[Escaped Output] hidden_field_tag(("favact_" + mini_post_favorite.mini_post.id.to_s), 0, :class => "favact")
[Escaped Output] (Unresolved Model).new.id
[Escaped Output] count_favorites((Unresolved Model).new.id)
[Escaped Output] form_for(mini_post_favorite) do; [Escaped Output] FormBuilder.new.hidden_field(:mini_post_id, :value => (Unresolved Model).new.id.to_s, :class => "mpid");[Escaped Output] FormBuilder.new.hidden_field(:mini_post_favorite_id, :value => mini_post_favorite.id.to_s, :class => ("mpfav_" + (Unresolved Model).new.id.to_s));[Escaped Output] hidden_field_tag(("favact_" + mini_post_favorite.mini_post.id.to_s), 0, :class => "favact");[Escaped Output] (Unresolved Model).new.id;[Escaped Output] count_favorites((Unresolved Model).new.id); end
[Escaped Output] FormBuilder.new.hidden_field(:mini_post_id, :value => (Unresolved Model).new.id.to_s, :class => "mpid")
[Escaped Output] FormBuilder.new.hidden_field(:mini_post_favorite_id, :value => "-337", :class => ("mpfav_" + (Unresolved Model).new.id.to_s))
[Escaped Output] hidden_field_tag(("favact_" + (Unresolved Model).new.id.to_s), 1, :class => "favact")
[Escaped Output] FormBuilder.new.hidden_field(:favoriting, :value => true)
[Escaped Output] (Unresolved Model).new.id
[Escaped Output] count_favorites((Unresolved Model).new.id)
[Escaped Output] form_for((Unresolved Model).new.mini_post_favorite.build) do; [Escaped Output] FormBuilder.new.hidden_field(:mini_post_id, :value => (Unresolved Model).new.id.to_s, :class => "mpid");[Escaped Output] FormBuilder.new.hidden_field(:mini_post_favorite_id, :value => "-337", :class => ("mpfav_" + (Unresolved Model).new.id.to_s));[Escaped Output] hidden_field_tag(("favact_" + (Unresolved Model).new.id.to_s), 1, :class => "favact");[Escaped Output] FormBuilder.new.hidden_field(:favoriting, :value => true);[Escaped Output] (Unresolved Model).new.id;[Escaped Output] count_favorites((Unresolved Model).new.id); end
[Escaped Output] (Unresolved Model).new.id
[Escaped Output] mpcomment.user.avatar.url(:thumb)
[Escaped Output] image_url("missing_avatar.png")
[Escaped Output] link_to(mpcomment.user.firstname)
[Escaped Output] mpcomment.user.nickname
[Escaped Output] button_to([mpcomment.mini_post, mpcomment], :class => "btn-alert icon-del-comment pull-right", :method => :delete, :data => ({ :confirm => "Are you sure you want to delete this comment?" }), :title => "remove comment") do; [ignored]; end
[Escaped Output] raw(cr2br(h(mpcomment.content)))
[Escaped Output] FormBuilder.new.text_field(:content, :id => "comment-textbox", :placeholder => t("newcomment"), :class => "form-control input-xs")
[Escaped Output] FormBuilder.new.submit(t("comment"), :id => "new-comment-bt", :class => "btn btn-sm btn-outline-success", :title => t("comment"))
[Escaped Output] form_for([(Unresolved Model).new, (Unresolved Model).new.mini_post_comment.build]) do; [Escaped Output] FormBuilder.new.text_field(:content, :id => "comment-textbox", :placeholder => t("newcomment"), :class => "form-control input-xs");[Escaped Output] FormBuilder.new.submit(t("comment"), :id => "new-comment-bt", :class => "btn btn-sm btn-outline-success", :title => t("comment")); end

wall/_mini_post.["WallController#likes", "Template:wall/likes"]

[Escaped Output] MiniPost.new.user.avatar.url(:thumb)
[Escaped Output] image_url("missing_avatar.png")
[Escaped Output] link_to(MiniPost.new.user.firstname, current_user.nickname)
[Escaped Output] MiniPost.new.user.nickname
[Escaped Output] time_ago_in_words_converter(MiniPost.new.created_at)
[Escaped Output] button_to(MiniPost.new, :class => "pdel", :method => :delete, :data => ({ :confirm => "Are you sure you want to delete this post?" }), :title => "remove post") do; [ignored]; end
[Escaped Output] MiniPost.new.content_html
[Escaped Output] image_tag(MiniPost.new.image, :class => "img-responsive")
[Escaped Output] FormBuilder.new.hidden_field(:mini_post_id, :value => MiniPost.new.id.to_s, :class => "mpid")
[Escaped Output] FormBuilder.new.hidden_field(:mini_post_liking_id, :value => mini_post_liking.id.to_s, :class => ("mplid_" + MiniPost.new.id.to_s))
[Escaped Output] hidden_field_tag(("act_" + mini_post_liking.mini_post.id.to_s), 0, :class => "act")
[Escaped Output] MiniPost.new.id
[Escaped Output] count_likes(MiniPost.new.id)
[Escaped Output] form_for(mini_post_liking) do; [Escaped Output] FormBuilder.new.hidden_field(:mini_post_id, :value => MiniPost.new.id.to_s, :class => "mpid");[Escaped Output] FormBuilder.new.hidden_field(:mini_post_liking_id, :value => mini_post_liking.id.to_s, :class => ("mplid_" + MiniPost.new.id.to_s));[Escaped Output] hidden_field_tag(("act_" + mini_post_liking.mini_post.id.to_s), 0, :class => "act");button_to(t("you like this post"), [mini_post_liking.mini_post, mini_post_liking], :confirm => "are you sure you want to unlike?", :alt => "unlike", :class => "btn btn-xs btn-success", :method => :delete, :id => "feed-icon-2013");[Escaped Output] MiniPost.new.id;[Escaped Output] count_likes(MiniPost.new.id); end
[Escaped Output] MiniPost.new.id
[Escaped Output] FormBuilder.new.hidden_field(:mini_post_id, :value => MiniPost.new.id.to_s)
[Escaped Output] FormBuilder.new.hidden_field(:mini_post_liking_id, :value => mini_post_liking.id.to_s, :class => ("mpdid_" + MiniPost.new.id.to_s))
[Escaped Output] hidden_field_tag(("disact_" + mini_post_liking.mini_post.id.to_s), 0, :class => "disact")
[Escaped Output] MiniPost.new.id
[Escaped Output] count_dontlikes(MiniPost.new.id)
[Escaped Output] form_for(mini_post_liking) do; [Escaped Output] FormBuilder.new.hidden_field(:mini_post_id, :value => MiniPost.new.id.to_s);[Escaped Output] FormBuilder.new.hidden_field(:mini_post_liking_id, :value => mini_post_liking.id.to_s, :class => ("mpdid_" + MiniPost.new.id.to_s));[Escaped Output] hidden_field_tag(("disact_" + mini_post_liking.mini_post.id.to_s), 0, :class => "disact");button_to(t("you dont like this post"), [mini_post_liking.mini_post, mini_post_liking], :confirm => "are you sure you want to undislike?", :alt => "undislike", :class => "btn btn-xs btn-danger", :method => :delete, :id => "feed-icon-2013");[Escaped Output] MiniPost.new.id;[Escaped Output] count_dontlikes(MiniPost.new.id); end
[Escaped Output] FormBuilder.new.hidden_field(:mini_post_id, :value => MiniPost.new.id.to_s, :class => "mpid")
[Escaped Output] FormBuilder.new.hidden_field(:mini_post_liking_id, :value => "-337", :class => ("mplid_" + MiniPost.new.id.to_s))
[Escaped Output] hidden_field_tag(("act_" + MiniPost.new.id.to_s), 1, :class => "act")
[Escaped Output] FormBuilder.new.hidden_field(:liking, :value => true)
[Escaped Output] MiniPost.new.id
[Escaped Output] count_likes(MiniPost.new.id)
[Escaped Output] form_for(MiniPost.new.mini_post_liking.build) do; [Escaped Output] FormBuilder.new.hidden_field(:mini_post_id, :value => MiniPost.new.id.to_s, :class => "mpid");[Escaped Output] FormBuilder.new.hidden_field(:mini_post_liking_id, :value => "-337", :class => ("mplid_" + MiniPost.new.id.to_s));[Escaped Output] hidden_field_tag(("act_" + MiniPost.new.id.to_s), 1, :class => "act");[Escaped Output] FormBuilder.new.hidden_field(:liking, :value => true);[Escaped Output] MiniPost.new.id;[Escaped Output] count_likes(MiniPost.new.id);submit_tag(t("like"), :name => "feed", :id => "feed-icon-2013", :class => "btn btn-xs btn-success"); end
[Escaped Output] MiniPost.new.id
[Escaped Output] FormBuilder.new.hidden_field(:mini_post_id, :value => MiniPost.new.id.to_s, :class => "mpid")
[Escaped Output] FormBuilder.new.hidden_field(:mini_post_liking_id, :value => "-337", :class => ("mpdid_" + MiniPost.new.id.to_s))
[Escaped Output] hidden_field_tag(("disact_" + MiniPost.new.id.to_s), 1, :class => "disact")
[Escaped Output] count_dontlikes(MiniPost.new.id)
[Escaped Output] MiniPost.new.id
[Escaped Output] form_for(MiniPost.new.mini_post_liking.build) do; [Escaped Output] FormBuilder.new.hidden_field(:mini_post_id, :value => MiniPost.new.id.to_s, :class => "mpid");[Escaped Output] FormBuilder.new.hidden_field(:mini_post_liking_id, :value => "-337", :class => ("mpdid_" + MiniPost.new.id.to_s));[Escaped Output] hidden_field_tag(("disact_" + MiniPost.new.id.to_s), 1, :class => "disact");submit_tag(t("dislike"), :name => "feed", :id => "feed-icon-2013 dislike", :class => "btn btn-xs btn-danger");[Escaped Output] count_dontlikes(MiniPost.new.id);[Escaped Output] MiniPost.new.id; end
[Escaped Output] MiniPost.new.id
[Escaped Output] MiniPost.new.mini_post_comment.count
[Escaped Output] FormBuilder.new.hidden_field(:mini_post_id, :value => MiniPost.new.id.to_s, :class => "mpid")
[Escaped Output] FormBuilder.new.hidden_field(:mini_post_favorite_id, :value => mini_post_favorite.id.to_s, :class => ("mpfav_" + MiniPost.new.id.to_s))
[Escaped Output] hidden_field_tag(("favact_" + mini_post_favorite.mini_post.id.to_s), 0, :class => "favact")
[Escaped Output] MiniPost.new.id
[Escaped Output] count_favorites(MiniPost.new.id)
[Escaped Output] form_for(mini_post_favorite) do; [Escaped Output] FormBuilder.new.hidden_field(:mini_post_id, :value => MiniPost.new.id.to_s, :class => "mpid");[Escaped Output] FormBuilder.new.hidden_field(:mini_post_favorite_id, :value => mini_post_favorite.id.to_s, :class => ("mpfav_" + MiniPost.new.id.to_s));[Escaped Output] hidden_field_tag(("favact_" + mini_post_favorite.mini_post.id.to_s), 0, :class => "favact");[Escaped Output] MiniPost.new.id;[Escaped Output] count_favorites(MiniPost.new.id); end
[Escaped Output] FormBuilder.new.hidden_field(:mini_post_id, :value => MiniPost.new.id.to_s, :class => "mpid")
[Escaped Output] FormBuilder.new.hidden_field(:mini_post_favorite_id, :value => "-337", :class => ("mpfav_" + MiniPost.new.id.to_s))
[Escaped Output] hidden_field_tag(("favact_" + MiniPost.new.id.to_s), 1, :class => "favact")
[Escaped Output] FormBuilder.new.hidden_field(:favoriting, :value => true)
[Escaped Output] MiniPost.new.id
[Escaped Output] count_favorites(MiniPost.new.id)
[Escaped Output] form_for(MiniPost.new.mini_post_favorite.build) do; [Escaped Output] FormBuilder.new.hidden_field(:mini_post_id, :value => MiniPost.new.id.to_s, :class => "mpid");[Escaped Output] FormBuilder.new.hidden_field(:mini_post_favorite_id, :value => "-337", :class => ("mpfav_" + MiniPost.new.id.to_s));[Escaped Output] hidden_field_tag(("favact_" + MiniPost.new.id.to_s), 1, :class => "favact");[Escaped Output] FormBuilder.new.hidden_field(:favoriting, :value => true);[Escaped Output] MiniPost.new.id;[Escaped Output] count_favorites(MiniPost.new.id); end
[Escaped Output] MiniPost.new.id
[Escaped Output] mpcomment.user.avatar.url(:thumb)
[Escaped Output] image_url("missing_avatar.png")
[Escaped Output] link_to(mpcomment.user.firstname)
[Escaped Output] mpcomment.user.nickname
[Escaped Output] button_to([mpcomment.mini_post, mpcomment], :class => "btn-alert icon-del-comment pull-right", :method => :delete, :data => ({ :confirm => "Are you sure you want to delete this comment?" }), :title => "remove comment") do; [ignored]; end
[Escaped Output] raw(cr2br(h(mpcomment.content)))
[Escaped Output] FormBuilder.new.text_field(:content, :id => "comment-textbox", :placeholder => t("newcomment"), :class => "form-control input-xs")
[Escaped Output] FormBuilder.new.submit(t("comment"), :id => "new-comment-bt", :class => "btn btn-sm btn-outline-success", :title => t("comment"))
[Escaped Output] form_for([MiniPost.new, MiniPost.new.mini_post_comment.build]) do; [Escaped Output] FormBuilder.new.text_field(:content, :id => "comment-textbox", :placeholder => t("newcomment"), :class => "form-control input-xs");[Escaped Output] FormBuilder.new.submit(t("comment"), :id => "new-comment-bt", :class => "btn btn-sm btn-outline-success", :title => t("comment")); end

wall/_mini_postFULL

[Escaped Output] mini_post.user.avatar.url(:thumb)
[Escaped Output] image_url("missing_avatar.png")
[Escaped Output] link_to(mini_post.user.firstname, current_user.nickname)
[Escaped Output] mini_post.user.nickname
[Escaped Output] time_ago_in_words_converter(mini_post.created_at)
[Escaped Output] button_to(mini_post, :class => "pdel", :method => :delete, :data => ({ :confirm => "Are you sure you want to delete this post?" }), :title => "remove post") do; [ignored]; end
[Escaped Output] raw(mini_post.content_html)
[Escaped Output] image_tag(mini_post.image, :class => "img-responsive")
[Escaped Output] f.hidden_field(:mini_post_id, :value => mini_post.id.to_s, :class => "mpid")
[Escaped Output] f.hidden_field(:mini_post_liking_id, :value => mini_post_liking.id.to_s, :class => ("mplid_" + mini_post.id.to_s))
[Escaped Output] hidden_field_tag(("act_" + mini_post_liking.mini_post.id.to_s), 0, :class => "act")
[Escaped Output] mini_post.id
[Escaped Output] @likescount
[Escaped Output] form_for(mini_post_liking) do; [Escaped Output] f.hidden_field(:mini_post_id, :value => mini_post.id.to_s, :class => "mpid");[Escaped Output] f.hidden_field(:mini_post_liking_id, :value => mini_post_liking.id.to_s, :class => ("mplid_" + mini_post.id.to_s));[Escaped Output] hidden_field_tag(("act_" + mini_post_liking.mini_post.id.to_s), 0, :class => "act");button_to(t("you like this post"), [mini_post_liking.mini_post, mini_post_liking], :confirm => "are you sure you want to unlike?", :alt => "unlike", :class => "btn btn-xs btn-success", :method => :delete, :id => "feed-icon-2013");[Escaped Output] mini_post.id;[Escaped Output] @likescount; end
[Escaped Output] f.hidden_field(:mini_post_id, :value => mini_post.id.to_s)
[Escaped Output] f.hidden_field(:mini_post_liking_id, :value => mini_post_liking.id.to_s, :class => ("mpdid_" + mini_post.id.to_s))
[Escaped Output] hidden_field_tag(("disact_" + mini_post_liking.mini_post.id.to_s), 0, :class => "disact")
[Escaped Output] mini_post.id
[Escaped Output] @dontlikescount
[Escaped Output] form_for(mini_post_liking) do; [Escaped Output] f.hidden_field(:mini_post_id, :value => mini_post.id.to_s);[Escaped Output] f.hidden_field(:mini_post_liking_id, :value => mini_post_liking.id.to_s, :class => ("mpdid_" + mini_post.id.to_s));[Escaped Output] hidden_field_tag(("disact_" + mini_post_liking.mini_post.id.to_s), 0, :class => "disact");button_to(t("you dont like this post"), [mini_post_liking.mini_post, mini_post_liking], :confirm => "are you sure you want to undislike?", :alt => "undislike", :class => "btn btn-xs btn-danger", :method => :delete, :id => "feed-icon-2013");[Escaped Output] mini_post.id;[Escaped Output] @dontlikescount; end
[Escaped Output] f.hidden_field(:mini_post_id, :value => mini_post.id.to_s, :class => "mpid")
[Escaped Output] f.hidden_field(:mini_post_liking_id, :value => "-337", :class => ("mplid_" + mini_post.id.to_s))
[Escaped Output] hidden_field_tag(("act_" + mini_post.id.to_s), 1, :class => "act")
[Escaped Output] f.hidden_field(:liking, :value => true)
[Escaped Output] mini_post.id
[Escaped Output] @likescount
[Escaped Output] form_for(mini_post.mini_post_liking.build) do; [Escaped Output] f.hidden_field(:mini_post_id, :value => mini_post.id.to_s, :class => "mpid");[Escaped Output] f.hidden_field(:mini_post_liking_id, :value => "-337", :class => ("mplid_" + mini_post.id.to_s));[Escaped Output] hidden_field_tag(("act_" + mini_post.id.to_s), 1, :class => "act");[Escaped Output] f.hidden_field(:liking, :value => true);[Escaped Output] mini_post.id;[Escaped Output] @likescount;submit_tag(t("like"), :name => "feed", :id => "feed-icon-2013", :class => "btn btn-xs btn-success"); end
[Escaped Output] f.hidden_field(:mini_post_id, :value => mini_post.id.to_s, :class => "mpid")
[Escaped Output] f.hidden_field(:mini_post_liking_id, :value => "-337", :class => ("mpdid_" + mini_post.id.to_s))
[Escaped Output] hidden_field_tag(("disact_" + mini_post.id.to_s), 1, :class => "disact")
[Escaped Output] @dontlikescount
[Escaped Output] mini_post.id
[Escaped Output] form_for(mini_post.mini_post_liking.build) do; [Escaped Output] f.hidden_field(:mini_post_id, :value => mini_post.id.to_s, :class => "mpid");[Escaped Output] f.hidden_field(:mini_post_liking_id, :value => "-337", :class => ("mpdid_" + mini_post.id.to_s));[Escaped Output] hidden_field_tag(("disact_" + mini_post.id.to_s), 1, :class => "disact");submit_tag(t("dislike"), :name => "feed", :id => "feed-icon-2013 dislike", :class => "btn btn-xs btn-danger");[Escaped Output] @dontlikescount;[Escaped Output] mini_post.id; end
[Escaped Output] mini_post.id
[Escaped Output] @minipostcomments
[Escaped Output] f.hidden_field(:mini_post_id, :value => mini_post.id.to_s, :class => "mpid")
[Escaped Output] f.hidden_field(:mini_post_favorite_id, :value => mini_post_favorite.id.to_s, :class => ("mpfav_" + mini_post.id.to_s))
[Escaped Output] hidden_field_tag(("favact_" + mini_post_favorite.mini_post.id.to_s), 0, :class => "favact")
[Escaped Output] mini_post.id
[Escaped Output] @favorites
[Escaped Output] form_for(mini_post_favorite) do; [Escaped Output] f.hidden_field(:mini_post_id, :value => mini_post.id.to_s, :class => "mpid");[Escaped Output] f.hidden_field(:mini_post_favorite_id, :value => mini_post_favorite.id.to_s, :class => ("mpfav_" + mini_post.id.to_s));[Escaped Output] hidden_field_tag(("favact_" + mini_post_favorite.mini_post.id.to_s), 0, :class => "favact");[Escaped Output] mini_post.id;[Escaped Output] @favorites; end
[Escaped Output] f.hidden_field(:mini_post_id, :value => mini_post.id.to_s, :class => "mpid")
[Escaped Output] f.hidden_field(:mini_post_favorite_id, :value => "-337", :class => ("mpfav_" + mini_post.id.to_s))
[Escaped Output] hidden_field_tag(("favact_" + mini_post.id.to_s), 1, :class => "favact")
[Escaped Output] f.hidden_field(:favoriting, :value => true)
[Escaped Output] mini_post.id
[Escaped Output] @favorites
[Escaped Output] form_for(mini_post.mini_post_favorite.build) do; [Escaped Output] f.hidden_field(:mini_post_id, :value => mini_post.id.to_s, :class => "mpid");[Escaped Output] f.hidden_field(:mini_post_favorite_id, :value => "-337", :class => ("mpfav_" + mini_post.id.to_s));[Escaped Output] hidden_field_tag(("favact_" + mini_post.id.to_s), 1, :class => "favact");[Escaped Output] f.hidden_field(:favoriting, :value => true);[Escaped Output] mini_post.id;[Escaped Output] @favorites; end
[Escaped Output] h.hidden_field(:feed_id, :value => feed.id.to_s)
[Escaped Output] button_to((((@feed.feedtext + " [") + tot.to_s) + "]"), [feed.mini_post, feed], :confirm => "are you sure you want to remove your sensation?", :alt => "remove-feed", :class => "btn btn-xs btn-warning", :method => :delete, :id => "feed-icon-2013")
[Escaped Output] form_for(feed) do; [Escaped Output] h.hidden_field(:feed_id, :value => feed.id.to_s);[Escaped Output] button_to((((@feed.feedtext + " [") + tot.to_s) + "]"), [feed.mini_post, feed], :confirm => "are you sure you want to remove your sensation?", :alt => "remove-feed", :class => "btn btn-xs btn-warning", :method => :delete, :id => "feed-icon-2013"); end
[Escaped Output] label_tag((((@feed.feedtext + " [") + tot.to_s) + "]"), nil, :class => "feedtext")
[Escaped Output] label_tag((((@feed.feedtext + " [") + tot.to_s) + "]"), nil, :class => "feedtext")
[Escaped Output] mpcomment.user.avatar.url(:thumb)
[Escaped Output] image_url("missing_avatar.png")
[Escaped Output] link_to(mpcomment.user.nickname)
[Escaped Output] time_ago_in_words_converter(mpcomment.created_at).split(",").first
[Escaped Output] mpcomment.user.nickname
[Escaped Output] button_to([mpcomment.mini_post, mpcomment], :class => "btn-alert icon-del-post", :method => :delete, :data => ({ :confirm => "Are you sure you want to delete this comment?" }), :title => "remove comment") do; [ignored]; end
[Escaped Output] raw(cr2br(h(mpcomment.content)))
[Escaped Output] image_tag(mpcomment.user.avatar.url, :class => "thumbnail-comment")
[Escaped Output] f.hidden_field(:mini_post_comment_liking_id, :value => mini_post_comm_liking.id.to_s)
[Escaped Output] button_to(t("you like this post"), mini_post_comm_liking, :class => "btn btn-xs btn-success", :confirm => "Are you sure?", :title => "delete_comment", :method => :delete, :id => "feed-icon-2013")
[Escaped Output] form_for(mini_post_comm_liking) do; [Escaped Output] f.hidden_field(:mini_post_comment_liking_id, :value => mini_post_comm_liking.id.to_s);[Escaped Output] button_to(t("you like this post"), mini_post_comm_liking, :class => "btn btn-xs btn-success", :confirm => "Are you sure?", :title => "delete_comment", :method => :delete, :id => "feed-icon-2013"); end
[Escaped Output] f.hidden_field(:mini_post_comment_liking_id, :value => mini_post_comm_liking.id.to_s)
[Escaped Output] button_to(t("you dont like this post"), mini_post_comm_liking, :class => "btn btn-xs btn-danger", :confirm => "Are you sure?", :title => "delete_comment", :method => :delete, :id => "feed-icon-2013")
[Escaped Output] form_for(mini_post_comm_liking) do; [Escaped Output] f.hidden_field(:mini_post_comment_liking_id, :value => mini_post_comm_liking.id.to_s);[Escaped Output] button_to(t("you dont like this post"), mini_post_comm_liking, :class => "btn btn-xs btn-danger", :confirm => "Are you sure?", :title => "delete_comment", :method => :delete, :id => "feed-icon-2013"); end
[Escaped Output] f.hidden_field(:liking, :value => true)
[Escaped Output] f.hidden_field(:mini_post_comment_id, :value => mpcomment.id.to_s)
[Escaped Output] submit_tag(t("like"), :name => "feed", :id => "feed-icon-2013", :class => "btn btn-xs btn-success")
[Escaped Output] form_for(mpcomment.mini_post_comment_liking.build) do; [Escaped Output] f.hidden_field(:liking, :value => true);[Escaped Output] f.hidden_field(:mini_post_comment_id, :value => mpcomment.id.to_s);[Escaped Output] submit_tag(t("like"), :name => "feed", :id => "feed-icon-2013", :class => "btn btn-xs btn-success"); end
[Escaped Output] f.hidden_field(:liking, :value => false)
[Escaped Output] f.hidden_field(:mini_post_comment_id, :value => mpcomment.id.to_s)
[Escaped Output] submit_tag(t("dislike"), :name => "feed", :id => "feed-icon-2013", :class => "btn btn-xs btn-danger")
[Escaped Output] form_for(mpcomment.mini_post_comment_liking.build) do; [Escaped Output] f.hidden_field(:liking, :value => false);[Escaped Output] f.hidden_field(:mini_post_comment_id, :value => mpcomment.id.to_s);[Escaped Output] submit_tag(t("dislike"), :name => "feed", :id => "feed-icon-2013", :class => "btn btn-xs btn-danger"); end
[Escaped Output] f.text_field(:content, :id => "comment-textbox", :placeholder => t("newcomment"), :class => "form-control input-sm d4xcomment")
[Escaped Output] f.submit(t("comment"), :id => "new-comment-bt", :class => "btn btn-sm btn-success", :title => t("comment"))
[Escaped Output] form_for([mini_post, mini_post.mini_post_comment.build]) do; [Escaped Output] f.text_field(:content, :id => "comment-textbox", :placeholder => t("newcomment"), :class => "form-control input-sm d4xcomment");[Escaped Output] f.submit(t("comment"), :id => "new-comment-bt", :class => "btn btn-sm btn-success", :title => t("comment")); end

wall/_mini_postORIG

[Escaped Output] mini_post.user.avatar.url(:thumb)
[Escaped Output] image_url("missing_avatar.png")
[Escaped Output] time_ago_in_words(mini_post.created_at)
[Escaped Output] t("ago")
[Escaped Output] link_to(mini_post, :class => "btn-alert icon-del-post", :method => :delete, :confirm => "Are you sure you want to delete this post?", :title => "remove post") do; [ignored]; end
[Escaped Output] link_to(mini_post.user.firstname, ("/profiles/" + mini_post.user.id.to_s))
[Escaped Output] mini_post.user.nickname
[Escaped Output] raw(mini_post.content_html)
[Escaped Output] image_tag(mini_post.image, :class => "img-responsive")
[Escaped Output] f.hidden_field(:mini_post_id, :value => mini_post.id.to_s, :class => "mpid")
[Escaped Output] f.hidden_field(:mini_post_liking_id, :value => mini_post_liking.id.to_s, :class => ("mplid_" + mini_post.id.to_s))
[Escaped Output] hidden_field_tag(("act_" + mini_post_liking.mini_post.id.to_s), 0, :class => "act")
[Escaped Output] mini_post.id
[Escaped Output] form_for(mini_post_liking) do; [Escaped Output] f.hidden_field(:mini_post_id, :value => mini_post.id.to_s, :class => "mpid");[Escaped Output] f.hidden_field(:mini_post_liking_id, :value => mini_post_liking.id.to_s, :class => ("mplid_" + mini_post.id.to_s));[Escaped Output] hidden_field_tag(("act_" + mini_post_liking.mini_post.id.to_s), 0, :class => "act");button_to(t("you like this post"), [mini_post_liking.mini_post, mini_post_liking], :confirm => "are you sure you want to unlike?", :alt => "unlike", :class => "btn btn-xs btn-success", :method => :delete, :id => "feed-icon-2013");[Escaped Output] mini_post.id; end
[Escaped Output] f.hidden_field(:mini_post_id, :value => mini_post.id.to_s)
[Escaped Output] f.hidden_field(:mini_post_liking_id, :value => mini_post_liking.id.to_s, :class => ("mpdid_" + mini_post.id.to_s))
[Escaped Output] hidden_field_tag(("disact_" + mini_post_liking.mini_post.id.to_s), 0, :class => "disact")
[Escaped Output] mini_post.id
[Escaped Output] form_for(mini_post_liking) do; [Escaped Output] f.hidden_field(:mini_post_id, :value => mini_post.id.to_s);[Escaped Output] f.hidden_field(:mini_post_liking_id, :value => mini_post_liking.id.to_s, :class => ("mpdid_" + mini_post.id.to_s));[Escaped Output] hidden_field_tag(("disact_" + mini_post_liking.mini_post.id.to_s), 0, :class => "disact");button_to(t("you dont like this post"), [mini_post_liking.mini_post, mini_post_liking], :confirm => "are you sure you want to undislike?", :alt => "undislike", :class => "btn btn-xs btn-danger", :method => :delete, :id => "feed-icon-2013");[Escaped Output] mini_post.id; end
[Escaped Output] f.hidden_field(:mini_post_id, :value => mini_post.id.to_s, :class => "mpid")
[Escaped Output] f.hidden_field(:mini_post_liking_id, :value => "-337", :class => ("mplid_" + mini_post.id.to_s))
[Escaped Output] hidden_field_tag(("act_" + mini_post.id.to_s), 1, :class => "act")
[Escaped Output] f.hidden_field(:liking, :value => true)
[Escaped Output] mini_post.id
[Escaped Output] form_for(mini_post.mini_post_liking.build) do; [Escaped Output] f.hidden_field(:mini_post_id, :value => mini_post.id.to_s, :class => "mpid");[Escaped Output] f.hidden_field(:mini_post_liking_id, :value => "-337", :class => ("mplid_" + mini_post.id.to_s));[Escaped Output] hidden_field_tag(("act_" + mini_post.id.to_s), 1, :class => "act");[Escaped Output] f.hidden_field(:liking, :value => true);[Escaped Output] mini_post.id;submit_tag(t("like"), :name => "feed", :id => "feed-icon-2013", :class => "btn btn-xs btn-success"); end
[Escaped Output] f.hidden_field(:mini_post_id, :value => mini_post.id.to_s, :class => "mpid")
[Escaped Output] f.hidden_field(:mini_post_liking_id, :value => "-337", :class => ("mpdid_" + mini_post.id.to_s))
[Escaped Output] hidden_field_tag(("disact_" + mini_post.id.to_s), 1, :class => "disact")
[Escaped Output] mini_post.id
[Escaped Output] form_for(mini_post.mini_post_liking.build) do; [Escaped Output] f.hidden_field(:mini_post_id, :value => mini_post.id.to_s, :class => "mpid");[Escaped Output] f.hidden_field(:mini_post_liking_id, :value => "-337", :class => ("mpdid_" + mini_post.id.to_s));[Escaped Output] hidden_field_tag(("disact_" + mini_post.id.to_s), 1, :class => "disact");submit_tag(t("dislike"), :name => "feed", :id => "feed-icon-2013 dislike", :class => "btn btn-xs btn-danger");[Escaped Output] mini_post.id; end
[Escaped Output] f.hidden_field(:mini_post_id, :value => mini_post.id.to_s, :class => "mpid")
[Escaped Output] f.hidden_field(:mini_post_favorite_id, :value => mini_post_favorite.id.to_s, :class => ("mpfav_" + mini_post.id.to_s))
[Escaped Output] hidden_field_tag(("favact_" + mini_post_favorite.mini_post.id.to_s), 0, :class => "favact")
[Escaped Output] mini_post.id
[Escaped Output] form_for(mini_post_favorite) do; [Escaped Output] f.hidden_field(:mini_post_id, :value => mini_post.id.to_s, :class => "mpid");[Escaped Output] f.hidden_field(:mini_post_favorite_id, :value => mini_post_favorite.id.to_s, :class => ("mpfav_" + mini_post.id.to_s));[Escaped Output] hidden_field_tag(("favact_" + mini_post_favorite.mini_post.id.to_s), 0, :class => "favact");[Escaped Output] mini_post.id; end
[Escaped Output] @favorites
[Escaped Output] f.hidden_field(:mini_post_id, :value => mini_post.id.to_s, :class => "mpid")
[Escaped Output] f.hidden_field(:mini_post_favorite_id, :value => "-337", :class => ("mpfav_" + mini_post.id.to_s))
[Escaped Output] hidden_field_tag(("favact_" + mini_post.id.to_s), 1, :class => "favact")
[Escaped Output] f.hidden_field(:favoriting, :value => true)
[Escaped Output] mini_post.id
[Escaped Output] form_for(mini_post.mini_post_favorite.build) do; [Escaped Output] f.hidden_field(:mini_post_id, :value => mini_post.id.to_s, :class => "mpid");[Escaped Output] f.hidden_field(:mini_post_favorite_id, :value => "-337", :class => ("mpfav_" + mini_post.id.to_s));[Escaped Output] hidden_field_tag(("favact_" + mini_post.id.to_s), 1, :class => "favact");[Escaped Output] f.hidden_field(:favoriting, :value => true);[Escaped Output] mini_post.id; end
[Escaped Output] @favorites
[Escaped Output] h.hidden_field(:feed_id, :value => feed.id.to_s)
[Escaped Output] button_to((((@feed.feedtext + " [") + tot.to_s) + "]"), [feed.mini_post, feed], :confirm => "are you sure you want to remove your sensation?", :alt => "remove-feed", :class => "btn btn-xs btn-warning", :method => :delete, :id => "feed-icon-2013")
[Escaped Output] form_for(feed) do; [Escaped Output] h.hidden_field(:feed_id, :value => feed.id.to_s);[Escaped Output] button_to((((@feed.feedtext + " [") + tot.to_s) + "]"), [feed.mini_post, feed], :confirm => "are you sure you want to remove your sensation?", :alt => "remove-feed", :class => "btn btn-xs btn-warning", :method => :delete, :id => "feed-icon-2013"); end
[Escaped Output] label_tag((((@feed.feedtext + " [") + tot.to_s) + "]"), nil, :class => "feedtext")
[Escaped Output] label_tag((((@feed.feedtext + " [") + tot.to_s) + "]"), nil, :class => "feedtext")
[Escaped Output] image_tag(mpcomment.user.avatar.url, :class => "thumbnail-comment")
[Escaped Output] mpcomment.user.firstname
[Escaped Output] time_ago_in_words(mpcomment.created_at)
[Escaped Output] link_to(mpcomment.user.nickname, mpcomment.user)
[Escaped Output] link_to([mpcomment.mini_post, mpcomment], :class => "btn-alert icon-del-post", :method => :delete, :confirm => "Are you sure you want to remove this comment?", :title => "remove comment") do; [ignored]; end
[Escaped Output] raw(cr2br(h(mpcomment.content)))
[Escaped Output] f.hidden_field(:mini_post_comment_liking_id, :value => mini_post_comm_liking.id.to_s)
[Escaped Output] button_to(t("you like this post"), mini_post_comm_liking, :class => "btn btn-xs btn-success", :confirm => "Are you sure?", :title => "delete_comment", :method => :delete, :id => "feed-icon-2013")
[Escaped Output] form_for(mini_post_comm_liking) do; [Escaped Output] f.hidden_field(:mini_post_comment_liking_id, :value => mini_post_comm_liking.id.to_s);[Escaped Output] button_to(t("you like this post"), mini_post_comm_liking, :class => "btn btn-xs btn-success", :confirm => "Are you sure?", :title => "delete_comment", :method => :delete, :id => "feed-icon-2013"); end
[Escaped Output] f.hidden_field(:mini_post_comment_liking_id, :value => mini_post_comm_liking.id.to_s)
[Escaped Output] button_to(t("you dont like this post"), mini_post_comm_liking, :class => "btn btn-xs btn-danger", :confirm => "Are you sure?", :title => "delete_comment", :method => :delete, :id => "feed-icon-2013")
[Escaped Output] form_for(mini_post_comm_liking) do; [Escaped Output] f.hidden_field(:mini_post_comment_liking_id, :value => mini_post_comm_liking.id.to_s);[Escaped Output] button_to(t("you dont like this post"), mini_post_comm_liking, :class => "btn btn-xs btn-danger", :confirm => "Are you sure?", :title => "delete_comment", :method => :delete, :id => "feed-icon-2013"); end
[Escaped Output] f.hidden_field(:liking, :value => true)
[Escaped Output] f.hidden_field(:mini_post_comment_id, :value => mpcomment.id.to_s)
[Escaped Output] submit_tag(t("like"), :name => "feed", :id => "feed-icon-2013", :class => "btn btn-xs btn-success")
[Escaped Output] form_for(mpcomment.mini_post_comment_liking.build) do; [Escaped Output] f.hidden_field(:liking, :value => true);[Escaped Output] f.hidden_field(:mini_post_comment_id, :value => mpcomment.id.to_s);[Escaped Output] submit_tag(t("like"), :name => "feed", :id => "feed-icon-2013", :class => "btn btn-xs btn-success"); end
[Escaped Output] f.hidden_field(:liking, :value => false)
[Escaped Output] f.hidden_field(:mini_post_comment_id, :value => mpcomment.id.to_s)
[Escaped Output] submit_tag(t("dislike"), :name => "feed", :id => "feed-icon-2013", :class => "btn btn-xs btn-danger")
[Escaped Output] form_for(mpcomment.mini_post_comment_liking.build) do; [Escaped Output] f.hidden_field(:liking, :value => false);[Escaped Output] f.hidden_field(:mini_post_comment_id, :value => mpcomment.id.to_s);[Escaped Output] submit_tag(t("dislike"), :name => "feed", :id => "feed-icon-2013", :class => "btn btn-xs btn-danger"); end
[Escaped Output] f.text_field(:content, :id => "comment-textbox", :placeholder => t("newcomment"), :class => "form-control input-xs")
[Escaped Output] f.submit(t("comment"), :id => "new-comment-bt", :class => "btn btn-xs btn-success", :title => t("comment"))
[Escaped Output] form_for([mini_post, mini_post.mini_post_comment.build]) do; [Escaped Output] f.text_field(:content, :id => "comment-textbox", :placeholder => t("newcomment"), :class => "form-control input-xs");[Escaped Output] f.submit(t("comment"), :id => "new-comment-bt", :class => "btn btn-xs btn-success", :title => t("comment")); end

wall/_mini_test

[Escaped Output] mini_post.user.avatar.url(:thumb)
[Escaped Output] image_url("missing_avatar.png")
[Escaped Output] time_ago_in_words(mini_post.created_at)
[Escaped Output] t("ago")
[Escaped Output] link_to(mini_post, :class => "btn-alert icon-del-post", :method => :delete, :confirm => "Are you sure you want to delete this post?", :title => "remove post") do; [ignored]; end
[Escaped Output] link_to(mini_post.user.firstname, ("/profiles/" + mini_post.user.id.to_s))
[Escaped Output] mini_post.user.nickname
[Escaped Output] raw(mini_post.content_html)
[Escaped Output] image_tag(mini_post.image, :class => "img-responsive")
[Escaped Output] f.hidden_field(:mini_post_id, :value => mini_post.id.to_s, :class => "mpid")
[Escaped Output] f.hidden_field(:mini_post_liking_id, :value => mini_post_liking.id.to_s, :class => ("mplid_" + mini_post.id.to_s))
[Escaped Output] hidden_field_tag(("act_" + mini_post_liking.mini_post.id.to_s), 0, :class => "act")
[Escaped Output] mini_post.id
[Escaped Output] form_for(mini_post_liking) do; [Escaped Output] f.hidden_field(:mini_post_id, :value => mini_post.id.to_s, :class => "mpid");[Escaped Output] f.hidden_field(:mini_post_liking_id, :value => mini_post_liking.id.to_s, :class => ("mplid_" + mini_post.id.to_s));[Escaped Output] hidden_field_tag(("act_" + mini_post_liking.mini_post.id.to_s), 0, :class => "act");button_to(t("you like this post"), [mini_post_liking.mini_post, mini_post_liking], :confirm => "are you sure you want to unlike?", :alt => "unlike", :class => "btn btn-xs btn-success", :method => :delete, :id => "feed-icon-2013");[Escaped Output] mini_post.id; end
[Escaped Output] f.hidden_field(:mini_post_id, :value => mini_post.id.to_s)
[Escaped Output] f.hidden_field(:mini_post_liking_id, :value => mini_post_liking.id.to_s, :class => ("mpdid_" + mini_post.id.to_s))
[Escaped Output] hidden_field_tag(("disact_" + mini_post_liking.mini_post.id.to_s), 0, :class => "disact")
[Escaped Output] mini_post.id
[Escaped Output] form_for(mini_post_liking) do; [Escaped Output] f.hidden_field(:mini_post_id, :value => mini_post.id.to_s);[Escaped Output] f.hidden_field(:mini_post_liking_id, :value => mini_post_liking.id.to_s, :class => ("mpdid_" + mini_post.id.to_s));[Escaped Output] hidden_field_tag(("disact_" + mini_post_liking.mini_post.id.to_s), 0, :class => "disact");button_to(t("you dont like this post"), [mini_post_liking.mini_post, mini_post_liking], :confirm => "are you sure you want to undislike?", :alt => "undislike", :class => "btn btn-xs btn-danger", :method => :delete, :id => "feed-icon-2013");[Escaped Output] mini_post.id; end
[Escaped Output] f.hidden_field(:mini_post_id, :value => mini_post.id.to_s, :class => "mpid")
[Escaped Output] f.hidden_field(:mini_post_liking_id, :value => "-337", :class => ("mplid_" + mini_post.id.to_s))
[Escaped Output] hidden_field_tag(("act_" + mini_post.id.to_s), 1, :class => "act")
[Escaped Output] f.hidden_field(:liking, :value => true)
[Escaped Output] mini_post.id
[Escaped Output] form_for(mini_post.mini_post_liking.build) do; [Escaped Output] f.hidden_field(:mini_post_id, :value => mini_post.id.to_s, :class => "mpid");[Escaped Output] f.hidden_field(:mini_post_liking_id, :value => "-337", :class => ("mplid_" + mini_post.id.to_s));[Escaped Output] hidden_field_tag(("act_" + mini_post.id.to_s), 1, :class => "act");[Escaped Output] f.hidden_field(:liking, :value => true);[Escaped Output] mini_post.id;submit_tag(t("like"), :name => "feed", :id => "feed-icon-2013", :class => "btn btn-xs btn-success"); end
[Escaped Output] f.hidden_field(:mini_post_id, :value => mini_post.id.to_s, :class => "mpid")
[Escaped Output] f.hidden_field(:mini_post_liking_id, :value => "-337", :class => ("mpdid_" + mini_post.id.to_s))
[Escaped Output] hidden_field_tag(("disact_" + mini_post.id.to_s), 1, :class => "disact")
[Escaped Output] mini_post.id
[Escaped Output] form_for(mini_post.mini_post_liking.build) do; [Escaped Output] f.hidden_field(:mini_post_id, :value => mini_post.id.to_s, :class => "mpid");[Escaped Output] f.hidden_field(:mini_post_liking_id, :value => "-337", :class => ("mpdid_" + mini_post.id.to_s));[Escaped Output] hidden_field_tag(("disact_" + mini_post.id.to_s), 1, :class => "disact");submit_tag(t("dislike"), :name => "feed", :id => "feed-icon-2013 dislike", :class => "btn btn-xs btn-danger");[Escaped Output] mini_post.id; end
[Escaped Output] f.hidden_field(:mini_post_id, :value => mini_post.id.to_s, :class => "mpid")
[Escaped Output] f.hidden_field(:mini_post_favorite_id, :value => mini_post_favorite.id.to_s, :class => ("mpfav_" + mini_post.id.to_s))
[Escaped Output] hidden_field_tag(("favact_" + mini_post_favorite.mini_post.id.to_s), 0, :class => "favact")
[Escaped Output] mini_post.id
[Escaped Output] form_for(mini_post_favorite) do; [Escaped Output] f.hidden_field(:mini_post_id, :value => mini_post.id.to_s, :class => "mpid");[Escaped Output] f.hidden_field(:mini_post_favorite_id, :value => mini_post_favorite.id.to_s, :class => ("mpfav_" + mini_post.id.to_s));[Escaped Output] hidden_field_tag(("favact_" + mini_post_favorite.mini_post.id.to_s), 0, :class => "favact");[Escaped Output] mini_post.id; end
[Escaped Output] @favorites
[Escaped Output] f.hidden_field(:mini_post_id, :value => mini_post.id.to_s, :class => "mpid")
[Escaped Output] f.hidden_field(:mini_post_favorite_id, :value => "-337", :class => ("mpfav_" + mini_post.id.to_s))
[Escaped Output] hidden_field_tag(("favact_" + mini_post.id.to_s), 1, :class => "favact")
[Escaped Output] f.hidden_field(:favoriting, :value => true)
[Escaped Output] mini_post.id
[Escaped Output] form_for(mini_post.mini_post_favorite.build) do; [Escaped Output] f.hidden_field(:mini_post_id, :value => mini_post.id.to_s, :class => "mpid");[Escaped Output] f.hidden_field(:mini_post_favorite_id, :value => "-337", :class => ("mpfav_" + mini_post.id.to_s));[Escaped Output] hidden_field_tag(("favact_" + mini_post.id.to_s), 1, :class => "favact");[Escaped Output] f.hidden_field(:favoriting, :value => true);[Escaped Output] mini_post.id; end
[Escaped Output] @favorites
[Escaped Output] mpcomment.user.avatar.url(:thumb)
[Escaped Output] image_url("missing_avatar.png")
[Escaped Output] link_to(mpcomment.user.nickname)
[Escaped Output] time_ago_in_words_converter(mpcomment.created_at).split(",").first
[Escaped Output] mpcomment.user.nickname
[Escaped Output] button_to([mpcomment.mini_post, mpcomment], :class => "btn-alert icon-del-post", :method => :delete, :confirm => "Are you sure you want to remove this comment?", :title => "remove comment") do; [ignored]; end
[Escaped Output] raw(cr2br(h(mpcomment.content)))

wall/favorites

[Escaped Output] nil
[Escaped Output] render(partial => "shared/new_post_social", {})
[Escaped Output] f.hidden_field(:mini_post_id)
[Escaped Output] f.text_area(:content, :class => "sharze-tarea", :multiline => false, :class => "form-control")
[Escaped Output] f.submit(d4x_sanitizer(t("comment")), :class => "btn btn-sm btn-d4x")
[Escaped Output] form_for(MiniPostComment.new, :html => ({ :multipart => true })) do; [Escaped Output] f.hidden_field(:mini_post_id);[Escaped Output] f.text_area(:content, :class => "sharze-tarea", :multiline => false, :class => "form-control");[Escaped Output] f.submit(d4x_sanitizer(t("comment")), :class => "btn btn-sm btn-d4x"); end
[Escaped Output] @mini_posts.to_a.last.created_at
[Escaped Output] hidden_field_tag(:totalpages, @mini_posts.total_pages)
[Escaped Output] hidden_field_tag(:currentpage, @mini_posts.next_page)
[Escaped Output] @mini_posts.to_a.last.created_at
[Escaped Output] @mini_posts.to_a.last.created_at
[Escaped Output] render(partial => "wall/mini_post", { :collection => (@mini_posts) })
[Escaped Output] image_tag("ajax-loader.gif", :class => "loading none", :id => "d4x-spinner")
[Escaped Output] will_paginate(@mini_posts, :style => "color:blue")
[Escaped Output] content_for(:rightside_content) do; [ignored]; end

wall/favorites.["WallController#favorites"]

[Escaped Output] nil
[Escaped Output] render(partial => "shared/new_post_social", {})
[Escaped Output] FormBuilder.new.hidden_field(:mini_post_id)
[Escaped Output] FormBuilder.new.text_area(:content, :class => "sharze-tarea", :multiline => false, :class => "form-control")
[Escaped Output] FormBuilder.new.submit(d4x_sanitizer(t("comment")), :class => "btn btn-sm btn-d4x")
[Escaped Output] form_for(MiniPostComment.new, :html => ({ :multipart => true })) do; [Escaped Output] FormBuilder.new.hidden_field(:mini_post_id);[Escaped Output] FormBuilder.new.text_area(:content, :class => "sharze-tarea", :multiline => false, :class => "form-control");[Escaped Output] FormBuilder.new.submit(d4x_sanitizer(t("comment")), :class => "btn btn-sm btn-d4x"); end
[Escaped Output] MiniPost.where("author_id in (?) and created_at < ?", current_user.friends.map(&:friend_id).push(current_user.id), ((Time.now + 1.second) or Time.parse(params[:last]))).page(params[:page]).limit(10).order(:created_at).reverse_order.to_a.last.created_at
[Escaped Output] hidden_field_tag(:totalpages, MiniPost.where("author_id in (?) and created_at < ?", current_user.friends.map(&:friend_id).push(current_user.id), ((Time.now + 1.second) or Time.parse(params[:last]))).page(params[:page]).limit(10).order(:created_at).reverse_order.total_pages)
[Escaped Output] hidden_field_tag(:currentpage, MiniPost.where("author_id in (?) and created_at < ?", current_user.friends.map(&:friend_id).push(current_user.id), ((Time.now + 1.second) or Time.parse(params[:last]))).page(params[:page]).limit(10).order(:created_at).reverse_order.next_page)
[Escaped Output] MiniPost.where("author_id in (?) and created_at < ?", current_user.friends.map(&:friend_id).push(current_user.id), ((Time.now + 1.second) or Time.parse(params[:last]))).page(params[:page]).limit(10).order(:created_at).reverse_order.to_a.last.created_at
[Escaped Output] MiniPost.where("author_id in (?) and created_at < ?", current_user.friends.map(&:friend_id).push(current_user.id), ((Time.now + 1.second) or Time.parse(params[:last]))).page(params[:page]).limit(10).order(:created_at).reverse_order.to_a.last.created_at
[Escaped Output] render(partial => "wall/mini_post", { :collection => MiniPost.where("author_id in (?) and created_at < ?", current_user.friends.map(&:friend_id).push(current_user.id), ((Time.now + 1.second) or Time.parse(params[:last]))).page(params[:page]).limit(10).order(:created_at).reverse_order })
[Escaped Output] image_tag("ajax-loader.gif", :class => "loading none", :id => "d4x-spinner")
[Escaped Output] will_paginate(MiniPost.where("author_id in (?) and created_at < ?", current_user.friends.map(&:friend_id).push(current_user.id), ((Time.now + 1.second) or Time.parse(params[:last]))).page(params[:page]).limit(10).order(:created_at).reverse_order, :style => "color:blue")
[Escaped Output] content_for(:rightside_content) do; [ignored]; end

wall/index

[Escaped Output] @mini_posts.last.created_at

wall/index.["WallController#index"]

[Escaped Output] MiniPost.where("author_id in (?) and created_at < ?", current_user.friends.map(&:friend_id).push(current_user.id), ((Time.now + 1.second) or Time.parse(params[:last]))).page(params[:page]).limit(7).order(:created_at).reverse_order.last.created_at

wall/indexOLDOK

[Escaped Output] nil
[Escaped Output] label_tag(t("timeline"), nil, :class => "navbar-where")
[Escaped Output] f.hidden_field(:mini_post_id)
[Escaped Output] f.text_area(:content, :class => "sharze-tarea", :multiline => false, :class => "form-control")
[Escaped Output] f.submit(d4x_sanitizer(t("comment")), :class => "btn btn-sm btn-d4x")
[Escaped Output] form_for(MiniPostComment.new, :html => ({ :multipart => true })) do; [Escaped Output] f.hidden_field(:mini_post_id);[Escaped Output] f.text_area(:content, :class => "sharze-tarea", :multiline => false, :class => "form-control");[Escaped Output] f.submit(d4x_sanitizer(t("comment")), :class => "btn btn-sm btn-d4x"); end
[Escaped Output] f.text_area(:content, :multiline => false, :class => "form-control", :placeholder => d4x_sanitizer(t("Share your status or thoughts with your network")))
[Escaped Output] f.file_field(:image, :onchange => "$(this).parent().parent().find('.form-control').html($(this).val().split(/[\\\\|/]/).pop());", :style => "display: none;")
[Escaped Output] button_to(d4x_sanitizer(t("post")), nil, :class => "btn btn-d4x btn-sm btn-block", :id => "share-submit-2013")
[Escaped Output] form_for(MiniPost.new, :html => ({ :multipart => true })) do; [Escaped Output] f.text_area(:content, :multiline => false, :class => "form-control", :placeholder => d4x_sanitizer(t("Share your status or thoughts with your network")));[Escaped Output] f.file_field(:image, :onchange => "$(this).parent().parent().find('.form-control').html($(this).val().split(/[\\\\|/]/).pop());", :style => "display: none;");[Escaped Output] button_to(d4x_sanitizer(t("post")), nil, :class => "btn btn-d4x btn-sm btn-block", :id => "share-submit-2013"); end
[Escaped Output] @mini_posts.to_a.last.created_at
[Escaped Output] hidden_field_tag(:totalpages, @mini_posts.total_pages)
[Escaped Output] hidden_field_tag(:currentpage, @mini_posts.next_page)
[Escaped Output] @mini_posts.to_a.last.created_at
[Escaped Output] @mini_posts.to_a.last.created_at
[Escaped Output] render(partial => "wall/mini_post", { :collection => (@mini_posts) })
[Escaped Output] image_tag("ajax-loader.gif", :class => "loading none", :id => "d4x-spinner")
[Escaped Output] will_paginate(@mini_posts, :style => "color:blue")

wall/indexOLDOKMOB

[Escaped Output] nil
[Escaped Output] label_tag(t("timeline"), nil, :class => "navbar-where")
[Escaped Output] f.hidden_field(:mini_post_id)
[Escaped Output] f.text_area(:content, :class => "sharze-tarea", :multiline => false, :class => "form-control")
[Escaped Output] f.submit(d4x_sanitizer(t("comment")), :class => "btn btn-sm btn-d4x")
[Escaped Output] form_for(MiniPostComment.new, :html => ({ :multipart => true })) do; [Escaped Output] f.hidden_field(:mini_post_id);[Escaped Output] f.text_area(:content, :class => "sharze-tarea", :multiline => false, :class => "form-control");[Escaped Output] f.submit(d4x_sanitizer(t("comment")), :class => "btn btn-sm btn-d4x"); end
[Escaped Output] f.text_area(:content, :multiline => false, :class => "form-control", :placeholder => d4x_sanitizer(t("Share your status or thoughts with your network")))
[Escaped Output] f.file_field(:image, :onchange => "$(this).parent().parent().find('.form-control').html($(this).val().split(/[\\\\|/]/).pop());", :style => "display: none;")
[Escaped Output] button_to(d4x_sanitizer(t("post")), nil, :class => "btn btn-d4x btn-sm btn-block", :id => "share-submit-2013")
[Escaped Output] form_for(MiniPost.new, :html => ({ :multipart => true })) do; [Escaped Output] f.text_area(:content, :multiline => false, :class => "form-control", :placeholder => d4x_sanitizer(t("Share your status or thoughts with your network")));[Escaped Output] f.file_field(:image, :onchange => "$(this).parent().parent().find('.form-control').html($(this).val().split(/[\\\\|/]/).pop());", :style => "display: none;");[Escaped Output] button_to(d4x_sanitizer(t("post")), nil, :class => "btn btn-d4x btn-sm btn-block", :id => "share-submit-2013"); end
[Escaped Output] @mini_posts.to_a.last.created_at
[Escaped Output] hidden_field_tag(:totalpages, @mini_posts.total_pages)
[Escaped Output] hidden_field_tag(:currentpage, @mini_posts.next_page)
[Escaped Output] @mini_posts.to_a.last.created_at
[Escaped Output] @mini_posts.to_a.last.created_at
[Escaped Output] render(partial => "wall/mini_post", { :collection => (@mini_posts) })
[Escaped Output] image_tag("ajax-loader.gif", :class => "loading none", :id => "d4x-spinner")
[Escaped Output] will_paginate(@mini_posts, :style => "color:blue")

wall/likes

[Escaped Output] nil
[Escaped Output] render(partial => "shared/new_post_social", {})
[Escaped Output] f.hidden_field(:mini_post_id)
[Escaped Output] f.text_area(:content, :class => "sharze-tarea", :multiline => false, :class => "form-control")
[Escaped Output] f.submit(d4x_sanitizer(t("comment")), :class => "btn btn-sm btn-d4x")
[Escaped Output] form_for(MiniPostComment.new, :html => ({ :multipart => true })) do; [Escaped Output] f.hidden_field(:mini_post_id);[Escaped Output] f.text_area(:content, :class => "sharze-tarea", :multiline => false, :class => "form-control");[Escaped Output] f.submit(d4x_sanitizer(t("comment")), :class => "btn btn-sm btn-d4x"); end
[Escaped Output] @mini_posts.to_a.last.created_at
[Escaped Output] hidden_field_tag(:totalpages, @mini_posts.total_pages)
[Escaped Output] hidden_field_tag(:currentpage, @mini_posts.next_page)
[Escaped Output] @mini_posts.to_a.last.created_at
[Escaped Output] @mini_posts.to_a.last.created_at
[Escaped Output] render(partial => "wall/mini_post", { :collection => (@mini_posts) })
[Escaped Output] image_tag("ajax-loader.gif", :class => "loading none", :id => "d4x-spinner")
[Escaped Output] will_paginate(@mini_posts, :style => "color:blue")
[Escaped Output] content_for(:rightside_content) do; [ignored]; end

wall/likes.["WallController#likes"]

[Escaped Output] nil
[Escaped Output] render(partial => "shared/new_post_social", {})
[Escaped Output] FormBuilder.new.hidden_field(:mini_post_id)
[Escaped Output] FormBuilder.new.text_area(:content, :class => "sharze-tarea", :multiline => false, :class => "form-control")
[Escaped Output] FormBuilder.new.submit(d4x_sanitizer(t("comment")), :class => "btn btn-sm btn-d4x")
[Escaped Output] form_for(MiniPostComment.new, :html => ({ :multipart => true })) do; [Escaped Output] FormBuilder.new.hidden_field(:mini_post_id);[Escaped Output] FormBuilder.new.text_area(:content, :class => "sharze-tarea", :multiline => false, :class => "form-control");[Escaped Output] FormBuilder.new.submit(d4x_sanitizer(t("comment")), :class => "btn btn-sm btn-d4x"); end
[Escaped Output] MiniPost.where("author_id in (?) and created_at < ?", current_user.friends.map(&:friend_id).push(current_user.id), ((Time.now + 1.second) or Time.parse(params[:last]))).page(params[:page]).limit(10).order(:created_at).reverse_order.to_a.last.created_at
[Escaped Output] hidden_field_tag(:totalpages, MiniPost.where("author_id in (?) and created_at < ?", current_user.friends.map(&:friend_id).push(current_user.id), ((Time.now + 1.second) or Time.parse(params[:last]))).page(params[:page]).limit(10).order(:created_at).reverse_order.total_pages)
[Escaped Output] hidden_field_tag(:currentpage, MiniPost.where("author_id in (?) and created_at < ?", current_user.friends.map(&:friend_id).push(current_user.id), ((Time.now + 1.second) or Time.parse(params[:last]))).page(params[:page]).limit(10).order(:created_at).reverse_order.next_page)
[Escaped Output] MiniPost.where("author_id in (?) and created_at < ?", current_user.friends.map(&:friend_id).push(current_user.id), ((Time.now + 1.second) or Time.parse(params[:last]))).page(params[:page]).limit(10).order(:created_at).reverse_order.to_a.last.created_at
[Escaped Output] MiniPost.where("author_id in (?) and created_at < ?", current_user.friends.map(&:friend_id).push(current_user.id), ((Time.now + 1.second) or Time.parse(params[:last]))).page(params[:page]).limit(10).order(:created_at).reverse_order.to_a.last.created_at
[Escaped Output] render(partial => "wall/mini_post", { :collection => MiniPost.where("author_id in (?) and created_at < ?", current_user.friends.map(&:friend_id).push(current_user.id), ((Time.now + 1.second) or Time.parse(params[:last]))).page(params[:page]).limit(10).order(:created_at).reverse_order })
[Escaped Output] image_tag("ajax-loader.gif", :class => "loading none", :id => "d4x-spinner")
[Escaped Output] will_paginate(MiniPost.where("author_id in (?) and created_at < ?", current_user.friends.map(&:friend_id).push(current_user.id), ((Time.now + 1.second) or Time.parse(params[:last]))).page(params[:page]).limit(10).order(:created_at).reverse_order, :style => "color:blue")
[Escaped Output] content_for(:rightside_content) do; [ignored]; end

widgets/_widget_check_proxy

[Escaped Output] javascript_include_tag("d4x-geoip")
[Escaped Output] content_for(:head) do; [Escaped Output] javascript_include_tag("d4x-geoip"); end
[Escaped Output] d4x_sanitizer(t("query ip"))
[Escaped Output] text_field_tag(:ipx, request.headers["CLIENT_IP"], :maxlength => 15, :size => 20, :class => "ip-input thin-control center")
[Escaped Output] submit_tag(d4x_sanitizer(t("localize")), :class => "button-d4x")

widgets/_widget_counter_regs

[Escaped Output] link_to(d4x_sanitizer(t("registrations live counter")), "/counter")
[Escaped Output] image_tag("star50.png", :class => "middle", :height => "40")
[Escaped Output] label_tag(@totregs, nil, {})
[Escaped Output] image_tag("star50.png", :class => "middle", :height => "40")

widgets/_widget_donate

[Escaped Output] content_for(:head) do; [ignored]; end
[Escaped Output] select_tag(:currency, options_for_select([["Euro", "EUR"], ["US Dollar", "USD"]]), :class => "select2 form-control input-transparent center")
[Escaped Output] select_tag(:method, options_for_select([["Credit Card", "CC"], ["Ideal", "IDEAL"], ["BitCoin", "BTC"], ["PayPalIdeal", "PP"]]), :class => "select2 form-control input-transparent center traspa")
[Escaped Output] select_tag(:ccexpmonth, options_for_select([["01", "01"], ["02", "02"], ["03", "03"], ["04", "04"], ["05", "05"], ["06", "06"], ["07", "07"], ["08", "08"], ["09", "09"], ["10", "10"], ["11", "11"], ["12", "12"]]), :class => "select2 form-control input-transparent center")
[Escaped Output] select_tag(:ccexpyear, options_for_select([["2019", "2019"], ["2019", "2019"], ["2020", "2020"], ["2021", "2021"], ["2022", "2022"], ["2023", "2023"], ["2024", "2024"], ["2025", "2025"], ["2026", "2026"], ["2027", "2027"], ["2028", "2028"], ["2029", "2029"], ["2030", "2030"]]), :class => "select2 form-control input-transparent center")
[Escaped Output] select_tag(:country, options_for_select([["Netherlands", "Netherlands"], ["United States", "United States"], ["Italy", "Italy"], ["Afghanistan", "Afghanistan"], ["Albania", "Albania"], ["Algeria", "Algeria"], ["American Samoa", "American Samoa"], ["Andorra", "Andorra"], ["Angola", "Angola"], ["Anguilla", "Anguilla"], ["Antarctica", "Antarctica"], ["Antigua and Barbuda", "Antigua and Barbuda"], ["Argentina", "Argentina"], ["Armenia", "Armenia"], ["Aruba", "Aruba"], ["Australia", "Australia"], ["Austria", "Austria"], ["Azerbaijan", "Azerbaijan"], ["Bahamas", "Bahamas"], ["Bahrain", "Bahrain"], ["Bangladesh", "Bangladesh"], ["Barbados", "Barbadados"], ["Belarus", "Belarus"], ["Belgium", "Belgium"], ["Belize", "Belize"], ["Benin", "Benin"], ["Bermuda", "Bermuda"], ["Bhutan", "Bhutan"], ["Bolivia", "Bolivia"], ["Bosnia and Heimage_tagrzegovina", "Bosnia and Herzegovina"], ["Botswana", "Botswana"], ["Bouvet Island", "Bouvet Island"], ["Brazil", "Brazil"], ["British Indian Ocean Territory", "British Indian Ocean Territory"], ["Brunei Darussalam", "Brunei Darussalam"], ["Bulgaria", "Bulgaria"], ["Burkina Faso", "Burkina Faso"], ["Burundi", "Burundi"], ["Cambodia", "Cambodia"], ["Cameroon", "Cameroon"], ["Canada", "Canada"], ["Cape Verde", "Cape Verde,"], ["Cayman Islands", "Cayman Islands"], ["Central African Republic", "Central African Republic"], ["Chad", "Chad"], ["Chile", "Chile"], ["China", "China"], ["Christmas Island", "Christmas Island"], ["Cocos (Keeling) Islands", "Cocos (Keeling) Islands"], ["Colombia", "Colombia"], ["Comoros", "Comoros"], ["Congo", "Congo"], ["Congo, The Democratic Republic of The", "Congo, The Democratic Republic of The"], ["Cook Islands", "Cook Islands"], ["Costa Rica", "Costa Rica"], ["Cote Ivoire", "Cote D Ivoire"], ["Croatia", "Croatia"], ["Cuba", "Cuba"], ["Cyprus", "Cyprus"], ["Czech Republic", "Czech Republic"], ["Denmark", "Denmark"], ["Djibouti", "Djibouti"], ["Dominica", "Dominica"], ["Dominican Republic", "Dominican Republic"], ["Ecuador", "Ecuador"], ["Egypt", "Egypt"], ["El Salvador", "El Salvador"], ["Equatorial Guinea", "Equatorial Guinea"], ["Eritrea", "Eritrea"], ["Estonia", "Estonia"], ["Ethiopia", "Ethiopia"], ["Falkland Islands (Malvinas)", "Falkland Islands (Malvinas)"], ["Faroe Islands", "Faroe Islands"], ["Fiji", "Fiji"], ["Finland", "Finland"], ["France", "France"], ["French Guiana", "French Guiana"], ["French Polynesia", "French Polynesia"], ["French Southern Territories", "French Southern Territories"], ["Gabon", "Gabon"], ["Gambia", "Gambia"], ["Georgia", "Georgia"], ["Germany", "Germany"], ["Ghana", "Ghana"], ["Gibraltar", "Gibraltar"], ["Greece", "Greece"], ["Greenland", "Greenland"], ["Grenada", "Grenada"], ["Guadeloupe", "Guadeloupe"], ["Guam", "Guam"], ["Guatemala", "Guatemala"], ["Guinea", "Guinea"], ["Guinea-bissau", "Guinea-bissau"], ["Guyana", "Guyana"], ["Haiti", "Haiti"], ["Heard Island and Mcdonald Islands", "Heard Island and Mcdonald Islands"], ["Holy See (Vatican City State)", "Holy See (Vatican City State)"], ["Honduras", "Honduras"], ["Hong Kong", "Hon g Kong"], ["Hungary", "Hungary"], ["Iceland", "Iceland"], ["India", "India"], ["Indonesia", "Indonesia"], ["Iran, Islamic Republic of", "Iran, Islamic Republic of"], ["Iraq", "Iraq"], ["Ireland", "Ireland"], ["Israel", "Israel"], ["Italy", "Italy"], ["Jamaica", "Jamaica"], ["Japan", "Japan"], ["Jordan", "Jordan"], ["Kazakhstan", "Kazakhstan"], ["Kenya", "Kenya"], ["Kiribati", "Kiribati"], ["Korea, Democratic People Republic of", "Korea, Democratic People Republic of"], ["Korea, Republic of", "Korea, Republic of"], ["Kuwait", "Kuwait"], ["Kyrgyzstan", "Kyrgyzstan"], ["Lao People Democratic Republic", "Lao People Democratic Republic"], ["Latvia", "Latvia"], ["Lebanon", "Lebanon"], ["Lesotho", "Lesotho"], ["Liberia", "Liberia"], ["Libyan Arab Jamahiriya", "Libyan Arab Jamahiriya"], ["Liechtenstein", "Liechtenstein"], ["Lithuania", "Lithuania"], ["Luxembourg", "Luxembourg"], ["Macao", "Macao"], ["Macedonia, The Former Yugoslav Republic of", "Macedonia, The Former Yugoslav Republic of"], ["Madagascar", "Madagascar"], ["Malawi", "Malawi"], ["Malaysia", "Malaysia"], ["Maldives", "Maldives"], ["Mali", "Mali"], ["Malta", "Malta"], ["Marshall Islands", "Marshall Islands"], ["Martinique", "Martinique"], ["Mauritania", "Mauritania"], ["Mauritius", "Mauritius"], ["Mayotte", "Mayotte"], ["Mexico", "Mexico"], ["Micronesia, Federated States of", "Micronesia, Federated States of"], ["Moldova, Republic of", "Moldova, Republic of"], ["Monaco", "Monaco"], ["Mongolia", "Mongolia"], ["Montserrat", "Montserrat"], ["Morocco", "Morocco"], ["Mozambique", "Mozambique"], ["Myanmar", "Myanmar"], ["Namibia", "Namibia"], ["Nauru", "Nauru"], ["Nepal", "Nepal"], ["Netherlands", "Netherlands"], ["Netherlands Antilles", "Netherlands Antilles"], ["New Caledonia", "New Caledonia"], ["New Zealand", "New Zealand"], ["Nicaragua", "Nicaragua"], ["Niger", "Niger"], ["Nigeria", "Nigeria"], ["Niue", "Niue"], ["Norfolk Island", "Norfolk Island"], ["Northern Mariana Islands", "Northern Mariana Islands"], ["Norway", "Norway"], ["Oman", "Oman"], ["Pakistan", "Pakistan"], ["Palau", "Palau"], ["Palestinian Territory, Occupied", "Palestinian Territory, Occupied"], ["Panama", "Panama"], ["Papua New Guinea", "Papua New Guinea"], ["Paraguay", "Paraguay"], ["Peru", "Peru"], ["Philippines", "Philippines"], ["Pitcairn", "Pitcairn"], ["Poland", "Poland"], ["Portugal", "Portugal"], ["Puerto Rico", "Puerto Rico"], ["Qatar", "Qatar"], ["Reunion", "Reunion"], ["Romania", "Romania"], ["Russian Federation", "Russian Federation"], ["Rwanda", "Rwanda"], ["Saint Helena", "Saint Helena"], ["Saint Kitts and Nevis", "Saint Kitts and Nevis"], ["Saint Lucia", "Saint Lucia"], ["Saint Pierre and Miquelon", "Saint Pierre and Miquelon"], ["Saint Vincent and The Grenadines", "Saint Vincent and The Grenadines"], ["Samoa", "Samoa"], ["San Marino", "San Marino"], ["Sao Tome and Principe", "Sao Tome and Principe"], ["Saudi Arabia", "Saudi Arabia"], ["Senegal", "Senegal"], ["Serbia and Montenegro", "Serbia and Montenegro"], ["Seychelles", "Seychelles"], ["Sierra Leone", "Sierra Leone"], ["Singapore", "Singapore"], ["Slovakia", "Slovakia"], ["Slovenia", "Slovenia"], ["Solomon Islands", "Solomon Islands"], ["Somalia", "Somalia"], ["South Africa", "South Africa"], ["South Georgia and The South Sandwich Islands", "South Georgia and The South Sandwich Islands"], ["Spain", "Spain"], ["Sri Lanka", "Sri Lanka"], ["Sudan", "Sudan"], ["Suriname", "Suriname"], ["Svalbard and Jan Mayen", "Svalbard and Jan Mayen"], ["Swaziland", "Swaziland"], ["Sweden", "Sweden"], ["Switzerland", "Switzerland"], ["Syrian Arab Republic", "Syrian Arab Republic"], ["Taiwan, Province of China", "Taiwan, Province of China"], ["Tajikistan", "Tajikistan"], ["Tanzania, United Republic of", "Tanzania, United Republic of"], ["Thailand", "Thailand"], ["Timor-leste", "Timor-leste"], ["Togo", "Togo"], ["Tokelau", "Tokelau"], ["Tonga", "Tonga"], ["Trinidad and Tobago", "Trinidad and Tobago"], ["Tunisia", "Tunisia"], ["Turkey", "Turkey"], ["Turkmenistan", "Turkmenistan"], ["Turks and Caicos Islands", "Turks and Caicos Islands"], ["Tuvalu", "Tuvalu"], ["Uganda", "Uganda"], ["Ukraine", "Ukraine"], ["United Arab Emirates", "United Arab Emirates"], ["United Kingdom", "United Kingdom"], ["United States", "United States"], ["United States Minor Outlying Islands", "US Minor Islands"], ["Uruguay", "Uruguay"], ["Uzbekistan", "Uzbekistan"], ["Vanuatu", "Vanuatu"], ["Venezuela", "Venezuela"], ["Viet Nam", "Viet Nam"], ["Virgin Islands, British", "Virgin Islands, British"], ["Virgin Islands, U.S.", "Virgin Islands, U.S."], ["Wallis and Futuna", "Wallis and Futuna"], ["Western Sahara", "Western Sahara"], ["Yemen", "Yemen"], ["Zambia", "Zambia"], ["Zimbabwe", "Zimbabwe"]]), :class => "select2 form-control input-transparent center")

widgets/_widget_donate.["Template:layouts/messages"]

[Escaped Output] content_for(:head) do; [ignored]; end
[Escaped Output] select_tag(:currency, options_for_select([["Euro", "EUR"], ["US Dollar", "USD"]]), :class => "select2 form-control input-transparent center")
[Escaped Output] select_tag(:method, options_for_select([["Credit Card", "CC"], ["Ideal", "IDEAL"], ["BitCoin", "BTC"], ["PayPalIdeal", "PP"]]), :class => "select2 form-control input-transparent center traspa")
[Escaped Output] select_tag(:ccexpmonth, options_for_select([["01", "01"], ["02", "02"], ["03", "03"], ["04", "04"], ["05", "05"], ["06", "06"], ["07", "07"], ["08", "08"], ["09", "09"], ["10", "10"], ["11", "11"], ["12", "12"]]), :class => "select2 form-control input-transparent center")
[Escaped Output] select_tag(:ccexpyear, options_for_select([["2019", "2019"], ["2019", "2019"], ["2020", "2020"], ["2021", "2021"], ["2022", "2022"], ["2023", "2023"], ["2024", "2024"], ["2025", "2025"], ["2026", "2026"], ["2027", "2027"], ["2028", "2028"], ["2029", "2029"], ["2030", "2030"]]), :class => "select2 form-control input-transparent center")
[Escaped Output] select_tag(:country, options_for_select([["Netherlands", "Netherlands"], ["United States", "United States"], ["Italy", "Italy"], ["Afghanistan", "Afghanistan"], ["Albania", "Albania"], ["Algeria", "Algeria"], ["American Samoa", "American Samoa"], ["Andorra", "Andorra"], ["Angola", "Angola"], ["Anguilla", "Anguilla"], ["Antarctica", "Antarctica"], ["Antigua and Barbuda", "Antigua and Barbuda"], ["Argentina", "Argentina"], ["Armenia", "Armenia"], ["Aruba", "Aruba"], ["Australia", "Australia"], ["Austria", "Austria"], ["Azerbaijan", "Azerbaijan"], ["Bahamas", "Bahamas"], ["Bahrain", "Bahrain"], ["Bangladesh", "Bangladesh"], ["Barbados", "Barbadados"], ["Belarus", "Belarus"], ["Belgium", "Belgium"], ["Belize", "Belize"], ["Benin", "Benin"], ["Bermuda", "Bermuda"], ["Bhutan", "Bhutan"], ["Bolivia", "Bolivia"], ["Bosnia and Heimage_tagrzegovina", "Bosnia and Herzegovina"], ["Botswana", "Botswana"], ["Bouvet Island", "Bouvet Island"], ["Brazil", "Brazil"], ["British Indian Ocean Territory", "British Indian Ocean Territory"], ["Brunei Darussalam", "Brunei Darussalam"], ["Bulgaria", "Bulgaria"], ["Burkina Faso", "Burkina Faso"], ["Burundi", "Burundi"], ["Cambodia", "Cambodia"], ["Cameroon", "Cameroon"], ["Canada", "Canada"], ["Cape Verde", "Cape Verde,"], ["Cayman Islands", "Cayman Islands"], ["Central African Republic", "Central African Republic"], ["Chad", "Chad"], ["Chile", "Chile"], ["China", "China"], ["Christmas Island", "Christmas Island"], ["Cocos (Keeling) Islands", "Cocos (Keeling) Islands"], ["Colombia", "Colombia"], ["Comoros", "Comoros"], ["Congo", "Congo"], ["Congo, The Democratic Republic of The", "Congo, The Democratic Republic of The"], ["Cook Islands", "Cook Islands"], ["Costa Rica", "Costa Rica"], ["Cote Ivoire", "Cote D Ivoire"], ["Croatia", "Croatia"], ["Cuba", "Cuba"], ["Cyprus", "Cyprus"], ["Czech Republic", "Czech Republic"], ["Denmark", "Denmark"], ["Djibouti", "Djibouti"], ["Dominica", "Dominica"], ["Dominican Republic", "Dominican Republic"], ["Ecuador", "Ecuador"], ["Egypt", "Egypt"], ["El Salvador", "El Salvador"], ["Equatorial Guinea", "Equatorial Guinea"], ["Eritrea", "Eritrea"], ["Estonia", "Estonia"], ["Ethiopia", "Ethiopia"], ["Falkland Islands (Malvinas)", "Falkland Islands (Malvinas)"], ["Faroe Islands", "Faroe Islands"], ["Fiji", "Fiji"], ["Finland", "Finland"], ["France", "France"], ["French Guiana", "French Guiana"], ["French Polynesia", "French Polynesia"], ["French Southern Territories", "French Southern Territories"], ["Gabon", "Gabon"], ["Gambia", "Gambia"], ["Georgia", "Georgia"], ["Germany", "Germany"], ["Ghana", "Ghana"], ["Gibraltar", "Gibraltar"], ["Greece", "Greece"], ["Greenland", "Greenland"], ["Grenada", "Grenada"], ["Guadeloupe", "Guadeloupe"], ["Guam", "Guam"], ["Guatemala", "Guatemala"], ["Guinea", "Guinea"], ["Guinea-bissau", "Guinea-bissau"], ["Guyana", "Guyana"], ["Haiti", "Haiti"], ["Heard Island and Mcdonald Islands", "Heard Island and Mcdonald Islands"], ["Holy See (Vatican City State)", "Holy See (Vatican City State)"], ["Honduras", "Honduras"], ["Hong Kong", "Hon g Kong"], ["Hungary", "Hungary"], ["Iceland", "Iceland"], ["India", "India"], ["Indonesia", "Indonesia"], ["Iran, Islamic Republic of", "Iran, Islamic Republic of"], ["Iraq", "Iraq"], ["Ireland", "Ireland"], ["Israel", "Israel"], ["Italy", "Italy"], ["Jamaica", "Jamaica"], ["Japan", "Japan"], ["Jordan", "Jordan"], ["Kazakhstan", "Kazakhstan"], ["Kenya", "Kenya"], ["Kiribati", "Kiribati"], ["Korea, Democratic People Republic of", "Korea, Democratic People Republic of"], ["Korea, Republic of", "Korea, Republic of"], ["Kuwait", "Kuwait"], ["Kyrgyzstan", "Kyrgyzstan"], ["Lao People Democratic Republic", "Lao People Democratic Republic"], ["Latvia", "Latvia"], ["Lebanon", "Lebanon"], ["Lesotho", "Lesotho"], ["Liberia", "Liberia"], ["Libyan Arab Jamahiriya", "Libyan Arab Jamahiriya"], ["Liechtenstein", "Liechtenstein"], ["Lithuania", "Lithuania"], ["Luxembourg", "Luxembourg"], ["Macao", "Macao"], ["Macedonia, The Former Yugoslav Republic of", "Macedonia, The Former Yugoslav Republic of"], ["Madagascar", "Madagascar"], ["Malawi", "Malawi"], ["Malaysia", "Malaysia"], ["Maldives", "Maldives"], ["Mali", "Mali"], ["Malta", "Malta"], ["Marshall Islands", "Marshall Islands"], ["Martinique", "Martinique"], ["Mauritania", "Mauritania"], ["Mauritius", "Mauritius"], ["Mayotte", "Mayotte"], ["Mexico", "Mexico"], ["Micronesia, Federated States of", "Micronesia, Federated States of"], ["Moldova, Republic of", "Moldova, Republic of"], ["Monaco", "Monaco"], ["Mongolia", "Mongolia"], ["Montserrat", "Montserrat"], ["Morocco", "Morocco"], ["Mozambique", "Mozambique"], ["Myanmar", "Myanmar"], ["Namibia", "Namibia"], ["Nauru", "Nauru"], ["Nepal", "Nepal"], ["Netherlands", "Netherlands"], ["Netherlands Antilles", "Netherlands Antilles"], ["New Caledonia", "New Caledonia"], ["New Zealand", "New Zealand"], ["Nicaragua", "Nicaragua"], ["Niger", "Niger"], ["Nigeria", "Nigeria"], ["Niue", "Niue"], ["Norfolk Island", "Norfolk Island"], ["Northern Mariana Islands", "Northern Mariana Islands"], ["Norway", "Norway"], ["Oman", "Oman"], ["Pakistan", "Pakistan"], ["Palau", "Palau"], ["Palestinian Territory, Occupied", "Palestinian Territory, Occupied"], ["Panama", "Panama"], ["Papua New Guinea", "Papua New Guinea"], ["Paraguay", "Paraguay"], ["Peru", "Peru"], ["Philippines", "Philippines"], ["Pitcairn", "Pitcairn"], ["Poland", "Poland"], ["Portugal", "Portugal"], ["Puerto Rico", "Puerto Rico"], ["Qatar", "Qatar"], ["Reunion", "Reunion"], ["Romania", "Romania"], ["Russian Federation", "Russian Federation"], ["Rwanda", "Rwanda"], ["Saint Helena", "Saint Helena"], ["Saint Kitts and Nevis", "Saint Kitts and Nevis"], ["Saint Lucia", "Saint Lucia"], ["Saint Pierre and Miquelon", "Saint Pierre and Miquelon"], ["Saint Vincent and The Grenadines", "Saint Vincent and The Grenadines"], ["Samoa", "Samoa"], ["San Marino", "San Marino"], ["Sao Tome and Principe", "Sao Tome and Principe"], ["Saudi Arabia", "Saudi Arabia"], ["Senegal", "Senegal"], ["Serbia and Montenegro", "Serbia and Montenegro"], ["Seychelles", "Seychelles"], ["Sierra Leone", "Sierra Leone"], ["Singapore", "Singapore"], ["Slovakia", "Slovakia"], ["Slovenia", "Slovenia"], ["Solomon Islands", "Solomon Islands"], ["Somalia", "Somalia"], ["South Africa", "South Africa"], ["South Georgia and The South Sandwich Islands", "South Georgia and The South Sandwich Islands"], ["Spain", "Spain"], ["Sri Lanka", "Sri Lanka"], ["Sudan", "Sudan"], ["Suriname", "Suriname"], ["Svalbard and Jan Mayen", "Svalbard and Jan Mayen"], ["Swaziland", "Swaziland"], ["Sweden", "Sweden"], ["Switzerland", "Switzerland"], ["Syrian Arab Republic", "Syrian Arab Republic"], ["Taiwan, Province of China", "Taiwan, Province of China"], ["Tajikistan", "Tajikistan"], ["Tanzania, United Republic of", "Tanzania, United Republic of"], ["Thailand", "Thailand"], ["Timor-leste", "Timor-leste"], ["Togo", "Togo"], ["Tokelau", "Tokelau"], ["Tonga", "Tonga"], ["Trinidad and Tobago", "Trinidad and Tobago"], ["Tunisia", "Tunisia"], ["Turkey", "Turkey"], ["Turkmenistan", "Turkmenistan"], ["Turks and Caicos Islands", "Turks and Caicos Islands"], ["Tuvalu", "Tuvalu"], ["Uganda", "Uganda"], ["Ukraine", "Ukraine"], ["United Arab Emirates", "United Arab Emirates"], ["United Kingdom", "United Kingdom"], ["United States", "United States"], ["United States Minor Outlying Islands", "US Minor Islands"], ["Uruguay", "Uruguay"], ["Uzbekistan", "Uzbekistan"], ["Vanuatu", "Vanuatu"], ["Venezuela", "Venezuela"], ["Viet Nam", "Viet Nam"], ["Virgin Islands, British", "Virgin Islands, British"], ["Virgin Islands, U.S.", "Virgin Islands, U.S."], ["Wallis and Futuna", "Wallis and Futuna"], ["Western Sahara", "Western Sahara"], ["Yemen", "Yemen"], ["Zambia", "Zambia"], ["Zimbabwe", "Zimbabwe"]]), :class => "select2 form-control input-transparent center")

widgets/_widget_friends

[Escaped Output] link_to(d4x_sanitizer(t("some people in your network")), "/friends")
[Escaped Output] link_to(image_tag(user.avatar.url, :size => "48x48", :class => "offline", :title => user.nickname), ("/profiles/" + user.id.to_s))
[Escaped Output] link_to(image_tag("missing_avatar.png", :size => "48x48", :class => "offline", :title => user.nickname), ("/profiles/" + user.id.to_s))
[Escaped Output] link_to(image_tag(user.avatar.url, :size => "48x48", :class => "online", :title => user.nickname), ("/profiles/" + user.id.to_s))
[Escaped Output] link_to(image_tag("missing_avatar.png", :size => "48x48", :class => "online", :title => user.nickname), ("/profiles/" + user.id.to_s))

widgets/_widget_geoip

[Escaped Output] javascript_include_tag("d4x-geoip")
[Escaped Output] content_for(:head) do; [Escaped Output] javascript_include_tag("d4x-geoip"); end
[Escaped Output] t("Query IP")
[Escaped Output] text_field_tag(:ipx, request.headers["CLIENT_IP"], :maxlength => 15, :size => 20, :class => "ip-input thin-control center")
[Escaped Output] submit_tag("localize", :class => "button-grey-d4x")

widgets/_widget_group_member

[Escaped Output] link_to(image_tag(user.avatar.url, :size => "48x48", :class => "offline", :title => user.nickname), ("/profiles/" + user.id.to_s))
[Escaped Output] link_to(image_tag("missing_avatar.png", :size => "48x48", :class => "offline", :title => user.nickname), ("/profiles/" + user.id.to_s))
[Escaped Output] link_to(image_tag(user.avatar.url, :size => "48x48", :class => "online", :title => user.nickname), ("/profiles/" + user.id.to_s))
[Escaped Output] link_to(image_tag("missing_avatar.png", :size => "48x48", :class => "online", :title => user.nickname), ("/profiles/" + user.id.to_s))

widgets/_widget_invite

[Escaped Output] content_for(:head) do; [ignored]; end
[Escaped Output] link_to(d4x_sanitizer(t("Invite a friend!")), "/invitations")
[Escaped Output] f.label(d4x_sanitizer(t("invite_from")), nil, :class => "lcd")
[Escaped Output] select_tag(:type, options_for_select([[current_user.nickname, current_user.email], ["anonymous", "anonymous"]]), :id => "invite-sender", :width => "1x10")
[Escaped Output] f.label(d4x_sanitizer(t("fullname")), nil, :class => "lcd")
[Escaped Output] f.text_field(:subject, :size => 26, :class => "def-input")
[Escaped Output] f.label(d4x_sanitizer(t("target_address")), nil, :class => "lcd", :width => 10)
[Escaped Output] f.email_field(:recipient_email, :size => 26)
[Escaped Output] f.submit(d4x_sanitizer(t("send")), :class => "button-grey-d4x")
[Escaped Output] form_for(Invitation.new) do; [Escaped Output] f.label(d4x_sanitizer(t("invite_from")), nil, :class => "lcd");[Escaped Output] select_tag(:type, options_for_select([[current_user.nickname, current_user.email], ["anonymous", "anonymous"]]), :id => "invite-sender", :width => "1x10");[Escaped Output] f.label(d4x_sanitizer(t("fullname")), nil, :class => "lcd");[Escaped Output] f.text_field(:subject, :size => 26, :class => "def-input");[Escaped Output] f.label(d4x_sanitizer(t("target_address")), nil, :class => "lcd", :width => 10);[Escaped Output] f.email_field(:recipient_email, :size => 26);[Escaped Output] f.submit(d4x_sanitizer(t("send")), :class => "button-grey-d4x"); end

widgets/_widget_ipcountry_blocks

[Escaped Output] javascript_include_tag("d4x-geoip")
[Escaped Output] content_for(:head) do; [Escaped Output] javascript_include_tag("d4x-geoip"); end
[Escaped Output] d4x_sanitizer(t("Query IP"))
[Escaped Output] text_field_tag(:ipx, request.headers["CLIENT_IP"], :maxlength => 15, :size => 20, :class => "ip-input thin-control center")
[Escaped Output] submit_tag("localize", :class => "button-grey-d4x")

widgets/_widget_qotd

[Escaped Output] @quote.qtext
[Escaped Output] @quote.author.fullname
[Escaped Output] @quote.author.headline
[Escaped Output] @quote.author.dates

widgets/_widget_scan_file

[Escaped Output] javascript_include_tag("d4x-geoip")
[Escaped Output] content_for(:head) do; [Escaped Output] javascript_include_tag("d4x-geoip"); end
[Escaped Output] d4x_sanitizer(t("Query IP"))
[Escaped Output] text_field_tag(:ipx, request.headers["CLIENT_IP"], :maxlength => 15, :size => 20, :class => "ip-input thin-control center")
[Escaped Output] submit_tag("localize", :class => "button-grey-d4x")

widgets/_widget_scan_url

[Escaped Output] javascript_include_tag("d4x-geoip")
[Escaped Output] content_for(:head) do; [Escaped Output] javascript_include_tag("d4x-geoip"); end
[Escaped Output] t("Query IP")
[Escaped Output] text_field_tag(:ipx, request.headers["CLIENT_IP"], :maxlength => 15, :size => 20, :class => "ip-input thin-control center")
[Escaped Output] submit_tag("localize", :class => "button-grey-d4x")

widgets/_widget_shopping_cart

[Escaped Output] javascript_include_tag("d4x-store")
[Escaped Output] content_for(:head) do; [Escaped Output] javascript_include_tag("d4x-store"); end
[Escaped Output] link_to((((t("Your Shopping Cart") + " (AGA") + @cart.id.to_s) + ")"), ("/carts/" + @cart.id.to_s))
[Escaped Output] label_tag(d4x_sanitizer(t("products")), nil, :class => "")
[Escaped Output] label_tag(d4x_sanitizer(t("quantity")), nil, :class => "")
[Escaped Output] label_tag(d4x_sanitizer(t("Total")), nil, :class => "")
[Escaped Output] link_to(image_tag("express-checkout-hero.png", :width => 130, :alt => "Checkout", :class => "center", :title => "checkout"), ("/orders/new/?cart=" + @cart.id.to_s))
[Escaped Output] label_tag(@cart.cart_products.count.to_s, nil, :class => "")
[Escaped Output] label_tag(@cart.cart_products.count.to_s, nil, :class => "")
[Escaped Output] label_tag(number_to_currency(@cart.total_price, :unit => "\u{20ac}"), nil, :class => "")
[Escaped Output] link_to(image_tag("basket222.png", :size => "60x60", :class => "round-corners10"), ("/carts/" + @cart.id.to_s))
[Escaped Output] button_to(d4x_sanitizer(t("empty")), @cart, :confirm => "are you sure?", :method => :delete, :name => "destroy", :class => "button-search none")

widgets/_widget_ssms

[Escaped Output] javascript_include_tag("d4x-ssms")
[Escaped Output] content_for(:head) do; [Escaped Output] javascript_include_tag("d4x-ssms"); end
[Escaped Output] link_to_function(image_tag("bullet_toggle_plus.png", :class => "bullet"), "$('#sms-stuff').toggle()")
[Escaped Output] d4x_sanitizer(t("SMS Blast!"))
[Escaped Output] label_tag("Sender", nil, :class => "lcd")
[Escaped Output] text_field_tag(:sender, current_user.nickname, :maxlength => 15, :name => "M", :size => 26, :class => "center", :class => "def-input")
[Escaped Output] label_tag("International Prefix", nil, :class => "lcd")
[Escaped Output] select_tag(:dest_int_prefix, options_for_select([["ITALY +39", "39"], ["AFGHANISTAN +93", "93"], ["ALBANIA +355", "355"], ["ALGERIA +213", "213"], ["AMER. SAMOA +684", "684"], ["ANDORRA +376", "376"], ["ANGOLA +244 ", "244"], ["ANTIG.&BARBUDA +1", "1 "], ["ARGENTINA +54", "54"], ["ARMENIA +374", "374"], ["ARUBA +297", "297"], ["ASCENSION +247", "247"], ["AUSTRALIA +61", "61"], ["AUSTRIA +43 ", "43"], ["AZERBAIJAN +994 ", "994"], ["BAHRAIN +973", "973"], ["BANGLADESH +880 ", "880"], ["BARBADOS +1 ", "1 "], ["BELARUS +375", "375"], ["BELGIUM +32 ", "32"], ["BELIZE +501 ", "501"], ["BENIN +229", "229"], ["BERMUDA +1", "1 "], ["BHUTAN +975 ", "975"], ["BOLIVIA +591", "591"], ["BOSNIA +387 ", "387"], ["BOTSWANA +267", "267"], ["BRAZIL +55", "55"], ["BR.VIRGIN ISL. +11", "11"], ["BRUNEI +673 ", "673"], ["BULGARIA +359", "359"], ["BURKINA FASO +226", "226"], ["BURUNDI +257", "257"], ["CAMBODIA +855", "855"], ["CAMEROON +237", "237"], ["CANADA +1", "1 "], ["CAPE VERDE +238 ", "238"], ["CAYMAN ISLANDS +1", "1 "], ["C.AFRICAN REP +23", "236 6"], ["CHAD +235", "235"], ["CHILE +56", "56"], ["CHINA +86", "86"], ["COLOMBIA +57", "57"], ["COMOROS +269", "269"], ["CONGO +242", "242"], ["CONGO REP.OF +243", "243"], ["COOK ISLANDS +682", "682"], ["COSTA RICA +506 ", "506"], ["CROATIA +385", "385"], ["CUBA +53 ", "53"], ["CYPRUS +357 ", "357"], ["CZECH REPUB. +420", "420"], ["DENMARK +45 ", "45"], ["DIEGO GARCIA +246", "246"], ["DJIBOUTI +253", "253"], ["DOMINICA +1 ", "1 "], ["DOMINICAN REP. +1", "1 "], ["ECUADOR +593", "593"], ["EGYPT +20", "20"], ["EL SALVADOR +503", "503"], ["EQUAT. GUINEA +240", "240"], ["ERITREA +291", "291"], ["ESTONIA +372", "372"], ["ETHIOPIA +251", "251"], ["FALKLAND ISL.+500", "500"], ["FAROE ISLANDS+298", "298"], ["FIJI +679", "679"], ["FINLAND +358", "358"], ["FRANCE +33", "33"], ["FR.GUIANA +594 ", "594"], ["FR POLYNESIA +689 ", "689"], ["FR. W.INDIES +590", "590"], ["GABON +241", "241"], ["GAMBIA +220 ", "220"], ["GEORGIA +995", "995"], ["GERMANY +49 ", "49"], ["GHANA +233", "233"], ["GIBRALTAR +350", "350"], ["GREECE +30", "30"], ["GREENLAND +299", "299"], ["GRENADA +1", "1 "], ["GUAM +1", "1 "], ["GUATEMALA +502", "502"], ["GUINEA +224 ", "224"], ["GUIN.BISSAU +245", "245"], ["GUYANA (BR) +592", "592"], ["HAITI +509", "509"], ["HONDURAS +504", "504"], ["HONG KONG +852", "852"], ["HUNGARY +36 ", "36"], ["ICELAND +354", "354"], ["INDIA +91", "91"], ["INDONESIA +62", "62"], ["IRAN +98 ", "98"], ["IRAQ +964", "964"], ["IRELAND +353", "353"], ["ISRAEL +972 ", "972"], ["IVORY COAST +225", "225"], ["JAMAICA +1", "1 "], ["JAPAN +81", "81"], ["JORDAN +962 ", "962"], ["KAZAKHSTAN +7", "7 "], ["KENYA +254", "254"], ["KIRIBATI +686", "686"], ["KOREA +850", "850"], ["KOSOVO +377 ", "377"], ["KUWAIT +965 ", "965"], ["KYRGYZSTAN +996 ", "996"], ["LAO P.D.R. +856 ", "856"], ["LATVIA +371 ", "371"], ["LEBANON +961", "961"], ["LESOTHO +266", "266"], ["LIBERIA +231", "231"], ["LIBYA +218", "218"], ["LIECHTENSTEIN +423 ", "423"], ["LITHUANIA +370", "370"], ["LUXEMBOURG +352 ", "352"], ["MACAO +853", "853"], ["MACEDONIA +389", "389"], ["MADAGASCAR +261 ", "261"], ["MALAWI +265 ", "265"], ["MALAYSIA +60", "60"], ["MALDIVES +960", "960"], ["MALI +223", "223"], ["MALTA +356", "356"], ["MARSHALL ISL. +692 ", "692"], ["MARTINIQUE +596 ", "596"], ["MAURITANIA +222 ", "222"], ["MAURITIUS +230", "230"], ["MEXICO +52", "52"], ["MICRONESIA +691 ", "691"], ["MOLDOVA +373", "373"], ["MONACO +377 ", "377"], ["MONGOLIA +976", "976"], ["MONTENEGRO +382 ", "382"], ["MOROCCO +212", "212"], ["MOZAMBIQUE +258 ", "258"], ["MYANMAR +95 ", "95"], ["NAMIBIA +264", "264"], ["NAURU +674", "674"], ["NEPAL +977", "977"], ["NETHERLANDS +31", "31"], ["NETH.ANTILLES +59", "59"], ["NEW CALEDON.+687", "687"], ["NEW ZEALAND +64 ", "64"], ["NICARAGUA +505", "505"], ["NIGER +227", "227"], ["NIGERIA +234", "234"], ["NIUE +683", "683"], ["MARIANA ISLANDS ", "1 "], ["NORWAY +47", "47"], ["OMAN +968", "968"], ["PAKISTAN +92", "92"], ["PALAU +680", "680"], ["PALESTINE +970", "970"], ["PALESTINE +972", "972"], ["PANAMA +507 ", "507"], ["PAPUA N.GUIN.+675", "675"], ["PARAGUAY +595", "595"], ["PERU +51 ", "51"], ["PHILIPPINES +63 ", "63"], ["POLAND +48", "48"], ["PORTUGAL +351", "351"], ["PUERTO RICO +1", "1 "], ["QATAR +974", "974"], ["REUNION +262", "262"], ["ROMANIA +40 ", "40"], ["RUSSIA +7", "7 "], ["RWANDA +250 ", "250"], ["SAMOA +685", "685"], ["SAN MARINO +378 ", "378"], ["SAO TOME +239 ", "239"], ["SATELLITE +870", "870"], ["SATELLITE +881", "881"], ["SATELLITE +882", "882"], ["SAUDI ARABIA +966", "966"], ["SENEGAL +221", "221"], ["SERBIA +381 ", "381"], ["SEYCHELLES +248 ", "248"], ["SIERRA LEONE +232", "232"], ["SINGAPORE +65", "65"], ["SLOVAKIA +421", "421"], ["SLOVENIA +386", "386"], ["SOLOMON ISL. +677", "677"], ["SOMALIA +252", "252"], ["SOUTH AFRICA +27", "27"], ["SOUTH KOREA +82 ", "82"], ["SOUTH SUDAN +211", "211"], ["SPAIN +34", "34"], ["SRI LANKA +94", "94"], ["ST.ELENA +290", "290"], ["ST.KITTS & NEVIS +1", "1 "], ["1ST.LUCIA +1", "1 "], ["ST.PIERRE +50 ", "50"], ["ST.VINCENT", "1 "], ["SUDAN +211", "211"], ["SUDAN +249", "249"], ["SURINAME +597", "597"], ["SWAZILAND +268", "268"], ["SWEDEN +46", "46"], ["SWITZERLAND +41 ", "41"], ["SYRIA +963", "963"], ["TAIWAN +886 ", "886"], ["TAJIKISTAN +992 ", "992"], ["TANZANIA +255", "255"], ["THAILAND +66", "66"], ["TIMOR LESTE +670", "670"], ["TOGO +228", "228"], ["TOKELAU +690", "690"], ["TONGA +676", "676"], ["TRIN.&TOBAGO +1", "1 "], ["TUNISIA +216", "216"], ["TURKEY +90", "90"], ["TURKMENISTAN +993", "993"], ["TURKS & CAICOS +1", "1 "], ["TUVALU +688 ", "688"], ["UGANDA +256 ", "256"], ["UK +44", "4 "], ["UKRAINE +380", "380"], ["ARAB EMIRATES +97 ", "97"], ["URUGUAY +598", "598"], ["USA +1", "1 "], ["UZBEKISTAN +998 ", "998"], ["VANUATU +678", "678"], ["VENEZUELA +58", "58"], ["VIETNAM +84 ", "84"], ["WALL.&FUTUNA +681", "681"], ["YEMEN +967", "967"], ["ZAMBIA +260\t", "260"], ["ZIMBABWE +263", "263"]], 0))
[Escaped Output] label_tag("mobile")
[Escaped Output] text_field_tag(:dest_loc_prefix, nil, :name => "Prefisso", :maxlength => 3, :size => 26, :class => "center def-input", :id => "dest_local_prefix2")
[Escaped Output] label_tag("mobile")
[Escaped Output] select_tag(:dest_loc_prefix, options_for_select([["310 \tELSACOM", "310"], ["311 \tFASTWEB", "311"], ["319 \tINTERMATICA", "319"], ["350 \tNOVERCA", "350"], ["371 \tPOSTE MOBILE", "371"], ["313 \tRFI", "313"], ["311 \tTELESPAZIO", "311"], ["330 \tTIM", "330"], ["331 \tTIM", "331"], ["333 \tTIM", "333"], ["334 \tTIM", "334"], ["335 \tTIM", "335"], ["336 \tTIM", "336"], ["337 \tTIM", "337"], ["338 \tTIM", "338"], ["339 \tTIM", "339"], ["360 \tTIM", "360"], ["363 \tTIM", "363"], ["366 \tTIM", "366"], ["368 \tTIM", "368"], ["370 \tTIM", "370"], ["373 \tTRE (H3G)", "373"], ["390 \tTRE (H3G)", "390"], ["391 \tTRE (H3G)", "391"], ["392 \tTRE (H3G)", "392"], ["393 \tTRE (H3G)", "393"], ["397 \tTRE (H3G)", "397"], ["340 \tVODAFONE ", "340"], ["342 \tVODAFONE", "342"], ["343 \tVODAFONE", "343"], ["345 \tVODAFONE", "345"], ["346 \tVODAFONE", "346"], ["347 \tVODAFONE", "347"], ["348 \tVODAFONE", "348"], ["349 \tVODAFONE", "349"], ["377 \tVODAFONE", "377"], ["320 \tWIND", "320"], ["323 \tWIND", "323"], ["327 \tWIND", "327"], ["328 \tWIND", "328"], ["329 \tWIND", "329"], ["380 \tWIND", "380"], ["383 \tWIND", "383"], ["388 \tWIND", "388"], ["389 \tWIND", "389"]], 0), :id => "dest_loc_prefix")
[Escaped Output] label_tag("Number", nil, :class => "lcd")
[Escaped Output] text_field_tag(:dest_number, nil, :name => "Numero", :size => 26, :maxlength => 20, :class => "center def-input")
[Escaped Output] label_tag("complete Number", nil, :class => "lcd")
[Escaped Output] text_field_tag(:full_number, "+39 310", :name => "N", :size => 26, :readonly => true, :class => "center def-input")
[Escaped Output] label_tag("Message", nil, :class => "lcd")
[Escaped Output] text_area_tag("Message", nil, :cols => 24, :rows => 4, :id => "message")
[Escaped Output] text_field_tag(:remaininchars, 150, :id => "remainingchars", :size => 2, :readonly => true, :class => "center def-input")
[Escaped Output] submit_tag("send", :class => "button-grey-d4x")

widgets/_widget_store

[Escaped Output] javascript_include_tag("d4x-store")
[Escaped Output] content_for(:head) do; [Escaped Output] javascript_include_tag("d4x-store"); end
[Escaped Output] link_to(d4x_sanitizer(t("store")), "/store")
[Escaped Output] hidden_field_tag(:prod_id, product.id)
[Escaped Output] image_tag(product.photo.url, :width => 130)
[Escaped Output] product.name
[Escaped Output] product.final_price
[Escaped Output] product.currency
[Escaped Output] product.description
[Escaped Output] submit_tag(d4x_sanitizer(t("add to cart")), :class => "btn btn-xs btn-info")
[Escaped Output] form_for(@cart_product) do; [Escaped Output] hidden_field_tag(:prod_id, product.id);[Escaped Output] image_tag(product.photo.url, :width => 130);[Escaped Output] product.name;[Escaped Output] product.final_price;[Escaped Output] product.currency;[Escaped Output] product.description;[Escaped Output] submit_tag(d4x_sanitizer(t("add to cart")), :class => "btn btn-xs btn-info"); end

widgets/_widget_whatismyip

[Escaped Output] content_for(:head) do; [ignored]; end
[Escaped Output] t("my tracks")
[Escaped Output] label_tag("agent")
[Escaped Output] request.env["HTTP_USER_AGENT"]
[Escaped Output] label_tag("ip address")
[Escaped Output] @ip_addr
[Escaped Output] label_tag("country")
[Escaped Output] @platform

No warnings found

